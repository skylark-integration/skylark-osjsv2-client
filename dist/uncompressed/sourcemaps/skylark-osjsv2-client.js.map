{"version":3,"sources":["skylark-osjsv2-client.js"],"names":[],"mappingsfile":"../skylark-osjsv2-client.js","sourcesContent":["define('skylark-osjsv2-client/utils/misc',[],function () {\n    'use strict';\n    function format(format) {\n        const args = Array.prototype.slice.call(arguments, 1);\n        const sprintfRegex = /\\{(\\d+)\\}/g;\n        function sprintf(match, number) {\n            return number in args ? args[number] : match;\n        }\n        return format.replace(sprintfRegex, sprintf);\n    }\n    function parseurl(url, modify) {\n        modify = modify || {};\n        if (!url.match(/^(\\w+\\:)\\/\\//)) {\n            url = '//' + url;\n        }\n        const protocol = url.split(/^(\\w+\\:)?\\/\\//);\n        const splitted = (() => {\n            const tmp = protocol[2].replace(/^\\/\\//, '').split('/');\n            return {\n                proto: (modify.protocol || protocol[1] || window.location.protocol || '').replace(/\\:$/, ''),\n                host: modify.host || tmp.shift(),\n                path: modify.path || '/' + tmp.join('/')\n            };\n        })();\n        function _parts() {\n            const parts = [\n                splitted.proto,\n                '://'\n            ];\n            if (modify.username) {\n                const authstr = String(modify.username) + ':' + String(modify.password);\n                parts.push(authstr);\n                parts.push('@');\n            }\n            parts.push(splitted.host);\n            parts.push(splitted.path);\n            return parts.join('');\n        }\n        return {\n            protocol: splitted.proto,\n            host: splitted.host,\n            path: splitted.path,\n            url: _parts()\n        };\n    }\n    function urlparams(search, hash) {\n        let hashes = search.slice(search.indexOf(hash ? '#' : '?') + 1).split('&');\n        return hashes.reduce((params, hash) => {\n            let [key, val] = hash.split('=');\n            return Object.assign(params, { [key]: decodeURIComponent(val) });\n        }, {});\n    }\n    function argumentDefaults(args, defaults, undef) {\n        args = args || {};\n        Object.keys(defaults).forEach(key => {\n            if (typeof defaults[key] === 'boolean' || typeof defaults[key] === 'number') {\n                if (typeof args[key] === 'undefined' || args[key] === null) {\n                    args[key] = defaults[key];\n                }\n            } else {\n                args[key] = args[key] || defaults[key];\n            }\n        });\n        return args;\n    }\n    function mergeObject(obj1, obj2, opts) {\n        opts = opts || {};\n        for (let p in obj2) {\n            if (obj2.hasOwnProperty(p)) {\n                try {\n                    if (opts.overwrite === false && obj1.hasOwnProperty(p)) {\n                        continue;\n                    }\n                    if (obj2[p].constructor === Object) {\n                        obj1[p] = mergeObject(obj1[p], obj2[p]);\n                    } else {\n                        obj1[p] = obj2[p];\n                    }\n                } catch (e) {\n                    obj1[p] = obj2[p];\n                }\n            }\n        }\n        return obj1;\n    }\n    function cloneObject(o, alternative) {\n        function _clone(i) {\n            if (typeof i !== 'object' || i === null) {\n                return i;\n            } else if (i instanceof Array) {\n                return i.map(_clone);\n            }\n            const iter = {};\n            Object.keys(i).forEach(k => {\n                iter[k] = _clone(i[k]);\n            });\n            return iter;\n        }\n        if (alternative) {\n            return _clone(o);\n        }\n        return JSON.parse(JSON.stringify(o, (key, value) => {\n            if (value && typeof value === 'object' && value.tagName) {\n                return window.undefined;\n            }\n            return value;\n        }));\n    }\n    return {\n        format: format,\n        parseurl: parseurl,\n        urlparams: urlparams,\n        argumentDefaults: argumentDefaults,\n        mergeObject: mergeObject,\n        cloneObject: cloneObject\n    };\n});\ndefine('skylark-osjsv2-client/core/locales',[\n    '../utils/misc'\n], function (misc) {\n    'use strict';\n    let DefaultLocale = 'en_EN';\n    let CurrentLocale = 'en_EN';\n    let CurrentRTL = [];\n    function _() {\n        let userLocale = {};\n        let systemLocale = {};\n        try {\n            userLocale = OSjs.require('locales/' + CurrentLocale ); // modified by lwf\n            systemLocale = OSjs.require('locales/' + DefaultLocale ); // modified by lwf\n        } catch (e) {\n            console.warn('Locale error', e);\n        }\n        const s = arguments[0];\n        let a = arguments;\n        try {\n            if (userLocale && userLocale[s]) {\n                a[0] = userLocale[s];\n            } else {\n                a[0] = systemLocale[s] || s;\n            }\n            return a.length > 1 ? misc.format.apply(null, a) : a[0];\n        } catch (e) {\n            console.warn(e.stack, e);\n        }\n        return s;\n    }\n    function __() {\n        const l = arguments[0];\n        const s = arguments[1];\n        let a = Array.prototype.slice.call(arguments, 1);\n        if (l[CurrentLocale] && l[CurrentLocale][s]) {\n            a[0] = l[CurrentLocale][s];\n        } else {\n            a[0] = l[DefaultLocale] ? l[DefaultLocale][s] || s : s;\n            if (a[0] && a[0] === s) {\n                a[0] = _.apply(null, a);\n            }\n        }\n        return a.length > 1 ? misc.format.apply(null, a) : a[0];\n    }\n    function getLocale() {\n        return CurrentLocale;\n    }\n    function setLocale(l) {\n        let locale;\n        try {\n            locale = OSjs.require('locales/' + l); // modified by lwf\n        } catch (e) {\n            console.warn('Failed to set locale', e);\n            return;\n        }\n        if (locale) {\n            CurrentLocale = l;\n        } else {\n            console.warn('Locales::setLocale()', 'Invalid locale', l, '(Using default)');\n            CurrentLocale = DefaultLocale;\n        }\n        const major = CurrentLocale.split('_')[0];\n        const html = document.querySelector('html');\n        if (html) {\n            html.setAttribute('lang', l);\n            html.setAttribute('dir', CurrentRTL.indexOf(major) !== -1 ? 'rtl' : 'ltr');\n        }\n        console.info('Locales::setLocale()', CurrentLocale);\n    }\n    function createLocalizer(locales) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments, 0);\n            args.unshift(locales);\n            return __(...args);\n        };\n    }\n    function init(locale, options, languages) {\n        options = options || {};\n        const names = languages ? Object.keys(languages) : {};\n        if (names instanceof Array && names.indexOf(locale) !== -1) {\n            CurrentLocale = locale;\n        }\n        CurrentRTL = options.RTL || [];\n        names.forEach(k => {\n            OSjs.Locales[k] = OSjs.require('locales/' + k);//modified by lwf\n        });\n    }\n    return {\n        _: _,\n        __: __,\n        getLocale: getLocale,\n        setLocale: setLocale,\n        createLocalizer: createLocalizer,\n        init: init\n    };\n});\ndefine('skylark-osjsv2-client/helpers/event-handler',[],function () {\n    'use strict';\n    return class EventHandler {\n        constructor(name, names) {\n            this.name = name;\n            this.events = {};\n            (names || []).forEach(function (n) {\n                this.events[n] = [];\n            }, this);\n            console.debug('EventHandler::constructor()', this.events);\n        }\n        destroy() {\n            this.events = {};\n        }\n        on(name, cb, thisArg) {\n            thisArg = thisArg || this;\n            if (!(cb instanceof Function)) {\n                throw new TypeError('EventHandler::on() expects cb to be a Function');\n            }\n            const added = [];\n            const _register = n => {\n                if (!(this.events[n] instanceof Array)) {\n                    this.events[n] = [];\n                }\n                added.push(this.events[n].push(args => {\n                    return cb.apply(thisArg, args);\n                }));\n            };\n            if (name instanceof RegExp) {\n                Object.keys(this.events).forEach(function (n) {\n                    if (name.test(n)) {\n                        _register(n);\n                    }\n                });\n            } else {\n                name.replace(/\\s/g, '').split(',').forEach(function (n) {\n                    _register(n);\n                });\n            }\n            return added.length === 1 ? added[0] : added;\n        }\n        off(name, index) {\n            if (!(this.events[name] instanceof Array)) {\n                throw new TypeError('Invalid event name');\n            }\n            if (arguments.length > 1 && typeof index === 'number') {\n                this.events[name].splice(index, 1);\n            } else {\n                this.events[name] = [];\n            }\n        }\n        emit(name, args, thisArg, applyArgs) {\n            args = args || [];\n            thisArg = thisArg || this;\n            if (!(this.events[name] instanceof Array)) {\n                return;\n            }\n            this.events[name].forEach(fn => {\n                try {\n                    if (applyArgs) {\n                        fn.apply(thisArg, args);\n                    } else {\n                        fn.call(thisArg, args);\n                    }\n                } catch (e) {\n                    console.warn('EventHandler::emit() exception', name, e);\n                    console.warn(e.stack);\n                }\n            });\n        }\n    };\n});\ndefine('skylark-osjsv2-client/helpers/loader',[],function () {\n    'use strict';\n    class Loader {\n        constructor() {\n            this.loaders = {};\n            this.loaderGraze = {};\n            this.$container = document.createElement('osjs-loaders');\n        }\n        create(name, opts) {\n            opts = opts || {};\n            if (!this.$container.parentNode) {\n                document.body.appendChild(this.$container);\n            }\n            if (this.loaders[name]) {\n                return;\n            }\n            const el = document.createElement('osjs-loading');\n            el.title = opts.title || '';\n            if (opts.icon) {\n                const img = document.createElement('img');\n                img.src = opts.icon;\n                el.appendChild(img);\n            }\n            this.$container.appendChild(el);\n            this.loaderGraze[name] = setTimeout(() => {\n                el.style.display = 'inline-block';\n            }, 100);\n            this.loaders[name] = el;\n        }\n        destroy(name) {\n            if (!this.loaders[name]) {\n                return;\n            }\n            clearTimeout(this.loaderGraze[name]);\n            this.loaders[name].remove();\n            delete this.loaders[name];\n            delete this.loaderGraze[name];\n        }\n    }\n    return new Loader();\n});\ndefine('skylark-osjsv2-client/helpers/simplejsonconf',[],function(){\r\n  /*!\r\n   * Module: simplejsonconf\r\n   *\r\n   * Use JSON as a configuration file\r\n   *\r\n   * @author Anders Evenrud <andersevenrud@gmail.com>\r\n   * @license MIT\r\n   */\r\n\r\n  'use strict';\r\n\r\n  /*\r\n   * Check if this is an \"Object\"\r\n   */\r\n  function isObject(item) {\r\n    return (item && typeof item === 'object' && !Array.isArray(item) && item !== null);\r\n  }\r\n\r\n  /*\r\n   * Merges the two objects together\r\n   */\r\n  function mergeDeep(target, source) {\r\n    if ( isObject(target) && isObject(source) ) {\r\n      for ( var key in source ) {\r\n        if ( isObject(source[key]) ) {\r\n          if ( !target[key] || typeof target[key] !== typeof source[key] ) {\r\n            Object.assign(target, {\r\n              [key]: {}\r\n            });\r\n          }\r\n          mergeDeep(target[key], source[key]);\r\n        } else {\r\n          Object.assign(target, {\r\n            [key]: source[key]\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    return target;\r\n  }\r\n\r\n  var exports = {};\r\n\r\n  /**\r\n   * Creates a new proxy object with getJSON/setJSON methods for given JSON object.\r\n   *\r\n   * @param {Object}  obj       The JSON object\r\n   *\r\n   * @memberof simplejsonconf\r\n   * @function from\r\n   * @return {Object} A proxy object\r\n   */\r\n  exports.from = (obj) => {\r\n    return {\r\n      getJSON: (path, defaultValue) => {\r\n        return exports.getJSON(obj, path, defaultValue);\r\n      },\r\n      setJSON: (path, value, opts) => {\r\n        return exports.setJSON(obj, path, value, opts);\r\n      }\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Resolves the given path in JSON object and returns value\r\n   *\r\n   * @example .getJSON({foo: {bar: 'baz'}}, 'foo.bar') => 'baz'\r\n   *\r\n   * @param {Object}  json          The JSON object\r\n   * @param {String}  [path=null]   The path to seek. If empty, the entire tree is returned\r\n   *\r\n   * @memberof simplejsonconf\r\n   * @function getJSON\r\n   * @return {Mixed} Result for the path\r\n   */\r\n  exports.getJSON = (json, path, defaultValue) => {\r\n    if ( typeof path === 'string' ) {\r\n      let result = null;\r\n      let ns = json;\r\n\r\n      path.split(/\\./).forEach((k, i, queue) => {\r\n        if ( i >= queue.length - 1 ) {\r\n          result = ns[k];\r\n        } else {\r\n          ns = ns[k];\r\n        }\r\n      });\r\n\r\n      return typeof result === 'undefined' ? defaultValue : result;\r\n    }\r\n\r\n    return json;\r\n  };\r\n\r\n\r\n  /**\r\n   * Resolves the given path in JSON object and returns value\r\n   *\r\n   * @example .setJSON({foo: {bar: 'baz'}}, 'foo.bar', 'jazz') => {foo: {bar: 'jazz'}}\r\n   *\r\n   * @param {Object}          json                      The JSON object\r\n   * @param {String}          path                      The path to seek. If you set this as 'null' you can define the value as a tree\r\n   * @param {Mixed}           value                     The value to set on the path\r\n   * @param {Object}          [options]                 A set of options\r\n   * @param {Boolean}         [options.prune=false]     Remove 'null' from the tree (this also prunes empty objects)\r\n   * @param {Boolean}         [options.guess=false]     Try to guess what kind of type this value is\r\n   *\r\n   * @memberof simplejsonconf\r\n   * @function setJSON\r\n   * @return {Object} The new JSON object\r\n   */\r\n  exports.setJSON = (() => {\r\n\r\n    function removeNulls(obj) {\r\n      const isArray = obj instanceof Array;\r\n\r\n      for ( let k in obj ) {\r\n        if ( obj[k] === null ) {\r\n          if ( isArray ) {\r\n            obj.splice(k, 1);\r\n          } else {\r\n            delete obj[k];\r\n          }\r\n        } else if ( typeof obj[k] === 'object') {\r\n          removeNulls(obj[k]);\r\n        }\r\n      }\r\n    }\r\n\r\n    function getNewTree(key, value) {\r\n      const queue = key.split(/\\./);\r\n\r\n      let resulted = {};\r\n      let ns = resulted;\r\n\r\n      queue.forEach((k, i) => {\r\n        if ( i >= queue.length - 1 ) {\r\n          ns[k] = value;\r\n        } else {\r\n          if ( typeof ns[k] === 'undefined' ) {\r\n            ns[k] = {};\r\n          }\r\n          ns = ns[k];\r\n        }\r\n      });\r\n\r\n      return resulted;\r\n    }\r\n\r\n    function guessValue(value) {\r\n      try {\r\n        return JSON.parse(value);\r\n      } catch ( e ) {}\r\n      return String(value);\r\n    }\r\n\r\n    return function(json, path, value, opts) {\r\n      const isTree = !path;\r\n      const options = Object.assign({\r\n        prune: false,\r\n        guess: false,\r\n        value: null,\r\n      }, opts || {});\r\n\r\n      if ( !isTree && options.guess ) {\r\n        value = guessValue(value);\r\n      }\r\n\r\n      let newTree = isTree ? value : getNewTree(path, value);\r\n      let result = mergeDeep(json, newTree);\r\n\r\n      if ( options.prune ) {\r\n        removeNulls(result);\r\n      }\r\n\r\n      return result;\r\n    };\r\n  })();\r\n\r\nreturn exports;\r\n\r\n});\ndefine('skylark-osjsv2-client/core/config',['../helpers/simplejsonconf'], function (SimpleJSON) {\n    'use strict';\n    function getConfig(path, defaultValue) {\n        const config = OSjs.getConfig();\n        if (!path) {\n            return config;\n        }\n        const result = SimpleJSON.getJSON(config, path, defaultValue);\n        return typeof result === 'object' && !(result instanceof Array) ? Object.assign({}, result) : result;\n    }\n    function getDefaultPath(fallback) {\n        if (fallback && fallback.match(/^\\//)) {\n            fallback = null;\n        }\n        return getConfig('VFS.Home') || fallback || getConfig('VFS.Dist');\n    }\n    function getBrowserPath(app) {\n        let str = getConfig('Connection.RootURI');\n        if (typeof app === 'string') {\n            str = str.replace(/\\/?$/, app.replace(/^\\/?/, '/'));\n        }\n        return str;\n    }\n    function getUserLocale() {\n        const loc = (window.navigator.userLanguage || window.navigator.language || 'en-EN').replace('-', '_');\n        const map = {\n            'nb': 'no_NO',\n            'es': 'es_ES',\n            'ru': 'ru_RU',\n            'en': 'en_EN'\n        };\n        const major = loc.split('_')[0] || 'en';\n        const minor = loc.split('_')[1] || major.toUpperCase();\n        if (map[major]) {\n            return map[major];\n        }\n        return major + '_' + minor;\n    }\n    return {\n        getConfig: getConfig,\n        getDefaultPath: getDefaultPath,\n        getBrowserPath: getBrowserPath,\n        getUserLocale: getUserLocale\n    };\n});\ndefine('skylark-osjsv2-client/core/connection',[\n    'skylark-axios',\n    '../helpers/event-handler',\n    '../helpers/loader',\n    './config'\n], function (axios, EventHandler, Loader, a) {\n    'use strict';\n    function progressHandler(ev, onprogress) {\n        if (ev.lengthComputable) {\n            onprogress(ev, ev.loaded / ev.total);\n        } else {\n            onprogress(ev, -1);\n        }\n    }\n    function appendRequestOptions(data, options) {\n        options = options || {};\n        const onprogress = options.onprogress || function () {\n        };\n        const ignore = [\n            'onsuccess',\n            'onerror',\n            'onprogress',\n            'oncanceled'\n        ];\n        Object.keys(options).forEach(key => {\n            if (ignore.indexOf(key) === -1) {\n                data[key] = options[key];\n            }\n        });\n        data.onUploadProgress = ev => progressHandler(ev, onprogress);\n        data.onDownloadProgress = ev => progressHandler(ev, onprogress);\n        return data;\n    }\n    let _instance;\n    return class Connection {\n        static get instance() {\n            return _instance;\n        }\n        constructor() {\n            if (!_instance) {\n                _instance = this;\n            }\n            this.offline = false;\n            this.index = 0;\n            this._evHandler = new EventHandler(name, []);\n            this.onlineFn = () => this.onOnline();\n            this.offlineFn = () => this.onOffline();\n        }\n        init() {\n            if (typeof navigator.onLine !== 'undefined') {\n                window.addEventListener('offline', this.offlineFn);\n                window.addEventListener('online', this.onlineFn);\n            }\n            return Promise.resolve();\n        }\n        destroy() {\n            window.removeEventListener('offline', this.offlineFn);\n            window.removeEventListener('online', this.onlineFn);\n            if (this._evHandler) {\n                this._evHandler = this._evHandler.destroy();\n            }\n            _instance = null;\n        }\n        getVFSPath(item, options) {\n            options = options || {};\n            const base = a.getConfig('Connection.RootURI', '/').replace(/\\/?$/, '/');\n            const defaultDist = a.getConfig('VFS.Dist');\n            if (window.location.protocol === 'file:') {\n                return item ? base + item.path.substr(defaultDist.length) : base;\n            }\n            let url = a.getConfig('Connection.FSURI', '/');\n            if (item) {\n                url += '/read';\n                options.path = item.path;\n            } else {\n                url += '/upload';\n            }\n            if (options) {\n                const q = Object.keys(options).map(k => {\n                    return k + '=' + encodeURIComponent(options[k]);\n                });\n                if (q.length) {\n                    url += '?' + q.join('&');\n                }\n            }\n            return url;\n        }\n        isOnline() {\n            return !this.offline;\n        }\n        isOffline() {\n            return this.offline;\n        }\n        onVFSRequestCompleted(mount, method, args, response, appRef) {\n            return Promise.resolve(true);\n        }\n        onOnline() {\n            console.warn('Connection::onOnline()', 'Going online...');\n            this.offline = false;\n            if (this._evHandler) {\n                this._evHandler.emit('online');\n            }\n        }\n        onOffline(reconnecting) {\n            console.warn('Connection::onOffline()', 'Going offline...');\n            if (!this.offline && this._evHandler) {\n                this._evHandler.emit('offline', [reconnecting]);\n            }\n            this.offline = true;\n        }\n        createRequest(method, args, options) {\n            args = args || {};\n            options = options || {};\n            if (this.offline) {\n                return Promise.reject(new Error('You are currently off-line and cannot perform this operation!'));\n            }\n            const {raw, requestOptions} = this.createRequestOptions(method, args);\n            return new Promise((resolve, reject) => {\n                axios(appendRequestOptions(requestOptions, options)).then(result => {\n                    return resolve(raw ? result.data : {\n                        error: false,\n                        result: result.data\n                    });\n                }).catch(error => {\n                    reject(new Error(error.message || error));\n                });\n            });\n        }\n        createRequestOptions(method, args) {\n            const realMethod = method.replace(/^FS:/, '');\n            let raw = true;\n            let requestOptions = {\n                responseType: 'json',\n                url: a.getConfig('Connection.APIURI') + '/' + realMethod,\n                method: 'POST',\n                data: args\n            };\n            if (method.match(/^FS:/)) {\n                if (realMethod === 'get') {\n                    requestOptions.responseType = 'arraybuffer';\n                    requestOptions.url = args.url || this.getVFSPath({ path: args.path });\n                    requestOptions.method = args.method || 'GET';\n                    raw = false;\n                } else if (realMethod === 'upload') {\n                    requestOptions.url = this.getVFSPath();\n                } else {\n                    requestOptions.url = a.getConfig('Connection.FSURI') + '/' + realMethod;\n                }\n            }\n            return {\n                raw,\n                requestOptions\n            };\n        }\n        subscribe(k, func) {\n            return this._evHandler.on(k, func, this);\n        }\n        unsubscribe(k, idx) {\n            return this._evHandler.off(k, idx);\n        }\n        static request(m, a, options) {\n            a = a || {};\n            options = options || {};\n            if (options && typeof options !== 'object') {\n                return Promise.reject(new TypeError('request() expects an object as options'));\n            }\n            Loader.create('Connection.request');\n            if (typeof options.indicator !== 'undefined') {\n                delete options.indicator;\n            }\n            return new Promise((resolve, reject) => {\n                this.instance.createRequest(m, a, options).then(response => {\n                    if (response.error) {\n                        return reject(new Error(response.error));\n                    }\n                    return resolve(response.result);\n                }).catch(err => {\n                    reject(new Error(err));\n                }).finally(() => {\n                    Loader.destroy('Connection.request');\n                });\n            });\n        }\n    };\n});\ndefine('skylark-osjsv2-client/core/storage',[\n    './connection',\n], function (Connection) {\n    'use strict';\n    let _instance;\n    return class Storage {\n        static get instance() {\n            return _instance;\n        }\n        constructor() {\n            _instance = this;\n            this.saveTimeout = null;\n        }\n        init() {\n            return Promise.resolve();\n        }\n        destroy() {\n            _instance = null;\n        }\n        saveSettings(pool, storage) {\n            clearTimeout(this.saveTimeout);\n            return new Promise((resolve, reject) => {\n                this.saveTimeout = setTimeout(() => {\n                    Connection.request('settings', {\n                        pool: pool,\n                        settings: Object.assign({}, storage)\n                    }).then(resolve).catch(reject);\n                    clearTimeout(this.saveTimeout);\n                }, 250);\n            });\n        }\n        saveSession(Process,SettingsManager) { // modified by lwf\n            return new Promise((resolve, reject) => {\n                const data = Process.getProcesses().filter(proc => typeof proc._getSessionData === 'function').map(proc => proc._getSessionData());\n                SettingsManager.set('UserSession', null, data, (err, res) => {\n                    return err ? reject(err) : resolve(res);\n                });\n            });\n        }\n        getLastSession(SettingsManager) { // modified by lwf\n            const res = SettingsManager.get('UserSession');\n            const list = (res || []).map(iter => {\n                const args = iter.args;\n                args.__resume__ = true;\n                args.__windows__ = iter.windows || [];\n                return {\n                    name: iter.name,\n                    args\n                };\n            });\n            return Promise.resolve(list);\n        }\n    };\n});\ndefine('skylark-osjsv2-client/helpers/settings-fragment',['../utils/misc'], function (a) {\n    'use strict';\n    return class SettingsFragment {\n        constructor(obj, poolName, sm) {\n            this._sm = sm;\n            this._pool = poolName;\n            if (obj.constructor !== {}.constructor) {\n                if (!(obj instanceof Array)) {\n                    throw new Error('SettingsFragment will not work unless you give it a object to manage.');\n                }\n            }\n            this._settings = obj;\n        }\n        get(key, defaultValue) {\n            const ret = key ? this._settings[key] : this._settings;\n            return typeof ret === 'undefined' ? defaultValue : ret;\n        }\n        set(key, value, save, triggerWatch) {\n            if (key === null) {\n                a.mergeObject(this._settings, value);\n            } else {\n                if ([\n                        'number',\n                        'string'\n                    ].indexOf(typeof key) >= 0) {\n                    this._settings[key] = value;\n                } else {\n                    console.warn('SettingsFragment::set()', 'expects key to be a valid iter, not', key);\n                }\n            }\n            if (save) {\n                this._sm.save(this._pool, save);\n            }\n            if (typeof triggerWatch === 'undefined' || triggerWatch === true) {\n                this._sm.changed(this._pool);\n            }\n            return this;\n        }\n        save(callback) {\n            return this._sm.save(this._pool, callback);\n        }\n        getChained() {\n            let nestedSetting = this._settings;\n            arguments.every(function (key) {\n                if (nestedSetting[key]) {\n                    nestedSetting = nestedSetting[key];\n                    return true;\n                }\n                return false;\n            });\n            return nestedSetting;\n        }\n        mergeDefaults(defaults) {\n            a.mergeObject(this._settings, defaults, { overwrite: false });\n            return this;\n        }\n        instance(key) {\n            if (typeof this._settings[key] === 'undefined') {\n                throw new Error(\"The object doesn't contain that key. SettingsFragment will not work.\");\n            }\n            return new SettingsFragment(this._settings[key], this._pool, this._sm);\n        }\n    };\n});\ndefine('skylark-osjsv2-client/core/settings-manager',[\n    './storage',\n    '../helpers/settings-fragment'\n], function (Storage, SettingsFragment) {\n    'use strict';\n    class SettingsManager {\n        constructor() {\n            this.storage = {};\n            this.defaultSettings = {};\n            this.watches = [];\n        }\n        init(settings) {\n            this.storage = settings || {};\n            return Promise.resolve();\n        }\n        get(pool, key) {\n            try {\n                if (this.storage[pool] && Object.keys(this.storage[pool]).length) {\n                    return key ? this.storage[pool][key] : this.storage[pool];\n                }\n                return key ? this.defaultSettings[pool][key] : this.defaultSettings[pool];\n            } catch (e) {\n                console.warn('SettingsManager::get()', 'exception', e, e.stack);\n            }\n            return false;\n        }\n        set(pool, key, value, save, triggerWatch) {\n            let promise = Promise.resolve(true);\n            try {\n                if (key) {\n                    if (typeof this.storage[pool] === 'undefined') {\n                        this.storage[pool] = {};\n                    }\n                    if ([\n                            'number',\n                            'string'\n                        ].indexOf(typeof key) >= 0) {\n                        this.storage[pool][key] = value;\n                    } else {\n                        console.warn('SettingsManager::set()', 'expects key to be a valid iter, not', key);\n                    }\n                } else {\n                    this.storage[pool] = value;\n                }\n            } catch (e) {\n                console.warn('SettingsManager::set()', 'exception', e, e.stack);\n            }\n            if (save) {\n                promise = this.save(pool);\n                if (typeof save === 'function') {\n                    console.warn('Using a callback is deprecated, you should use the returned promise');\n                    promise.then(res => save(false, res)).catch(err => save(err, false));\n                }\n            }\n            if (typeof triggerWatch === 'undefined' || triggerWatch === true) {\n                this.changed(pool);\n            }\n            return promise;\n        }\n        save(pool) {\n            console.debug('SettingsManager::save()', pool, this.storage);\n            const saveableStorage = {};\n            Object.keys(this.storage).filter(n => {\n                return !n.match(/^__/);\n            }).forEach(n => {\n                saveableStorage[n] = this.storage[n];\n            });\n            return Storage.instance.saveSettings(pool, saveableStorage);\n        }\n        defaults(pool, defaults) {\n            this.defaultSettings[pool] = defaults;\n        }\n        instance(pool, defaults) {\n            if (!this.storage[pool] || this.storage[pool] instanceof Array) {\n                this.storage[pool] = {};\n            }\n            const instance = new SettingsFragment(this.storage[pool], pool, this);\n            if (arguments.length > 1) {\n                this.defaults(pool, defaults);\n                instance.mergeDefaults(defaults);\n            }\n            return instance;\n        }\n        unwatch(index) {\n            if (typeof this.watches[index] !== 'undefined') {\n                delete this.watches[index];\n            }\n        }\n        watch(pool, callback) {\n            if (!this.storage[pool]) {\n                return false;\n            }\n            const index = this.watches.push({\n                pool: pool,\n                callback: callback\n            });\n            return index - 1;\n        }\n        changed(pool) {\n            this.watches.forEach(watch => {\n                if (watch && watch.pool === pool) {\n                    watch.callback(this.storage[pool]);\n                }\n            });\n            return this;\n        }\n        clear(pool, save) {\n            save = typeof save === 'undefined' || save === true;\n            this.set(pool, null, {}, save);\n            return this;\n        }\n    }\n    return new SettingsManager();\n});\ndefine('utils/misc',[],function () {\n    'use strict';\n    function format(format) {\n        const args = Array.prototype.slice.call(arguments, 1);\n        const sprintfRegex = /\\{(\\d+)\\}/g;\n        function sprintf(match, number) {\n            return number in args ? args[number] : match;\n        }\n        return format.replace(sprintfRegex, sprintf);\n    }\n    function parseurl(url, modify) {\n        modify = modify || {};\n        if (!url.match(/^(\\w+\\:)\\/\\//)) {\n            url = '//' + url;\n        }\n        const protocol = url.split(/^(\\w+\\:)?\\/\\//);\n        const splitted = (() => {\n            const tmp = protocol[2].replace(/^\\/\\//, '').split('/');\n            return {\n                proto: (modify.protocol || protocol[1] || window.location.protocol || '').replace(/\\:$/, ''),\n                host: modify.host || tmp.shift(),\n                path: modify.path || '/' + tmp.join('/')\n            };\n        })();\n        function _parts() {\n            const parts = [\n                splitted.proto,\n                '://'\n            ];\n            if (modify.username) {\n                const authstr = String(modify.username) + ':' + String(modify.password);\n                parts.push(authstr);\n                parts.push('@');\n            }\n            parts.push(splitted.host);\n            parts.push(splitted.path);\n            return parts.join('');\n        }\n        return {\n            protocol: splitted.proto,\n            host: splitted.host,\n            path: splitted.path,\n            url: _parts()\n        };\n    }\n    function urlparams(search, hash) {\n        let hashes = search.slice(search.indexOf(hash ? '#' : '?') + 1).split('&');\n        return hashes.reduce((params, hash) => {\n            let [key, val] = hash.split('=');\n            return Object.assign(params, { [key]: decodeURIComponent(val) });\n        }, {});\n    }\n    function argumentDefaults(args, defaults, undef) {\n        args = args || {};\n        Object.keys(defaults).forEach(key => {\n            if (typeof defaults[key] === 'boolean' || typeof defaults[key] === 'number') {\n                if (typeof args[key] === 'undefined' || args[key] === null) {\n                    args[key] = defaults[key];\n                }\n            } else {\n                args[key] = args[key] || defaults[key];\n            }\n        });\n        return args;\n    }\n    function mergeObject(obj1, obj2, opts) {\n        opts = opts || {};\n        for (let p in obj2) {\n            if (obj2.hasOwnProperty(p)) {\n                try {\n                    if (opts.overwrite === false && obj1.hasOwnProperty(p)) {\n                        continue;\n                    }\n                    if (obj2[p].constructor === Object) {\n                        obj1[p] = mergeObject(obj1[p], obj2[p]);\n                    } else {\n                        obj1[p] = obj2[p];\n                    }\n                } catch (e) {\n                    obj1[p] = obj2[p];\n                }\n            }\n        }\n        return obj1;\n    }\n    function cloneObject(o, alternative) {\n        function _clone(i) {\n            if (typeof i !== 'object' || i === null) {\n                return i;\n            } else if (i instanceof Array) {\n                return i.map(_clone);\n            }\n            const iter = {};\n            Object.keys(i).forEach(k => {\n                iter[k] = _clone(i[k]);\n            });\n            return iter;\n        }\n        if (alternative) {\n            return _clone(o);\n        }\n        return JSON.parse(JSON.stringify(o, (key, value) => {\n            if (value && typeof value === 'object' && value.tagName) {\n                return window.undefined;\n            }\n            return value;\n        }));\n    }\n    return {\n        format: format,\n        parseurl: parseurl,\n        urlparams: urlparams,\n        argumentDefaults: argumentDefaults,\n        mergeObject: mergeObject,\n        cloneObject: cloneObject\n    };\n});\ndefine('skylark-osjsv2-client/utils/fs',['utils/misc'], function (Utils) {\n    'use strict';\n    function getPathFromVirtual(str) {\n        str = str || '';\n        const res = str.split(/([A-z0-9\\-_]+)\\:\\/\\/(.*)/)[2] || '';\n        return res.replace(/^\\/?/, '/');\n    }\n    function getPathProtocol(orig) {\n        const tmp = document.createElement('a');\n        tmp.href = orig;\n        return tmp.protocol.replace(/:$/, '');\n    }\n    function filename(p) {\n        return (p || '').replace(/\\/$/, '').split('/').pop();\n    }\n    function filext(d) {\n        const ext = filename(d).split('.').pop();\n        return ext ? ext.toLowerCase() : null;\n    }\n    function dirname(f) {\n        function _parentDir(p) {\n            const pstr = p.split(/^(.*)\\:\\/\\/(.*)/).filter(function (n) {\n                return n !== '';\n            });\n            const args = pstr.pop();\n            const prot = pstr.pop();\n            let result = '';\n            const tmp = args.split('/').filter(function (n) {\n                return n !== '';\n            });\n            if (tmp.length) {\n                tmp.pop();\n            }\n            result = tmp.join('/');\n            if (!result.match(/^\\//)) {\n                result = '/' + result;\n            }\n            if (prot) {\n                result = prot + '://' + result;\n            }\n            return result;\n        }\n        return f.match(/^((.*)\\:\\/\\/)?\\/$/) ? f : _parentDir(f.replace(/\\/$/, ''));\n    }\n    function humanFileSize(bytes, si) {\n        const units = si ? [\n            'kB',\n            'MB',\n            'GB',\n            'TB',\n            'PB',\n            'EB',\n            'ZB',\n            'YB'\n        ] : [\n            'KiB',\n            'MiB',\n            'GiB',\n            'TiB',\n            'PiB',\n            'EiB',\n            'ZiB',\n            'YiB'\n        ];\n        const thresh = si ? 1000 : 1024;\n        if (bytes < thresh) {\n            return bytes + ' B';\n        }\n        let u = -1;\n        do {\n            bytes /= thresh;\n            ++u;\n        } while (bytes >= thresh);\n        return bytes.toFixed(1) + ' ' + units[u];\n    }\n    function escapeFilename(n) {\n        return (n || '').replace(/[\\|&;\\$%@\"<>\\(\\)\\+,\\*\\/]/g, '').trim();\n    }\n    function replaceFileExtension(filename, rep) {\n        const spl = filename.split('.');\n        spl.pop();\n        spl.push(rep);\n        return spl.join('.');\n    }\n    function replaceFilename(orig, newname) {\n        const spl = orig.split('/');\n        spl.pop();\n        spl.push(newname);\n        return spl.join('/');\n    }\n    function pathJoin() {\n        let parts = [];\n        let prefix = '';\n        function getPart(s) {\n            if (s.match(/^([A-z0-9\\-_]+)\\:\\//)) {\n                const spl = s.split(/^([A-z0-9\\-_]+)\\:\\//);\n                if (!prefix) {\n                    prefix = spl[1] + '://';\n                }\n                s = spl[2] || '';\n            }\n            s = s.replace(/^\\/+/, '').replace(/\\/+$/, '');\n            return s.split('/').filter(function (i) {\n                return [\n                    '',\n                    '.',\n                    '..'\n                ].indexOf(i) === -1;\n            }).join('/');\n        }\n        for (let i = 0; i < arguments.length; i++) {\n            const str = getPart(String(arguments[i]));\n            if (str) {\n                parts.push(str);\n            }\n        }\n        return prefix + parts.join('/').replace(/^\\/?/, '/');\n    }\n    function getFilenameRange(val) {\n        val = val || '';\n        const range = {\n            min: 0,\n            max: val.length\n        };\n        if (val.match(/^\\./)) {\n            if (val.length >= 2) {\n                range.min = 1;\n            }\n        } else {\n            if (val.match(/\\.(\\w+)$/)) {\n                const m = val.split(/\\.(\\w+)$/);\n                for (let i = m.length - 1; i >= 0; i--) {\n                    if (m[i].length) {\n                        range.max = val.length - m[i].length - 1;\n                        break;\n                    }\n                }\n            }\n        }\n        return range;\n    }\n    function btoaUrlsafe(str) {\n        return !str || !str.length ? '' : btoa(str).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\n    }\n    function atobUrlsafe(str) {\n        if (str && str.length) {\n            str = (str + '===').slice(0, str.length + str.length % 4);\n            return atob(str.replace(/-/g, '+').replace(/_/g, '/'));\n        }\n        return '';\n    }\n    function btoaUtf(str) {\n        const _unescape = window.unescape || function (s) {\n            function d(x, n) {\n                return String.fromCharCode(parseInt(n, 16));\n            }\n            return s.replace(/%([0-9A-F]{2})/i, d);\n        };\n        str = _unescape(encodeURIComponent(str));\n        return btoa(str);\n    }\n    function atobUtf(str) {\n        const _escape = window.escape || function (s) {\n            function q(c) {\n                c = c.charCodeAt();\n                return '%' + (c < 16 ? '0' : '') + c.toString(16).toUpperCase();\n            }\n            return s.replace(/[\\x00-),:-?[-^`{-\\xFF]/g, q);\n        };\n        const trans = _escape(atob(str));\n        return decodeURIComponent(trans);\n    }\n    function checkAcceptMime(mime, list) {\n        if (mime && list.length) {\n            let re;\n            for (let i = 0; i < list.length; i++) {\n                re = new RegExp(list[i]);\n                if (re.test(mime) === true) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    function filterScandir(list, options, defaultOptions) {\n        defaultOptions = Utils.cloneObject(defaultOptions || {});\n        const ioptions = Utils.cloneObject(options, true);\n        let ooptions = Object.assign({}, defaultOptions.scandir || {}, ioptions);\n        ooptions = Object.assign({}, {\n            sortBy: null,\n            sortDir: 'asc',\n            typeFilter: null,\n            mimeFilter: [],\n            showHiddenFiles: true\n        }, ooptions);\n        function filterFile(iter) {\n            if (ooptions.typeFilter && iter.type !== ooptions.typeFilter || !ooptions.showHiddenFiles && iter.filename.match(/^\\.\\w/)) {\n                return false;\n            }\n            return true;\n        }\n        function validMime(iter) {\n            if (ooptions.mimeFilter && ooptions.mimeFilter.length && iter.mime) {\n                return ooptions.mimeFilter.some(function (miter) {\n                    if (iter.mime.match(miter)) {\n                        return true;\n                    }\n                    return false;\n                });\n            }\n            return true;\n        }\n        const result = list.filter(function (iter) {\n            if (iter.filename === '..' || !filterFile(iter)) {\n                return false;\n            }\n            if (iter.type === 'file' && !validMime(iter)) {\n                return false;\n            }\n            return true;\n        }).map(function (iter) {\n            if (iter.mime === 'application/vnd.google-apps.folder') {\n                iter.type = 'dir';\n            }\n            return iter;\n        });\n        const sb = ooptions.sortBy;\n        const types = {\n            mtime: 'date',\n            ctime: 'date'\n        };\n        if ([\n                'filename',\n                'size',\n                'mime',\n                'ctime',\n                'mtime'\n            ].indexOf(sb) !== -1) {\n            if (types[sb] === 'date') {\n                result.sort(function (a, b) {\n                    a = new Date(a[sb]);\n                    b = new Date(b[sb]);\n                    return a > b ? 1 : b > a ? -1 : 0;\n                });\n            } else {\n                if (sb === 'size' || !String.prototype.localeCompare) {\n                    result.sort(function (a, b) {\n                        return a[sb] > b[sb] ? 1 : b[sb] > a[sb] ? -1 : 0;\n                    });\n                } else {\n                    result.sort(function (a, b) {\n                        return String(a[sb]).localeCompare(String(b[sb]));\n                    });\n                }\n            }\n            if (ooptions.sortDir === 'desc') {\n                result.reverse();\n            }\n        }\n        return result.filter(function (iter) {\n            return iter.type === 'dir';\n        }).concat(result.filter(function (iter) {\n            return iter.type !== 'dir';\n        }));\n    }\n    function _abToSomething(m, arrayBuffer, mime, callback) {\n        mime = mime || 'application/octet-stream';\n        try {\n            const blob = new Blob([arrayBuffer], { type: mime });\n            const r = new FileReader();\n            r.onerror = function (e) {\n                callback(e);\n            };\n            r.onloadend = function () {\n                callback(false, r.result);\n            };\n            r[m](blob);\n        } catch (e) {\n            console.warn(e, e.stack);\n            callback(e);\n        }\n    }\n    function addFormFile(fd, key, data, file) {\n        file = file || {\n            mime: 'application/octet-stream',\n            filename: 'filename'\n        };\n        if (data instanceof window.File) {\n            fd.append(key, data);\n        } else if (data instanceof window.ArrayBuffer) {\n            try {\n                data = new Blob([data], { type: file.mime });\n            } catch (e) {\n                data = null;\n                console.warn(e, e.stack);\n            }\n            fd.append(key, data, file.filename);\n        } else {\n            if (data.data && data.filename) {\n                fd.append(key, data.data, data.filename);\n            }\n        }\n    }\n    function dataSourceToAb(data, mime, callback) {\n        const byteString = atob(data.split(',')[1]);\n        const ab = new ArrayBuffer(byteString.length);\n        const ia = new Uint8Array(ab);\n        for (let i = 0; i < byteString.length; i++) {\n            ia[i] = byteString.charCodeAt(i);\n        }\n        callback(false, ab);\n    }\n    function textToAb(data, mime, callback) {\n        _abToSomething('readAsArrayBuffer', data, mime, callback);\n    }\n    function abToDataSource(arrayBuffer, mime, callback) {\n        _abToSomething('readAsDataURL', arrayBuffer, mime, callback);\n    }\n    function abToText(arrayBuffer, mime, callback) {\n        _abToSomething('readAsText', arrayBuffer, mime, callback);\n    }\n    function abToBinaryString(arrayBuffer, mime, callback) {\n        _abToSomething('readAsBinaryString', arrayBuffer, mime, callback);\n    }\n    function abToBlob(arrayBuffer, mime, callback) {\n        mime = mime || 'application/octet-stream';\n        try {\n            const blob = new Blob([arrayBuffer], { type: mime });\n            callback(false, blob);\n        } catch (e) {\n            console.warn(e, e.stack);\n            callback(e);\n        }\n    }\n    function blobToAb(data, callback) {\n        try {\n            const r = new FileReader();\n            r.onerror = function (e) {\n                callback(e);\n            };\n            r.onloadend = function () {\n                callback(false, r.result);\n            };\n            r.readAsArrayBuffer(data);\n        } catch (e) {\n            console.warn(e, e.stack);\n            callback(e);\n        }\n    }\n    return {\n        getPathFromVirtual: getPathFromVirtual,\n        getPathProtocol: getPathProtocol,\n        filename: filename,\n        filext: filext,\n        dirname: dirname,\n        humanFileSize: humanFileSize,\n        escapeFilename: escapeFilename,\n        replaceFileExtension: replaceFileExtension,\n        replaceFilename: replaceFilename,\n        pathJoin: pathJoin,\n        getFilenameRange: getFilenameRange,\n        btoaUrlsafe: btoaUrlsafe,\n        atobUrlsafe: atobUrlsafe,\n        btoaUtf: btoaUtf,\n        atobUtf: atobUtf,\n        checkAcceptMime: checkAcceptMime,\n        filterScandir: filterScandir,\n        addFormFile: addFormFile,\n        dataSourceToAb: dataSourceToAb,\n        textToAb: textToAb,\n        abToDataSource: abToDataSource,\n        abToText: abToText,\n        abToBinaryString: abToBinaryString,\n        abToBlob: abToBlob,\n        blobToAb: blobToAb\n    };\n});\ndefine('skylark-osjsv2-client/vfs/file',[\n    '../utils/fs',\n    '../core/config',\n    '../core/locales'\n], function (FS, a, b) {\n    'use strict';\n    return class FileMetadata {\n        constructor(arg, mime) {\n            if (!arg) {\n                throw new Error(b._('ERR_VFS_FILE_ARGS'));\n            }\n            this.path = null;\n            this.filename = null;\n            this.type = null;\n            this.size = null;\n            this.mime = null;\n            this.id = null;\n            this.shortcut = false;\n            if (typeof arg === 'object') {\n                this.setData(arg);\n            } else if (typeof arg === 'string') {\n                this.path = arg;\n                this.setData();\n            }\n            if (typeof mime === 'string') {\n                if (mime.match(/\\//)) {\n                    this.mime = mime;\n                } else {\n                    this.type = mime;\n                }\n            }\n            this._guessMime();\n        }\n        setData(o) {\n            if (o) {\n                Object.keys(o).forEach(k => {\n                    if (k !== '_element') {\n                        this[k] = o[k];\n                    }\n                });\n            }\n            if (!this.filename) {\n                this.filename = FS.filename(this.path);\n            }\n        }\n        getData() {\n            return {\n                path: this.path,\n                filename: this.filename,\n                type: this.type,\n                size: this.size,\n                mime: this.mime,\n                id: this.id\n            };\n        }\n        _guessMime() {\n            if (this.mime || this.type === 'dir' || (!this.path || this.path.match(/\\/$/))) {\n                return;\n            }\n            const ext = FS.filext(this.path);\n            this.mime = a.getConfig('MIME.mapping')['.' + ext] || 'application/octet-stream';\n        }\n        static fromUpload(destination, f) {\n            return new FileMetadata({\n                filename: f.name,\n                path: (destination + '/' + f.name).replace(/\\/\\/\\/\\/+/, '///'),\n                mime: f.mime || 'application/octet-stream',\n                size: f.size\n            });\n        }\n    };\n});\ndefine('skylark-osjsv2-client/core/package-manager',[\n    './settings-manager',\n    '../utils/misc',\n    './locales',\n    './config',\n    '../utils/fs',\n    './connection'\n], function ( SettingsManager, misc, locales, config, FS, Connection) {\n    'use strict';\n    const resolvePreloads = (metadata, pm) => {\n        const packageURI = config.getConfig('Connection.PackageURI');\n        const mapIter = s => typeof s === 'string' ? { src: s } : s;\n        let additions = [];\n        let list = (metadata.preload || []).slice(0).map(mapIter);\n        if (metadata.depends instanceof Array) {\n            metadata.depends.forEach(k => {\n                if (!OSjs.Applications[k]) {\n                    const pkg = pm.getPackage(k);\n                    if (pkg) {\n                        console.info('Using dependency', k);\n                        additions = additions.concat(pkg.preload.map(mapIter));\n                    }\n                }\n            });\n        }\n        const pkgs = pm.getPackages(false); \n        Object.keys(pkgs).forEach(pn => {\n            const p = pkgs[pn];\n            if (p.type === 'extension' && p.uses === name) {\n                if (p) {\n                    console.info('Using extension', pn);\n                    additions = additions.concat(p.preload.map(mapIter));\n                }\n            }\n        });\n        return additions.concat(list).map(p => {\n            if (!p.src.match(/^(\\/|https?|ftp)/)) {\n                if (metadata.scope === 'user') {\n                    pm.VFS.url(FS.pathJoin(metadata.path, p.src)).then(url => {\n                        p.src = url;\n                        return true;\n                    });\n                } else {\n                    p.src = FS.pathJoin(packageURI, metadata.path, p.src);\n                }\n            }\n            return p;\n        });\n    };\n    class PackageManager {\n        constructor() { \n            this.packages = {};\n            this.blacklist = [];\n        }\n        destroy() {\n            this.packages = {};\n            this.blacklist = [];\n        }\n        init(Authenticator,VFS, metadata, isStandalone) { // modified by lwf\n            this.Authenticator = Authenticator;\n            this.VFS = VFS;\n            console.debug('PackageManager::load()', metadata);\n            return new Promise((resolve, reject) => {\n                const setPackages = metadata ? this.setPackages(metadata) : Promise.resolve();\n                setPackages.then(() => {\n                    if (isStandalone) {\n                        return resolve(true);\n                    }\n                    return this._loadMetadata().then(() => {\n                        const len = Object.keys(this.packages).length;\n                        if (len) {\n                            return resolve(true);\n                        }\n                        return reject(new Error(locales._('ERR_PACKAGE_ENUM_FAILED')));\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        }\n        _loadMetadata() {\n            const paths = SettingsManager.instance('PackageManager').get('PackagePaths', []);\n            return new Promise((resolve, reject) => {\n                Connection.request('packages', {\n                    command: 'list',\n                    args: { paths: paths }\n                }).then(res => {\n                    return this.setPackages(res).then(resolve).catch(reject);\n                }).catch(reject);\n            });\n        }\n        generateUserMetadata() {\n            const paths = SettingsManager.instance('PackageManager').get('PackagePaths', []);\n            return new Promise((resolve, reject) => {\n                const cb = () => this._loadMetadata().then(resolve).catch(reject);\n                Connection.request('packages', {\n                    command: 'cache',\n                    args: {\n                        action: 'generate',\n                        scope: 'user',\n                        paths: paths\n                    }\n                }).then(cb).catch(cb);\n            });\n        }\n        _addPackages(result, scope) {\n            console.debug('PackageManager::_addPackages()', result);\n            const keys = Object.keys(result);\n            if (!keys.length) {\n                return;\n            }\n            const currLocale = locales.getLocale();\n            keys.forEach(i => {\n                const newIter = misc.cloneObject(result[i]);\n                if (typeof newIter !== 'object') {\n                    return;\n                }\n                if (typeof newIter.names !== 'undefined' && newIter.names[currLocale]) {\n                    newIter.name = newIter.names[currLocale];\n                }\n                if (typeof newIter.descriptions !== 'undefined' && newIter.descriptions[currLocale]) {\n                    newIter.description = newIter.descriptions[currLocale];\n                }\n                if (!newIter.description) {\n                    newIter.description = newIter.name;\n                }\n                newIter.scope = scope || 'system';\n                newIter.type = newIter.type || 'application';\n                this.packages[i] = newIter;\n            });\n        }\n        install(file, root) {\n            const paths = SettingsManager.instance('PackageManager').get('PackagePaths', []);\n            if (typeof root !== 'string') {\n                root = paths[0];\n            }\n            const dest = FS.pathJoin(root, file.filename.replace(/\\.zip$/i, ''));\n            return new Promise((resolve, reject) => {\n                Connection.request('packages', {\n                    command: 'install',\n                    args: {\n                        zip: file.path,\n                        dest: dest,\n                        paths: paths\n                    }\n                }).then(() => {\n                    return this.generateUserMetadata().then(resolve).catch(reject);\n                }).catch(reject);\n            });\n        }\n        uninstall(file) {\n            return new Promise((resolve, reject) => {\n                Connection.request('packages', {\n                    command: 'uninstall',\n                    args: { path: file.path }\n                }).then(() => {\n                    return this.generateUserMetadata().then(resolve).catch(reject);\n                }).catch(reject);\n            });\n        }\n        setBlacklist(list) {\n            this.blacklist = list || [];\n        }\n        getStorePackages(opts) {\n            const repos = SettingsManager.instance('PackageManager').get('Repositories', []);\n            let entries = [];\n            return new Promise((resolve, reject) => {\n                Promise.all(repos.map(url => {\n                    return new Promise((yes, no) => {\n                        Connection.request('curl', {\n                            url: url,\n                            method: 'GET'\n                        }).then(result => {\n                            let list = [];\n                            if (typeof result.body === 'string') {\n                                try {\n                                    list = JSON.parse(result.body);\n                                } catch (e) {\n                                }\n                            }\n                            entries = entries.concat(list.map(iter => {\n                                iter._repository = url;\n                                return iter;\n                            }));\n                            return yes();\n                        }).catch(no);\n                    });\n                })).then(() => resolve(entries)).catch(reject);\n            });\n        }\n        getPackage(name) {\n            if (typeof this.packages[name] !== 'undefined') {\n                return Object.freeze(misc.cloneObject(this.packages)[name]);\n            }\n            return false;\n        }\n        getPackages(filtered) {\n            const Authenticator = this.Authenticator;\n\n            const hidden = SettingsManager.instance('PackageManager').get('Hidden', []);\n            const p = misc.cloneObject(this.packages);\n            const allowed = iter => {\n                if (this.blacklist.indexOf(iter.path) >= 0) {\n                    return false;\n                }\n                if (iter && iter.groups instanceof Array) {\n                    if (!Authenticator.instance().checkPermission(iter.groups)) { // modified by lwf\n                        return false;\n                    }\n                }\n                return true;\n            };\n            if (typeof filtered === 'undefined' || filtered === true) {\n                const result = {};\n                Object.keys(p).forEach(name => {\n                    const iter = p[name];\n                    if (!allowed(iter)) {\n                        return;\n                    }\n                    if (iter && hidden.indexOf(name) < 0) {\n                        result[name] = iter;\n                    }\n                });\n                return Object.freeze(result);\n            }\n            return Object.freeze(p);\n        }\n        getPackagesByMime(mime) {\n            const list = [];\n            const p = misc.cloneObject(this.packages);\n            Object.keys(p).forEach(i => {\n                if (this.blacklist.indexOf(i) < 0) {\n                    const a = p[i];\n                    if (a && a.mime) {\n                        if (FS.checkAcceptMime(mime, a.mime)) {\n                            list.push(i);\n                        }\n                    }\n                }\n            });\n            return list;\n        }\n        getPackageResource(app, name, vfspath) {\n            if (name.match(/^((https?:)|\\.)?\\//)) {\n                return name;\n            }\n            name = name.replace(/^\\.\\//, '');\n            const appname = typeof app === 'string' ? app : app.__pname;\n            const fsuri = config.getConfig('Connection.FSURI');\n            const pkg = this.getPackage(appname);\n            let path = name;\n            if (pkg) {\n                path = pkg.scope === 'user' ? '/user-package/' + FS.filename(pkg.path) + '/' + name.replace(/^\\//, '') : 'packages/' + pkg.path + '/' + name;\n                if (vfspath) {\n                    return pkg.scope === 'user' ? path.substr(fsuri.length) : config.getConfig('VFS.Dist') + path;\n                }\n            }\n            return path;\n        }\n        setPackages(res) { \n            const packages = {};\n            const locale = locales.getLocale();\n            const checkEntry = (key, iter, scope) => {\n                iter = Object.assign({}, iter);\n                iter.type = iter.type || 'application';\n                if (scope) {\n                    iter.scope = scope;\n                }\n                if (iter.names && iter.names[locale]) {\n                    iter.name = iter.names[locale];\n                }\n                if (iter.descriptions && iter.descriptions[locale]) {\n                    iter.description = iter.descriptions[locale];\n                }\n                let resolveIcon = () => {\n                    if (iter.icon && iter.path) {\n                        let packagePath = iter.path.replace(/^\\//, '');\n                        if (iter.scope === 'user') {\n                            return this.VFS.url(FS.pathJoin(packagePath, iter.icon));\n                        } else {\n                            if (iter.icon.match(/^\\.\\//)) {\n                                const packageURI = config.getConfig('Connection.PackageURI').replace(/\\/?$/, '/');\n                                return Promise.resolve(packageURI + packagePath + iter.icon.replace(/^\\./, ''));\n                            }\n                        }\n                    }\n                    return Promise.resolve(iter.icon);\n                };\n                iter.preload = resolvePreloads(iter, this); \n                return new Promise((resolve, reject) => {\n                    resolveIcon().then(icon => {\n                        if (icon) {\n                            iter.icon = icon;\n                        }\n                        return resolve(iter);\n                    }).catch(reject);\n                });\n            };\n            return new Promise((resolve, reject) => {\n                const entries = Object.keys(res || {});\n                Promise.each(entries, key => {\n                    return new Promise((yes, no) => {\n                        const iter = res[key];\n                        if (iter && !packages[iter.className]) {\n                            checkEntry(key, iter).then(pkg => {\n                                packages[iter.className] = pkg;\n                                return yes();\n                            }).catch(no);\n                        } else {\n                            console.warn('No such package', key);\n                            yes();\n                        }\n                    });\n                }).catch(reject).then(() => {\n                    this.packages = packages;\n                    return resolve();\n                });\n            });\n        }\n    }\n    return new PackageManager();\n});\ndefine('skylark-osjsv2-client/utils/compability',[],function () {\n    'use strict';\n    const compability = function () {\n        function _checkSupport(enabled, check, isSupported) {\n            const supported = {};\n            Object.keys(check).forEach(key => {\n                let chk = check[key];\n                let value = false;\n                if (chk instanceof Array) {\n                    chk.forEach(c => {\n                        value = isSupported(c);\n                        return !value;\n                    });\n                } else {\n                    value = isSupported(chk);\n                }\n                supported[key] = value;\n            });\n            return supported;\n        }\n        function getUpload() {\n            try {\n                const xhr = new XMLHttpRequest();\n                return !!(xhr && 'upload' in xhr && 'onprogress' in xhr.upload);\n            } catch (e) {\n            }\n            return false;\n        }\n        function getCanvasSupported() {\n            return document.createElement('canvas').getContext ? document.createElement('canvas') : null;\n        }\n        function getVideoSupported() {\n            return document.createElement('video').canPlayType ? document.createElement('video') : null;\n        }\n        function canPlayCodec(support, check) {\n            return _checkSupport(support, check, codec => {\n                try {\n                    return !!support.canPlayType(codec);\n                } catch (e) {\n                }\n                return false;\n            });\n        }\n        function getVideoTypesSupported() {\n            return canPlayCodec(getVideoSupported(), {\n                webm: 'video/webm; codecs=\"vp8.0, vorbis\"',\n                ogg: 'video/ogg; codecs=\"theora\"',\n                h264: [\n                    'video/mp4; codecs=\"avc1.42E01E\"',\n                    'video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"'\n                ],\n                mpeg: 'video/mp4; codecs=\"mp4v.20.8\"',\n                mkv: 'video/x-matroska; codecs=\"theora, vorbis\"'\n            });\n        }\n        function getAudioSupported() {\n            return document.createElement('audio').canPlayType ? document.createElement('audio') : null;\n        }\n        function getAudioTypesSupported() {\n            return canPlayCodec(getAudioSupported(), {\n                ogg: 'audio/ogg; codecs=\"vorbis',\n                mp3: 'audio/mpeg',\n                wav: 'audio/wav; codecs=\"1\"'\n            });\n        }\n        function getAudioContext() {\n            if (window.hasOwnProperty('AudioContext') || window.hasOwnProperty('webkitAudioContext')) {\n                return true;\n            }\n            return false;\n        }\n        const getCanvasContexts = (() => {\n            const cache = [];\n            return () => {\n                if (!cache.length) {\n                    const canvas = getCanvasSupported();\n                    if (canvas) {\n                        const test = [\n                            '2d',\n                            'webgl',\n                            'experimental-webgl',\n                            'webkit-3d',\n                            'moz-webgl'\n                        ];\n                        test.forEach((tst, i) => {\n                            try {\n                                if (!!canvas.getContext(tst)) {\n                                    cache.push(tst);\n                                }\n                            } catch (eee) {\n                            }\n                        });\n                    }\n                }\n                return cache;\n            };\n        })();\n        function getWebGL() {\n            let result = false;\n            let contexts = getCanvasContexts();\n            try {\n                result = contexts.length > 1;\n                if (!result) {\n                    if ('WebGLRenderingContext' in window) {\n                        result = true;\n                    }\n                }\n            } catch (e) {\n            }\n            return result;\n        }\n        function detectCSSFeature(featurename) {\n            let feature = false;\n            let domPrefixes = 'Webkit Moz ms O'.split(' ');\n            let elm = document.createElement('div');\n            let featurenameCapital = null;\n            featurename = featurename.toLowerCase();\n            if (elm.style[featurename]) {\n                feature = true;\n            }\n            if (feature === false) {\n                featurenameCapital = featurename.charAt(0).toUpperCase() + featurename.substr(1);\n                for (let i = 0; i < domPrefixes.length; i++) {\n                    if (typeof elm.style[domPrefixes[i] + featurenameCapital] !== 'undefined') {\n                        feature = true;\n                        break;\n                    }\n                }\n            }\n            return feature;\n        }\n        function getUserMedia() {\n            let getMedia = false;\n            if (window.navigator) {\n                getMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;\n            }\n            return !!getMedia;\n        }\n        function getRichText() {\n            try {\n                return !!document.createElement('textarea').contentEditable;\n            } catch (e) {\n            }\n            return false;\n        }\n        function getTouch() {\n            try {\n                if (navigator.userAgent.match(/Windows NT 6\\.(2|3)/)) {\n                    return false;\n                }\n            } catch (e) {\n            }\n            try {\n                if (navigator.userAgent.match(/iOS|Android|BlackBerry|IEMobile|iPad|iPhone|iPad/i)) {\n                    return true;\n                }\n            } catch (e) {\n            }\n            return false;\n        }\n        function getDnD() {\n            return !!('draggable' in document.createElement('span'));\n        }\n        function getSVG() {\n            return !!document.createElementNS && !!document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGRect;\n        }\n        function getFileSystem() {\n            return 'requestFileSystem' in window || 'webkitRequestFileSystem' in window;\n        }\n        const checkWindow = {\n            indexedDB: 'indexedDB',\n            localStorage: 'localStorage',\n            sessionStorage: 'sessionStorage',\n            globalStorage: 'globalStorage',\n            openDatabase: 'openDatabase',\n            socket: 'WebSocket',\n            worker: 'Worker',\n            file: 'File',\n            blob: 'Blob',\n            orientation: 'onorientationchange'\n        };\n        const compability = {\n            touch: getTouch(),\n            upload: getUpload(),\n            getUserMedia: getUserMedia(),\n            fileSystem: getFileSystem(),\n            localStorage: false,\n            sessionStorage: false,\n            globalStorage: false,\n            openDatabase: false,\n            socket: false,\n            worker: false,\n            file: false,\n            blob: false,\n            orientation: false,\n            dnd: getDnD(),\n            css: {\n                transition: detectCSSFeature('transition'),\n                animation: detectCSSFeature('animation')\n            },\n            canvas: !!getCanvasSupported(),\n            canvasContext: getCanvasContexts(),\n            webgl: getWebGL(),\n            audioContext: getAudioContext(),\n            svg: getSVG(),\n            video: !!getVideoSupported(),\n            videoTypes: getVideoTypesSupported(),\n            audio: !!getAudioSupported(),\n            audioTypes: getAudioTypesSupported(),\n            richtext: getRichText()\n        };\n        Object.keys(checkWindow).forEach(key => {\n            try {\n                compability[key] = checkWindow[key] in window && window[checkWindow[key]] !== null;\n            } catch (e) {\n                console.warn(e);\n            }\n        });\n        return () => {\n            return compability;\n        };\n    }();\n    function getCompability() {\n        return compability();\n    }\n    function isIE() {\n        const dm = parseInt(document.documentMode, 10);\n        return dm <= 11 || !!navigator.userAgent.match(/(MSIE|Edge)/);\n    }\n    return {\n        getCompability: getCompability,\n        isIE: isIE\n    };\n});\ndefine('skylark-osjsv2-client/utils/dom',[],function () {\n    'use strict';\n    function $(id) {\n        return document.getElementById(id);\n    }\n    function $safeName(str) {\n        return (str || '').replace(/[^a-zA-Z0-9]/g, '_');\n    }\n    function $remove(node) {\n        if (node) {\n            if (typeof node.remove === 'function') {\n                node.remove();\n            } else if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        }\n    }\n    function $empty(myNode) {\n        if (myNode) {\n            while (myNode.firstChild) {\n                myNode.removeChild(myNode.firstChild);\n            }\n        }\n    }\n    function $getStyle(oElm, strCssRule) {\n        let strValue = '';\n        if (document.defaultView && document.defaultView.getComputedStyle) {\n            strValue = document.defaultView.getComputedStyle(oElm, '').getPropertyValue(strCssRule);\n        } else if (oElm.currentStyle) {\n            strCssRule = strCssRule.replace(/\\-(\\w)/g, (strMatch, p1) => {\n                return p1.toUpperCase();\n            });\n            strValue = oElm.currentStyle[strCssRule];\n        }\n        return strValue;\n    }\n    function $position(el, parentEl) {\n        if (el) {\n            if (parentEl) {\n                const result = {\n                    left: 0,\n                    top: 0,\n                    width: el.offsetWidth,\n                    height: el.offsetHeight\n                };\n                while (true) {\n                    result.left += el.offsetLeft;\n                    result.top += el.offsetTop;\n                    if (el.offsetParent === parentEl || el.offsetParent === null) {\n                        break;\n                    }\n                    el = el.offsetParent;\n                }\n                return result;\n            }\n            return el.getBoundingClientRect();\n        }\n        return null;\n    }\n    function $parent(el, cb) {\n        let result = null;\n        if (el && cb) {\n            let current = el;\n            while (current.parentNode) {\n                if (cb(current)) {\n                    result = current;\n                    break;\n                }\n                current = current.parentNode;\n            }\n        }\n        return result;\n    }\n    function $index(el, parentEl) {\n        if (el) {\n            parentEl = parentEl || el.parentNode;\n            if (parentEl) {\n                const nodeList = Array.prototype.slice.call(parentEl.children);\n                const nodeIndex = nodeList.indexOf(el, parentEl);\n                return nodeIndex;\n            }\n        }\n        return -1;\n    }\n    function $selectRange(field, start, end) {\n        if (!field) {\n            throw new Error('Cannot select range: missing element');\n        }\n        if (typeof start === 'undefined' || typeof end === 'undefined') {\n            throw new Error('Cannot select range: mising start/end');\n        }\n        if (field.createTextRange) {\n            const selRange = field.createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n            field.focus();\n        } else if (field.setSelectionRange) {\n            field.focus();\n            field.setSelectionRange(start, end);\n        } else if (typeof field.selectionStart !== 'undefined') {\n            field.selectionStart = start;\n            field.selectionEnd = end;\n            field.focus();\n        }\n    }\n    function $addClass(el, name) {\n        if (el) {\n            name.split(' ').forEach(n => {\n                el.classList.add(n);\n            });\n        }\n    }\n    function $removeClass(el, name) {\n        if (el) {\n            name.split(' ').forEach(n => {\n                el.classList.remove(n);\n            });\n        }\n    }\n    function $hasClass(el, name) {\n        if (el && name) {\n            return name.split(' ').every(n => {\n                return el.classList.contains(n);\n            });\n        }\n        return false;\n    }\n    function $escape(str) {\n        const div = document.createElement('div');\n        div.appendChild(document.createTextNode(str));\n        return div.innerHTML;\n    }\n    function $create(tagName, properties) {\n        const element = document.createElement(tagName);\n        function _foreach(dict, l) {\n            dict = dict || {};\n            Object.keys(dict).forEach(name => {\n                l(name.replace(/_/g, '-'), String(dict[name]));\n            });\n        }\n        _foreach(properties.style, (key, val) => {\n            element.style[key] = val;\n        });\n        _foreach(properties.aria, (key, val) => {\n            if (['role'].indexOf(key) !== -1) {\n                key = 'aria-' + key;\n            }\n            element.setAttribute(key, val);\n        });\n        _foreach(properties.data, (key, val) => {\n            element.setAttribute('data-' + key, val);\n        });\n        _foreach(properties, (key, val) => {\n            if ([\n                    'style',\n                    'aria',\n                    'data'\n                ].indexOf(key) === -1) {\n                element[key] = val;\n            }\n        });\n        return element;\n    }\n    function $createCSS(src, onload, onerror) {\n        const link = document.createElement('link');\n        link.setAttribute('rel', 'stylesheet');\n        link.setAttribute('type', 'text/css');\n        link.onload = onload || function () {\n        };\n        link.onerror = onerror || function () {\n        };\n        link.setAttribute('href', src);\n        document.getElementsByTagName('head')[0].appendChild(link);\n        return link;\n    }\n    function $createJS(src, onreadystatechange, onload, onerror, attrs) {\n        const res = document.createElement('script');\n        res.onreadystatechange = onreadystatechange || function () {\n        };\n        res.onerror = onerror || function () {\n        };\n        res.onload = onload || function () {\n        };\n        attrs = Object.assign({}, {\n            type: 'text/javascript',\n            charset: 'utf-8',\n            src: src\n        }, attrs || {});\n        Object.keys(attrs).forEach(k => {\n            res[k] = String(attrs[k]);\n        });\n        document.getElementsByTagName('head')[0].appendChild(res);\n        return res;\n    }\n    function $isFormElement(input, types) {\n        types = types || [\n            'TEXTAREA',\n            'INPUT',\n            'SELECT'\n        ];\n        if (input instanceof window.Event) {\n            input = input.srcElement || input.target;\n        }\n        if (input instanceof window.Element) {\n            if (types.indexOf(input.tagName.toUpperCase()) >= 0) {\n                if (!(input.readOnly || input.disabled)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    function $css(el, ink, inv) {\n        function rep(k) {\n            return k.replace(/\\-(\\w)/g, (strMatch, p1) => {\n                return p1.toUpperCase();\n            });\n        }\n        let obj = {};\n        if (arguments.length === 2) {\n            if (typeof ink === 'string') {\n                return el.parentNode ? $getStyle(el, ink) : el.style[rep(ink)];\n            }\n            obj = ink;\n        } else if (arguments.length === 3) {\n            obj[ink] = inv;\n        }\n        Object.keys(obj).forEach(k => {\n            el.style[rep(k)] = String(obj[k]);\n        });\n        return null;\n    }\n    function $path(el) {\n        function _path(e) {\n            if (e === document.body) {\n                return e.tagName;\n            } else if (e === window) {\n                return 'WINDOW';\n            } else if (e === document) {\n                return 'DOCUMENT';\n            }\n            if (e.id !== '') {\n                return 'id(\"' + e.id + '\")';\n            }\n            let ix = 0;\n            const siblings = e.parentNode ? e.parentNode.childNodes : [];\n            for (let i = 0; i < siblings.length; i++) {\n                const sibling = siblings[i];\n                if (sibling === e) {\n                    return _path(e.parentNode) + '/' + e.tagName + '[' + (ix + 1) + ']';\n                }\n                if (sibling.nodeType === 1 && sibling.tagName === e.tagName) {\n                    ix++;\n                }\n            }\n            return null;\n        }\n        return _path(el);\n    }\n    function $fromPath(path, doc) {\n        doc = doc || document;\n        const evaluator = new XPathEvaluator();\n        const result = evaluator.evaluate(path, doc.documentElement, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);\n        return result.singleNodeValue;\n    }\n    function $clean(html) {\n        if (typeof html !== 'string') {\n            html = html.innerHTML;\n        }\n        return (html || '').replace(/\\n/g, '').replace(/[\\t ]+</g, '<').replace(/\\>[\\t ]+</g, '><').replace(/\\>[\\t ]+$/g, '>');\n    }\n    return {\n        $: $,\n        $safeName: $safeName,\n        $remove: $remove,\n        $empty: $empty,\n        $getStyle: $getStyle,\n        $position: $position,\n        $parent: $parent,\n        $index: $index,\n        $selectRange: $selectRange,\n        $addClass: $addClass,\n        $removeClass: $removeClass,\n        $hasClass: $hasClass,\n        $escape: $escape,\n        $create: $create,\n        $createCSS: $createCSS,\n        $createJS: $createJS,\n        $isFormElement: $isFormElement,\n        $css: $css,\n        $path: $path,\n        $fromPath: $fromPath,\n        $clean: $clean\n    };\n});\ndefine('skylark-osjsv2-client/core/theme',[\n    './settings-manager',\n    './config',\n    '../vfs/file',\n    './package-manager',\n    '../utils/fs',\n    '../utils/compability',\n    '../utils/dom'\n], function (SettingsManager, a, FileMetadata, PackageManager, FS, Compability, DOM) {\n    'use strict';\n    class Theme {\n        constructor() {\n            const compability = Compability.getCompability();\n            this.settings = null;\n            this.$themeScript = null;\n            this.audioAvailable = !!compability.audio;\n            this.oggAvailable = !!compability.audioTypes.ogg;\n        }\n        init(VFS) { // modified by lwf\n            this.VFS = VFS;\n\n            this.settings = SettingsManager.instance('__theme__', {\n                enableSounds: true,\n                styleTheme: 'default',\n                soundTheme: 'default',\n                iconTheme: 'default',\n                sounds: {}\n            });\n        }\n        update(settings, settheme) {\n            this.settings.set(null, settings);\n            if (settheme) {\n                this.setTheme(settings);\n            }\n        }\n        destroy() {\n            this.$themeScript = DOM.$remove(this.$themeScript);\n        }\n        themeAction(action, args) {\n            const theme = this.getStyleTheme();\n            args = args || [];\n            try {\n                if (OSjs.Themes[theme]) {\n                    return OSjs.Themes[theme][action].apply(null, args);\n                }\n            } catch (e) {\n                console.warn(e);\n            }\n            return null;\n        }\n        _setBackground(settings) {\n            const isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\n            const typeMap = {\n                'image': 'normal',\n                'image-center': 'center',\n                'image-fill': 'fill',\n                'image-strech': 'strech'\n            };\n            let className = 'color';\n            let back = 'none';\n            if (settings.wallpaper && settings.background.match(/^image/)) {\n                back = settings.wallpaper;\n                className = typeMap[settings.background] || 'default';\n            }\n            if (back !== 'none') {\n                try {\n                    this.VFS.url(back).then(result => {\n                        back = \"url('\" + result + \"')\";\n                        document.body.style.backgroundImage = back;\n                        return true;\n                    });\n                } catch (e) {\n                    console.warn(e);\n                }\n            } else {\n                document.body.style.backgroundImage = back;\n            }\n            if (settings.backgroundColor) {\n                document.body.style.backgroundColor = settings.backgroundColor;\n            }\n            if (settings.fontFamily) {\n                document.body.style.fontFamily = settings.fontFamily;\n            }\n            if (isFirefox) {\n                document.body.style.backgroundAttachment = 'fixed';\n            } else {\n                document.body.style.backgroundAttachment = 'scroll';\n            }\n            document.body.setAttribute('data-background-style', className);\n        }\n        getThemeCSS(name) {\n            let root = a.getConfig('Connection.RootURI', '/');\n            if (name === null) {\n                return root + 'blank.css';\n            }\n            root = a.getConfig('Connection.ThemeURI');\n            return root + '/' + name + '.css';\n        }\n        setTheme(settings) {\n            this.themeAction('destroy');\n            this.setThemeScript(this.getThemeResource('theme.js'));\n            document.body.setAttribute('data-style-theme', settings.styleTheme);\n            document.body.setAttribute('data-icon-theme', settings.iconTheme);\n            document.body.setAttribute('data-sound-theme', settings.soundTheme);\n            document.body.setAttribute('data-animations', String(settings.animations));\n            this._setBackground(settings);\n            this.settings.set(null, settings);\n        }\n        setThemeScript(src) {\n            if (this.$themeScript) {\n                this.$themeScript = DOM.$remove(this.$themeScript);\n            }\n            if (src) {\n                this.$themeScript = DOM.$createJS(src, null, () => {\n                    this.themeAction('init');\n                });\n            }\n        }\n        getStyleTheme(returnMetadata, convert) {\n            const name = this.settings.get('styleTheme') || null;\n            if (returnMetadata) {\n                let found = null;\n                if (name) {\n                    this.getStyleThemes().forEach(function (t) {\n                        if (t && t.name === name) {\n                            found = t;\n                        }\n                    });\n                }\n                if (found && convert === true) {\n                    const tmpEl = document.createElement('div');\n                    tmpEl.style.visibility = 'hidden';\n                    tmpEl.style.position = 'fixed';\n                    tmpEl.style.top = '-10000px';\n                    tmpEl.style.left = '-10000px';\n                    tmpEl.style.width = '1em';\n                    tmpEl.style.height = '1em';\n                    document.body.appendChild(tmpEl);\n                    const wd = tmpEl.offsetWidth;\n                    tmpEl.parentNode.removeChild(tmpEl);\n                    if (typeof found.style.window.margin === 'string' && found.style.window.margin.match(/em$/)) {\n                        const marginf = parseFloat(found.style.window.margin);\n                        found.style.window.margin = marginf * wd;\n                    }\n                    if (typeof found.style.window.border === 'string' && found.style.window.border.match(/em$/)) {\n                        const borderf = parseFloat(found.style.window.border);\n                        found.style.window.border = borderf * wd;\n                    }\n                }\n                return found;\n            }\n            return name;\n        }\n        getThemeResource(name, type) {\n            name = name || null;\n            type = type || null;\n            const root = a.getConfig('Connection.ThemeURI');\n            function getName(str, theme) {\n                if (!str.match(/^\\//)) {\n                    if (type === 'base' || type === null) {\n                        str = `${ root }/${ theme }/${ str }`;\n                    } else {\n                        str = `${ root }/${ theme }/${ type }/${ str }`;\n                    }\n                }\n                return str;\n            }\n            if (name) {\n                const theme = this.getStyleTheme();\n                name = getName(name, theme);\n            }\n            return name;\n        }\n        getSound(name) {\n            name = name || null;\n            if (name && !name.match(/^(https?:)?\\//)) {\n                const theme = this.getSoundTheme();\n                const root = a.getConfig('Connection.SoundURI');\n                const ext = this.oggAvailable ? 'oga' : 'mp3';\n                name = `${ root }/${ theme }/${ name }.${ ext }`;\n            }\n            return name;\n        }\n        playSound(name, volume) {\n            const filename = this.getSoundFilename(name);\n            if (!filename) {\n                console.debug('playSound()', 'Cannot play sound, no compability or not enabled!');\n                return null;\n            }\n            if (typeof volume === 'undefined') {\n                volume = 1;\n            }\n            const f = this.getSound(filename);\n            console.debug('playSound()', name, filename, f, volume);\n            const a = new Audio(f);\n            a.volume = volume;\n            a.play();\n            return a;\n        }\n        getIcon(name, size) {\n            name = name || '';\n            size = size || '16x16';\n            if (!name.match(/^(https:?)?\\//)) {\n                const root = a.getConfig('Connection.IconURI');\n                const theme = this.getIconTheme();\n                name = `${ root }/${ theme }/${ size }/${ name }`;\n            }\n            return name;\n        }\n        getFileIcon(file, size, icon) {\n            icon = icon || 'mimetypes/text-x-preview.png';\n            if (typeof file === 'object' && !(file instanceof FileMetadata)) {\n                file = new FileMetadata(file);\n            }\n            if (!file.filename) {\n                throw new Error('Filename is required for getFileIcon()');\n            }\n            const map = [\n                {\n                    match: 'application/pdf',\n                    icon: 'mimetypes/x-office-document.png'\n                },\n                {\n                    match: 'application/zip',\n                    icon: 'mimetypes/package-x-generic.png'\n                },\n                {\n                    match: 'application/x-python',\n                    icon: 'mimetypes/text-x-script.png'\n                },\n                {\n                    match: 'application/x-lua',\n                    icon: 'mimetypes/text-x-script.png'\n                },\n                {\n                    match: 'application/javascript',\n                    icon: 'mimetypes/text-x-script.png'\n                },\n                {\n                    match: 'text/html',\n                    icon: 'mimetypes/text-html.png'\n                },\n                {\n                    match: 'text/xml',\n                    icon: 'mimetypes/text-html.png'\n                },\n                {\n                    match: 'text/css',\n                    icon: 'mimetypes/text-x-script.png'\n                },\n                {\n                    match: 'osjs/document',\n                    icon: 'mimetypes/x-office-document.png'\n                },\n                {\n                    match: 'osjs/draw',\n                    icon: 'mimetypes/image-x-generic.png'\n                },\n                {\n                    match: /^text\\//,\n                    icon: 'mimetypes/text-x-generic.png'\n                },\n                {\n                    match: /^audio\\//,\n                    icon: 'mimetypes/audio-x-generic.png'\n                },\n                {\n                    match: /^video\\//,\n                    icon: 'mimetypes/video-x-generic.png'\n                },\n                {\n                    match: /^image\\//,\n                    icon: 'mimetypes/image-x-generic.png'\n                },\n                {\n                    match: /^application\\//,\n                    icon: 'mimetypes/application-x-executable.png'\n                }\n            ];\n            if (file.type === 'dir') {\n                icon = 'places/folder.png';\n            } else if (file.type === 'trash') {\n                icon = 'places/user-trash.png';\n            } else if (file.type === 'application') {\n                const appname = FS.filename(file.path);\n                const meta = PackageManager.getPackage(appname);\n                if (meta) {\n                    if (!meta.icon.match(/^((https?:)|\\.)?\\//)) {\n                        return this.getIcon(meta.icon, size);\n                    }\n                    return PackageManager.getPackageResource(appname, meta.icon);\n                }\n            } else {\n                const mime = file.mime || 'application/octet-stream';\n                map.every(iter => {\n                    let match = false;\n                    if (typeof iter.match === 'string') {\n                        match = mime === iter.match;\n                    } else {\n                        match = mime.match(iter.match);\n                    }\n                    if (match) {\n                        icon = iter.icon;\n                        return false;\n                    }\n                    return true;\n                });\n            }\n            return this.getIcon(icon, size);\n        }\n        getIconTheme() {\n            return this.settings.get('iconTheme', 'default');\n        }\n        getSoundTheme() {\n            return this.settings.get('soundTheme', 'default');\n        }\n        getSoundFilename(k) {\n            if (!this.audioAvailable || !this.settings.get('enableSounds') || !k) {\n                return false;\n            }\n            const sounds = this.settings.get('sounds', {});\n            return sounds[k] || null;\n        }\n        getStyleThemes() {\n            return a.getConfig('Styles', []);\n        }\n        getSoundThemes() {\n            return a.getConfig('Sounds', []);\n        }\n        getIconThemes() {\n            return a.getConfig('Icons', []);\n        }\n    }\n    return new Theme();\n});\ndefine('skylark-osjsv2-client/helpers/hooks',['./event-handler'], function (EventHandler) {\n    'use strict';\n    let handler = new EventHandler('core-hooks', [\n        'initialize',\n        'initialized',\n        'sessionLoaded',\n        'shudown',\n        'processStart',\n        'processStarted',\n        'menuBlur'\n    ]);\n    function triggerHook(name, args, thisarg) {\n        if (handler) {\n            handler.emit(name, args, thisarg, true);\n        }\n    }\n    function addHook(name, fn) {\n        if (handler) {\n            return handler.on(name, fn);\n        }\n        return -1;\n    }\n    function removeHook(name, index) {\n        if (handler) {\n            return handler.off(name, index);\n        }\n        return false;\n    }\n    return {\n        triggerHook: triggerHook,\n        addHook: addHook,\n        removeHook: removeHook\n    };\n});\ndefine('skylark-osjsv2-client/helpers/promise-limit',[],function() {\r\n  function limiter (count) {\r\n    var outstanding = 0\r\n    var jobs = []\r\n\r\n    function remove () {\r\n      outstanding--\r\n\r\n      if (outstanding < count) {\r\n        dequeue()\r\n      }\r\n    }\r\n\r\n    function dequeue () {\r\n      var job = jobs.shift()\r\n      semaphore.queue = jobs.length\r\n\r\n      if (job) {\r\n        run(job.fn).then(job.resolve).catch(job.reject)\r\n      }\r\n    }\r\n\r\n    function queue (fn) {\r\n      return new Promise(function (resolve, reject) {\r\n        jobs.push({fn: fn, resolve: resolve, reject: reject})\r\n        semaphore.queue = jobs.length\r\n      })\r\n    }\r\n\r\n    function run (fn) {\r\n      outstanding++\r\n      try {\r\n        return Promise.resolve(fn()).then(function (result) {\r\n          remove()\r\n          return result\r\n        }, function (error) {\r\n          remove()\r\n          throw error\r\n        })\r\n      } catch (err) {\r\n        remove()\r\n        return Promise.reject(err)\r\n      }\r\n    }\r\n\r\n    var semaphore = function (fn) {\r\n      if (outstanding >= count) {\r\n        return queue(fn)\r\n      } else {\r\n        return run(fn)\r\n      }\r\n    }\r\n\r\n    return semaphore\r\n  }\r\n\r\n  function map (items, mapper) {\r\n    var failed = false\r\n\r\n    var limit = this\r\n\r\n    return Promise.all(items.map(function () {\r\n      var args = arguments\r\n      return limit(function () {\r\n        if (!failed) {\r\n          return mapper.apply(undefined, args).catch(function (e) {\r\n            failed = true\r\n            throw e\r\n          })\r\n        }\r\n      })\r\n    }))\r\n  }\r\n\r\n  function addExtras (fn) {\r\n    fn.queue = 0\r\n    fn.map = map\r\n    return fn\r\n  }\r\n\r\n  return function (count) {\r\n    if (count) {\r\n      return addExtras(limiter(count))\r\n    } else {\r\n      return addExtras(function (fn) {\r\n        return fn()\r\n      })\r\n    }\r\n  }\r\n});\r\n\ndefine('skylark-osjsv2-client/utils/preloader',[\n    '../helpers/promise-limit',\n    '../core/config',\n    'skylark-axios'\n], function (promiseLimit, a, axios) {\n    'use strict';\n    const getFileType = src => {\n        if (src.match(/\\.js$/i)) {\n            return 'javascript';\n        } else if (src.match(/\\.css$/i)) {\n            return 'stylesheet';\n        }\n        return 'unknown';\n    };\n    const getSource = src => {\n        if (src && !src.match(/^(\\/|file|https?)/)) {\n            return a.getBrowserPath(src);\n        }\n        return src;\n    };\n    const checkCss = path => {\n        let result = false;\n        (document.styleSheet || []).forEach((iter, i) => {\n            if (iter.href.indexOf(path) !== -1) {\n                result = true;\n                return false;\n            }\n            return true;\n        });\n        return result;\n    };\n    const handlers = {\n        javascript: src => new Promise((resolve, reject) => {\n            const el = document.createElement('script');\n            el.onreadystatechange = function () {\n                if (this.readyState === 'complete' || this.readyState === 'loaded') {\n                    resolve();\n                }\n            };\n            el.onerror = err => {\n                let error = new Error();\n                error.name = '<script> error';\n                error.message = 'Failed to load script';\n                reject(error);\n            };\n            el.onload = () => resolve();\n            el.src = src;\n            document.getElementsByTagName('head')[0].appendChild(el);\n        }),\n        stylesheet: src => new Promise((resolve, reject) => {\n            let timeout;\n            const onerror = str => {\n                clearTimeout(timeout);\n                let error = new Error();\n                error.name = '<link> error';\n                error.message = str;\n                reject(error);\n            };\n            const link = document.createElement('link');\n            link.setAttribute('rel', 'stylesheet');\n            link.setAttribute('type', 'text/css');\n            link.onload = () => resolve();\n            link.onerror = err => onerror('Failed to load link');\n            link.setAttribute('href', src);\n            document.getElementsByTagName('head')[0].appendChild(link);\n            timeout = setTimeout(() => {\n                onerror('Loading stylesheet timed out');\n            }, 30000);\n            setTimeout(() => {\n                if (checkCss(src)) {\n                    clearTimeout(timeout);\n                    resolve();\n                }\n            }, 10);\n        }),\n        html: src => new Promise((resolve, reject) => {\n            axios.get(src).then(result => {\n                return resolve(result.data);\n            }).catch(err => reject(err.message));\n        })\n    };\n    class Preloader {\n        constructor() {\n            this.cache = {};\n        }\n        clear() {\n            this.cache = {};\n        }\n        preload(preloads, args) {\n            args = args || {};\n            preloads = preloads.map(p => {\n                if (typeof p === 'string') {\n                    return {\n                        src: getSource(p),\n                        force: false,\n                        type: getFileType(p)\n                    };\n                } else {\n                    p.src = getSource(p.src);\n                    if (!p.type) {\n                        p.type = getFileType(p.src);\n                    }\n                }\n                return p;\n            }).filter(p => !!p.src);\n            console.group('Preloader.load()', preloads);\n            const limit = promiseLimit(args.max || 1);\n            const total = preloads.length;\n            const failed = [];\n            const loaded = [];\n            const data = [];\n            const done = (item, preloadData, yes) => {\n                if (typeof preloadData !== 'undefined') {\n                    data.push({\n                        item,\n                        data: preloadData\n                    });\n                }\n                if (args.cache !== false && typeof this.cache[item.src] === 'undefined') {\n                    this.cache[item.src] = preloadData;\n                }\n                loaded.push(item.src);\n                return yes();\n            };\n            const job = (item, index) => {\n                if (typeof args.progress === 'function') {\n                    args.progress(index, total);\n                }\n                if (handlers[item.type]) {\n                    return new Promise((yes, no) => {\n                        if (!args.force && this.cache[item.src]) {\n                            done(item, this.cache[item.src], yes);\n                            return;\n                        }\n                        handlers[item.type](item.src).then(preloadData => {\n                            return done(item, preloadData, yes);\n                        }).catch(e => {\n                            console.warn('Failed loading', item.src, e);\n                            failed.push(item.src);\n                            return yes();\n                        });\n                    });\n                }\n                return Promise.resolve();\n            };\n            return new Promise((resolve, reject) => {\n                Promise.all(preloads.map((iter, index) => {\n                    return limit(() => job(iter, index));\n                })).then(() => {\n                    console.groupEnd();\n                    return resolve({\n                        success: false,\n                        data: data,\n                        failed: failed,\n                        loaded: loaded\n                    });\n                }).catch(reject);\n            });\n        }\n    }\n    return new Preloader();\n});\ndefine('skylark-osjsv2-client/core/process',[\n    './connection',\n    '../helpers/event-handler',\n    './theme',\n    '../utils/fs',\n    './config',\n    '../utils/compability',\n    './locales',\n    '../helpers/hooks',\n    '../helpers/loader',\n    '../vfs/file',\n    '../utils/preloader',\n    './settings-manager',\n    './package-manager'\n], function (Connection, EventHandler, Theme, FS, Config, Compability, locales, hooks, Loader, FileMetadata, Preloader, SettingsManager, PackageManager) {\n    'use strict';\n    let alreadyLaunching = [];\n    let runningProcesses = [];\n    function _kill(pid, force) {\n        if (pid >= 0 && runningProcesses[pid]) {\n            try {\n                const res = runningProcesses[pid].destroy(force);\n                console.warn('Killing application', pid, res);\n                if (res !== false) {\n                    runningProcesses[pid] = null;\n                    return true;\n                }\n            } catch (e) {\n                console.warn(e);\n            }\n        }\n        return false;\n    }\n    function getLaunchObject(s) {\n        if (typeof s === 'string') {\n            const spl = s.split('@');\n            const name = spl[0];\n            let args = {};\n            if (typeof spl[1] !== 'undefined') {\n                try {\n                    args = JSON.parse(spl[1]);\n                } catch (e) {\n                }\n            }\n            s = {\n                name: name,\n                args: args\n            };\n        }\n        return s;\n    }\n    return class Process {\n        constructor(name, args, metadata) {\n            console.group('Process::constructor()', runningProcesses.length, arguments);\n            this.__pid = runningProcesses.push(this) - 1;\n            this.__pname = name;\n            this.__args = args || {};\n            this.__metadata = metadata || {};\n            this.__started = new Date();\n            this.__destroyed = false;\n            this.__evHandler = new EventHandler(name, [\n                'message',\n                'attention',\n                'hashchange',\n                'api',\n                'destroy',\n                'destroyWindow',\n                'vfs',\n                'vfs:mount',\n                'vfs:unmount',\n                'vfs:mkdir',\n                'vfs:write',\n                'vfs:move',\n                'vfs:copy',\n                'vfs:delete',\n                'vfs:upload',\n                'vfs:update'\n            ]);\n            this.__label = this.__metadata.name;\n            this.__path = this.__metadata.path;\n            this.__scope = this.__metadata.scope || 'system';\n            this.__iter = this.__metadata.className;\n            console.groupEnd();\n        }\n        destroy() {\n            if (!this.__destroyed) {\n                this.__destroyed = true;\n                console.group('Process::destroy()', this.__pid, this.__pname);\n                this._emit('destroy', []);\n                if (this.__evHandler) {\n                    this.__evHandler = this.__evHandler.destroy();\n                }\n                if (this.__pid >= 0) {\n                    runningProcesses[this.__pid] = null;\n                }\n                console.groupEnd();\n                return true;\n            }\n            return false;\n        }\n        _onMessage(msg, obj, opts) {\n            opts = opts || {};\n            let sourceId = opts.source;\n            if (sourceId && typeof sourceId === 'object') {\n                if (sourceId instanceof Process) {\n                    sourceId = sourceId.__pid;\n                } else if (sourceId._app) {\n                    sourceId = sourceId._app ? sourceId._app.__pid : -1;\n                }\n            }\n            if (this.__evHandler && sourceId !== this.__pid) {\n                console.debug('Process::_onMessage()', msg, obj, opts, this.__pid, this.__pname);\n                this.__evHandler.emit('message', [\n                    msg,\n                    obj,\n                    opts\n                ]);\n                if (msg.substr(0, 3) === 'vfs') {\n                    this.__evHandler.emit('vfs', [\n                        msg,\n                        obj,\n                        opts\n                    ]);\n                }\n                this.__evHandler.emit(msg, [\n                    obj,\n                    opts,\n                    msg\n                ]);\n            }\n        }\n        _emit(k, args) {\n            return this.__evHandler ? this.__evHandler.emit(k, args) : null;\n        }\n        _on(k, func) {\n            return this.__evHandler ? this.__evHandler.on(k, func, this) : null;\n        }\n        _off(k, idx) {\n            if (this.__evHandler) {\n                this.__evHandler.off(k, idx);\n            }\n        }\n        _api(method, args, options) {\n            if (typeof options === 'boolean') {\n                options = { indicator: options };\n            } else if (typeof options !== 'object') {\n                options = {};\n            }\n            this._emit('api', [method]);\n            return new Promise((resolve, reject) => {\n                Connection.request('application', {\n                    application: this.__iter,\n                    path: this.__path,\n                    method: method,\n                    args: args\n                }, options).then(res => {\n                    if (!this.__destroyed) {\n                        resolve(res);\n                        return true;\n                    }\n                    console.warn('Process::_api()', 'INGORED RESPONSE: Process was closed');\n                    return false;\n                }).catch(err => {\n                    if (!this.__destroyed) {\n                        reject(err instanceof Error ? err : new Error(err));\n                    }\n                });\n            });\n        }\n        _getArgument(k) {\n            return typeof this.__args[k] === 'undefined' ? null : this.__args[k];\n        }\n        _getArguments() {\n            return this.__args;\n        }\n        _getResource(src, vfspath) {\n            return PackageManager.getPackageResource(this, src, vfspath);\n        }\n        _setArgument(k, v) {\n            this.__args[k] = v;\n        }\n        static kill(pid) {\n            return _kill(pid);\n        }\n        static killAll(match) {\n            let matcher = () => true;\n            if (match) {\n                matcher = match instanceof RegExp ? p => p.__pname.match(match) : p => p.__pname === match;\n            }\n            this.getProcesses().filter(p => matcher(p)).forEach(p => _kill(p.__pid, true));\n            runningProcesses = [];\n        }\n        static message(msg, obj, opts) {\n            opts = opts || {};\n            console.debug('Process::message()', msg, obj, opts);\n            let filter = opts.filter || (() => true);\n            if (typeof filter === 'string') {\n                const s = filter;\n                filter = p => {\n                    return p.__pname === s;\n                };\n            }\n            this.getProcesses().filter(filter).forEach(p => p._onMessage(msg, obj, opts));\n        }\n        static getProcess(name, first) {\n            if (typeof name === 'number') {\n                return runningProcesses[name];\n            }\n            const found = this.getProcesses().filter(p => {\n                return p.__pname === name;\n            });\n            return first ? found[0] : found;\n        }\n        static getProcesses() {\n            return runningProcesses.filter(p => !!p);\n        }\n        static reload(n) {\n            if (!(n instanceof Array)) {\n                n = [n];\n            }\n            n.map(name => this.getProcess(name, true)).filter(p => !!p).forEach(p => {\n                let promise = null;\n                let data = p._getSessionData();\n                let args = {};\n                let name;\n                try {\n                    name = p.__pname;\n                    promise = p.destroy();\n                } catch (e) {\n                    console.warn('Process::reload()', e.stack, e);\n                }\n                if (data !== null) {\n                    args = data.args;\n                    args.__resume__ = true;\n                    args.__windows__ = data.windows || [];\n                }\n                args.__preload__ = { force: true };\n                if (!(promise instanceof Promise)) {\n                    promise = Promise.resolve(true);\n                }\n                if (name) {\n                    promise.then(() => {\n                        return setTimeout(() => {\n                            this.create(name, args);\n                        }, 500);\n                    });\n                }\n            });\n        }\n        static create(name, args, onconstruct) {\n            args = args || {};\n            onconstruct = onconstruct || function () {\n            };\n            const hash = name + JSON.stringify(args);\n            if (alreadyLaunching.indexOf(hash) !== -1) {\n                return Promise.resolve(null);\n            }\n            alreadyLaunching.push(hash);\n            const init = () => {\n                if (!name) {\n                    throw new Error('Cannot Process::create() witout a application name');\n                }\n                const compability = Compability.getCompability();\n                const metadata = PackageManager.getPackage(name);\n                const alreadyRunning = Process.getProcess(name, true);\n                if (!metadata) {\n                    throw new Error(locales._('ERR_APP_LAUNCH_MANIFEST_FAILED_FMT', name));\n                }\n                const compabilityFailures = (metadata.compability || []).filter(c => {\n                    if (typeof compability[c] !== 'undefined') {\n                        return !compability[c];\n                    }\n                    return false;\n                });\n                if (compabilityFailures.length) {\n                    throw new Error(locales._('ERR_APP_LAUNCH_COMPABILITY_FAILED_FMT', name, compabilityFailures.join(', ')));\n                }\n                if (metadata.singular === true && alreadyRunning) {\n                    console.warn('Process::create()', 'detected that this application is a singular and already running...');\n                    alreadyRunning._onMessage('attention', args);\n                    return Promise.resolve(alreadyRunning);\n                }\n                hooks.triggerHook('processStart', [\n                    name,\n                    args\n                ]);\n                Loader.create('Main.launch.' + name, {\n                    title: locales._('LBL_STARTING') + ' ' + metadata.name,\n                    icon: Theme.getIcon(metadata.icon, '16x16')\n                });\n                let pargs = { max: metadata.preloadParallel === true ? Config.getConfig('Connection.PreloadParallel') : metadata.preloadParallel };\n                if (args.__preload__) {\n                    pargs = Object.assign(pargs, args.__preload__);\n                    delete args.__preload__;\n                }\n                return new Promise((resolve, reject) => {\n                    const onerror = e => {\n                        console.warn(e);\n                        return reject(new Error(e));\n                    };\n                    Preloader.preload(metadata.preload, pargs).then(result => {\n                        if (result.failed.length) {\n                            return onerror(locales._('ERR_APP_PRELOAD_FAILED_FMT', name, result.failed.join(',')));\n                        }\n                        if (typeof OSjs.Applications[name] === 'undefined') {\n                            return onerror(new Error(locales._('ERR_APP_RESOURCES_MISSING_FMT', name)));\n                        }\n                        let instance;\n                        try {\n                            const ResolvedPackage = OSjs.Applications[name];\n                            instance = new ResolvedPackage(args, metadata);\n                            onconstruct(instance, metadata);\n                        } catch (e) {\n                            return onerror(e);\n                        }\n                        try {\n                            const settings = SettingsManager.get(instance.__pname) || {};\n                            instance.init(settings, metadata);\n                            hooks.triggerHook('processStarted', [{\n                                    application: instance,\n                                    name: name,\n                                    args: args,\n                                    settings: settings,\n                                    metadata: metadata\n                                }]);\n                        } catch (e) {\n                            return onerror(e);\n                        }\n                        return resolve(instance);\n                    }).catch(onerror);\n                });\n            };\n            const onerror = err => {\n                OSjs.error(locales._('ERR_APP_LAUNCH_FAILED'), locales._('ERR_APP_LAUNCH_FAILED_FMT', name), err, err, true);\n            };\n            return new Promise((resolve, reject) => {\n                console.group('Process::create()', name, args);\n                const remove = () => {\n                    console.groupEnd();\n                    const i = alreadyLaunching.indexOf(hash);\n                    if (i >= 0) {\n                        alreadyLaunching.splice(i, 1);\n                    }\n                    Loader.destroy('Main.launch.' + name);\n                };\n                const fail = e => {\n                    Loader.destroy('Main.launch.' + name);\n                    remove();\n                    onerror(e);\n                    return reject(e);\n                };\n                try {\n                    init().then(resolve).catch(fail).finally(remove);\n                } catch (e) {\n                    fail(e);\n                }\n            });\n        }\n        static createFromArray(list, onconstruct) {\n            list = list || [];\n            onconstruct = onconstruct || function () {\n            };\n            console.info('Process::createFromArray()', list);\n            return Promise.each(list, s => {\n                return new Promise((resolve, reject) => {\n                    s = getLaunchObject(s);\n                    if (s.name) {\n                        try {\n                            this.create(s.name, s.args, (instance, metadata) => {\n                                onconstruct(instance, metadata, s.name, s.args);\n                            }).then(resolve).catch(reject);\n                        } catch (e) {\n                            reject(e);\n                        }\n                    } else {\n                        resolve();\n                    }\n                });\n            });\n        }\n        static createFromFile(file, args) {\n            file = new FileMetadata(file);\n            args = Object.assign({ file: file }, args || {});\n            if (args.args) {\n                Object.keys(args.args).forEach(i => {\n                    args[i] = args.args[i];\n                });\n            }\n            if (!file.path) {\n                throw new Error('Cannot open file without a path');\n            }\n            console.info('Process::createFromFile()', file, args);\n            if (file.mime === 'osjs/application') {\n                return this.create(FS.filename(file.path));\n            } else if (file.type === 'dir') {\n                const fm = SettingsManager.instance('DefaultApplication').get('dir', 'ApplicationFileManager');\n                return this.create(fm, { path: file.path });\n            }\n            return new Promise((resolve, reject) => {\n                const val = SettingsManager.get('DefaultApplication', file.mime);\n                let pack = PackageManager.getPackagesByMime(file.mime);\n                if (!args.forceList && val) {\n                    if (PackageManager.getPackage(val)) {\n                        console.debug('Process::createFromFile()', 'default application', val);\n                        pack = [val];\n                    }\n                }\n                if (pack.length === 0) {\n                    OSjs.error(locales._('ERR_FILE_OPEN'), locales._('ERR_FILE_OPEN_FMT', file.path), locales._('ERR_APP_MIME_NOT_FOUND_FMT', file.mime));\n                    reject(new Error(locales._('ERR_APP_MIME_NOT_FOUND_FMT', file.mime)));\n                } else if (pack.length === 1) {\n                    this.create(pack[0], args).then(resolve).catch(reject);\n                } else {\n                    const DialogWindow = OSjs.require('core/dialog');\n                    DialogWindow.default.create('ApplicationChooser', {\n                        file: file,\n                        list: pack\n                    }, (ev, btn, result) => {\n                        if (btn === 'ok') {\n                            this.create(result.name, args);\n                            SettingsManager.set('DefaultApplication', file.mime, result.useDefault ? result.name : null, true).then(resolve).catch(err => {\n                                reject(typeof err === 'string' ? new Error(err) : err);\n                            });\n                        }\n                    });\n                }\n            });\n        }\n    };\n});\ndefine('skylark-osjsv2-client/vfs/mountpoint',[\n    '../core/process',\n    '../core/locales'\n], function ( Process, a) {\n    'use strict';\n    function createMatch(m, sname) {\n        if (typeof m === 'string') {\n            return new RegExp(m);\n        } else if (!m) {\n            return new RegExp('^' + (sname + '://').replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&'));\n        }\n        return m;\n    }\n    return class Mountpoint {\n        constructor(options) {\n            this.options = Object.assign({\n                name: null,\n                root: null,\n                match: null,\n                enabled: true,\n                readOnly: false,\n                transport: null,\n                visible: true,\n                searchable: false,\n                dynamic: true,\n                internal: false,\n                special: false,\n                options: {}\n            }, options);\n            if (!this.options.transport) {\n                throw new Error('No transport was defined for mountpoint ' + this.options.name);\n            }\n            if (!this.options.name) {\n                throw new Error(a._('ERR_VFSMODULE_INVALID_CONFIG_FMT'));\n            }\n            const sname = this.options.name.replace(/\\s/g, '-').toLowerCase();\n            const defaults = {\n                icon: 'devices/drive-harddisk.png',\n                name: sname,\n                title: this.options.name,\n                description: this.options.description || this.options.name,\n                root: sname + ':///',\n                match: createMatch(this.options.match, sname)\n            };\n            Object.keys(defaults).forEach(k => {\n                if (!this.options[k]) {\n                    this.options[k] = defaults[k];\n                }\n            });\n            this.name = sname;\n            this.isMounted = false;\n        }\n        mount(options) {\n            options = Object.assign({ notify: true }, options || {});\n            if (!this.isMounted && !this.option('special')) {\n                if (options.notify) {\n                    Process.message('vfs:mount', this.option('name'), { source: null });\n                }\n                this.isMounted = true;\n            }\n            return Promise.resolve();\n        }\n        unmount(options) {\n            options = Object.assign({ notify: true }, options || {});\n            if (this.isMounted && !this.option('special')) {\n                if (options.notify) {\n                    Process.message('vfs:unmount', this.option('name'), { source: null });\n                }\n                this.isMounted = false;\n            }\n            return Promise.resolve();\n        }\n        mounted() {\n            return this.isMounted;\n        }\n        enabled() {\n            return this.option('enabled');\n        }\n        option(name) {\n            return this.options[name];\n        }\n        isReadOnly() {\n            return this.option('readOnly');\n        }\n        setMounted(mounted) {\n            this.isMounted = mounted === true;\n        }\n        request(method, args, options) {\n            const transport = this.option('transport');\n            if (transport) {\n                return transport.request(method, args, options, this);\n            }\n            return Promise.reject(new Error(a._('ERR_VFSMODULE_NOT_FOUND_FMT', test)));\n        }\n    };\n});\ndefine('skylark-osjsv2-client/core/mount-manager',[\n    '../vfs/mountpoint',\n    './locales',\n    './config'\n], function (Mountpoint, a, b) {\n    'use strict';\n\n    class MountManager {\n        constructor() {\n            this.inited = false;\n            this.mountpoints = [];\n//            this.transports = loadTransports();\n        }\n        init(loadTransports) { // modified by lwf\n            if (this.inited) {\n                return Promise.resolve();\n            }\n            this.transports = loadTransports();\n            this.inited = true;\n            const config = b.getConfig('VFS.Mountpoints', {});\n            const enabled = Object.keys(config).filter(name => {\n                return config[name].enabled !== false;\n            });\n            return Promise.each(enabled, name => {\n                return new Promise(resolve => {\n                    const iter = Object.assign({\n                        name: name,\n                        dynamic: false\n                    }, config[name]);\n                    this.add(iter, true, { notify: false }).then(resolve).catch(e => {\n                        console.warn('Failed to init VFS Mountpoint', name, iter, String(e));\n                        return resolve(false);\n                    });\n                });\n            });\n        }\n        addList(mountPoints) {\n            return Promise.each(mountPoints, iter => this.add(iter));\n        }\n        add(point, mount, options) {\n            try {\n                if (!(point instanceof Mountpoint)) {\n                    if (typeof point.transport === 'string') {\n                        const T = this.transports[point.transport];\n                        if (!T) {\n                            return Promise.reject(new Error('No such transport: ' + point.transport));\n                        }\n                        point.transport = new T();\n                    }\n                    point = new Mountpoint(point);\n                }\n                const found = this.mountpoints.filter(m => {\n                    if (m.option('name') === point.option('name')) {\n                        return true;\n                    }\n                    if (m.option('root') === point.option('root')) {\n                        return true;\n                    }\n                    return false;\n                });\n                if (found.length) {\n                    return Promise.reject(new Error(a._('ERR_VFSMODULE_ALREADY_MOUNTED_FMT', point.option('name'))));\n                }\n                this.mountpoints.push(point);\n            } catch (e) {\n                return Promise.reject(e);\n            }\n            console.info('Mounting', point);\n            return new Promise((resolve, reject) => {\n                if (mount) {\n                    point.mount().then(() => {\n                        return resolve(point);\n                    }).catch(reject);\n                } else {\n                    resolve(point);\n                }\n            });\n        }\n        remove(moduleName, options) {\n            const module = this.getModule(moduleName);\n            const index = this.getModule(moduleName, true);\n            if (module) {\n                return new Promise((resolve, reject) => {\n                    module.unmount(options).then(res => {\n                        if (index !== -1) {\n                            this.mountpoints.splice(index, 1);\n                        }\n                        return resolve(res);\n                    }).catch(reject);\n                });\n            }\n            return Promise.reject(new Error(a._('ERR_VFSMODULE_NOT_MOUNTED_FMT', moduleName)));\n        }\n        getModules(filter) {\n            filter = Object.assign({}, {\n                visible: true,\n                special: false\n            }, filter);\n            return this.mountpoints.filter(mount => {\n                if (mount.enabled() && mount.option('visible')) {\n                    const hits = Object.keys(filter).filter(filterName => {\n                        return mount.option(filterName) === filter[filterName];\n                    });\n                    return hits.length > 0;\n                }\n                return false;\n            });\n        }\n        getModuleFromPath(test) {\n            return this.mountpoints.find(mount => {\n                if (typeof test === 'string' && mount.enabled()) {\n                    if (mount.option('match') && test.match(mount.option('match'))) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n        }\n        getModule(name, idx) {\n            const m = idx ? 'findIndex' : 'find';\n            return this.mountpoints[m](i => i.option('name') === name);\n        }\n        getTransport(name) {\n            return this.transports[name];\n        }\n    }\n    return new MountManager();\n});\ndefine('skylark-osjsv2-client/vfs/filedataurl',[],function () {\n    'use strict';\n    return class FileDataURL {\n        constructor(dataURL) {\n            this.dataURL = dataURL;\n        }\n        toBase64() {\n            return this.data.split(',')[1];\n        }\n        toString() {\n            return this.dataURL;\n        }\n    };\n});\ndefine('skylark-osjsv2-client/vfs/fs',[\n    '../utils/fs',\n    './file',\n    './filedataurl',\n    '../core/process',\n    '../core/mount-manager',\n    '../core/package-manager',\n    '../core/settings-manager',\n    '../core/connection',\n    '../core/locales'\n], function (FS, FileMetadata, FileDataURL, Process, MountManager, PackageManager, SettingsManager, Connection, a) {\n    'use strict';\n    let watches = [];\n    function noop(err, res) {\n        if (err) {\n            console.error('VFS operation without callback caused an error', err);\n        } else {\n            console.warn('VFS operation without callback', res);\n        }\n    }\n    function hasAlias(item, retm) {\n        const module = MountManager.getModuleFromPath(item.path);\n        if (module) {\n            const match = module.option('match');\n            const options = module.option('options');\n            if (options && options.alias) {\n                return retm ? module : item.path.replace(match, options.alias);\n            }\n        }\n        return false;\n    }\n    function checkMetadataArgument(item, err, checkRo) {\n        if (typeof item === 'string') {\n            item = new FileMetadata(item);\n        } else if (typeof item === 'object' && item.path) {\n            item = new FileMetadata(item);\n        }\n        if (!(item instanceof FileMetadata)) {\n            throw new TypeError(err || a._('ERR_VFS_EXPECT_FILE'));\n        }\n        const alias = hasAlias(item);\n        if (alias) {\n            item.path = alias;\n        }\n        const mountpoint = MountManager.getModuleFromPath(item.path);\n        if (!mountpoint) {\n            throw new Error(a._('ERR_VFSMODULE_NOT_FOUND_FMT', item.path));\n        }\n        if (checkRo && mountpoint.isReadOnly()) {\n            throw new Error(a._('ERR_VFSMODULE_READONLY_FMT', mountpoint.name));\n        }\n        return item;\n    }\n    function hasSameTransport(src, dest) {\n        const msrc = MountManager.getModuleFromPath(src.path);\n        const mdst = MountManager.getModuleFromPath(dest.path);\n        if (!msrc || !mdst || msrc === mdst) {\n            return true;\n        }\n        if (msrc && mdst && (msrc.option('internal') && mdst.option('internal'))) {\n            return true;\n        }\n        return msrc.option('transport') === mdst.option('tranport');\n    }\n    function existsWrapper(item, options) {\n        options = options || {};\n        if (options.overwrite) {\n            return Promise.resolve();\n        }\n        return new Promise((resolve, reject) => {\n            exists(item).then(result => {\n                if (result) {\n                    return reject(new Error(a._('ERR_VFS_FILE_EXISTS')));\n                }\n                return resolve();\n            }).catch(error => {\n                if (error) {\n                    console.warn('existsWrapper() error', error);\n                }\n                reject(error);\n            });\n        });\n    }\n    function createBackLink(item, result, alias, oitem) {\n        const path = item.path.split('://')[1].replace(/\\/+/g, '/').replace(/^\\/?/, '/');\n        let isOnRoot = path === '/';\n        if (alias) {\n            isOnRoot = oitem.path === alias.root;\n        }\n        if (!isOnRoot) {\n            const foundBack = result.some(function (iter) {\n                return iter.filename === '..';\n            });\n            if (!foundBack) {\n                return new FileMetadata({\n                    filename: '..',\n                    path: FS.dirname(item.path),\n                    mime: null,\n                    size: 0,\n                    type: 'dir'\n                });\n            }\n        }\n        return false;\n    }\n    function checkWatches(msg, obj) {\n        watches.forEach(function (w) {\n            const checkPath = w.path;\n            function _check(f) {\n                if (w.type === 'dir') {\n                    return f.path.substr(0, checkPath.length) === checkPath;\n                }\n                return f.path === checkPath;\n            }\n            let wasTouched = false;\n            if (obj.destination) {\n                wasTouched = _check(obj.destination);\n                if (!wasTouched) {\n                    wasTouched = _check(obj.source);\n                }\n            } else {\n                wasTouched = _check(obj);\n            }\n            if (wasTouched) {\n                w.cb(msg, obj);\n            }\n        });\n    }\n    function findAlias(item) {\n        const mm = MountManager;\n        let found = null;\n        mm.getModules().forEach(function (iter) {\n            if (!found && iter.option('options').alias) {\n                const a = iter.option('options').alias;\n                if (item.path.substr(0, a.length) === a) {\n                    found = iter;\n                }\n            }\n        });\n        return found;\n    }\n    function convertWriteData(data, mime) {\n        const convertTo = (m, d, resolve, reject) => {\n            FS[m](d, mime, function (error, response) {\n                if (error) {\n                    reject(new Error(error));\n                } else {\n                    resolve(response);\n                }\n            });\n        };\n        return new Promise((resolve, reject) => {\n            try {\n                if (typeof data === 'string') {\n                    if (data.length) {\n                        return convertTo('textToAb', data, resolve, reject);\n                    }\n                } else {\n                    if (data instanceof FileDataURL) {\n                        return convertTo('dataSourceToAb', data.toString(), resolve, reject);\n                    } else if (window.Blob && data instanceof window.Blob) {\n                        return convertTo('blobToAb', data, resolve, reject);\n                    }\n                }\n            } catch (e) {\n                return reject(e);\n            }\n            return resolve(data);\n        });\n    }\n    function requestWrapper(mountpoint, method, args, options, appRef) {\n        console.info('VFS operation', ...arguments);\n        if (!mountpoint) {\n            return Promise.reject(new Error(a._('ERR_VFSMODULE_INVALID')));\n        }\n        return new Promise((resolve, reject) => {\n            mountpoint.request(method, args, options).then(response => {\n                return Connection.instance.onVFSRequestCompleted(mountpoint, method, args, response, appRef).then(() => resolve(response)).catch(reject);\n            }).catch(reject);\n        });\n    }\n    function performRequest(method, args, options, test, appRef, errorStr) {\n        return new Promise((resolve, reject) => {\n            if (options && !(options instanceof Object)) {\n                reject(new TypeError(a._('ERR_ARGUMENT_FMT', 'VFS::' + method, 'options', 'Object', typeof options)));\n                return;\n            }\n            const mountpoint = MountManager.getModuleFromPath(test);\n            if (!mountpoint) {\n                reject(new Error(a._('ERR_VFSMODULE_NOT_FOUND_FMT', test)));\n                return;\n            }\n            requestWrapper(mountpoint, method, args, options, appRef).then(resolve).catch(reject);\n        });\n    }\n    function broadcastMessage(msg, item, appRef) {\n        function _message(i) {\n            Process.message(msg, i, { source: appRef ? appRef.__pid : null });\n            checkWatches(msg, item);\n        }\n        const aliased = function () {\n            function _transform(i) {\n                if (i instanceof FileMetadata) {\n                    const n = new FileMetadata(i);\n                    const alias = findAlias(n);\n                    if (alias) {\n                        n.path = n.path.replace(alias.option('options').alias, alias.option('root'));\n                        return n;\n                    }\n                }\n                return false;\n            }\n            if (item instanceof FileMetadata) {\n                return _transform(item);\n            } else if (item && item.destination && item.source) {\n                return {\n                    source: _transform(item.source),\n                    destination: _transform(item.destination)\n                };\n            }\n            return null;\n        }();\n        _message(item);\n        const tuple = aliased.source || aliased.destination;\n        if (aliased && (aliased instanceof FileMetadata || tuple)) {\n            if (tuple) {\n                aliased.source = aliased.source || item.source;\n                aliased.destination = aliased.destination || item.destination;\n            }\n            _message(aliased);\n        }\n    }\n    function find(item, args, options) {\n        options = options || {};\n        if (arguments.length < 2) {\n            return Promise.reject(new Error(a._('ERR_VFS_NUM_ARGS')));\n        }\n        try {\n            item = checkMetadataArgument(item);\n        } catch (e) {\n            return Promise.reject(e);\n        }\n        return performRequest('find', [\n            item,\n            args\n        ], options, item.path, null, 'ERR_VFSMODULE_FIND_FMT');\n    }\n    function scandir(item, options) {\n        const vfsSettings = SettingsManager.get('VFS');\n        options = options || {};\n        if (arguments.length < 1) {\n            return Promise.reject(new Error(a._('ERR_VFS_NUM_ARGS')));\n        }\n        const oitem = new FileMetadata(item);\n        const alias = hasAlias(oitem, true);\n        try {\n            item = checkMetadataArgument(item);\n        } catch (e) {\n            return Promise.reject(e);\n        }\n        return new Promise((resolve, reject) => {\n            performRequest('scandir', [item], options, item.path, null, 'ERR_VFSMODULE_SCANDIR_FMT').then(result => {\n                if (result instanceof Array) {\n                    result = FS.filterScandir(result, options, vfsSettings);\n                    if (alias) {\n                        result = result.map(function (iter) {\n                            const isShortcut = iter.shortcut === true;\n                            const niter = new FileMetadata(iter);\n                            if (!isShortcut) {\n                                const str = iter.path.replace(/\\/?$/, '');\n                                const opt = alias.option('options') || {};\n                                const tmp = opt.alias.replace(/\\/?$/, '');\n                                niter.path = FS.pathJoin(alias.option('root'), str.replace(tmp, ''));\n                            }\n                            return niter;\n                        });\n                    }\n                    if (options.backlink !== false) {\n                        const back = createBackLink(item, result, alias, oitem);\n                        if (back) {\n                            result.unshift(back);\n                        }\n                    }\n                }\n                return resolve(result);\n            }).catch(reject);\n        });\n    }\n    function write(item, data, options, appRef) {\n        options = options || {};\n        if (arguments.length < 2) {\n            return Promise.reject(new Error(a._('ERR_VFS_NUM_ARGS')));\n        }\n        try {\n            item = checkMetadataArgument(item, null, true);\n        } catch (e) {\n            return Promise.reject(e);\n        }\n        return new Promise((resolve, reject) => {\n            const mountpoint = MountManager.getModuleFromPath(item.path);\n            convertWriteData(data, item.mime).then(ab => {\n                requestWrapper(mountpoint, 'write', [\n                    item,\n                    ab\n                ], options, appRef).then(resolve).catch(e => {\n                    reject(new Error(a._('ERR_VFSMODULE_WRITE_FMT', e)));\n                });\n                return true;\n            }).catch(e => {\n                reject(new Error(a._('ERR_VFSMODULE_WRITE_FMT', e)));\n            });\n        });\n    }\n    function read(item, options) {\n        options = options || {};\n        if (arguments.length < 1) {\n            return Promise.reject(new Error(a._('ERR_VFS_NUM_ARGS')));\n        }\n        try {\n            item = checkMetadataArgument(item);\n        } catch (e) {\n            return Promise.reject(e);\n        }\n        return new Promise((resolve, reject) => {\n            const mountpoint = MountManager.getModuleFromPath(item.path);\n            requestWrapper(mountpoint, 'read', [item], options).then(response => {\n                if (options.type) {\n                    const types = {\n                        datasource: () => new Promise((yes, no) => {\n                            FS.abToDataSource(response, item.mime, function (error, dataSource) {\n                                return error ? no(error) : yes(dataSource);\n                            });\n                        }),\n                        text: () => new Promise((yes, no) => {\n                            FS.abToText(response, item.mime, function (error, text) {\n                                return error ? no(error) : yes(text);\n                            });\n                        }),\n                        blob: () => new Promise((yes, no) => {\n                            FS.abToBlob(response, item.mime, function (error, blob) {\n                                return error ? no(error) : yes(blob);\n                            });\n                        }),\n                        json: () => new Promise((yes, no) => {\n                            FS.abToText(response, item.mime, function (error, text) {\n                                let jsn;\n                                if (typeof text === 'string') {\n                                    try {\n                                        jsn = JSON.parse(text);\n                                    } catch (e) {\n                                        console.warn('VFS::read()', 'readToJSON', e.stack, e);\n                                    }\n                                }\n                                return error ? no(error) : yes(jsn);\n                            });\n                        })\n                    };\n                    const type = options.type.toLowerCase();\n                    if (types[type]) {\n                        return types[type]().then(resolve).catch(reject);\n                    }\n                }\n                return resolve(response);\n            }).catch(e => {\n                reject(new Error(a._('ERR_VFSMODULE_READ_FMT', e)));\n            });\n        });\n    }\n    function copy(src, dest, options, appRef) {\n        options = options || {};\n        if (arguments.length < 2) {\n            return Promise.reject(new Error(a._('ERR_VFS_NUM_ARGS')));\n        }\n        try {\n            src = checkMetadataArgument(src, a._('ERR_VFS_EXPECT_SRC_FILE'));\n            dest = checkMetadataArgument(dest, a._('ERR_VFS_EXPECT_DST_FILE'), true);\n        } catch (e) {\n            return Promise.reject(e);\n        }\n        options = Object.assign({}, {\n            type: 'binary',\n            dialog: null\n        }, options);\n        options.arrayBuffer = true;\n        function dialogProgress(prog) {\n            if (options.dialog) {\n                options.dialog.setProgress(prog);\n            }\n        }\n        const promise = new Promise((resolve, reject) => {\n            existsWrapper(dest, options).then(() => {\n                const sourceMountpoint = MountManager.getModuleFromPath(src.path);\n                const destMountpoint = MountManager.getModuleFromPath(dest.path);\n                if (hasSameTransport(src, dest)) {\n                    requestWrapper(sourceMountpoint, 'copy', [\n                        src,\n                        dest\n                    ], options, appRef).then(() => {\n                        dialogProgress(100);\n                        return resolve(true);\n                    }).catch(reject);\n                } else {\n                    requestWrapper(sourceMountpoint, 'read', [src], options, appRef).then(data => {\n                        dialogProgress(50);\n                        return requestWrapper(destMountpoint, 'write', [\n                            dest,\n                            data\n                        ], options, appRef).then(res => {\n                            dialogProgress(100);\n                            return resolve(res);\n                        }).catch(reject);\n                    }).catch(reject);\n                }\n                return true;\n            }).catch(reject);\n        });\n        return new Promise((resolve, reject) => {\n            promise.then(resolve).catch(e => {\n                dialogProgress(100);\n                reject(new Error(a._('ERR_VFSMODULE_COPY_FMT', e)));\n            });\n        });\n    }\n    function move(src, dest, options, appRef) {\n        options = options || {};\n        if (arguments.length < 2) {\n            return Promise.reject(new Error(a._('ERR_VFS_NUM_ARGS')));\n        }\n        try {\n            src = checkMetadataArgument(src, a._('ERR_VFS_EXPECT_SRC_FILE'));\n            dest = checkMetadataArgument(dest, a._('ERR_VFS_EXPECT_DST_FILE'), true);\n        } catch (e) {\n            return Promise.reject(e);\n        }\n        function dialogProgress(prog) {\n            if (options.dialog) {\n                options.dialog.setProgress(prog);\n            }\n        }\n        const promise = new Promise((resolve, reject) => {\n            existsWrapper(dest, options).then(() => {\n                const sourceMountpoint = MountManager.getModuleFromPath(src.path);\n                const destMountpoint = MountManager.getModuleFromPath(dest.path);\n                if (hasSameTransport(src, dest)) {\n                    requestWrapper(sourceMountpoint, 'move', [\n                        src,\n                        dest\n                    ], options, appRef).then(() => {\n                        dialogProgress(100);\n                        return resolve(true);\n                    }).catch(reject);\n                } else {\n                    requestWrapper(sourceMountpoint, 'read', [src], options, appRef).then(data => {\n                        dialogProgress(50);\n                        return requestWrapper(destMountpoint, 'write', [\n                            dest,\n                            data\n                        ], options, appRef).then(res => {\n                            return requestWrapper(sourceMountpoint, 'unlink', [src], options, appRef).then(res => {\n                                dialogProgress(100);\n                                return resolve(res);\n                            }).catch(reject);\n                        }).catch(reject);\n                    }).catch(reject);\n                }\n                return true;\n            }).catch(reject);\n        });\n        return new Promise((resolve, reject) => {\n            promise.then(resolve).catch(e => {\n                dialogProgress(100);\n                reject(new Error(a._('ERR_VFSMODULE_MOVE_FMT', e)));\n            });\n        });\n    }\n    function rename(src, dest) {\n        return move(...arguments);\n    }\n    function unlink(item, options, appRef) {\n        options = options || {};\n        if (arguments.length < 1) {\n            return Promise.reject(new Error(a._('ERR_VFS_NUM_ARGS')));\n        }\n        try {\n            item = checkMetadataArgument(item, null, true);\n        } catch (e) {\n            return Promise.reject(e);\n        }\n        return new Promise((resolve, reject) => {\n            performRequest('unlink', [item], options, item.path, appRef, 'ERR_VFSMODULE_UNLINK_FMT').then(response => {\n                const pkgdir = SettingsManager.instance('PackageManager').get('PackagePaths', []);\n                const found = pkgdir.some(function (i) {\n                    const chkdir = new FileMetadata(i);\n                    const idir = FS.dirname(item.path);\n                    return idir === chkdir.path;\n                });\n                if (found) {\n                    PackageManager.generateUserMetadata(function () {\n                    });\n                }\n                return resolve(response);\n            }).catch(reject);\n        });\n    }\n    function mkdir(item, options, appRef) {\n        options = options || {};\n        if (arguments.length < 1) {\n            return Promise.reject(new Error(a._('ERR_VFS_NUM_ARGS')));\n        }\n        try {\n            item = checkMetadataArgument(item, null, true);\n        } catch (e) {\n            return Promise.reject(e);\n        }\n        return performRequest('mkdir', [item], options, item.path, appRef, 'ERR_VFSMODULE_MKDIR_FMT');\n    }\n    function exists(item) {\n        if (arguments.length < 1) {\n            return Promise.reject(new Error(a._('ERR_VFS_NUM_ARGS')));\n        }\n        try {\n            item = checkMetadataArgument(item);\n        } catch (e) {\n            return Promise.reject(e);\n        }\n        return performRequest('exists', [item], {}, item.path, null, 'ERR_VFSMODULE_EXISTS_FMT');\n    }\n    function fileinfo(item) {\n        if (arguments.length < 1) {\n            return Promise.reject(new Error(a._('ERR_VFS_NUM_ARGS')));\n        }\n        try {\n            item = checkMetadataArgument(item);\n        } catch (e) {\n            return Promise.reject(e);\n        }\n        return performRequest('fileinfo', [item], {}, item.path, null, 'ERR_VFSMODULE_FILEINFO_FMT');\n    }\n    function url(item, options) {\n        options = options || {};\n        if (arguments.length < 1) {\n            return Promise.reject(new Error(a._('ERR_VFS_NUM_ARGS')));\n        }\n        try {\n            item = checkMetadataArgument(item);\n        } catch (e) {\n            return Promise.reject(e);\n        }\n        return performRequest('url', [item], options, item.path, null, 'ERR_VFSMODULE_URL_FMT');\n    }\n    function upload(args, options, appRef) {\n        args = args || {};\n        if (arguments.length < 1) {\n            return Promise.reject(new Error(a._('ERR_VFS_NUM_ARGS')));\n        }\n        if (!args.files) {\n            return Promise.reject(new Error(a._('ERR_VFS_UPLOAD_NO_FILES')));\n        }\n        if (!args.destination) {\n            return Promise.reject(new Error(a._('ERR_VFS_UPLOAD_NO_DEST')));\n        }\n        const dest = new FileMetadata(args.destination);\n        const mountpoint = MountManager.getModuleFromPath(args.destination);\n        return new Promise((resolve, reject) => {\n            Promise.all(args.files.map(f => {\n                const filename = f instanceof window.File ? f.name : f.filename;\n                const fileDest = new FileMetadata(FS.pathJoin(args.destination, filename));\n                return new Promise((resolve, reject) => {\n                    existsWrapper(fileDest, options).then(() => {\n                        return requestWrapper(mountpoint, 'upload', [\n                            dest,\n                            f\n                        ], options, appRef).then(resolve).catch(reject);\n                    }).catch(reject);\n                });\n            })).then(resolve).catch(e => {\n                reject(new Error(a._('ERR_VFS_UPLOAD_FAIL_FMT', e)));\n            });\n        });\n    }\n    function download(file) {\n        if (arguments.length < 1) {\n            return Promise.reject(new Error(a._('ERR_VFS_NUM_ARGS')));\n        }\n        try {\n            file = checkMetadataArgument(file);\n        } catch (e) {\n            return Promise.reject(e);\n        }\n        if (!file.path) {\n            return Promise.reject(new Error(a._('ERR_VFS_DOWNLOAD_NO_FILE')));\n        }\n        const promise = new Promise((resolve, reject) => {\n            const mountpoint = MountManager.getModuleFromPath(file);\n            requestWrapper(mountpoint, 'download', [file], {}).then(() => {\n                if (mountpoint.option('internal')) {\n                    mountpoint.download(file).then(resolve).catch(reject);\n                } else {\n                    mountpoint.read(file).then(resolve).catch(reject);\n                }\n                return true;\n            });\n        });\n        return new Promise((resolve, reject) => {\n            promise.then(resolve).catch(e => {\n                reject(new Error(a._('ERR_VFS_DOWNLOAD_FAILED', e)));\n            });\n        });\n    }\n    function trash(item) {\n        if (arguments.length < 1) {\n            return Promise.reject(new Error(a._('ERR_VFS_NUM_ARGS')));\n        }\n        try {\n            item = checkMetadataArgument(item);\n        } catch (e) {\n            return Promise.reject(e);\n        }\n        return performRequest('trash', [item], {}, item.path, null, 'ERR_VFSMODULE_TRASH_FMT');\n    }\n    function untrash(item) {\n        if (arguments.length < 1) {\n            return Promise.reject(new Error(a._('ERR_VFS_NUM_ARGS')));\n        }\n        try {\n            item = checkMetadataArgument(item);\n        } catch (e) {\n            return Promise.reject(e);\n        }\n        return performRequest('untrash', [item], {}, item.path, null, 'ERR_VFSMODULE_UNTRASH_FMT');\n    }\n    function emptyTrash() {\n        return performRequest('emptyTrash', [], {}, null, null, 'ERR_VFSMODULE_EMPTYTRASH_FMT');\n    }\n    function freeSpace(item) {\n        if (arguments.length < 1) {\n            return Promise.reject(new Error(a._('ERR_VFS_NUM_ARGS')));\n        }\n        try {\n            item = checkMetadataArgument(item);\n        } catch (e) {\n            return Promise.reject(e);\n        }\n        const m = MountManager.getModuleFromPath(item.path, false, true);\n        return performRequest('freeSpace', [m.option('root')], {}, item.path, null, 'ERR_VFSMODULE_FREESPACE_FMT');\n    }\n    function watch(item, callback) {\n        callback = callback || noop;\n        if (arguments.length < 2) {\n            callback(a._('ERR_VFS_NUM_ARGS'));\n            return -1;\n        }\n        try {\n            item = checkMetadataArgument(item);\n        } catch (e) {\n            return Promise.reject(e);\n        }\n        return Promise.resolve(watches.push({\n            path: item.path,\n            type: item.type,\n            cb: callback\n        }) - 1);\n    }\n    function unwatch(idx) {\n        if (typeof watches[idx] !== 'undefined') {\n            delete watches[idx];\n        }\n    }\n    function triggerWatch(method, arg, appRef) {\n        broadcastMessage('vfs:' + method, arg, appRef);\n    }\n    return {\n        broadcastMessage: broadcastMessage,\n        find: find,\n        scandir: scandir,\n        write: write,\n        read: read,\n        copy: copy,\n        move: move,\n        rename: rename,\n        unlink: unlink,\n        mkdir: mkdir,\n        exists: exists,\n        fileinfo: fileinfo,\n        url: url,\n        upload: upload,\n        download: download,\n        trash: trash,\n        untrash: untrash,\n        emptyTrash: emptyTrash,\n        freeSpace: freeSpace,\n        watch: watch,\n        unwatch: unwatch,\n        triggerWatch: triggerWatch\n    };\n});\ndefine('skylark-osjsv2-client/core/search-engine',[\n    './package-manager',\n    './settings-manager',\n    '../vfs/file',\n    './theme',\n    '../vfs/fs'\n], function (PackageManager, SettingsManager, FileMetadata, Theme, VFS) {\n    'use strict';\n    function search(list, query) {\n        const result = [];\n        list.forEach(obj => {\n            let found = false;\n            obj.fields.forEach(s => {\n                if (found) {\n                    return;\n                }\n                const qry = String(query).toLowerCase();\n                const str = String(s).toLowerCase();\n                if (str.indexOf(qry) !== -1) {\n                    result.push(obj.value);\n                    found = true;\n                }\n            });\n        });\n        return result;\n    }\n    function SearchObject(obj) {\n        Object.keys(obj).forEach(k => {\n            this[k] = obj[k];\n        });\n    }\n    const ApplicationModule = function () {\n        function query() {\n            const packages = PackageManager.getPackages(); \n            return Object.keys(packages).map(pn => {\n                const p = packages[pn];\n                return new SearchObject({\n                    value: {\n                        title: p.name,\n                        description: p.description,\n                        icon: Theme.getFileIcon(new FileMetadata('applications:///' + p.className, 'application'), '16x16'),\n                        launch: {\n                            application: pn,\n                            args: {}\n                        }\n                    },\n                    fields: [\n                        p.className,\n                        p.name,\n                        p.description\n                    ]\n                });\n            });\n        }\n        return {\n            search: function (q, args, settings) {\n                if (settings.applications) {\n                    let results = search(query(), q);\n                    if (args.limit && results.length > args.dlimit) {\n                        results = results.splice(0, args.dlimit);\n                    }\n                    return Promise.resolve(results);\n                }\n                return Promise.resolve([]);\n            },\n            reindex: function (args) {\n                return Promise.resolve(true);\n            },\n            destroy: function () {\n            }\n        };\n    }();\n    const FilesystemModule = {\n        search: function (q, args, settings, cb) {\n            if (!settings.files || !settings.paths) {\n                return Promise.resolve([]);\n            }\n            let found = [];\n            const append = result => {\n                if (result) {\n                    found = found.concat(result.map(iter => {\n                        return {\n                            title: iter.filename,\n                            description: iter.path,\n                            icon: Theme.getFileIcon(new FileMetadata(iter)),\n                            launch: {\n                                application: '',\n                                args: '',\n                                file: iter\n                            }\n                        };\n                    }));\n                }\n            };\n            return new Promise((resolve, reject) => {\n                Promise.each(settings.paths, e => {\n                    return new Promise(n => {\n                        VFS.find(e, {\n                            query: q,\n                            limit: args.limit ? args.dlimit : 0,\n                            recursive: args.recursive\n                        }).then(result => {\n                            return n(append(result));\n                        }).catch(error => {\n                            console.warn(error);\n                            n();\n                        });\n                    });\n                }).then(() => {\n                    return resolve(found);\n                }).catch(reject);\n            });\n        },\n        reindex: function (args) {\n            return Promise.resolve();\n        },\n        destroy: function () {\n        }\n    };\n    class SearchEngine {\n        constructor() {\n            this.settings = {};\n            this.inited = false;\n            this.modules = [\n                ApplicationModule,\n                FilesystemModule\n            ];\n        }\n        init() {\n            console.debug('SearchEngine::init()');\n            if (!this.inited) {\n                this.settings = SettingsManager.get('SearchEngine') || {};\n                this.inited = true;\n            }\n            return Promise.resolve();\n        }\n        destroy() {\n            console.debug('SearchEngine::destroy()');\n            this.modules.forEach(m => {\n                m.destroy();\n            });\n            this.modules = [];\n            this.settings = {};\n            this.inited = false;\n        }\n        search(q, args) {\n            let result = [];\n            let errors = [];\n            args = Object.assign({}, {\n                recursive: false,\n                limit: 0,\n                dlimit: 0\n            }, args);\n            if (args.limit) {\n                args.dlimit = args.limit;\n            }\n            return new Promise((resolve, reject) => {\n                Promise.each(this.modules, module => {\n                    return new Promise((next, reject) => {\n                        console.debug('SearchEngine::search()', '=>', module);\n                        if (!args.limit || args.dlimit > 0) {\n                            module.search(q, args, this.settings).then(res => {\n                                args.dlimit -= res.length;\n                                result = result.concat(res);\n                                next();\n                            }).catch(err => {\n                                console.warn(err);\n                                errors.push(err instanceof Error ? err.toString() : err);\n                                next();\n                            });\n                        } else {\n                            next();\n                        }\n                    });\n                }).then(() => resolve(result)).catch(reject);\n            });\n        }\n        reindex(args) {\n            const errors = [];\n            return Promise.each(this.modules, module => {\n                return new Promise(next => {\n                    console.debug('SearchEngine::reindex()', '=>', module);\n                    module.reindex(args).then(next).catch(err => {\n                        if (err) {\n                            errors.push(err);\n                        }\n                        next();\n                    });\n                });\n            });\n        }\n        configure(opts, save) {\n        }\n    }\n    return new SearchEngine();\n});\ndefine('skylark-osjsv2-client/core/authenticator',[\n    './locales',\n    './config',\n    './connection',\n    './settings-manager',\n    './package-manager'\n], function ( a, b, Connection, SettingsManager, PackageManager) {\n    'use strict';\n    let _instance;\n    return class Authenticator {\n        static get instance() {\n            return _instance;\n        }\n        constructor() {\n            _instance = this;\n            this.userData = {\n                id: 0,\n                username: 'root',\n                name: 'root user',\n                groups: ['admin']\n            };\n            this.loggedIn = false;\n            this.isStandalone = false;\n        }\n        init() {\n            return this.createUI();\n        }\n        destroy() {\n            _instance = null;\n        }\n        getUser() {\n            return Object.assign({}, this.userData);\n        }\n        isLoggedIn() {\n            return this.isLoggedIn;\n        }\n        login(data) {\n            return new Promise((resolve, reject) => {\n                Connection.request('login', data).then(result => {\n                    return resolve(result ? result : a._('ERR_LOGIN_INVALID'));\n                }).catch(error => {\n                    reject(new Error(a._('ERR_LOGIN_FMT', error)));\n                });\n            });\n        }\n        logout() {\n            return new Promise((resolve, reject) => {\n                Connection.request('logout', {}).then(result => {\n                    return resolve(!!result);\n                }).catch(err => {\n                    reject(new Error('An error occured: ' + err));\n                });\n            });\n        }\n        checkPermission(group) {\n            const user = this.getUser();\n            const userGroups = user.groups || [];\n            if (!(group instanceof Array)) {\n                group = [group];\n            }\n            if (userGroups.indexOf('admin') === -1) {\n                return !!group.every(g => userGroups.indexOf(g) >= 0);\n            }\n            return true;\n        }\n        requestLogin(data) {\n            return new Promise((resolve, reject) => {\n                this.login(data).then(res => {\n                    return this.onLogin(res).then(resolve).catch(reject);\n                }).catch(reject);\n            });\n        }\n        onLogin(data) {\n            let userSettings = data.userSettings;\n            if (!userSettings || userSettings instanceof Array) {\n                userSettings = {};\n            }\n            this.userData = data.userData;\n            function getLocale() {\n                let curLocale = b.getConfig('Locale');\n                let detectedLocale = b.getUserLocale();\n                if (b.getConfig('LocaleOptions.AutoDetect', true) && detectedLocale) {\n                    console.info('Auto-detected user locale via browser', detectedLocale);\n                    curLocale = detectedLocale;\n                }\n                let result = SettingsManager.get('CoreWM');\n                if (!result) {\n                    try {\n                        result = userSettings.CoreWM;\n                    } catch (e) {\n                    }\n                }\n                return result ? result.language || curLocale : curLocale;\n            }\n            document.getElementById('LoadingScreen').style.display = 'block';\n            a.setLocale(getLocale());\n            SettingsManager.init(userSettings);\n            if (data.blacklistedPackages) {\n                PackageManager.setBlacklist(data.blacklistedPackages);\n            }\n            this.loggedIn = true;\n            return Promise.resolve(true);\n        }\n        createUI() {\n            this._renderUI();\n            return this._createUI();\n        }\n        _renderUI(html) {\n            if (!html) {\n                html = require('osjs-scheme-loader!login.html');\n            }\n            const tempNode = document.createElement('div');\n            tempNode.innerHTML = html;\n            tempNode.childNodes.forEach(n => {\n                const nn = n.cloneNode(true);\n                if ([\n                        'STYLE',\n                        'SCRIPT'\n                    ].indexOf(n.tagName) === -1) {\n                    document.body.appendChild(nn);\n                } else {\n                    document.querySelector('head').appendChild(nn);\n                }\n            });\n        }\n        _createUI() {\n            const container = document.getElementById('Login');\n            const login = document.getElementById('LoginForm');\n            const u = document.getElementById('LoginUsername');\n            const p = document.getElementById('LoginPassword');\n            const s = document.getElementById('LoginSubmit');\n            function _restore() {\n                s.removeAttribute('disabled');\n                u.removeAttribute('disabled');\n                p.removeAttribute('disabled');\n            }\n            function _lock() {\n                s.setAttribute('disabled', 'disabled');\n                u.setAttribute('disabled', 'disabled');\n                p.setAttribute('disabled', 'disabled');\n            }\n            container.style.display = 'block';\n            _restore();\n            return new Promise((resolve, reject) => {\n                login.onsubmit = ev => {\n                    _lock();\n                    if (ev) {\n                        ev.preventDefault();\n                    }\n                    this.requestLogin({\n                        username: u.value,\n                        password: p.value\n                    }).then(() => {\n                        container.parentNode.removeChild(container);\n                        return resolve();\n                    }).catch(err => {\n                        alert(err);\n                        _restore();\n                    });\n                };\n            });\n        }\n    };\n});\ndefine('skylark-osjsv2-client/utils/keycodes',[],function () {\n    'use strict';\n    const Keycodes = function () {\n        const list = {\n            F1: 112,\n            F2: 113,\n            F3: 114,\n            F4: 115,\n            F6: 118,\n            F7: 119,\n            F8: 120,\n            F9: 121,\n            F10: 122,\n            F11: 123,\n            F12: 124,\n            TILDE: 220,\n            GRAVE: 192,\n            CMD: 17,\n            LSUPER: 91,\n            RSUPER: 92,\n            DELETE: 46,\n            INSERT: 45,\n            HOME: 36,\n            END: 35,\n            PGDOWN: 34,\n            PGUP: 33,\n            PAUSE: 19,\n            BREAK: 19,\n            CAPS_LOCK: 20,\n            SCROLL_LOCK: 186,\n            BACKSPACE: 8,\n            SPACE: 32,\n            TAB: 9,\n            ENTER: 13,\n            ESC: 27,\n            LEFT: 37,\n            RIGHT: 39,\n            UP: 38,\n            DOWN: 40\n        };\n        for (let n = 33; n <= 126; n++) {\n            list[String.fromCharCode(n)] = n;\n        }\n        return Object.freeze(list);\n    }();\n    return Keycodes;\n});\ndefine('skylark-osjsv2-client/utils/events',[\n    './keycodes'\n], function (Keycodes) {\n    'use strict';\n    function getRealEventName(evName) {\n        let realName = evName;\n        if (evName !== 'mousewheel' && evName.match(/^mouse/)) {\n            if (window.PointerEvent) {\n                realName = evName.replace(/^mouse/, 'pointer');\n            } else if (window.MSPointerEvent) {\n                const tmpName = evName.replace(/^mouse/, '');\n                realName = 'MSPointer' + tmpName.charAt(0).toUpperCase() + tmpName.slice(1).toLowerCase();\n            }\n        }\n        return realName;\n    }\n    function getEventList(str) {\n        return str.replace(/\\s/g, '').split(',');\n    }\n    function mousePosition(ev) {\n        if (ev.detail && typeof ev.detail.x !== 'undefined' && typeof ev.detail.y !== 'undefined') {\n            return {\n                x: ev.detail.x,\n                y: ev.detail.y\n            };\n        }\n        const touch = ev.touches || ev.changedTouches || [];\n        if (touch.length) {\n            return {\n                x: touch[0].clientX,\n                y: touch[0].clientY\n            };\n        }\n        return {\n            x: ev.clientX,\n            y: ev.clientY\n        };\n    }\n    function mouseButton(ev) {\n        if (typeof ev.button !== 'undefined') {\n            if (ev.button === 0) {\n                return 'left';\n            } else if (ev.button === 1) {\n                return 'middle';\n            }\n            return 'right';\n        }\n        if (ev.which === 2 || ev.which === 4) {\n            return 'middle';\n        } else if (ev.which === 1) {\n            return 'left';\n        }\n        return 'right';\n    }\n    const keyCombination = function () {\n        const modifiers = {\n            CTRL: ev => {\n                return ev.ctrlKey;\n            },\n            SHIFT: ev => {\n                return ev.shiftKey;\n            },\n            ALT: ev => {\n                return ev.altKey;\n            },\n            META: ev => {\n                return ev.metaKey;\n            }\n        };\n        function getKeyName(keyCode) {\n            let result = false;\n            Object.keys(Keycodes).forEach(k => {\n                if (!result && keyCode === Keycodes[k]) {\n                    result = k;\n                }\n            });\n            return result;\n        }\n        return function (ev, checkFor) {\n            const checks = checkFor.toUpperCase().split('+');\n            const checkMods = {\n                CTRL: false,\n                SHIFT: false,\n                ALT: false\n            };\n            const checkKeys = [];\n            checks.forEach(f => {\n                if (modifiers[f]) {\n                    checkMods[f] = true;\n                } else {\n                    checkKeys.push(f);\n                }\n            });\n            const hasmod = Object.keys(checkMods).every(f => {\n                const fk = !!modifiers[f](ev);\n                return checkMods[f] === fk;\n            });\n            const haskey = checkKeys.every(f => {\n                return getKeyName(ev.keyCode) === f;\n            });\n            return hasmod && haskey;\n        };\n    }();\n    const $bind = function () {\n        function makeFakeEvent(name, ev) {\n            const pos = mousePosition(ev);\n            const nev = Object.assign({\n                clientX: pos.x,\n                clientY: pos.y,\n                x: pos.x,\n                y: pos.y\n            }, ev);\n            return new MouseEvent(name, nev);\n        }\n        function addEventHandler(el, n, t, callback, handler, useCapture, realType) {\n            const args = [\n                t,\n                handler,\n                useCapture\n            ];\n            el.addEventListener.apply(el, args);\n            el._boundEvents[n].push({\n                realType: realType,\n                args: args,\n                callback: callback\n            });\n        }\n        function createWheelHandler(el, n, t, callback, useCapture) {\n            function _wheel(ev) {\n                const pos = mousePosition(ev);\n                const direction = ev.detail < 0 || ev.wheelDelta > 0 ? 1 : -1;\n                pos.z = direction;\n                return callback(ev, pos);\n            }\n            addEventHandler(el, n, 'mousewheel', callback, _wheel, useCapture, 'mousewheel');\n            addEventHandler(el, n, 'DOMMouseScroll', callback, _wheel, useCapture, 'DOMMouseScroll');\n        }\n        function createClick(el, n, t, callback, useCapture) {\n            let cancelled = false;\n            let timeout;\n            let firstTarget;\n            let firstEvent;\n            const tempMove = () => cancelled = true;\n            function cancel() {\n                clearTimeout(timeout);\n                firstTarget = null;\n                cancelled = true;\n                window.removeEventListener('touchmove', tempMove);\n            }\n            function tempEnd(ev) {\n                clearTimeout(timeout);\n                window.removeEventListener('touchmove', tempMove);\n                if (!cancelled && ev.target === firstTarget) {\n                    const newEvent = makeFakeEvent('click', firstEvent);\n                    Object.defineProperty(newEvent, 'target', {\n                        value: firstEvent.target,\n                        enumerable: false\n                    });\n                    el.dispatchEvent(newEvent);\n                }\n            }\n            function tempStart(ev) {\n                firstEvent = ev;\n                firstTarget = ev.target;\n                timeout = setTimeout(() => {\n                    cancelled = true;\n                }, 300);\n                window.addEventListener('touchmove', tempMove);\n            }\n            addEventHandler(el, n, 'touchcancel', callback, cancel, useCapture, 'dblclick');\n            addEventHandler(el, n, 'touchstart', callback, tempStart, useCapture, 'click');\n            addEventHandler(el, n, 'touchend', callback, tempEnd, useCapture, 'click');\n        }\n        function createDoubleClick(el, n, t, callback, useCapture) {\n            let count = 0;\n            let cancelled = false;\n            let firstTarget;\n            let firstEvent;\n            let debounce;\n            const tempMove = () => cancelled = true;\n            function cancel() {\n                firstTarget = null;\n                cancelled = true;\n                count = 0;\n                window.removeEventListener('toucmove', tempMove);\n            }\n            function tempEnd() {\n                window.removeEventListener('touchmove', tempMove);\n                debounce = setTimeout(cancel, 680);\n            }\n            function tempStart(ev) {\n                window.addEventListener('touchmove', tempMove);\n                clearTimeout(debounce);\n                if (count === 0) {\n                    firstEvent = ev;\n                    firstTarget = ev.target;\n                } else if (count > 0) {\n                    if (ev.target !== firstTarget) {\n                        cancel();\n                        return;\n                    }\n                    if (!cancelled) {\n                        ev.preventDefault();\n                        ev.stopPropagation();\n                        ev.target.dispatchEvent(makeFakeEvent('dblclick', firstEvent));\n                    }\n                }\n                cancelled = false;\n                count++;\n            }\n            addEventHandler(el, n, 'touchcancel', callback, cancel, useCapture, 'dblclick');\n            addEventHandler(el, n, 'touchstart', callback, tempStart, useCapture, 'dblclick');\n            addEventHandler(el, n, 'touchend', callback, tempEnd, useCapture, 'dblclick');\n        }\n        function createContextMenu(el, n, t, callback, useCapture) {\n            let cancelled = false;\n            let timeout;\n            const tempMove = () => cancelled = true;\n            function cancel() {\n                clearTimeout(timeout);\n                cancelled = true;\n                window.removeEventListener('toucmove', tempMove);\n            }\n            function tempEnd(ev) {\n                cancelled = true;\n                clearTimeout(timeout);\n                window.removeEventListener('touchmove', tempMove);\n            }\n            function tempStart(ev) {\n                timeout = setTimeout(() => {\n                    if (!cancelled) {\n                        ev.preventDefault();\n                        ev.target.dispatchEvent(makeFakeEvent('contextmenu', ev));\n                    }\n                }, 300);\n                window.addEventListener('touchmove', tempMove);\n            }\n            addEventHandler(el, n, 'touchcancel', callback, cancel, useCapture, 'contextmenu');\n            addEventHandler(el, n, 'touchstart', callback, tempStart, useCapture, 'contextmenu');\n            addEventHandler(el, n, 'touchend', callback, tempEnd, useCapture, 'contextmenu');\n        }\n        const customEvents = {\n            mousewheel: createWheelHandler,\n            click: createClick,\n            dblclick: createDoubleClick,\n            contextmenu: createContextMenu\n        };\n        return function Utils_$bind(el, evName, callback, useCapture, noBind) {\n            useCapture = useCapture === true;\n            if (arguments.length < 3) {\n                throw new Error('$bind expects 3 or more arguments');\n            }\n            if (typeof evName !== 'string') {\n                throw new Error('Given event type was not a string');\n            }\n            if (typeof callback !== 'function') {\n                throw new Error('Given callback was not a function');\n            }\n            function addEvent(nsType, type) {\n                type = getRealEventName(type);\n                addEventHandler(el, nsType, type, callback, function mouseEventHandler(ev) {\n                    if (!window.OSjs) {\n                        return;\n                    }\n                    if (noBind) {\n                        callback(ev, mousePosition(ev));\n                    }\n                    callback.call(el, ev, mousePosition(ev));\n                }, useCapture);\n                if (type === 'click' && el.tagName === 'BUTTON') {\n                    return;\n                }\n                if (customEvents[type]) {\n                    customEvents[type](el, nsType, type, function fakeEventHandler(ev) {\n                        if (noBind) {\n                            callback(ev, mousePosition(ev));\n                        }\n                        callback.call(el, ev, mousePosition(ev));\n                    }, useCapture);\n                }\n            }\n            function initNamespace(ns) {\n                if (!el._boundEvents) {\n                    el._boundEvents = {};\n                }\n                if (!el._boundEvents[ns]) {\n                    el._boundEvents[ns] = [];\n                }\n                const found = el._boundEvents[ns].filter(iter => {\n                    return iter.callback === callback;\n                });\n                return found.length === 0;\n            }\n            getEventList(evName).forEach(ns => {\n                const type = ns.split(':')[0];\n                if (!initNamespace(ns)) {\n                    console.warn('Utils::$bind()', 'This event was already bound, skipping');\n                    return;\n                }\n                addEvent(ns, type);\n            });\n        };\n    }();\n    function $unbind(el, evName, callback, useCapture) {\n        function unbindNamed(type) {\n            if (el._boundEvents) {\n                const list = el._boundEvents || {};\n                if (list[type]) {\n                    for (let i = 0; i < list[type].length; i++) {\n                        let iter = list[type][i];\n                        if (callback && iter.callback !== callback) {\n                            continue;\n                        }\n                        el.removeEventListener.apply(el, iter.args);\n                        list[type].splice(i, 1);\n                        i--;\n                    }\n                }\n            }\n        }\n        function unbindAll() {\n            if (el._boundEvents) {\n                Object.keys(el._boundEvents).forEach(type => {\n                    unbindNamed(type);\n                });\n                delete el._boundEvents;\n            }\n        }\n        if (el) {\n            if (evName) {\n                getEventList(evName).forEach(type => {\n                    unbindNamed(type);\n                });\n            } else {\n                unbindAll();\n            }\n        }\n    }\n    return {\n        mousePosition: mousePosition,\n        mouseButton: mouseButton,\n        keyCombination: keyCombination,\n        $bind: $bind,\n        $unbind: $unbind\n    };\n});\ndefine('skylark-osjsv2-client/helpers/window-behaviour',[\n    '../utils/dom',\n    '../utils/events',\n    '../core/theme'\n], function (DOM, Events, Theme) {\n    'use strict';\n    class BehaviourState {\n        constructor(wm, win, action, mousePosition) {\n            this.win = win;\n            this.$element = win._$element;\n            this.$top = win._$top;\n            this.$handle = win._$resize;\n            this.rectWorkspace = wm.getWindowSpace(true);\n            this.rectWindow = {\n                x: win._position.x,\n                y: win._position.y,\n                w: win._dimension.w,\n                h: win._dimension.h,\n                r: win._dimension.w + win._position.x,\n                b: win._dimension.h + win._position.y\n            };\n            const theme = Object.assign({}, Theme.getStyleTheme(true, true));\n            if (!theme.style) {\n                theme.style = {\n                    'window': {\n                        margin: 0,\n                        border: 0\n                    }\n                };\n            }\n            this.theme = {\n                topMargin: theme.style.window.margin || 0,\n                borderSize: theme.style.window.border || 0\n            };\n            this.snapping = {\n                cornerSize: wm.getSetting('windowCornerSnap') || 0,\n                windowSize: wm.getSetting('windowSnap') || 0\n            };\n            this.action = action;\n            this.moved = false;\n            this.direction = null;\n            this.startX = mousePosition.x;\n            this.startY = mousePosition.y;\n            this.minWidth = win._properties.min_width;\n            this.minHeight = win._properties.min_height;\n            const windowRects = [];\n            wm.getWindows().forEach(w => {\n                if (w && w._wid !== win._wid) {\n                    const pos = w._position;\n                    const dim = w._dimension;\n                    const rect = {\n                        left: pos.x - this.theme.borderSize,\n                        top: pos.y - this.theme.borderSize,\n                        width: dim.w + this.theme.borderSize * 2,\n                        height: dim.h + this.theme.borderSize * 2 + this.theme.topMargin\n                    };\n                    rect.right = rect.left + rect.width;\n                    rect.bottom = pos.y + dim.h + this.theme.topMargin + this.theme.borderSize;\n                    windowRects.push(rect);\n                }\n            });\n            this.snapRects = windowRects;\n        }\n        getRect() {\n            const win = this.win;\n            return {\n                left: win._position.x,\n                top: win._position.y,\n                width: win._dimension.w,\n                height: win._dimension.h\n            };\n        }\n        calculateDirection() {\n            const dir = DOM.$position(this.$handle);\n            const dirX = this.startX - dir.left;\n            const dirY = this.startY - dir.top;\n            const dirD = 20;\n            const checks = {\n                nw: dirX <= dirD && dirY <= dirD,\n                n: dirX > dirD && dirY <= dirD,\n                w: dirX <= dirD && dirY >= dirD,\n                ne: dirX >= dir.width - dirD && dirY <= dirD,\n                e: dirX >= dir.width - dirD && dirY > dirD,\n                se: dirX >= dir.width - dirD && dirY >= dir.height - dirD,\n                sw: dirX <= dirD && dirY >= dir.height - dirD\n            };\n            let direction = 's';\n            Object.keys(checks).forEach(function (k) {\n                if (checks[k]) {\n                    direction = k;\n                }\n            });\n            this.direction = direction;\n        }\n    }\n    function createWindowBehaviour(win, wm) {\n        let current = null;\n        let newRect = {};\n        function onWindowResize(ev, mousePosition, dx, dy) {\n            if (!current || !current.direction) {\n                return false;\n            }\n            let nw, nh, nl, nt;\n            (function () {\n                if (current.direction.indexOf('s') !== -1) {\n                    nh = current.rectWindow.h + dy;\n                    newRect.height = Math.max(current.minHeight, nh);\n                } else if (current.direction.indexOf('n') !== -1) {\n                    nh = current.rectWindow.h - dy;\n                    nt = current.rectWindow.y + dy;\n                    if (nt < current.rectWorkspace.top) {\n                        nt = current.rectWorkspace.top;\n                        nh = newRect.height;\n                    } else {\n                        if (nh < current.minHeight) {\n                            nt = current.rectWindow.b - current.minHeight;\n                        }\n                    }\n                    newRect.height = Math.max(current.minHeight, nh);\n                    newRect.top = nt;\n                }\n            }());\n            (function () {\n                if (current.direction.indexOf('e') !== -1) {\n                    nw = current.rectWindow.w + dx;\n                    newRect.width = Math.max(current.minWidth, nw);\n                } else if (current.direction.indexOf('w') !== -1) {\n                    nw = current.rectWindow.w - dx;\n                    nl = current.rectWindow.x + dx;\n                    if (nw < current.minWidth) {\n                        nl = current.rectWindow.r - current.minWidth;\n                    }\n                    newRect.width = Math.max(current.minWidth, nw);\n                    newRect.left = nl;\n                }\n            }());\n            return newRect;\n        }\n        function onWindowMove(ev, mousePosition, dx, dy) {\n            let newWidth = null;\n            let newHeight = null;\n            let newLeft = current.rectWindow.x + dx;\n            let newTop = current.rectWindow.y + dy;\n            const borderSize = current.theme.borderSize;\n            const topMargin = current.theme.topMargin;\n            const cornerSnapSize = current.snapping.cornerSize;\n            const windowSnapSize = current.snapping.windowSize;\n            if (newTop < current.rectWorkspace.top) {\n                newTop = current.rectWorkspace.top;\n            }\n            let newRight = newLeft + current.rectWindow.w + borderSize * 2;\n            let newBottom = newTop + current.rectWindow.h + topMargin + borderSize;\n            if (cornerSnapSize > 0) {\n                if (newLeft - borderSize <= cornerSnapSize && newLeft - borderSize >= -cornerSnapSize) {\n                    newLeft = borderSize;\n                } else if (newRight >= current.rectWorkspace.width - cornerSnapSize && newRight <= current.rectWorkspace.width + cornerSnapSize) {\n                    newLeft = current.rectWorkspace.width - current.rectWindow.w - borderSize;\n                }\n                if (newTop <= current.rectWorkspace.top + cornerSnapSize && newTop >= current.rectWorkspace.top - cornerSnapSize) {\n                    newTop = current.rectWorkspace.top + borderSize;\n                } else if (newBottom >= current.rectWorkspace.height + current.rectWorkspace.top - cornerSnapSize && newBottom <= current.rectWorkspace.height + current.rectWorkspace.top + cornerSnapSize) {\n                    newTop = current.rectWorkspace.height + current.rectWorkspace.top - current.rectWindow.h - topMargin - borderSize;\n                }\n            }\n            if (windowSnapSize > 0) {\n                current.snapRects.every(function (rect) {\n                    if (newRight >= rect.left - windowSnapSize && newRight <= rect.left + windowSnapSize) {\n                        newLeft = rect.left - (current.rectWindow.w + borderSize * 2);\n                        return false;\n                    }\n                    if (newLeft - borderSize <= rect.right + windowSnapSize && newLeft - borderSize >= rect.right - windowSnapSize) {\n                        newLeft = rect.right + borderSize * 2;\n                        return false;\n                    }\n                    if (newBottom >= rect.top - windowSnapSize && newBottom <= rect.top + windowSnapSize) {\n                        newTop = rect.top - (current.rectWindow.h + borderSize * 2 + topMargin);\n                        return false;\n                    }\n                    if (newTop <= rect.bottom + windowSnapSize && newTop >= rect.bottom - windowSnapSize) {\n                        newTop = rect.bottom + borderSize * 2;\n                        return false;\n                    }\n                    return true;\n                });\n            }\n            return {\n                left: newLeft,\n                top: newTop,\n                width: newWidth,\n                height: newHeight\n            };\n        }\n        function onMouseUp(ev, action, win, mousePosition) {\n            if (!current) {\n                return;\n            }\n            if (current.moved) {\n                if (action === 'move') {\n                    win._onChange('move', true);\n                    win._emit('moved', [\n                        win._position.x,\n                        win._position.y\n                    ]);\n                } else if (action === 'resize') {\n                    win._onChange('resize', true);\n                    win._emit('resized', [\n                        win._dimension.w,\n                        win._dimension.h\n                    ]);\n                }\n            }\n            current.$element.setAttribute('data-hint', '');\n            document.body.setAttribute('data-window-hint', '');\n            win._emit('postop');\n            current = null;\n        }\n        function onMouseMove(ev, action, win, mousePosition) {\n            if (!wm.getMouseLocked() || !action || !current) {\n                return;\n            }\n            ev.preventDefault();\n            let result;\n            const dx = mousePosition.x - current.startX;\n            const dy = mousePosition.y - current.startY;\n            if (action === 'move') {\n                result = onWindowMove(ev, mousePosition, dx, dy);\n            } else {\n                result = onWindowResize(ev, mousePosition, dx, dy);\n            }\n            if (result) {\n                if (result.left !== null && result.top !== null) {\n                    win._move(result.left, result.top);\n                    win._emit('move', [\n                        result.left,\n                        result.top\n                    ]);\n                }\n                if (result.width !== null && result.height !== null) {\n                    win._resize(result.width, result.height, true);\n                    win._emit('resize', [\n                        result.width,\n                        result.height\n                    ]);\n                }\n            }\n            current.moved = true;\n        }\n        function onMouseDown(ev, action, win, mousePosition) {\n            ev.preventDefault();\n            if (win._state.maximized) {\n                return;\n            }\n            current = new BehaviourState(wm, win, action, mousePosition);\n            newRect = {};\n            win._focus();\n            if (action === 'move') {\n                current.$element.setAttribute('data-hint', 'moving');\n                document.body.setAttribute('data-window-hint', 'moving');\n            } else {\n                current.calculateDirection();\n                current.$element.setAttribute('data-hint', 'resizing');\n                document.body.setAttribute('data-window-hint', 'resizing');\n                newRect = current.getRect();\n            }\n            win._emit('preop');\n            function _onMouseMove(ev, pos) {\n                ev.preventDefault();\n                if (wm._mouselock) {\n                    onMouseMove(ev, action, win, pos);\n                }\n            }\n            function _onMouseUp(ev, pos) {\n                onMouseUp(ev, action, win, pos);\n                Events.$unbind(document, 'pointermove:movewindow,touchmove:movewindowTouch');\n                Events.$unbind(document, 'pointerup:movewindowstop,touchend:movewindowstopTouch');\n            }\n            Events.$bind(document, 'pointermove:movewindow,touchmove:movewindowTouch', _onMouseMove, false);\n            Events.$bind(document, 'pointerup:movewindowstop,touchend:movewindowstopTouch', _onMouseUp, false);\n        }\n        if (win._properties.allow_move) {\n            Events.$bind(win._$top, 'pointerdown,touchstart', (ev, pos) => {\n                ev.preventDefault();\n                if (!win._destroyed) {\n                    onMouseDown(ev, 'move', win, pos);\n                }\n            }, true);\n        }\n        if (win._properties.allow_resize) {\n            Events.$bind(win._$resize, 'pointerdown,touchstart', (ev, pos) => {\n                ev.preventDefault();\n                if (!win._destroyed) {\n                    onMouseDown(ev, 'resize', win, pos);\n                }\n            });\n        }\n    }\n    return { createWindowBehaviour: createWindowBehaviour };\n});\ndefine('skylark-osjsv2-client/core/window-manager',[\n    '../utils/dom',\n //   '../gui/menu',\n    '../utils/events',\n    '../utils/misc',\n    '../utils/keycodes',\n    './theme',\n    './process',\n//    './window',\n//    './dialog',\n    './connection',\n    './settings-manager',\n//    '../gui/notification',\n    './locales',\n    './config',\n    '../helpers/window-behaviour'\n], function (DOM, Events, Utils, Keycodes, Theme, Process,   Connection, SettingsManager,  a, b, c) {\n    'use strict';\n    function checkForbiddenKeyCombo(ev) {\n        return false;\n    }\n    function checkPrevent(ev, win) {\n        const d = ev.srcElement || ev.target;\n        const accept = [\n            122,\n            123\n        ];\n        let doPrevent = d.tagName === 'BODY' ? true : false;\n        if (ev.keyCode === Keycodes.BACKSPACE && !DOM.$isFormElement(ev)) {\n            doPrevent = true;\n        } else if (ev.keyCode === Keycodes.TAB && DOM.$isFormElement(ev)) {\n            doPrevent = true;\n        } else {\n            if (accept.indexOf(ev.keyCode) !== -1) {\n                doPrevent = false;\n            } else if (checkForbiddenKeyCombo(ev)) {\n                doPrevent = true;\n            }\n        }\n        if (doPrevent && (!win || !win._properties.key_capture)) {\n            return true;\n        }\n        return false;\n    }\n    function triggerFullscreen(el, state) {\n        function _request() {\n            if (el.requestFullscreen) {\n                el.requestFullscreen();\n            } else if (el.mozRequestFullScreen) {\n                el.mozRequestFullScreen();\n            } else if (el.webkitRequestFullScreen) {\n                el.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);\n            }\n        }\n        function _restore() {\n            if (el.webkitCancelFullScreen) {\n                el.webkitCancelFullScreen();\n            } else if (el.mozCancelFullScreen) {\n                el.mozCancelFullScreen();\n            } else if (el.exitFullscreen) {\n                el.exitFullscreen();\n            }\n        }\n        if (el) {\n            if (state) {\n                _request();\n            } else {\n                _restore();\n            }\n        }\n    }\n    let _instance;\n    return class WindowManager extends Process {\n        static get instance() {\n            return _instance;\n        }\n        constructor(name, args, metadata, settings) {\n            console.group('WindowManager::constructor()');\n            console.debug('Name', name);\n            console.debug('Arguments', args);\n            super(name, args, metadata);\n            _instance = this;\n            this._windows = [];\n            this._settings = SettingsManager.instance(name, settings);\n            this._currentWin = null;\n            this._lastWin = null;\n            this._mouselock = true;\n            this._stylesheet = null;\n            this._sessionLoaded = false;\n            this._fullyLoaded = false;\n            this._isResponsive = false;\n            this._responsiveRes = 800;\n            this._dcTimeout = null;\n            this._resizeTimeout = null;\n            this._$fullscreen = null;\n            this._$lastDomInput = null;\n            this.__name = name || 'WindowManager';\n            this.__path = metadata.path;\n            this.__iter = metadata.iter;\n\n            console.groupEnd();\n        }\n        destroy() {\n            console.debug('WindowManager::destroy()');\n            this.destroyStylesheet();\n            Events.$unbind(document, 'pointerout:windowmanager');\n            Events.$unbind(document, 'pointerenter:windowmanager');\n            Events.$unbind(window, 'orientationchange:windowmanager');\n            Events.$unbind(window, 'hashchange:windowmanager');\n            Events.$unbind(window, 'resize:windowmanager');\n            Events.$unbind(window, 'scroll:windowmanager');\n            Events.$unbind(window, 'fullscreenchange:windowmanager');\n            Events.$unbind(window, 'mozfullscreenchange:windowmanager');\n            Events.$unbind(window, 'webkitfullscreenchange:windowmanager');\n            Events.$unbind(window, 'msfullscreenchange:windowmanager');\n            Events.$unbind(document.body, 'contextmenu:windowmanager');\n            Events.$unbind(document.body, 'pointerdown:windowmanager,touchstart:windowmanager');\n            Events.$unbind(document.body, 'click:windowmanager');\n            Events.$unbind(document, 'keyup:windowmanager');\n            Events.$unbind(document, 'keydown:windowmanager');\n            Events.$unbind(document, 'keypress:windowmanager');\n            window.onerror = null;\n            window.onbeforeunload = null;\n            this._windows.forEach((win, i) => {\n                if (win) {\n                    win.destroy(true);\n                    this._windows[i] = null;\n                }\n            });\n            this._windows = [];\n            this._currentWin = null;\n            this._lastWin = null;\n            this._$fullscreen = null;\n            _instance = null;\n\n            this.Notification = OSjs.require(\"gui/notification\");// added by lwf\n            return super.destroy();\n        }\n        init(metadata, settings) {\n            var Notification = this.Notification;\n\n            Connection.instance.subscribe('online', () => {\n                Notification.create({\n                    title: a._('LBL_INFO'),\n                    message: a._('CONNECTION_RESTORED')\n                });\n            });\n            Connection.instance.subscribe('offline', reconnecting => {\n                Notification.create({\n                    title: a._('LBL_WARNING'),\n                    message: a._(reconnecting ? 'CONNECTION_RESTORE_FAILED' : 'CONNECTION_LOST')\n                });\n            });\n\n            console.debug('WindowManager::init()');\n            document.body.addEventListener('touchend', ev => {\n                if (ev.target === document.body) {\n                    ev.preventDefault();\n                }\n            });\n            Events.$bind(document, 'pointerout:windowmanager', ev => this._onMouseLeave(ev));\n            Events.$bind(document, 'pointerenter:windowmanager', ev => this._onMouseLeave(ev));\n            Events.$bind(window, 'orientationchange:windowmanager', ev => this._onOrientationChange(ev));\n            Events.$bind(window, 'hashchange:windowmanager', ev => this._onHashChange(ev));\n            Events.$bind(window, 'resize:windowmanager', ev => this._onResize(ev));\n            Events.$bind(window, 'scroll:windowmanager', ev => this._onScroll(ev));\n            Events.$bind(window, 'fullscreenchange:windowmanager', ev => this._onFullscreen(ev));\n            Events.$bind(window, 'mozfullscreenchange:windowmanager', ev => this._onFullscreen(ev));\n            Events.$bind(window, 'webkitfullscreenchange:windowmanager', ev => this._onFullscreen(ev));\n            Events.$bind(window, 'msfullscreenchange:windowmanager', ev => this._onFullscreen(ev));\n            Events.$bind(document.body, 'contextmenu:windowmanager', ev => this._onContextMenu(ev));\n            Events.$bind(document.body, 'pointerdown:windowmanager,touchstart:windowmanager', ev => this._onMouseDown(ev));\n            Events.$bind(document.body, 'click:windowmanager', ev => this._onClick(ev));\n            Events.$bind(document, 'keyup:windowmanager', ev => this._onKeyUp(ev));\n            Events.$bind(document, 'keydown:windowmanager', ev => this._onKeyDown(ev));\n            Events.$bind(document, 'keypress:windowmanager', ev => this._onKeyPress(ev));\n            window.onerror = this._onError.bind(this);\n            window.onbeforeunload = this._onBeforeUnload(this);\n            const queries = this.getDefaultSetting('mediaQueries') || {};\n            let maxWidth = 0;\n            Object.keys(queries).forEach(q => {\n                maxWidth = Math.max(maxWidth, queries[q]);\n            });\n            this._responsiveRes = maxWidth || 800;\n            this._onOrientationChange();\n            this.resize();\n        }\n        setup(cb) {\n            cb();\n        }\n        getWindow(name) {\n            return this.getWindows().find(w => {\n                return w.__name === name;\n            });\n        }\n        addWindow(w, focus) {\n            //if (!(w instanceof Window)) { // modified by lwf\n            //    console.warn('WindowManager::addWindow()', 'Got', w);\n            //    throw new TypeError('given argument was not instance of Core.Window');\n            //}\n            console.debug('WindowManager::addWindow()');\n            try {\n                w.init(this, w._app);\n            } catch (e) {\n                console.error('WindowManager::addWindow()', '=>', 'Window::init()', e, e.stack);\n            }\n            c.createWindowBehaviour(w, this);\n            this._windows.push(w);\n            w._inited();\n            //if (focus === true || w instanceof DialogWindow) {\n            if (focus === true) { // modified by lwf\n                w._focus();\n            }\n            return w;\n        }\n        removeWindow(w) {\n            //if (!(w instanceof Window)) { // modified by lwf\n            //    console.warn('WindowManager::removeWindow()', 'Got', w);\n            //    throw new TypeError('given argument was not instance of Core.Window');\n            //}\n            const foundIndex = this._windows.findIndex(win => win && win._wid === w._wid);\n            console.debug('WindowManager::removeWindow()', w._wid, foundIndex);\n            if (foundIndex !== -1) {\n                this._windows[foundIndex] = null;\n                return true;\n            }\n            return false;\n        }\n        applySettings(settings, force, save, triggerWatch) {\n            settings = settings || {};\n            console.debug('WindowManager::applySettings()', 'forced?', force);\n            const result = force ? settings : Utils.mergeObject(this._settings.get(), settings);\n            this._settings.set(null, result, save, triggerWatch);\n            return true;\n        }\n        createStylesheet(styles, rawStyles) {\n            this.destroyStylesheet();\n            let innerHTML = [];\n            Object.keys(styles).forEach(key => {\n                let rules = [];\n                Object.keys(styles[key]).forEach(r => {\n                    rules.push(Utils.format('    {0}: {1};', r, styles[key][r]));\n                });\n                rules = rules.join('\\n');\n                innerHTML.push(Utils.format('{0} {\\n{1}\\n}', key, rules));\n            });\n            innerHTML = innerHTML.join('\\n');\n            if (rawStyles) {\n                innerHTML += '\\n' + rawStyles;\n            }\n            const style = document.createElement('style');\n            style.type = 'text/css';\n            style.id = 'WMGeneratedStyles';\n            style.innerHTML = innerHTML;\n            document.getElementsByTagName('head')[0].appendChild(style);\n            this._stylesheet = style;\n        }\n        destroyStylesheet() {\n            if (this._stylesheet) {\n                DOM.$remove(this._stylesheet);\n            }\n            this._stylesheet = null;\n        }\n        resize(ev, rect) {\n            this._isResponsive = window.innerWidth <= 1024;\n            this.onResize(ev);\n        }\n        eventWindow(ev, win) {\n            return false;\n        }\n        showSettings() {\n        }\n        toggleFullscreen(el, t) {\n            if (typeof t === 'boolean') {\n                triggerFullscreen(el, t);\n            } else {\n                const prev = this._$fullscreen;\n                if (prev && prev !== el) {\n                    triggerFullscreen(prev, false);\n                }\n                triggerFullscreen(el, prev !== el);\n            }\n            this._$fullscreen = el;\n        }\n        onKeyDown(ev, win) {\n        }\n        onOrientationChange(ev, orientation) {\n            console.info('ORIENTATION CHANGED', ev, orientation);\n            document.body.setAttribute('data-orientation', orientation);\n            this._onDisplayChange();\n        }\n        onResize(ev) {\n            this._onDisplayChange();\n            this._emit('resized');\n        }\n        onSessionLoaded() {\n            if (this._sessionLoaded) {\n                return false;\n            }\n            this._sessionLoaded = true;\n            return true;\n        }\n        _onMouseEnter(ev) {\n            this._mouselock = true;\n        }\n        _onMouseLeave(ev) {\n            const from = ev.relatedTarget || ev.toElement;\n            if (!from || from.nodeName === 'HTML') {\n                this._mouselock = false;\n            } else {\n                this._mouselock = true;\n            }\n        }\n        _onDisplayChange() {\n            this._dcTimeout = clearTimeout(this._dcTimeout);\n            this._dcTimeout = setTimeout(() => {\n                if (!this._windows) {\n                    return;\n                }\n                this.getWindows().forEach(w => {\n                    w._onResize();\n                    w._emit('resize');\n                });\n            }, 100);\n            document.body.setAttribute('data-responsive', String(this._isResponsive));\n        }\n        _onOrientationChange(ev) {\n            let orientation = 'landscape';\n            if (window.screen && window.screen.orientation) {\n                if (window.screen.orientation.type.indexOf('portrait') !== -1) {\n                    orientation = 'portrait';\n                }\n            }\n            this.onOrientationChange(ev, orientation);\n        }\n        _onHashChange(ev) {\n            const hash = window.location.hash.substr(1);\n            const spl = hash.split(/^([\\w\\.\\-_]+)\\:(.*)/);\n            function getArgs(q) {\n                const args = {};\n                q.split('&').forEach(function (a) {\n                    const b = a.split('=');\n                    const k = decodeURIComponent(b[0]);\n                    args[k] = decodeURIComponent(b[1] || '');\n                });\n                return args;\n            }\n            if (spl.length === 4) {\n                const root = spl[1];\n                const args = getArgs(spl[2]);\n                if (root) {\n                    Process.getProcess(root).forEach(function (p) {\n                        p._onMessage('hashchange', {\n                            hash: hash,\n                            args: args\n                        }, { source: null });\n                    });\n                }\n            }\n        }\n        _onResize(ev) {\n            clearTimeout(this._resizeTimeout);\n            this._resizeTimeout = setTimeout(() => {\n                const space = this.getWindowSpace();\n                this.resize(ev, space);\n            }, 100);\n        }\n        _onScroll(ev) {\n            if (ev.target === document || ev.target === document.body) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                return false;\n            }\n            document.body.scrollTop = 0;\n            document.body.scrollLeft = 0;\n            return true;\n        }\n        _onFullscreen(ev) {\n            try {\n                const notif = this.Notification.getIcon('_FullscreenNotification'); // modified by lwf\n                if (notif) {\n                    if (!document.fullScreen && !document.mozFullScreen && !document.webkitIsFullScreen && !document.msFullscreenElement) {\n                        notif.opts._isFullscreen = false;\n                        notif.setImage(Theme.getIcon('actions/view-fullscreen.png', '16x16'));\n                    } else {\n                        notif.opts._isFullscreen = true;\n                        notif.setImage(Theme.getIcon('actions/view-restore.png', '16x16'));\n                    }\n                }\n            } catch (e) {\n                console.warn(e.stack, e);\n            }\n        }\n        _onContextMenu(ev) {\n            this.onContextMenu(ev);\n            if (DOM.$isFormElement(ev)) {\n                OSjs.require(\"gui/menu\").blur();\n            } else {\n                ev.preventDefault();\n                return false;\n            }\n            return true;\n        }\n        _onMouseDown(ev) {\n            if (DOM.$isFormElement(ev)) {\n                this._$lastDomInput = ev.target;\n            } else {\n                if (this._$lastDomInput) {\n                    try {\n                        this._$lastDomInput.blur();\n                    } catch (e) {\n                    }\n                    this._$lastDomInput = null;\n                }\n            }\n        }\n        _onClick(ev) {\n            let hitWindow, hitMenu;\n            let el = ev.target;\n            while (el.parentNode) {\n                if (el.tagName.match(/^GUI\\-MENU/)) {\n                    hitMenu = el;\n                } else if (el.tagName.match(/^APPLICATION\\-WINDOW/)) {\n                    hitWindow = true;\n                }\n                if (hitWindow || hitMenu) {\n                    break;\n                }\n                el = el.parentNode;\n            }\n            if (hitMenu) {\n                if (hitMenu.tagName === 'GUI-MENU-ENTRY') {\n                    if (hitMenu.getAttribute('data-disabled') !== 'true') {\n                        if (!DOM.$hasClass(hitMenu, 'gui-menu-expand')) {\n                            hitMenu = null;\n                        }\n                    }\n                } else if (hitMenu.tagName === 'GUI-MENU-BAR') {\n                    hitMenu = null;\n                }\n            }\n            if (!hitMenu) {\n                OSjs.require(\"gui/menu\").blur();\n            }\n            if (ev.target.tagName === 'BODY') {\n                const win = this.getCurrentWindow();\n                if (win) {\n                    win._blur();\n                }\n            }\n            Theme.themeAction('event', [ev]);\n        }\n        _onKeyUp(ev) {\n            const win = this.getCurrentWindow();\n            this.onKeyUp(ev, win);\n            if (win) {\n                return win._onKeyEvent(ev, 'keyup');\n            }\n            return true;\n        }\n        _onKeyDown(ev) {\n            const win = this.getCurrentWindow();\n            const reacted = (() => {\n                const combination = this.onKeyDown(ev, win);\n                if (win && !combination) {\n                    win._onKeyEvent(ev, 'keydown');\n                }\n                return combination;\n            })();\n            if (checkPrevent(ev, win) || reacted) {\n                ev.preventDefault();\n            }\n            return true;\n        }\n        _onKeyPress(ev) {\n            if (checkForbiddenKeyCombo(ev)) {\n                ev.preventDefault();\n            }\n            const win = this.getCurrentWindow();\n            if (win) {\n                return win._onKeyEvent(ev, 'keypress');\n            }\n            return true;\n        }\n        _onBeforeUnload(ev) {\n            if (b.getConfig('ShowQuitWarning')) {\n                return a._('MSG_SESSION_WARNING');\n            }\n            return null;\n        }\n        _onError(message, url, linenumber, column, exception) {\n            if (typeof exception === 'string') {\n                exception = null;\n            }\n            exception = exception || {\n                name: 'window::onerror()',\n                fileName: url,\n                lineNumber: linenumber + ':' + column,\n                message: message\n            };\n            console.warn('window::onerror()', arguments);\n            OSjs.error(a._('ERR_JAVASCRIPT_EXCEPTION'), a._('ERR_JAVACSRIPT_EXCEPTION_DESC'), a._('BUGREPORT_MSG'), exception, true);\n            return false;\n        }\n        getDefaultSetting() {\n            return null;\n        }\n        getPanel() {\n            return null;\n        }\n        getPanels() {\n            return [];\n        }\n        setSetting(k, v) {\n            return this._settings.set(k, v);\n        }\n        getWindowSpace() {\n            return {\n                top: 0,\n                left: 0,\n                width: document.body.offsetWidth,\n                height: document.body.offsetHeight\n            };\n        }\n        getWindowPosition() {\n            const winCount = this._windows.reduce(function (count, win) {\n                return win === null ? count : count + 1;\n            }, 0);\n            return {\n                x: 10 * winCount,\n                y: 10 * winCount\n            };\n        }\n        getSetting(k) {\n            return this._settings.get(k);\n        }\n        getSettings() {\n            return this._settings.get();\n        }\n        getWindows() {\n            return this._windows.filter(w => !!w);\n        }\n        getCurrentWindow() {\n            return this._currentWin;\n        }\n        setCurrentWindow(w) {\n            this._currentWin = w || null;\n        }\n        getLastWindow() {\n            return this._lastWin;\n        }\n        setLastWindow(w) {\n            this._lastWin = w || null;\n        }\n        getMouseLocked() {\n            return this._mouselock;\n        }\n    };\n});\ndefine('skylark-osjsv2-client/utils/gui',[\n    './dom',\n    './events',\n    './compability',\n    '../core/package-manager',\n    '../core/theme'\n], function (DOM, Events, Compability, PackageManager, Theme) {\n    'use strict';\n    function getWindowId(el) {\n        while (el.parentNode) {\n            const attr = el.getAttribute('data-window-id');\n            if (attr !== null) {\n                return parseInt(attr, 10);\n            }\n            el = el.parentNode;\n        }\n        return null;\n    }\n    function getLabel(el) {\n        const label = el.getAttribute('data-label');\n        return label || '';\n    }\n    function getValueLabel(el, attr) {\n        let label = attr ? el.getAttribute('data-label') : null;\n        if (el.childNodes.length && el.childNodes[0].nodeType === 3 && el.childNodes[0].nodeValue) {\n            label = el.childNodes[0].nodeValue;\n            DOM.$empty(el);\n        }\n        return label || '';\n    }\n    function getViewNodeValue(el) {\n        let value = el.getAttribute('data-value');\n        if (typeof value === 'string' && value.match(/^\\[|\\{/)) {\n            try {\n                value = JSON.parse(value);\n            } catch (e) {\n                value = null;\n            }\n        }\n        return value;\n    }\n    function getIcon(el, win) {\n        let image = el.getAttribute('data-icon');\n        if (image) {\n            return win ? PackageManager.getPackageResource(win._app, image) : image;\n        }\n        image = el.getAttribute('data-stock-icon');\n        if (image && image !== 'undefined') {\n            let size = '16x16';\n            try {\n                let spl = image.split('/');\n                let tmp = spl.shift();\n                let siz = tmp.match(/^\\d+x\\d+/);\n                if (siz) {\n                    size = siz[0];\n                    image = spl.join('/');\n                }\n                image = Theme.getIcon(image, size);\n            } catch (e) {\n            }\n            return image;\n        }\n        return null;\n    }\n    function getProperty(el, param, tagName) {\n        tagName = tagName || el.tagName.toLowerCase();\n        const isDataView = tagName.match(/^gui\\-(tree|icon|list|file)\\-view$/);\n        if (param === 'value' && !isDataView) {\n            if ([\n                    'gui-text',\n                    'gui-password',\n                    'gui-textarea',\n                    'gui-slider',\n                    'gui-select',\n                    'gui-select-list'\n                ].indexOf(tagName) >= 0) {\n                return el.querySelector('input, textarea, select').value;\n            }\n            if ([\n                    'gui-checkbox',\n                    'gui-radio',\n                    'gui-switch'\n                ].indexOf(tagName) >= 0) {\n                return !!el.querySelector('input').checked;\n            }\n            return null;\n        }\n        //if ((param === 'value' || param === 'selected') && isDataView) {\n        //    return GUIElement.createFromNode(el).values();\n        //}\n        return el.getAttribute('data-' + param);\n    }\n    function createInputLabel(el, type, input, label) {\n        label = label || getLabel(el);\n        if (label) {\n            const lbl = document.createElement('label');\n            const span = document.createElement('span');\n            span.appendChild(document.createTextNode(label));\n            if (type === 'checkbox' || type === 'radio') {\n                lbl.appendChild(input);\n                lbl.appendChild(span);\n            } else {\n                lbl.appendChild(span);\n                lbl.appendChild(input);\n            }\n            el.appendChild(lbl);\n        } else {\n            el.appendChild(input);\n        }\n    }\n    function setProperty(el, param, value, tagName) {\n        tagName = tagName || el.tagName.toLowerCase();\n        function _setKnownAttribute(i, k, v, a) {\n            if (v) {\n                i.setAttribute(k, k);\n            } else {\n                i.removeAttribute(k);\n            }\n            if (a) {\n                el.setAttribute('aria-' + k, String(value === true));\n            }\n        }\n        function _setValueAttribute(i, k, v) {\n            if (typeof v === 'object') {\n                try {\n                    v = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n            i.setAttribute(k, String(v));\n        }\n        const inner = el.children[0];\n        let accept = [\n            'gui-slider',\n            'gui-text',\n            'gui-password',\n            'gui-textarea',\n            'gui-checkbox',\n            'gui-radio',\n            'gui-select',\n            'gui-select-list',\n            'gui-button'\n        ];\n        (function () {\n            let firstChild;\n            const params = {\n                readonly: function () {\n                    _setKnownAttribute(firstChild, 'readonly', value, true);\n                },\n                disabled: function () {\n                    _setKnownAttribute(firstChild, 'disabled', value, true);\n                },\n                value: function () {\n                    if (tagName === 'gui-radio' || tagName === 'gui-checkbox') {\n                        _setKnownAttribute(firstChild, 'checked', value);\n                        firstChild.checked = !!value;\n                    }\n                    firstChild.value = value;\n                },\n                label: function () {\n                    el.appendChild(firstChild);\n                    DOM.$remove(el.querySelector('label'));\n                    createInputLabel(el, tagName.replace(/^gui\\-/, ''), firstChild, value);\n                }\n            };\n            if (accept.indexOf(tagName) >= 0) {\n                firstChild = el.querySelector('textarea, input, select, button');\n                if (firstChild) {\n                    if (params[param]) {\n                        params[param]();\n                    } else {\n                        _setValueAttribute(firstChild, param, value || '');\n                    }\n                }\n            }\n        }());\n        accept = [\n            'gui-image',\n            'gui-audio',\n            'gui-video'\n        ];\n        if ([\n                'src',\n                'controls',\n                'autoplay',\n                'alt'\n            ].indexOf(param) >= 0 && accept.indexOf(tagName) >= 0) {\n            inner[param] = value;\n        }\n        if ([\n                '_id',\n                '_class',\n                '_style'\n            ].indexOf(param) >= 0) {\n            inner.setAttribute(param.replace(/^_/, ''), value);\n            return;\n        }\n        if (param !== 'value') {\n            _setValueAttribute(el, 'data-' + param, value);\n        }\n    }\n    function createElement(tagName, params, ignoreParams) {\n        ignoreParams = ignoreParams || [];\n        const el = document.createElement(tagName);\n        const classMap = {\n            textalign: function (v) {\n                DOM.$addClass(el, 'gui-align-' + v);\n            },\n            className: function (v) {\n                DOM.$addClass(el, v);\n            }\n        };\n        function getValue(k, value) {\n            if (typeof value === 'boolean') {\n                value = value ? 'true' : 'false';\n            } else if (typeof value === 'object') {\n                try {\n                    value = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n            return value;\n        }\n        if (typeof params === 'object') {\n            Object.keys(params).forEach(function (k) {\n                if (ignoreParams.indexOf(k) >= 0) {\n                    return;\n                }\n                const value = params[k];\n                if (typeof value !== 'undefined' && typeof value !== 'function') {\n                    if (classMap[k]) {\n                        classMap[k](value);\n                        return;\n                    }\n                    const fvalue = getValue(k, value);\n                    el.setAttribute('data-' + k, fvalue);\n                }\n            });\n        }\n        return el;\n    }\n    function setFlexbox(el, grow, shrink, basis, checkel) {\n        checkel = checkel || el;\n        (function () {\n            if (typeof basis === 'undefined' || basis === null) {\n                basis = checkel.getAttribute('data-basis') || 'auto';\n            }\n        }());\n        (function () {\n            if (typeof grow === 'undefined' || grow === null) {\n                grow = checkel.getAttribute('data-grow') || 0;\n            }\n        }());\n        (function () {\n            if (typeof shrink === 'undefined' || shrink === null) {\n                shrink = checkel.getAttribute('data-shrink') || 0;\n            }\n        }());\n        const flex = [\n            grow,\n            shrink\n        ];\n        if (basis.length) {\n            flex.push(basis);\n        }\n        const style = flex.join(' ');\n        el.style.webkitBoxFlex = style;\n        el.style.mozBoxFlex = style;\n        el.style.webkitFlex = style;\n        el.style.mozFlex = style;\n        el.style.msFlex = style;\n        el.style.oFlex = style;\n        el.style.flex = style;\n        const align = el.getAttribute('data-align');\n        DOM.$removeClass(el, 'gui-flex-align-start');\n        DOM.$removeClass(el, 'gui-flex-align-end');\n        if (align) {\n            DOM.$addClass(el, 'gui-flex-align-' + align);\n        }\n    }\n    function createDrag(el, onDown, onMove, onUp) {\n        onDown = onDown || function () {\n        };\n        onMove = onMove || function () {\n        };\n        onUp = onUp || function () {\n        };\n        let startX, startY, currentX, currentY;\n        let dragging = false;\n        function _onMouseMove(ev, pos, touchDevice) {\n            ev.preventDefault();\n            if (dragging) {\n                currentX = pos.x;\n                currentY = pos.y;\n                const diffX = currentX - startX;\n                const diffY = currentY - startY;\n                onMove(ev, {\n                    x: diffX,\n                    y: diffY\n                }, {\n                    x: currentX,\n                    y: currentY\n                });\n            }\n        }\n        function _onMouseUp(ev, pos, touchDevice) {\n            onUp(ev, {\n                x: currentX,\n                y: currentY\n            });\n            dragging = false;\n            Events.$unbind(window, 'pointerup:guidrag');\n            Events.$unbind(window, 'pointermove:guidrag');\n        }\n        function _onMouseDown(ev, pos, touchDevice) {\n            ev.preventDefault();\n            startX = pos.x;\n            startY = pos.y;\n            onDown(ev, {\n                x: startX,\n                y: startY\n            });\n            dragging = true;\n            Events.$bind(window, 'pointerup:guidrag', _onMouseUp, false);\n            Events.$bind(window, 'pointermove:guidrag', _onMouseMove, false);\n        }\n        Events.$bind(el, 'pointerdown', _onMouseDown, false);\n    }\n    function getNextElement(prev, current, root) {\n        function getElements() {\n            const ignore_roles = [\n                'menu',\n                'menuitem',\n                'grid',\n                'gridcell',\n                'listitem'\n            ];\n            const list = [];\n            root.querySelectorAll('.gui-element').forEach(function (e) {\n                if (DOM.$hasClass(e, 'gui-focus-element') || ignore_roles.indexOf(e.getAttribute('role')) >= 0 || e.getAttribute('data-disabled') === 'true') {\n                    return;\n                }\n                if (e.offsetParent) {\n                    list.push(e);\n                }\n            });\n            return list;\n        }\n        function getCurrentIndex(els, m) {\n            let found = -1;\n            if (m) {\n                els.every(function (e, idx) {\n                    if (e === m) {\n                        found = idx;\n                    }\n                    return found === -1;\n                });\n            }\n            return found;\n        }\n        function getCurrentParent(els, m) {\n            if (m) {\n                let cur = m;\n                while (cur.parentNode) {\n                    if (DOM.$hasClass(cur, 'gui-element')) {\n                        return cur;\n                    }\n                    cur = cur.parentNode;\n                }\n                return null;\n            }\n            return els[0];\n        }\n        function getNextIndex(els, p, i) {\n            if (prev) {\n                i = i <= 0 ? els.length - 1 : i - 1;\n            } else {\n                i = i >= els.length - 1 ? 0 : i + 1;\n            }\n            return i;\n        }\n        function getNext(els, i) {\n            let next = els[i];\n            if (next.tagName.match(/^GUI\\-(BUTTON|TEXT|PASSWORD|SWITCH|CHECKBOX|RADIO|SELECT)/)) {\n                next = next.querySelectorAll('input, textarea, button, select')[0];\n            }\n            if (next.tagName === 'GUI-FILE-VIEW') {\n                next = next.children[0];\n            }\n            return next;\n        }\n        if (root) {\n            const elements = getElements();\n            if (elements.length) {\n                const currentParent = getCurrentParent(elements, current);\n                const currentIndex = getCurrentIndex(elements, currentParent);\n                if (currentIndex >= 0) {\n                    const nextIndex = getNextIndex(elements, currentParent, currentIndex);\n                    return getNext(elements, nextIndex);\n                }\n            }\n        }\n        return null;\n    }\n    function createDraggable(el, args) {\n        args = Object.assign({}, {\n            type: null,\n            effect: 'move',\n            data: null,\n            mime: 'application/json',\n            dragImage: null,\n            onStart: function () {\n                return true;\n            },\n            onEnd: function () {\n                return true;\n            }\n        }, args);\n        if (Compability.isIE()) {\n            args.mime = 'text';\n        }\n        function _toString(mime) {\n            return JSON.stringify({\n                type: args.type,\n                effect: args.effect,\n                data: args.data,\n                mime: args.mime\n            });\n        }\n        function _dragStart(ev) {\n            try {\n                ev.dataTransfer.effectAllowed = args.effect;\n                if (args.dragImage && typeof args.dragImage === 'function') {\n                    if (ev.dataTransfer.setDragImage) {\n                        const dragImage = args.dragImage(ev, el);\n                        if (dragImage) {\n                            const dragEl = dragImage.element;\n                            const dragPos = dragImage.offset;\n                            document.body.appendChild(dragEl);\n                            ev.dataTransfer.setDragImage(dragEl, dragPos.x, dragPos.y);\n                        }\n                    }\n                }\n                ev.dataTransfer.setData(args.mime, _toString(args.mime));\n            } catch (e) {\n                console.warn('Failed to dragstart: ' + e);\n                console.warn(e.stack);\n            }\n        }\n        el.setAttribute('draggable', 'true');\n        el.setAttribute('aria-grabbed', 'false');\n        Events.$bind(el, 'dragstart', function (ev) {\n            this.setAttribute('aria-grabbed', 'true');\n            this.style.opacity = '0.4';\n            if (ev.dataTransfer) {\n                _dragStart(ev);\n            }\n            return args.onStart(ev, this, args);\n        }, false);\n        Events.$bind(el, 'dragend', function (ev) {\n            this.setAttribute('aria-grabbed', 'false');\n            this.style.opacity = '1.0';\n            return args.onEnd(ev, this, args);\n        }, false);\n    }\n    function createDroppable(el, args) {\n        args = Object.assign({}, {\n            accept: null,\n            effect: 'move',\n            mime: 'application/json',\n            files: true,\n            onFilesDropped: function () {\n                return true;\n            },\n            onItemDropped: function () {\n                return true;\n            },\n            onEnter: function () {\n                return true;\n            },\n            onOver: function () {\n                return true;\n            },\n            onLeave: function () {\n                return true;\n            },\n            onDrop: function () {\n                return true;\n            }\n        }, args);\n        if (Compability.isIE()) {\n            args.mime = 'text';\n        }\n        function getParent(start, matcher) {\n            if (start === matcher) {\n                return true;\n            }\n            let i = 10;\n            while (start && i > 0) {\n                if (start === matcher) {\n                    return true;\n                }\n                start = start.parentNode;\n                i--;\n            }\n            return false;\n        }\n        function _doDrop(ev, el) {\n            if (!ev.dataTransfer) {\n                return true;\n            }\n            if (args.files) {\n                const files = ev.dataTransfer.files;\n                if (files && files.length) {\n                    return args.onFilesDropped(ev, el, files, args);\n                }\n            }\n            try {\n                const data = ev.dataTransfer.getData(args.mime);\n                const item = JSON.parse(data);\n                if (args.accept === null || args.accept === item.type) {\n                    return args.onItemDropped(ev, el, item, args);\n                }\n            } catch (e) {\n                console.warn('Failed to drop: ' + e);\n            }\n            return false;\n        }\n        function _onDrop(ev, el) {\n            ev.stopPropagation();\n            ev.preventDefault();\n            const result = _doDrop(ev, el);\n            args.onDrop(ev, el);\n            return result;\n        }\n        el.setAttribute('aria-dropeffect', args.effect);\n        Events.$bind(el, 'drop', function (ev) {\n            return _onDrop(ev, this);\n        }, false);\n        Events.$bind(el, 'dragenter', function (ev) {\n            return args.onEnter.call(this, ev, this, args);\n        }, false);\n        Events.$bind(el, 'dragover', function (ev) {\n            ev.preventDefault();\n            if (!getParent(ev.target, el)) {\n                return false;\n            }\n            ev.stopPropagation();\n            ev.dataTransfer.dropEffect = args.effect;\n            return args.onOver.call(this, ev, this, args);\n        }, false);\n        Events.$bind(el, 'dragleave', function (ev) {\n            return args.onLeave.call(this, ev, this, args);\n        }, false);\n    }\n    return {\n        getWindowId: getWindowId,\n        getLabel: getLabel,\n        getValueLabel: getValueLabel,\n        getViewNodeValue: getViewNodeValue,\n        getIcon: getIcon,\n        getProperty: getProperty,\n        createInputLabel: createInputLabel,\n        setProperty: setProperty,\n        createElement: createElement,\n        setFlexbox: setFlexbox,\n        createDrag: createDrag,\n        getNextElement: getNextElement,\n        createDraggable: createDraggable,\n        createDroppable: createDroppable\n    };\n});\ndefine('skylark-osjsv2-client/gui/element',[\n    '../utils/dom',\n    '../utils/gui',\n    '../core/locales',\n    '../core/package-manager'\n], function (DOM, GUI, a, PackageManager) {\n    'use strict';\n    let REGISTRY = {};\n    function getFocusElement(inst) {\n        const tagMap = {\n            'gui-switch': 'button',\n            'gui-list-view': 'textarea',\n            'gui-tree-view': 'textarea',\n            'gui-icon-view': 'textarea',\n            'gui-input-modal': 'button'\n        };\n        if (tagMap[inst.tagName]) {\n            return inst.$element.querySelector(tagMap[inst.tagName]);\n        }\n        return inst.$element.firstChild || inst.$element;\n    }\n    function parseDynamic(node, win, args) {\n        args = args || {};\n        const translator = args.undefined || a._;\n        node.querySelectorAll('*[data-label]').forEach(function (el) {\n            const label = translator(el.getAttribute('data-label'));\n            el.setAttribute('data-label', label);\n        });\n        node.querySelectorAll('gui-label, gui-button, gui-list-view-column, gui-select-option, gui-select-list-option').forEach(function (el) {\n            if (!el.children.length && !el.getAttribute('data-no-translate')) {\n                const lbl = GUI.getValueLabel(el);\n                el.appendChild(document.createTextNode(translator(lbl)));\n            }\n        });\n        node.querySelectorAll('gui-button').forEach(function (el) {\n            const label = GUI.getValueLabel(el);\n            if (label) {\n                el.appendChild(document.createTextNode(a._(label)));\n            }\n        });\n        node.querySelectorAll('*[data-icon], *[data-stock-icon]').forEach(function (el) {\n            const image = GUI.getIcon(el, win);\n            el.setAttribute('data-icon', image);\n        });\n        node.querySelectorAll('*[data-src],*[src]').forEach(function (el) {\n            const isNative = el.hasAttribute('src');\n            const src = isNative ? el.getAttribute('src') : el.getAttribute('data-src') || '';\n            if (win && win._app && !src.match(/^(https?:)?\\//)) {\n                const source = PackageManager.getPackageResource(win._app, src);\n                el.setAttribute(isNative ? 'src' : 'data-src', source);\n            }\n        });\n    }\n    function createElementInstance(tagName, el, q, buildArgs) {\n        tagName = tagName || el.tagName.toLowerCase();\n        let instance;\n        if (REGISTRY[tagName]) {\n            instance = new REGISTRY[tagName].component(el, q);\n            if (buildArgs) {\n                instance.build.apply(instance, buildArgs);\n            }\n        }\n        return instance;\n    }\n    return class GUIElement {\n        constructor(el, q) {\n            this.$element = el || null;\n            this.tagName = el ? el.tagName.toLowerCase() : null;\n            this.oldDisplay = null;\n            if (!el) {\n                console.warn('GUIElement() was constructed without a DOM element', q);\n            }\n        }\n        build() {\n            return this;\n        }\n        remove() {\n            this.$element = DOM.$remove(this.$element);\n            return this;\n        }\n        empty() {\n            DOM.$empty(this.$element);\n            return this;\n        }\n        blur() {\n            if (this.$element) {\n                const firstChild = getFocusElement(this);\n                if (firstChild) {\n                    firstChild.blur();\n                }\n            }\n            return this;\n        }\n        focus() {\n            if (this.$element) {\n                const firstChild = getFocusElement(this);\n                if (firstChild) {\n                    firstChild.focus();\n                }\n            }\n            return this;\n        }\n        show() {\n            if (this.$element && !this.$element.offsetParent) {\n                if (this.$element) {\n                    this.$element.style.display = this.oldDisplay || '';\n                }\n            }\n            return this;\n        }\n        hide() {\n            if (this.$element && this.$element.offsetParent) {\n                if (!this.oldDisplay) {\n                    this.oldDisplay = this.$element.style.display;\n                }\n                this.$element.style.display = 'none';\n            }\n            return this;\n        }\n        on(evName, callback, args) {\n            return this;\n        }\n        son(evName, thisArg, callback, args) {\n            return this.on(evName, function () {\n                const args = Array.prototype.slice.call(arguments);\n                args.unshift(this);\n                callback.apply(thisArg, args);\n            }, args);\n        }\n        set(param, value, arg, arg2) {\n            if (this.$element) {\n                GUI.setProperty(this.$element, param, value, arg, arg2);\n            }\n            return this;\n        }\n        get(param) {\n            if (this.$element) {\n                return GUIElement.getProperty(this.$element, param); // modified by lwf\n            }\n            return null;\n        }\n        append(el) {\n            if (el instanceof GUIElement) {\n                el = el.$element;\n            } else if (typeof el === 'string' || typeof el === 'number') {\n                el = document.createTextNode(String(el));\n            }\n            let outer = document.createElement('div');\n            outer.appendChild(el);\n            this._append(outer);\n            outer = null;\n            return this;\n        }\n        appendHTML(html, win, args) {\n            const el = document.createElement('div');\n            el.innerHTML = html;\n            return this._append(el, win, args);\n        }\n        _append(el, win, args) {\n            if (el instanceof Element) {\n                GUIElement.parseNode(win, el, null, args);\n            }\n            while (el.childNodes.length) {\n                this.$element.appendChild(el.childNodes[0]);\n            }\n            el = null;\n            return this;\n        }\n        querySelector(q, rui) {\n            const el = this.$element.querySelector(q);\n            if (rui) {\n                return GUIElement.createFromNode(el, q);\n            }\n            return el;\n        }\n        querySelectorAll(q, rui) {\n            let el = this.$element.querySelectorAll(q);\n            if (rui) {\n                el = el.map(i => {\n                    return GUIElement.createFromNode(i, q);\n                });\n            }\n            return el;\n        }\n        css(k, v) {\n            DOM.$css(this.$element, k, v);\n            return this;\n        }\n        position() {\n            return DOM.$position(this.$element);\n        }\n        _call(method, args, thisArg) {\n            if (arguments.length < 3) {\n                console.warn('Element::_call(\"methodName\") is DEPRECATED, use \"instance.methodName()\" instead');\n            }\n            try {\n                if (typeof this._call === 'function') {\n                    return this._call(method, args);\n                }\n                return this[method](args);\n            } catch (e) {\n                console.warn(e.stack, e);\n            }\n            return null;\n        }\n        fn(name, args, thisArg) {\n            console.warn('Element::fn(\"methodName\") is DEPRECATED, use \"instance.methodName()\" instead');\n            args = args || [];\n            thisArg = thisArg || this;\n            return this.fn(name, args, thisArg);\n        }\n        static createInto(tagName, params, parentNode, applyArgs, win) {\n            if (parentNode instanceof GUIElement) {\n                parentNode = parentNode.$element;\n            }\n            const gel = GUIElement.create(tagName, params, applyArgs, win);\n            parentNode.appendChild(gel.$element);\n            return gel;\n        }\n        static createFromNode(el, q, tagName) {\n            if (el) {\n                const instance = createElementInstance(null, el, q);\n                if (instance) {\n                    return instance;\n                }\n            }\n            return new GUIElement(el, q);\n        }\n\n        static getProperty(el, param, tagName) { // added by lwf\n            tagName = tagName || el.tagName.toLowerCase();\n            const isDataView = tagName.match(/^gui\\-(tree|icon|list|file)\\-view$/);\n            if ((param === 'value' || param === 'selected') && isDataView) {\n                return GUIElement.createFromNode(el).values();\n            }\n\n            return GUI.getProperty(el,param,tagName);\n        }\n\n        static create(tagName, params, applyArgs, win) {\n            tagName = tagName || '';\n            applyArgs = applyArgs || {};\n            params = params || {};\n            const el = GUI.createElement(tagName, params);\n            return createElementInstance(null, el, null, [\n                applyArgs,\n                win\n            ]);\n        }\n        static createInstance(el, q, tagName) {\n            console.warn('Element::createInstance() is DEPRECATED, use Element::createFromNode() instead');\n            return this.createFromNode(el, q, tagName);\n        }\n        static parseNode(win, node, type, args, onparse, id) {\n            onparse = onparse || function () {\n            };\n            args = args || {};\n            type = type || 'snipplet';\n            node.querySelectorAll('*').forEach(el => {\n                const lcase = el.tagName.toLowerCase();\n                if (lcase.match(/^gui\\-/) && !lcase.match(/(\\-container|\\-(h|v)box|\\-columns?|\\-rows?|(status|tool)bar|(button|menu)\\-bar|bar\\-entry)$/)) {\n                    DOM.$addClass(el, 'gui-element');\n                }\n            });\n            parseDynamic(node, win, args);\n            onparse(node);\n            Object.keys(REGISTRY).forEach(key => {\n                node.querySelectorAll(key).forEach(pel => {\n                    if (pel._wasParsed || DOM.$hasClass(pel, 'gui-data-view')) {\n                        return;\n                    }\n                    try {\n                        createElementInstance(key, pel, null, []);\n                    } catch (e) {\n                        console.warn('parseNode()', id, type, win, 'exception');\n                        console.warn(e, e.stack);\n                    }\n                    pel._wasParsed = true;\n                });\n            });\n        }\n        static register(data, classRef) {\n            const name = data.tagName;\n            if (REGISTRY[name]) {\n                throw new Error('GUI Element \"' + name + '\" already exists');\n            }\n            REGISTRY[name] = (() => {\n                const metadata = Object.assign({}, {\n                    type: 'element',\n                    allowedChildren: [],\n                    allowedParents: []\n                }, data);\n                if (metadata.parent) {\n                    delete metadata.parent;\n                }\n                if (metadata.type === 'input') {\n                    metadata.allowedChildren = true;\n                } else if (metadata.type !== 'container') {\n                    metadata.allowedChildren = false;\n                }\n                return {\n                    metadata: metadata,\n                    component: classRef\n                };\n            })();\n        }\n        static getRegisteredElement(tagName) {\n            return REGISTRY[tagName];\n        }\n    };\n});\ndefine('skylark-osjsv2-client/gui/scheme',[\n    'skylark-axios',\n    '../utils/dom',\n    './element',\n    '../core/config'\n], function (axios, DOM, GUIElement, a) {\n    'use strict';\n    function addChildren(frag, root, before) {\n        if (frag) {\n            const children = frag.children;\n            let i = 0;\n            while (children.length && i < 10000) {\n                if (before) {\n                    root.parentNode.insertBefore(children[0], root);\n                } else {\n                    root.appendChild(children[0]);\n                }\n                i++;\n            }\n        }\n    }\n    function resolveFragments(scheme, node) {\n        function _resolve() {\n            const nodes = node.querySelectorAll('gui-fragment');\n            if (nodes.length) {\n                nodes.forEach(function (el) {\n                    const id = el.getAttribute('data-fragment-id');\n                    if (id) {\n                        const frag = scheme.getFragment(id, 'application-fragment');\n                        if (frag) {\n                            addChildren(frag.cloneNode(true), el.parentNode);\n                        } else {\n                            console.warn('Fragment', id, 'not found');\n                        }\n                    }\n                    DOM.$remove(el);\n                });\n                return true;\n            }\n            return false;\n        }\n        if (scheme) {\n            let resolving = true;\n            while (resolving) {\n                resolving = _resolve();\n            }\n        }\n    }\n    function removeSelfClosingTags(str) {\n        const split = (str || '').split('/>');\n        let newhtml = '';\n        for (let i = 0; i < split.length - 1; i++) {\n            const edsplit = split[i].split('<');\n            newhtml += split[i] + '></' + edsplit[edsplit.length - 1].split(' ')[0] + '>';\n        }\n        return newhtml + split[split.length - 1];\n    }\n    function cleanScheme(html) {\n        return DOM.$clean(removeSelfClosingTags(html));\n    }\n    return class GUIScheme {\n        constructor(url) {\n            console.debug('GUIScheme::construct()', url);\n            this.url = url;\n            this.scheme = null;\n            this.triggers = { render: [] };\n        }\n        destroy() {\n            DOM.$empty(this.scheme);\n            this.scheme = null;\n            this.triggers = {};\n        }\n        on(f, fn) {\n            this.triggers[f].push(fn);\n        }\n        _trigger(f, args) {\n            args = args || [];\n            if (this.triggers[f]) {\n                this.triggers[f].forEach(fn => {\n                    fn.apply(this, args);\n                });\n            }\n        }\n        _load(html, src) {\n            let doc = document.createDocumentFragment();\n            let wrapper = document.createElement('div');\n            wrapper.innerHTML = html;\n            doc.appendChild(wrapper);\n            this.scheme = doc.cloneNode(true);\n            if (a.getConfig('DebugScheme')) {\n                console.group('Scheme::_load() validation', src);\n                this.scheme.querySelectorAll('*').forEach(node => {\n                    const tagName = node.tagName.toLowerCase();\n                    const gelData = GUIElement.getRegisteredElement(tagName);\n                    if (gelData) {\n                        const ac = gelData.metadata.allowedChildren;\n                        if (ac instanceof Array && ac.length) {\n                            const childrenTagNames = node.children.map(sNode => {\n                                return sNode.tagName.toLowerCase();\n                            });\n                            childrenTagNames.forEach((chk, idx) => {\n                                const found = ac.indexOf(chk);\n                                if (found === -1) {\n                                    console.warn(chk, node.children[idx], 'is not a valid child of type', tagName);\n                                }\n                            });\n                        }\n                        const ap = gelData.metadata.allowedParents;\n                        if (ap instanceof Array && ap.length) {\n                            const parentTagName = node.parentNode.tagName.toLowerCase();\n                            if (ap.indexOf(parentTagName) === -1) {\n                                console.warn(parentTagName, node.parentNode, 'is in an invalid parent of type', tagName);\n                            }\n                        }\n                    }\n                });\n                console.groupEnd();\n            }\n            wrapper = null;\n            doc = null;\n        }\n        load(cb, cbxhr) {\n            cbxhr = cbxhr || function () {\n            };\n            console.debug('GUIScheme::load()', this.url);\n            let src = this.url;\n            if (src.substr(0, 1) !== '/' && !src.match(/^(https?|ftp)/)) {\n                src = a.getBrowserPath(src);\n            }\n            axios({\n                url: src,\n                method: 'GET'\n            }).then(response => {\n                const html = cleanScheme(response.data);\n                cbxhr(false, html);\n                this._load(html, src);\n                cb(false, this.scheme);\n            }).catch(err => {\n                cb('Failed to fetch scheme: ' + err.message);\n                cbxhr(true);\n            });\n        }\n        getFragment(id, type) {\n            let content = null;\n            if (id) {\n                if (type) {\n                    content = this.scheme.querySelector(type + '[data-id=\"' + id + '\"]');\n                } else {\n                    content = this.scheme.querySelector('application-window[data-id=\"' + id + '\"]') || this.scheme.querySelector('application-dialog[data-id=\"' + id + '\"]') || this.scheme.querySelector('application-fragment[data-id=\"' + id + '\"]');\n                }\n            }\n            return content;\n        }\n        parse(id, type, win, onparse, args) {\n            const content = this.getFragment(id, type);\n            console.debug('GUIScheme::parse()', id);\n            if (!content) {\n                console.error('GUIScheme::parse()', 'No fragment found', id + '@' + type);\n                return null;\n            }\n            type = type || content.tagName.toLowerCase();\n            args = args || {};\n            if (content) {\n                const node = content.cloneNode(true);\n                if (args.resolve !== false) {\n                    resolveFragments(this, node);\n                }\n                GUIElement.parseNode(win, node, type, args, onparse, id);\n                return node;\n            }\n            return null;\n        }\n        render(win, id, root, type, onparse, args) {\n            root = root || win._getRoot();\n            if (root instanceof GUIElement) {\n                root = root.$element;\n            }\n            function setWindowProperties(frag) {\n                if (frag) {\n                    const width = parseInt(frag.getAttribute('data-width'), 10) || 0;\n                    const height = parseInt(frag.getAttribute('data-height'), 10) || 0;\n                    const allow_maximize = frag.getAttribute('data-allow_maximize');\n                    const allow_minimize = frag.getAttribute('data-allow_minimize');\n                    const allow_close = frag.getAttribute('data-allow_close');\n                    const allow_resize = frag.getAttribute('data-allow_resize');\n                    if (!isNaN(width) && width > 0 || !isNaN(height) && height > 0) {\n                        win._resize(width, height);\n                    }\n                    win._setProperty('allow_maximize', allow_maximize);\n                    win._setProperty('allow_minimize', allow_minimize);\n                    win._setProperty('allow_close', allow_close);\n                    win._setProperty('allow_resize', allow_resize);\n                }\n            }\n            console.debug('GUIScheme::render()', id);\n            const content = this.parse(id, type, win, onparse, args);\n            addChildren(content, root);\n            root.querySelectorAll('application-fragment').forEach(e => {\n                DOM.$remove(e);\n            });\n            if (!win._restored) {\n                setWindowProperties(this.getFragment(id));\n            }\n            this._trigger('render', [root]);\n        }\n        getHTML() {\n            return this.scheme.firstChild.innerHTML;\n        }\n        static fromString(str) {\n            const inst = new GUIScheme(null);\n            const cleaned = cleanScheme(str);\n            inst._load(cleaned, '<html>');\n            return inst;\n        }\n    };\n});\ndefine('skylark-osjsv2-client/gui/menu',[\n    '../utils/gui',\n    '../utils/dom',\n    '../utils/events',\n    './element',\n    '../core/window-manager',\n    '../helpers/hooks'\n], function (GUI, DOM, Events, GUIElement, WindowManager, a) {\n    'use strict';\n    let lastMenu;\n    function clickWrapper(ev, pos, onclick, original) {\n        ev.stopPropagation();\n        let t = ev.target;\n        if (t && t.tagName === 'LABEL') {\n            t = t.parentNode;\n        }\n        let isExpander = false;\n        if (t && t.tagName === 'GUI-MENU-ENTRY') {\n            let subMenu = t.querySelector('gui-menu');\n            isExpander = !!subMenu;\n            try {\n                if (isExpander && !ev.isTrusted) {\n                    t.parentNode.querySelectorAll('gui-menu-entry').forEach(pn => {\n                        DOM.$removeClass(pn, 'active');\n                    });\n                    DOM.$addClass(t, 'active');\n                }\n            } catch (e) {\n                console.warn(e);\n            }\n            onclick(ev, pos, t, original, isExpander);\n        }\n    }\n    function clamp(r) {\n        function _clamp(rm) {\n            rm.querySelectorAll('gui-menu-entry').forEach(function (srm) {\n                const sm = srm.querySelector('gui-menu');\n                if (sm) {\n                    sm.style.left = String(-parseInt(sm.offsetWidth, 10)) + 'px';\n                    _clamp(sm);\n                }\n            });\n        }\n        const pos = DOM.$position(r);\n        if (pos && window.innerWidth - pos.right < r.offsetWidth) {\n            DOM.$addClass(r, 'gui-overflowing');\n            _clamp(r);\n        }\n        DOM.$addClass(r, 'gui-showing');\n    }\n    function clampSubMenu(sm) {\n        if (sm) {\n            const pos = DOM.$position(sm);\n            const wm = WindowManager.instance;\n            const space = wm.getWindowSpace(true);\n            if (pos) {\n                const diff = space.height - pos.bottom;\n                if (diff < 0) {\n                    sm.style.marginTop = String(diff) + 'px';\n                }\n            }\n        }\n    }\n    function blur(ev) {\n        if (lastMenu) {\n            lastMenu(ev);\n        }\n        lastMenu = null;\n        a.triggerHook('menuBlur');\n    }\n    function create(items, ev, customInstance) {\n        items = items || [];\n        blur(ev);\n        let root = customInstance;\n        let callbackMap = [];\n        function resolveItems(arr, par) {\n            arr.forEach(function (iter) {\n                const props = {\n                    label: iter.title,\n                    icon: iter.icon,\n                    disabled: iter.disabled,\n                    labelHTML: iter.titleHTML,\n                    type: iter.type,\n                    checked: iter.checked\n                };\n                const entry = GUI.createElement('gui-menu-entry', props);\n                if (iter.menu) {\n                    const nroot = GUI.createElement('gui-menu', {});\n                    resolveItems(iter.menu, nroot);\n                    entry.appendChild(nroot);\n                }\n                if (iter.onClick) {\n                    const index = callbackMap.push(iter.onClick);\n                    entry.setAttribute('data-callback-id', String(index - 1));\n                }\n                par.appendChild(entry);\n            });\n        }\n        if (!root) {\n            root = GUI.createElement('gui-menu', {});\n            resolveItems(items || [], root);\n            GUIElement.createFromNode(root, null, 'gui-menu').build(true);\n            Events.$bind(root, 'mouseover', function (ev, pos) {\n                if (ev.target && ev.target.tagName === 'GUI-MENU-ENTRY') {\n                    setTimeout(() => {\n                        clampSubMenu(ev.target.querySelector('gui-menu'));\n                    }, 1);\n                }\n            }, true);\n            Events.$bind(root, 'click', function (ev, pos) {\n                clickWrapper(ev, pos, function (ev, pos, t, orig, isExpander) {\n                    const index = parseInt(t.getAttribute('data-callback-id'), 10);\n                    if (callbackMap[index]) {\n                        callbackMap[index](ev, pos);\n                    }\n                    if (!isExpander) {\n                        blur(ev);\n                    }\n                });\n            }, true);\n        }\n        if (root.$element) {\n            root = root.$element;\n        }\n        const wm = WindowManager.instance;\n        const space = wm.getWindowSpace(true);\n        const pos = Events.mousePosition(ev);\n        DOM.$addClass(root, 'gui-root-menu');\n        root.style.left = pos.x + 'px';\n        root.style.top = pos.y + 'px';\n        document.body.appendChild(root);\n        setTimeout(function () {\n            const pos = DOM.$position(root);\n            if (pos) {\n                if (pos.right > space.width) {\n                    const newLeft = Math.round(space.width - pos.width);\n                    root.style.left = Math.max(0, newLeft) + 'px';\n                }\n                if (pos.bottom > space.height) {\n                    const newTop = Math.round(space.height - pos.height);\n                    root.style.top = Math.max(0, newTop) + 'px';\n                }\n            }\n            clamp(root);\n            lastMenu = function () {\n                callbackMap = [];\n                if (root) {\n                    root.querySelectorAll('gui-menu-entry').forEach(function (el) {\n                        Events.$unbind(el);\n                    });\n                    Events.$unbind(root);\n                }\n                root = DOM.$remove(root);\n            };\n        }, 1);\n    }\n    function setActive(menu) {\n        blur();\n        lastMenu = menu;\n    }\n    return {\n        clickWrapper: clickWrapper,\n        clamp: clamp,\n        blur: blur,\n        create: create,\n        setActive: setActive\n    };\n});\ndefine('skylark-osjsv2-client/core/window',[\n    '../vfs/file',\n//    './application',\n    './window-manager',\n    '../gui/element',\n    '../gui/scheme',\n    '../helpers/event-handler',\n    './theme',\n    '../utils/dom',\n    '../utils/gui',\n    '../utils/events',\n    '../utils/compability',\n    '../utils/keycodes',\n    '../gui/menu',\n    './locales',\n//    './init'\n], function (FileMetadata, WindowManager, Element, GUIScheme, EventHandler, Theme, DOM, GUI, Events, Compability, Keycodes, Menu, locales) {\n    'use strict';\n    function camelCased(str) {\n        return str.replace(/_([a-z])/g, function (g) {\n            return g[1].toUpperCase();\n        });\n    }\n    const getNextZindex = function () {\n        let _lzindex = 1;\n        let _ltzindex = 100000;\n        return function (ontop) {\n            if (typeof ontop !== 'undefined' && ontop === true) {\n                return _ltzindex += 2;\n            }\n            return _lzindex += 2;\n        };\n    }();\n    function getWindowSpace() {\n        const wm = WindowManager.instance;\n        if (wm) {\n            return wm.getWindowSpace();\n        }\n        return {\n            top: 0,\n            left: 0,\n            width: document.body.offsetWidth,\n            height: document.body.offsetHeight\n        };\n    }\n    function waitForAnimation(win, cb) {\n        const wm = WindowManager.instance;\n        const anim = wm ? wm.getSetting('animations') : false;\n        if (anim) {\n            win._animationCallback = cb;\n        } else {\n            cb();\n        }\n    }\n    const createMediaQueries = function () {\n        let queries;\n        function _createQueries() {\n            let result = {};\n            const wm = WindowManager.instance;\n            if (wm) {\n                const qs = wm.getDefaultSetting('mediaQueries') || {};\n                Object.keys(qs).forEach(function (k) {\n                    if (qs[k]) {\n                        result[k] = function (w, h, ref) {\n                            return w <= qs[k];\n                        };\n                    }\n                });\n            }\n            return result;\n        }\n        return function () {\n            if (!queries) {\n                queries = _createQueries();\n            }\n            return queries;\n        };\n    }();\n    function checkMediaQueries(win) {\n        const wm = WindowManager.instance;\n        if (!win._$element || !wm) {\n            return;\n        }\n        let n = '';\n        let k;\n        const qs = win._properties.media_queries || {};\n        const w = win._$element.offsetWidth;\n        const h = win._$element.offsetHeight;\n        for (k in qs) {\n            if (qs.hasOwnProperty(k)) {\n                if (qs[k](w, h, win)) {\n                    n = k;\n                    break;\n                }\n            }\n        }\n        win._$element.setAttribute('data-media', n);\n    }\n    let _WID = 0;\n    let _DEFAULT_WIDTH = 200;\n    let _DEFAULT_HEIGHT = 200;\n    let _DEFAULT_MIN_HEIGHT = 150;\n    let _DEFAULT_MIN_WIDTH = 150;\n    let _DEFAULT_SND_VOLUME = 1;\n    let _NAMES = [];\n    return class Window {\n        constructor(name, opts, appRef) {\n            if (_NAMES.indexOf(name) >= 0) {\n                throw new Error(locales._('ERR_WIN_DUPLICATE_FMT', name));\n            }\n            //if (appRef && !(appRef instanceof Application)) { // modifed by lwf\n            //    throw new TypeError('appRef given was not instance of Application');\n            //}\n            opts = Object.assign({}, {\n                icon: Theme.getIcon('apps/preferences-system-windows.png'),\n                width: _DEFAULT_WIDTH,\n                height: _DEFAULT_HEIGHT,\n                title: name,\n                tag: name,\n                auto_size: false\n            }, opts);\n            console.group('Window::constructor()', _WID, arguments);\n            this._$element = null;\n            this._$root = null;\n            this._$top = null;\n            this._$winicon = null;\n            this._$loading = null;\n            this._$disabled = null;\n            this._$resize = null;\n            this._$warning = null;\n            this._opts = opts;\n            this._app = appRef || null;\n            this._destroyed = false;\n            this._restored = false;\n            this._loaded = false;\n            this._initialized = false;\n            this._disabled = true;\n            this._loading = false;\n            this._wid = _WID;\n            this._icon = opts.icon;\n            this._name = name;\n            this._title = opts.title;\n            this._tag = opts.tag;\n            this._position = {\n                x: opts.x,\n                y: opts.y\n            };\n            this._dimension = {\n                w: opts.width,\n                h: opts.height\n            };\n            this._children = [];\n            this._parent = null;\n            this._origtitle = this._title;\n            this._lastDimension = this._dimension;\n            this._lastPosition = this._position;\n            this._sound = null;\n            this._soundVolume = _DEFAULT_SND_VOLUME;\n            this._scheme = null;\n            this._properties = {\n                gravity: null,\n                allow_move: true,\n                allow_resize: true,\n                allow_minimize: true,\n                allow_maximize: true,\n                allow_close: true,\n                allow_windowlist: true,\n                allow_drop: false,\n                allow_iconmenu: true,\n                allow_ontop: true,\n                allow_hotkeys: true,\n                allow_session: true,\n                key_capture: false,\n                start_focused: true,\n                min_width: _DEFAULT_MIN_HEIGHT,\n                min_height: _DEFAULT_MIN_WIDTH,\n                max_width: null,\n                max_height: null,\n                media_queries: createMediaQueries()\n            };\n            this._state = {\n                focused: false,\n                modal: false,\n                minimized: false,\n                maximized: false,\n                ontop: false,\n                onbottom: false\n            };\n            this._animationCallback = null;\n            this._queryTimer = null;\n            this._evHandler = new EventHandler(name, [\n                'focus',\n                'blur',\n                'destroy',\n                'maximize',\n                'minimize',\n                'restore',\n                'move',\n                'moved',\n                'resize',\n                'resized',\n                'keydown',\n                'keyup',\n                'keypress',\n                'drop',\n                'drop:upload',\n                'drop:file'\n            ]);\n            Object.keys(opts).forEach(k => {\n                if (typeof this._properties[k] !== 'undefined') {\n                    this._properties[k] = opts[k];\n                } else if (typeof this._state[k] !== 'undefined' && k !== 'focused') {\n                    this._state[k] = opts[k];\n                } else if (('sound', 'sound_volume').indexOf(k) !== -1) {\n                    this['_' + camelCased(k)] = opts[k];\n                }\n            });\n            ((properties, position) => {\n                if (!properties.gravity && typeof position.x === 'undefined' || typeof position.y === 'undefined') {\n                    const wm = WindowManager.instance;\n                    const np = wm ? wm.getWindowPosition() : {\n                        x: 0,\n                        y: 0\n                    };\n                    position.x = np.x;\n                    position.y = np.y;\n                }\n            })(this._properties, this._position);\n            ((properties, dimension) => {\n                if (properties.min_height && dimension.h < properties.min_height) {\n                    dimension.h = properties.min_height;\n                }\n                if (properties.max_width && dimension.w < properties.max_width) {\n                    dimension.w = properties.max_width;\n                }\n                if (properties.max_height && dimension.h > properties.max_height) {\n                    dimension.h = properties.max_height;\n                }\n                if (properties.max_width && dimension.w > properties.max_width) {\n                    dimension.w = properties.max_width;\n                }\n            })(this._properties, this._dimension);\n            ((position, dimension) => {\n                if (appRef && appRef.__args && appRef.__args.__windows__) {\n                    appRef.__args.__windows__.forEach(restore => {\n                        if (!this._restored && restore.name && restore.name === this._name) {\n                            position.x = restore.position.x;\n                            position.y = restore.position.y;\n                            if (this._properties.allow_resize) {\n                                dimension.w = restore.dimension.w;\n                                dimension.h = restore.dimension.h;\n                            }\n                            console.info('RESTORED FROM SESSION', restore);\n                            this._restored = true;\n                        }\n                    });\n                }\n            })(this._position, this._dimension);\n            ((properties, position, dimension, restored) => {\n                const grav = properties.gravity;\n                if (grav && !restored) {\n                    if (grav === 'center') {\n                        position.y = window.innerHeight / 2 - this._dimension.h / 2;\n                        position.x = window.innerWidth / 2 - this._dimension.w / 2;\n                    } else {\n                        const space = getWindowSpace();\n                        if (grav.match(/^south/)) {\n                            position.y = space.height - dimension.h;\n                        } else {\n                            position.y = space.top;\n                        }\n                        if (grav.match(/west$/)) {\n                            position.x = space.left;\n                        } else {\n                            position.x = space.width - dimension.w;\n                        }\n                    }\n                }\n            })(this._properties, this._position, this._dimension, this._restored);\n            console.debug('State', this._state);\n            console.debug('Properties', this._properties);\n            console.debug('Position', this._position);\n            console.debug('Dimension', this._dimension);\n            console.groupEnd();\n            _WID++;\n        }\n        init(_wm, _app) {\n            if (this._initialized || this._loaded) {\n                return this._$root;\n            }\n            this._$element = DOM.$create('application-window', {\n                className: ((n, t) => {\n                    const classNames = [\n                        'Window',\n                        DOM.$safeName(n)\n                    ];\n                    if (t && n !== t) {\n                        classNames.push(DOM.$safeName(t));\n                    }\n                    return classNames;\n                })(this._name, this._tag).join(' '),\n                style: {\n                    width: this._dimension.w + 'px',\n                    height: this._dimension.h + 'px',\n                    top: this._position.y + 'px',\n                    left: this._position.x + 'px',\n                    zIndex: getNextZindex(this._state.ontop)\n                },\n                data: {\n                    window_id: this._wid,\n                    allow_resize: this._properties.allow_resize,\n                    allow_minimize: this._properties.allow_minimize,\n                    allow_maximize: this._properties.allow_maximize,\n                    allow_close: this._properties.allow_close\n                },\n                aria: {\n                    role: 'application',\n                    live: 'polite',\n                    hidden: 'false'\n                }\n            });\n            this._$root = document.createElement('application-window-content');\n            this._$resize = document.createElement('application-window-resize');\n            [\n                'nw',\n                'n',\n                'ne',\n                'e',\n                'se',\n                's',\n                'sw',\n                'w'\n            ].forEach(i => {\n                let h = document.createElement('application-window-resize-handle');\n                h.setAttribute('data-direction', i);\n                this._$resize.appendChild(h);\n                h = null;\n            });\n            this._$loading = document.createElement('application-window-loading');\n            this._$disabled = document.createElement('application-window-disabled');\n            this._$top = document.createElement('application-window-top');\n            this._$winicon = document.createElement('application-window-icon');\n            this._$winicon.setAttribute('role', 'button');\n            this._$winicon.setAttribute('aria-haspopup', 'true');\n            this._$winicon.setAttribute('aria-label', 'Window Menu');\n            const windowTitle = document.createElement('application-window-title');\n            windowTitle.setAttribute('role', 'heading');\n            let preventTimeout;\n            const _onanimationend = ev => {\n                if (typeof this._animationCallback === 'function') {\n                    clearTimeout(preventTimeout);\n                    preventTimeout = setTimeout(() => {\n                        this._animationCallback(ev);\n                        this._animationCallback = false;\n                        preventTimeout = clearTimeout(preventTimeout);\n                    }, 10);\n                }\n            };\n            Events.$bind(this._$element, 'transitionend', _onanimationend);\n            Events.$bind(this._$element, 'animationend', _onanimationend);\n            Events.$bind(this._$element, 'click', ev => {\n                this._focus();\n            }, true);\n            Events.$bind(this._$top, 'mouseup', ev => {\n                const t = ev.target;\n                if (t) {\n                    if (t.tagName.match(/^APPLICATION\\-WINDOW\\-BUTTON/)) {\n                        this._onWindowButtonClick(ev, t, t.getAttribute('data-action'));\n                    } else if (t.tagName === 'APPLICATION-WINDOW-ICON') {\n                        this._onWindowIconClick(ev);\n                    }\n                }\n            });\n            Events.$bind(this._$top, 'dblclick', () => {\n                this._maximize();\n            });\n            ((properties, main, compability) => {\n                if (properties.allow_drop && compability.dnd) {\n                    const border = document.createElement('div');\n                    border.className = 'WindowDropRect';\n                    GUI.createDroppable(main, {\n                        onOver: (ev, el, args) => {\n                            main.setAttribute('data-dnd-state', 'true');\n                        },\n                        onLeave: () => {\n                            main.setAttribute('data-dnd-state', 'false');\n                        },\n                        onDrop: () => {\n                            main.setAttribute('data-dnd-state', 'false');\n                        },\n                        onItemDropped: (ev, el, item, args) => {\n                            main.setAttribute('data-dnd-state', 'false');\n                            return this._onDndEvent(ev, 'itemDrop', item, args, el);\n                        },\n                        onFilesDropped: (ev, el, files, args) => {\n                            main.setAttribute('data-dnd-state', 'false');\n                            return this._onDndEvent(ev, 'filesDrop', files, args, el);\n                        }\n                    });\n                }\n            })(this._properties, this._$element, Compability.getCompability());\n            windowTitle.appendChild(document.createTextNode(this._title));\n            this._$top.appendChild(this._$winicon);\n            this._$top.appendChild(windowTitle);\n            this._$top.appendChild(DOM.$create('application-window-button-minimize', {\n                className: 'application-window-button-entry',\n                data: { action: 'minimize' },\n                aria: {\n                    role: 'button',\n                    label: 'Minimize Window'\n                }\n            }));\n            this._$top.appendChild(DOM.$create('application-window-button-maximize', {\n                className: 'application-window-button-entry',\n                data: { action: 'maximize' },\n                aria: {\n                    role: 'button',\n                    label: 'Maximize Window'\n                }\n            }));\n            this._$top.appendChild(DOM.$create('application-window-button-close', {\n                className: 'application-window-button-entry',\n                data: { action: 'close' },\n                aria: {\n                    role: 'button',\n                    label: 'Close Window'\n                }\n            }));\n            this._$loading.appendChild(document.createElement('application-window-loading-indicator'));\n            this._$element.appendChild(this._$top);\n            this._$element.appendChild(this._$root);\n            this._$element.appendChild(this._$resize);\n            this._$element.appendChild(this._$disabled);\n            this._$element.appendChild(this._$loading);\n            document.body.appendChild(this._$element);\n            this._onChange('create');\n            this._toggleLoading(false);\n            this._toggleDisabled(false);\n            this._setIcon(Theme.getIcon(this._icon));\n            this._updateMarkup();\n            if (this._sound) {\n                Theme.playSound(this._sound, this._soundVolume);\n            }\n            this._initialized = true;\n            this._emit('init', [this._$root]);\n            return this._$root;\n        }\n        _inited() {\n            if (this._loaded) {\n                return;\n            }\n            this._loaded = true;\n            this._onResize();\n            if (!this._restored) {\n                if (this._state.maximized) {\n                    this._maximize(true);\n                } else if (this._state.minimized) {\n                    this._minimize(true);\n                } else {\n                    if (this._opts.auto_size) {\n                        let maxWidth = 0;\n                        let maxHeight = 0;\n                        const traverseTree = el => {\n                            el.children.forEach(sel => {\n                                maxWidth = Math.max(maxWidth, sel.offsetWidth);\n                                maxHeight = Math.max(maxHeight, sel.offsetHeight);\n                                if (sel.children.length) {\n                                    traverseTree(sel);\n                                }\n                            });\n                        };\n                        traverseTree(this._$root);\n                        this._resize(maxWidth, maxHeight, true);\n                    }\n                }\n            }\n            let inittimeout = setTimeout(() => {\n                this._emit('inited', []);\n                inittimeout = clearTimeout(inittimeout);\n            }, 10);\n            if (this._app) {\n                this._app._emit('initedWindow', [this]);\n            }\n            console.debug('Window::_inited()', this._name);\n        }\n        destroy(shutdown) {\n            if (this._destroyed) {\n                return false;\n            }\n            this._emit('destroy');\n            this._destroyed = true;\n            const wm = WindowManager.instance;\n            console.group('Window::destroy()');\n            const _removeDOM = () => {\n                this._setWarning(null);\n                this._$root = null;\n                this._$top = null;\n                this._$winicon = null;\n                this._$loading = null;\n                this._$disabled = null;\n                this._$resize = null;\n                this._$warning = null;\n                this._$element = DOM.$remove(this._$element);\n            };\n            const _destroyDOM = () => {\n                if (this._$element) {\n                    this._$element.querySelectorAll('*').forEach(iter => {\n                        if (iter) {\n                            Events.$unbind(iter);\n                        }\n                    });\n                }\n                if (this._parent) {\n                    this._parent._removeChild(this);\n                }\n                this._parent = null;\n                this._removeChildren();\n            };\n            const _destroyWin = () => {\n                if (wm) {\n                    wm.removeWindow(this);\n                }\n                const curWin = wm ? wm.getCurrentWindow() : null;\n                if (curWin && curWin._wid === this._wid) {\n                    wm.setCurrentWindow(null);\n                }\n                const lastWin = wm ? wm.getLastWindow() : null;\n                if (lastWin && lastWin._wid === this._wid) {\n                    wm.setLastWindow(null);\n                }\n            };\n            const _animateClose = fn => {\n                //if (!init.running()) { // modified by lwf\n                //    fn();\n                //} else {\n                    if (this._$element) {\n                        const anim = wm ? wm.getSetting('animations') : false;\n                        if (anim) {\n                            this._$element.setAttribute('data-closing', 'true');\n                            this._animationCallback = fn;\n                            let animatetimeout = setTimeout(() => {\n                                if (this._animationCallback) {\n                                    this._animationCallback();\n                                }\n                                animatetimeout = clearTimeout(animatetimeout);\n                            }, 1000);\n                        } else {\n                            this._$element.style.display = 'none';\n                            fn();\n                        }\n                    }\n                //}\n            };\n            this._onChange('close');\n            _animateClose(() => {\n                _removeDOM();\n            });\n            _destroyDOM();\n            _destroyWin();\n            if (this._app) {\n                this._app._onMessage('destroyWindow', this, {});\n            }\n            if (this._evHandler) {\n                this._evHandler.destroy();\n            }\n            this._app = null;\n            this._evHandler = null;\n            this._args = {};\n            this._queryTimer = clearTimeout(this._queryTimer);\n            this._scheme = this._scheme ? this._scheme.destroy() : null;\n            console.groupEnd();\n            return true;\n        }\n        _find(id, root) {\n            const q = '[data-id=\"' + id + '\"]';\n            return this._findByQuery(q, root);\n        }\n        _render(id, scheme, root, args) {\n            if (scheme) {\n                root = root || this._getRoot();\n                args = args || {};\n                if (typeof this._opts.translator === 'function') {\n                    args.undefined = this._opts.translator;\n                }\n                this._scheme = typeof scheme === 'string' ? GUIScheme.fromString(scheme) : scheme;\n            }\n            if (this._scheme instanceof GUIScheme) {\n                this._scheme.render(this, id, root, null, null, args);\n            } else {\n                console.warn('Got an invalid scheme in window render()', this._scheme);\n            }\n            return this._scheme;\n        }\n        _findDOM(id, root) {\n            root = root || this._getRoot();\n            const q = '[data-id=\"' + id + '\"]';\n            return root.querySelector(q);\n        }\n        _create(tagName, params, parentNode, applyArgs) {\n            parentNode = parentNode || this._getRoot();\n            return Element.createInto(tagName, params, parentNode, applyArgs, this);\n        }\n        _findByQuery(query, root, all) {\n            root = root || this._getRoot();\n            if (!(root instanceof window.Node)) {\n                return all ? [] : null;\n            }\n            if (all) {\n                return root.querySelectorAll(query).map(el => {\n                    return Element.createFromNode(el, query);\n                });\n            }\n            const el = root.querySelector(query);\n            return Element.createFromNode(el, query);\n        }\n        _emit(k, args) {\n            if (!this._destroyed) {\n                if (this._evHandler) {\n                    return this._evHandler.emit(k, args);\n                }\n            }\n            return false;\n        }\n        _on(k, func) {\n            if (this._evHandler) {\n                return this._evHandler.on(k, func, this);\n            }\n            return false;\n        }\n        _off(k, idx) {\n            if (this._evHandler) {\n                return this._evHandler.off(k, idx);\n            }\n            return false;\n        }\n        _addChild(w, wmAdd, wmFocus) {\n            console.debug('Window::_addChild()');\n            w._parent = this;\n            const wm = WindowManager.instance;\n            if (wmAdd && wm) {\n                wm.addWindow(w, wmFocus);\n            }\n            this._children.push(w);\n            return w;\n        }\n        _removeChild(w) {\n            let found = false;\n            this._children.forEach((child, i) => {\n                if (child && child._wid === w._wid) {\n                    console.debug('Window::_removeChild()');\n                    child.destroy();\n                    this._children[i] = null;\n                    found = true;\n                }\n            });\n            return found;\n        }\n        _getChild(value, key) {\n            key = key || 'wid';\n            const found = this._getChildren().filter(c => {\n                return c['_' + key] === value;\n            });\n            return key === 'tag' ? found : found[0];\n        }\n        _getChildById(id) {\n            return this._getChild(id, 'wid');\n        }\n        _getChildByName(name) {\n            return this._getChild(name, 'name');\n        }\n        _getChildrenByTag(tag) {\n            return this._getChild(tag, 'tag');\n        }\n        _getChildren() {\n            return this._children.filter(w => !!w);\n        }\n        _removeChildren() {\n            this._children.forEach((child, i) => {\n                if (child) {\n                    child.destroy();\n                }\n            });\n            this._children = [];\n        }\n        _close() {\n            if (this._disabled || this._destroyed) {\n                return false;\n            }\n            console.debug('Window::_close()');\n            this._blur();\n            this.destroy();\n            return true;\n        }\n        _minimize(force) {\n            if (!this._properties.allow_minimize || this._destroyed) {\n                return false;\n            }\n            if (!force && this._state.minimized) {\n                this._restore(false, true);\n                return true;\n            }\n            console.debug(this._name, '>', 'Window::_minimize()');\n            this._blur();\n            this._state.minimized = true;\n            this._$element.setAttribute('data-minimized', 'true');\n            waitForAnimation(this, () => {\n                this._$element.style.display = 'none';\n                this._emit('minimize');\n            });\n            this._onChange('minimize');\n            const wm = WindowManager.instance;\n            const win = wm ? wm.getCurrentWindow() : null;\n            if (win && win._wid === this._wid) {\n                wm.setCurrentWindow(null);\n            }\n            this._updateMarkup();\n            return true;\n        }\n        _maximize(force) {\n            if (!this._properties.allow_maximize || this._destroyed || !this._$element) {\n                return false;\n            }\n            if (!force && this._state.maximized) {\n                this._restore(true, false);\n                return true;\n            }\n            console.debug(this._name, '>', 'Window::_maximize()');\n            this._lastPosition = {\n                x: this._position.x,\n                y: this._position.y\n            };\n            this._lastDimension = {\n                w: this._dimension.w,\n                h: this._dimension.h\n            };\n            this._state.maximized = true;\n            const s = this._getMaximizedSize();\n            this._$element.style.zIndex = getNextZindex(this._state.ontop);\n            this._$element.style.top = s.top + 'px';\n            this._$element.style.left = s.left + 'px';\n            this._$element.style.width = s.width + 'px';\n            this._$element.style.height = s.height + 'px';\n            this._$element.setAttribute('data-maximized', 'true');\n            this._dimension.w = s.width;\n            this._dimension.h = s.height;\n            this._position.x = s.left;\n            this._position.y = s.top;\n            this._focus();\n            waitForAnimation(this, () => {\n                this._emit('maximize');\n            });\n            this._onChange('maximize');\n            this._onResize();\n            this._updateMarkup();\n            return true;\n        }\n        _restore(max, min) {\n            if (!this._$element || this._destroyed) {\n                return;\n            }\n            const restoreMaximized = () => {\n                if (max && this._state.maximized) {\n                    this._move(this._lastPosition.x, this._lastPosition.y);\n                    this._resize(this._lastDimension.w, this._lastDimension.h);\n                    this._state.maximized = false;\n                    this._$element.setAttribute('data-maximized', 'false');\n                }\n            };\n            const restoreMinimized = () => {\n                if (min && this._state.minimized) {\n                    this._$element.style.display = 'block';\n                    this._$element.setAttribute('data-minimized', 'false');\n                    this._state.minimized = false;\n                }\n            };\n            console.debug(this._name, '>', 'Window::_restore()');\n            max = typeof max === 'undefined' ? true : max === true;\n            min = typeof min === 'undefined' ? true : min === true;\n            restoreMaximized();\n            restoreMinimized();\n            waitForAnimation(this, () => {\n                this._emit('restore');\n            });\n            this._onChange('restore');\n            this._onResize();\n            this._focus();\n            this._updateMarkup();\n        }\n        _focus(force) {\n            if (!this._$element || this._destroyed) {\n                return false;\n            }\n            this._toggleAttentionBlink(false);\n            this._$element.style.zIndex = getNextZindex(this._state.ontop);\n            this._$element.setAttribute('data-focused', 'true');\n            const wm = WindowManager.instance;\n            const win = wm ? wm.getCurrentWindow() : null;\n            if (win && win._wid !== this._wid) {\n                win._blur();\n            }\n            if (wm) {\n                wm.setCurrentWindow(this);\n                wm.setLastWindow(this);\n            }\n            if (!this._state.focused || force) {\n                this._onChange('focus');\n                this._emit('focus');\n            }\n            this._state.focused = true;\n            this._updateMarkup();\n            return true;\n        }\n        _blur(force) {\n            if (!this._$element || this._destroyed || !force && !this._state.focused) {\n                return false;\n            }\n            this._$element.setAttribute('data-focused', 'false');\n            this._state.focused = false;\n            this._onChange('blur');\n            this._emit('blur');\n            this._blurGUI();\n            const wm = WindowManager.instance;\n            const win = wm ? wm.getCurrentWindow() : null;\n            if (win && win._wid === this._wid) {\n                wm.setCurrentWindow(null);\n            }\n            this._updateMarkup();\n            return true;\n        }\n        _blurGUI() {\n            this._$root.querySelectorAll('input, textarea, select, iframe, button').forEach(el => {\n                el.blur();\n            });\n        }\n        _resizeTo(dw, dh, limit, move, container, force) {\n            if (!this._$element || (dw <= 0 || dh <= 0)) {\n                return;\n            }\n            limit = typeof limit === 'undefined' || limit === true;\n            let dx = 0;\n            let dy = 0;\n            if (container) {\n                const cpos = DOM.$position(container, this._$root);\n                dx = parseInt(cpos.left, 10);\n                dy = parseInt(cpos.top, 10);\n            }\n            const space = this._getMaximizedSize();\n            const cx = this._position.x + dx;\n            const cy = this._position.y + dy;\n            let newW = dw;\n            let newH = dh;\n            let newX = null;\n            let newY = null;\n            const _limitTo = () => {\n                if (cx + newW > space.width) {\n                    if (move) {\n                        newW = space.width;\n                        newX = space.left;\n                    } else {\n                        newW = space.width - cx + dx;\n                    }\n                } else {\n                    newW += dx;\n                }\n                if (cy + newH > space.height) {\n                    if (move) {\n                        newH = space.height;\n                        newY = space.top;\n                    } else {\n                        newH = space.height - cy + this._$top.offsetHeight + dy;\n                    }\n                } else {\n                    newH += dy;\n                }\n            };\n            const _moveTo = () => {\n                if (newX !== null) {\n                    this._move(newX, this._position.y);\n                }\n                if (newY !== null) {\n                    this._move(this._position.x, newY);\n                }\n            };\n            const _resizeFinished = () => {\n                const wm = WindowManager.instance;\n                const anim = wm ? wm.getSetting('animations') : false;\n                if (anim) {\n                    this._animationCallback = () => {\n                        this._emit('resized');\n                    };\n                } else {\n                    this._emit('resized');\n                }\n            };\n            if (limit) {\n                _limitTo();\n            }\n            this._resize(newW, newH, force);\n            _moveTo();\n            _resizeFinished();\n        }\n        _resize(w, h, force) {\n            const p = this._properties;\n            if (!this._$element || this._destroyed || !force && !p.allow_resize) {\n                return false;\n            }\n            const getNewSize = (n, min, max) => {\n                if (!isNaN(n) && n) {\n                    n = Math.max(n, min);\n                    if (max !== null) {\n                        n = Math.min(n, max);\n                    }\n                }\n                return n;\n            };\n            w = force ? w : getNewSize(w, p.min_width, p.max_width);\n            if (!isNaN(w) && w) {\n                this._$element.style.width = w + 'px';\n                this._dimension.w = w;\n            }\n            h = force ? h : getNewSize(h, p.min_height, p.max_height);\n            if (!isNaN(h) && h) {\n                this._$element.style.height = h + 'px';\n                this._dimension.h = h;\n            }\n            this._onResize();\n            return true;\n        }\n        _moveTo(pos) {\n            const wm = WindowManager.instance;\n            if (!wm) {\n                return;\n            }\n            const s = wm.getWindowSpace();\n            const cx = this._position.x;\n            const cy = this._position.y;\n            if (pos === 'left') {\n                this._move(s.left, cy);\n            } else if (pos === 'right') {\n                this._move(s.width - this._dimension.w, cy);\n            } else if (pos === 'top') {\n                this._move(cx, s.top);\n            } else if (pos === 'bottom') {\n                this._move(cx, s.height - this._dimension.h);\n            }\n        }\n        _move(x, y) {\n            if (!this._$element || this._destroyed || !this._properties.allow_move) {\n                return false;\n            }\n            if (typeof x === 'undefined' || typeof y === 'undefined') {\n                return false;\n            }\n            this._$element.style.top = y + 'px';\n            this._$element.style.left = x + 'px';\n            this._position.x = x;\n            this._position.y = y;\n            return true;\n        }\n        _toggleDisabled(t) {\n            if (this._$disabled) {\n                this._$disabled.style.display = t ? 'block' : 'none';\n            }\n            this._disabled = t ? true : false;\n            this._updateMarkup();\n        }\n        _toggleLoading(t) {\n            if (this._$loading) {\n                this._$loading.style.display = t ? 'block' : 'none';\n            }\n            this._loading = t ? true : false;\n            this._updateMarkup();\n        }\n        _updateMarkup(ui) {\n            if (!this._$element) {\n                return;\n            }\n            const t = this._loading || this._disabled;\n            const d = this._disabled;\n            const h = this._state.minimized;\n            const f = !this._state.focused;\n            this._$element.setAttribute('aria-busy', String(t));\n            this._$element.setAttribute('aria-hidden', String(h));\n            this._$element.setAttribute('aria-disabled', String(d));\n            this._$root.setAttribute('aria-hidden', String(f));\n            if (!ui) {\n                return;\n            }\n            const dmax = this._properties.allow_maximize === true ? 'inline-block' : 'none';\n            const dmin = this._properties.allow_minimize === true ? 'inline-block' : 'none';\n            const dclose = this._properties.allow_close === true ? 'inline-block' : 'none';\n            this._$top.querySelector('application-window-button-maximize').style.display = dmax;\n            this._$top.querySelector('application-window-button-minimize').style.display = dmin;\n            this._$top.querySelector('application-window-button-close').style.display = dclose;\n            const dres = this._properties.allow_resize === true;\n            this._$element.setAttribute('data-allow-resize', String(dres));\n        }\n        _toggleAttentionBlink(t) {\n            if (!this._$element || this._destroyed || this._state.focused) {\n                return false;\n            }\n            const el = this._$element;\n            const _blink = stat => {\n                if (el) {\n                    if (stat) {\n                        DOM.$addClass(el, 'WindowAttentionBlink');\n                    } else {\n                        DOM.$removeClass(el, 'WindowAttentionBlink');\n                    }\n                }\n                this._onChange(stat ? 'attention_on' : 'attention_off');\n            };\n            _blink(t);\n            return true;\n        }\n        _nextTabIndex(ev) {\n            const nextElement = GUI.getNextElement(ev.shiftKey, document.activeElement, this._$root);\n            if (nextElement) {\n                if (DOM.$hasClass(nextElement, 'gui-data-view')) {\n                    Element.createFromNode(nextElement).focus();\n                } else {\n                    try {\n                        nextElement.focus();\n                    } catch (e) {\n                    }\n                }\n            }\n        }\n        _onDndEvent(ev, type, item, args, el) {\n            if (this._disabled || this._destroyed) {\n                return false;\n            }\n            console.debug('Window::_onDndEvent()', type, item, args);\n            this._emit('drop', [\n                ev,\n                type,\n                item,\n                args,\n                el\n            ]);\n            if (item) {\n                if (type === 'filesDrop') {\n                    this._emit('drop:upload', [\n                        ev,\n                        item,\n                        args,\n                        el\n                    ]);\n                } else if (type === 'itemDrop' && item.type === 'file' && item.data) {\n                    this._emit('drop:file', [\n                        ev,\n                        new FileMetadata(item.data || {}),\n                        args,\n                        el\n                    ]);\n                }\n            }\n            return true;\n        }\n        _onKeyEvent(ev, type) {\n            if (this._destroyed || !this._state.focused) {\n                return false;\n            }\n            if (type === 'keydown' && ev.keyCode === Keycodes.TAB) {\n                this._nextTabIndex(ev);\n            }\n            this._emit(type, [\n                ev,\n                ev.keyCode,\n                ev.shiftKey,\n                ev.ctrlKey,\n                ev.altKey\n            ]);\n            return true;\n        }\n        _onResize() {\n            clearTimeout(this._queryTimer);\n            this._queryTimer = setTimeout(() => {\n                checkMediaQueries(this);\n                this._queryTimer = clearTimeout(this._queryTimer);\n            }, 20);\n        }\n        _onWindowIconClick(ev) {\n            if (!this._properties.allow_iconmenu || this._destroyed) {\n                return;\n            }\n            console.debug(this._name, '>', 'Window::_onWindowIconClick()');\n            const control = [\n                [\n                    this._properties.allow_minimize,\n                    () => {\n                        return {\n                            title: locales._('WINDOW_MINIMIZE'),\n                            icon: Theme.getIcon('actions/go-up.png'),\n                            onClick: (name, iter) => {\n                                this._minimize();\n                            }\n                        };\n                    }\n                ],\n                [\n                    this._properties.allow_maximize,\n                    () => {\n                        return {\n                            title: locales._('WINDOW_MAXIMIZE'),\n                            icon: Theme.getIcon('actions/view-fullscreen.png'),\n                            onClick: (name, iter) => {\n                                this._maximize();\n                                this._focus();\n                            }\n                        };\n                    }\n                ],\n                [\n                    this._state.maximized,\n                    () => {\n                        return {\n                            title: locales._('WINDOW_RESTORE'),\n                            icon: Theme.getIcon('actions/view-restore.png'),\n                            onClick: (name, iter) => {\n                                this._restore();\n                                this._focus();\n                            }\n                        };\n                    }\n                ],\n                [\n                    this._properties.allow_ontop,\n                    () => {\n                        if (this._state.ontop) {\n                            return {\n                                title: locales._('WINDOW_ONTOP_OFF'),\n                                icon: Theme.getIcon('actions/window-new.png'),\n                                onClick: (name, iter) => {\n                                    this._state.ontop = false;\n                                    if (this._$element) {\n                                        this._$element.style.zIndex = getNextZindex(false);\n                                    }\n                                    this._focus();\n                                }\n                            };\n                        }\n                        return {\n                            title: locales._('WINDOW_ONTOP_ON'),\n                            icon: Theme.getIcon('actions/window-new.png'),\n                            onClick: (name, iter) => {\n                                this._state.ontop = true;\n                                if (this._$element) {\n                                    this._$element.style.zIndex = getNextZindex(true);\n                                }\n                                this._focus();\n                            }\n                        };\n                    }\n                ],\n                [\n                    this._properties.allow_close,\n                    () => {\n                        return {\n                            title: locales._('WINDOW_CLOSE'),\n                            icon: Theme.getIcon('actions/window-close.png'),\n                            onClick: (name, iter) => {\n                                this._close();\n                            }\n                        };\n                    }\n                ]\n            ];\n            const list = [];\n            control.forEach(iter => {\n                if (iter[0]) {\n                    list.push(iter[1]());\n                }\n            });\n            this._focus();\n            Menu.create(list, ev);\n        }\n        _onWindowButtonClick(ev, el, btn) {\n            const map = {\n                close: this._close,\n                minimize: this._minimize,\n                maximize: this._maximize\n            };\n            if (map[btn]) {\n                try {\n                    this._blurGUI();\n                } catch (e) {\n                }\n                map[btn].call(this);\n            }\n        }\n        _onChange(ev, byUser) {\n            ev = ev || '';\n            if (ev) {\n                const wm = WindowManager.instance;\n                if (wm) {\n                    wm.eventWindow(ev, this);\n                }\n            }\n        }\n        _getMaximizedSize() {\n            const s = getWindowSpace();\n            if (!this._$element || this._destroyed) {\n                return s;\n            }\n            let topMargin = 23;\n            let borderSize = 0;\n            const theme = Theme.getStyleTheme(true, true);\n            if (theme && theme.style && theme.style.window) {\n                topMargin = theme.style.window.margin;\n                borderSize = theme.style.window.border;\n            }\n            s.left += borderSize;\n            s.top += borderSize;\n            s.width -= borderSize * 2;\n            s.height -= topMargin + borderSize * 2;\n            return Object.freeze(s);\n        }\n        _getViewRect() {\n            return this._$element ? Object.freeze(DOM.$position(this._$element)) : null;\n        }\n        _getRoot() {\n            return this._$root;\n        }\n        _getZindex() {\n            if (this._$element) {\n                return parseInt(this._$element.style.zIndex, 10);\n            }\n            return -1;\n        }\n        _getTitle() {\n            return this._title;\n        }\n        _setTitle(t, append, delimiter) {\n            if (!this._$element || this._destroyed) {\n                return;\n            }\n            delimiter = delimiter || '-';\n            const tel = this._$element.getElementsByTagName('application-window-title')[0];\n            let text = [];\n            if (append) {\n                text = [\n                    this._origtitle,\n                    delimiter,\n                    t\n                ];\n            } else {\n                text = [t || this._origtitle];\n            }\n            this._title = text.join(' ') || this._origtitle;\n            if (tel) {\n                DOM.$empty(tel);\n                tel.appendChild(document.createTextNode(this._title));\n            }\n            this._onChange('title');\n            this._updateMarkup();\n        }\n        _setIcon(i) {\n            if (this._$winicon) {\n                this._$winicon.title = this._title;\n                this._$winicon.style.backgroundImage = 'url(' + i + ')';\n            }\n            this._icon = i;\n            this._onChange('icon');\n        }\n        _setWarning(message) {\n            this._$warning = DOM.$remove(this._$warning);\n            if (this._destroyed || message === null) {\n                return;\n            }\n            message = message || '';\n            let container = document.createElement('application-window-warning');\n            let close = document.createElement('div');\n            close.innerHTML = 'X';\n            Events.$bind(close, 'click', () => {\n                this._setWarning(null);\n            });\n            let msg = document.createElement('div');\n            msg.appendChild(document.createTextNode(message));\n            container.appendChild(close);\n            container.appendChild(msg);\n            this._$warning = container;\n            this._$root.appendChild(this._$warning);\n        }\n        _setProperty(p, v) {\n            if (v === '' || v === null || !this._$element || typeof this._properties[p] === 'undefined') {\n                return;\n            }\n            this._properties[p] = String(v) === 'true';\n            this._updateMarkup(true);\n        }\n    };\n});\ndefine('skylark-osjsv2-client/core/application',[\n    './process',\n    './settings-manager',\n    './window-manager',\n    './window'\n], function (Process, SettingsManager, WindowManager, Window) {\n    'use strict';\n    return class Application extends Process {\n        constructor(name, args, metadata, settings, options) {\n            console.group('Application::constructor()', arguments);\n            options = Object.assign({\n                closeWithMain: true,\n                closeOnEmpty: true\n            }, options || {});\n            super(...arguments);\n            this.__inited = false;\n            this.__mainwindow = null;\n            this.__windows = [];\n            this.__settings = null;\n            this.__destroying = false;\n            this.__options = options;\n            try {\n                this.__settings = SettingsManager.instance(name, settings || {});\n            } catch (e) {\n                console.warn('Application::construct()', 'An error occured while loading application settings', e);\n                console.warn(e.stack);\n                this.__settings = SettingsManager.instance(name, {});\n            }\n            console.groupEnd();\n        }\n        init(settings, metadata) {\n            const wm = WindowManager.instance;\n            const focusLastWindow = () => {\n                let last;\n                if (wm) {\n                    this.__windows.forEach((win, i) => {\n                        if (win) {\n                            wm.addWindow(win);\n                            last = win;\n                        }\n                    });\n                }\n                if (last) {\n                    last._focus();\n                }\n            };\n            if (!this.__inited) {\n                console.debug('Application::init()', this.__pname);\n                if (this.__settings) {\n                    this.__settings.set(null, settings);\n                }\n                this.__inited = true;\n                this.__evHandler.emit('init', [\n                    settings,\n                    metadata\n                ]);\n                focusLastWindow();\n            }\n        }\n        destroy() {\n            if (this.__destroying || this.__destroyed) {\n                return true;\n            }\n            this.__destroying = true;\n            console.group('Application::destroy()', this.__pname);\n            this.__windows.forEach(w => w && w.destroy());\n            if (this.__scheme && typeof this.__scheme.destroy === 'function') {\n                this.__scheme.destroy();\n            }\n            this.__mainwindow = null;\n            this.__settings = {};\n            this.__windows = [];\n            this.__scheme = null;\n            const result = super.destroy(...arguments);\n            console.groupEnd();\n            return result;\n        }\n        _onMessage(msg, obj, args) {\n            if (this.__destroying || this.__destroyed) {\n                return false;\n            }\n            if (msg === 'destroyWindow') {\n                if (!this.__destroying) {\n                    this._removeWindow(obj);\n                    if (this.__options.closeOnEmpty && !this.__windows.length) {\n                        console.info('All windows removed, destroying application');\n                        this.destroy();\n                    } else if (obj._name === this.__mainwindow) {\n                        if (this.__options.closeWithMain) {\n                            console.info('Main window was closed, destroying application');\n                            this.destroy();\n                        }\n                    }\n                }\n            } else if (msg === 'attention') {\n                if (this.__windows.length && this.__windows[0]) {\n                    this.__windows[0]._focus();\n                }\n            }\n            return super._onMessage(...arguments);\n        }\n        _addWindow(w, cb, setmain) {\n            if (!(w instanceof Window)) {\n                throw new TypeError('Application::_addWindow() expects Core.Window');\n            }\n            console.debug('Application::_addWindow()');\n            this.__windows.push(w);\n            if (setmain || this.__windows.length === 1) {\n                this.__mainwindow = w._name;\n            }\n            const wm = WindowManager.instance;\n            if (this.__inited) {\n                if (wm) {\n                    wm.addWindow(w);\n                }\n                if (w._properties.start_focused) {\n                    setTimeout(() => {\n                        w._focus();\n                    }, 5);\n                }\n            }\n            (cb || function () {\n            })(w, wm);\n            return w;\n        }\n        _removeWindow(w) {\n            if (!(w instanceof Window)) {\n                throw new TypeError('Application::_removeWindow() expects Core.Window');\n            }\n            const found = this.__windows.findIndex(win => win && win._wid === w._wid);\n            if (found !== -1) {\n                const win = this.__windows[found];\n                console.debug('Application::_removeWindow()', win._wid);\n                try {\n                    win.destroy();\n                } catch (e) {\n                    console.warn(e);\n                }\n                this.__windows.splice(found, 1);\n            }\n            return found !== -1;\n        }\n        _getWindow(value, key) {\n            key = key || 'name';\n            if (value === null) {\n                value = this.__mainwindow;\n            }\n            let result = key === 'tag' ? [] : null;\n            this.__windows.every((win, i) => {\n                if (win) {\n                    if (win['_' + key] === value) {\n                        if (key === 'tag') {\n                            result.push(win);\n                        } else {\n                            result = win;\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            });\n            return result;\n        }\n        _getWindowByName(name) {\n            return this._getWindow(name);\n        }\n        _getWindowsByTag(tag) {\n            return this._getWindow(tag, 'tag');\n        }\n        _getWindows() {\n            return this.__windows;\n        }\n        _getMainWindow() {\n            return this._getWindow(this.__mainwindow, 'name');\n        }\n        _getSetting(k) {\n            return this.__settings ? this.__settings.get(k) : null;\n        }\n        _getSessionData() {\n            const args = this.__args;\n            const wins = this.__windows;\n            const data = {\n                name: this.__pname,\n                args: args,\n                windows: []\n            };\n            wins.forEach((win, i) => {\n                if (win && win._properties.allow_session) {\n                    data.windows.push({\n                        name: win._name,\n                        dimension: win._dimension,\n                        position: win._position,\n                        state: win._state\n                    });\n                }\n            });\n            return data;\n        }\n        _setSetting(k, v, save) {\n            if (typeof save === 'undefined') {\n                save = true;\n            }\n            if (arguments.length === 4 && typeof arguments[3] === 'function') {\n                save = arguments[3];\n            }\n            if (this.__settings) {\n                this.__settings.set(k, v, save);\n            }\n        }\n    };\n});\ndefine('skylark-osjsv2-client/dialogs.html',[], function() { return \"<!--\\r\\n\\r\\n  Dialog: Error\\r\\n\\r\\n-->\\r\\n<application-dialog data-id=\\\"Error\\\">\\r\\n  <gui-vbox>\\r\\n    <gui-vbox-container data-shrink=\\\"1\\\">\\r\\n      <gui-label data-id=\\\"Message\\\">DIALOG_ERROR_MESSAGE</gui-label>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-shrink=\\\"1\\\">\\r\\n      <gui-label data-id=\\\"SummaryLabel\\\">DIALOG_ERROR_SUMMARY</gui-label>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-fill=\\\"true\\\" data-basis=\\\"90px\\\">\\r\\n      <gui-textarea data-id=\\\"Summary\\\"></gui-textarea>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-shrink=\\\"1\\\">\\r\\n      <gui-label data-id=\\\"TraceLabel\\\">DIALOG_ERROR_TRACE</gui-label>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-grow=\\\"1\\\" data-fill=\\\"true\\\">\\r\\n      <gui-textarea data-id=\\\"Trace\\\"></gui-textarea>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-shrink=\\\"1\\\" data-align=\\\"end\\\">\\r\\n      <gui-button-bar>\\r\\n        <gui-button data-id=\\\"ButtonOK\\\">LBL_CLOSE</gui-button>\\r\\n        <gui-button data-id=\\\"ButtonBugReport\\\">LBL_BUGREPORT</gui-button>\\r\\n      </gui-button-bar>\\r\\n    </gui-vbox-container>\\r\\n  </gui-vbox>\\r\\n\\r\\n</application-dialog>\\r\\n\\r\\n<!--\\r\\n\\r\\n  Dialog: Application Chooser\\r\\n\\r\\n-->\\r\\n<application-dialog data-id=\\\"ApplicationChooser\\\">\\r\\n  <gui-vbox>\\r\\n    <gui-vbox-container data-shrink=\\\"1\\\">\\r\\n      <gui-label data-id=\\\"Message\\\">DIALOG_APPCHOOSER_MSG</gui-label>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-shrink=\\\"1\\\">\\r\\n      <gui-label data-id=\\\"FileName\\\">filename (mime)</gui-label>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-grow=\\\"1\\\" data-fill=\\\"true\\\">\\r\\n      <gui-list-view data-id=\\\"ApplicationList\\\" data-multiple=\\\"false\\\">\\r\\n      </gui-list-view>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-shrink=\\\"1\\\">\\r\\n      <gui-checkbox data-id=\\\"SetDefault\\\" data-label=\\\"DIALOG_APPCHOOSER_SET_DEFAULT\\\"></gui-checkbox>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-shrink=\\\"1\\\" data-align=\\\"end\\\">\\r\\n      <gui-button-bar>\\r\\n        <gui-button data-id=\\\"ButtonOK\\\">LBL_OK</gui-button>\\r\\n        <gui-button data-id=\\\"ButtonCancel\\\">LBL_CANCEL</gui-button>\\r\\n      </gui-button-bar>\\r\\n    </gui-vbox-container>\\r\\n  </gui-vbox>\\r\\n</application-dialog>\\r\\n\\r\\n<!--\\r\\n\\r\\n  Dialog: File Save/Open\\r\\n\\r\\n-->\\r\\n<application-dialog data-id=\\\"File\\\">\\r\\n  <gui-vbox>\\r\\n    <gui-vbox-container data-shrink=\\\"1\\\">\\r\\n      <gui-hbox>\\r\\n        <gui-hbox-container data-shrink=\\\"1\\\" data-expand=\\\"true\\\">\\r\\n          <gui-button data-id=\\\"HomeButton\\\" data-icon=\\\"stock://16x16/places/user-home.png\\\" data-tooltip=\\\"LBL_HOME\\\"></gui-button>\\r\\n        </gui-hbox-container>\\r\\n        <gui-hbox-container data-shrink=\\\"1\\\" data-expand=\\\"true\\\">\\r\\n          <gui-button data-id=\\\"ButtonMkdir\\\" data-icon=\\\"stock://16x16/actions/folder-new.png\\\" data-tooltip=\\\"LBL_MKDIR\\\"></gui-button>\\r\\n        </gui-hbox-container>\\r\\n        <gui-hbox-container data-grow=\\\"1\\\" data-expand=\\\"true\\\">\\r\\n          <gui-select data-id=\\\"ModuleSelect\\\"></gui-select>\\r\\n        </gui-hbox-container>\\r\\n      </gui-hbox>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-grow=\\\"1\\\" data-fill=\\\"true\\\">\\r\\n      <gui-file-view data-id=\\\"FileView\\\">\\r\\n      </gui-file-view>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-shrink=\\\"1\\\" data-id=\\\"FileInput\\\">\\r\\n      <gui-hbox>\\r\\n        <gui-hbox-container data-grow=\\\"1\\\" data-expand=\\\"true\\\">\\r\\n          <gui-text data-id=\\\"Filename\\\"></gui-text>\\r\\n        </gui-hbox-container>\\r\\n        <gui-hbox-container data-shrink=\\\"0\\\" data-basis=\\\"150px\\\" data-expand=\\\"true\\\">\\r\\n          <gui-select data-id=\\\"Filetype\\\"></gui-select>\\r\\n        </gui-hbox-container>\\r\\n      </gui-hbox>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-shrink=\\\"1\\\" data-align=\\\"end\\\">\\r\\n      <gui-button-bar>\\r\\n        <gui-button data-id=\\\"ButtonOK\\\">LBL_OK</gui-button>\\r\\n        <gui-button data-id=\\\"ButtonCancel\\\">LBL_CANCEL</gui-button>\\r\\n      </gui-button-bar>\\r\\n    </gui-vbox-container>\\r\\n  </gui-vbox>\\r\\n</application-dialog>\\r\\n\\r\\n<!--\\r\\n\\r\\n  Dialog: File Progress\\r\\n\\r\\n-->\\r\\n<application-dialog data-id=\\\"FileProgress\\\">\\r\\n  <gui-vbox>\\r\\n    <gui-vbox-container data-grow=\\\"1\\\">\\r\\n      <gui-label data-id=\\\"Message\\\">LBL_LOADING</gui-label>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-shrink=\\\"1\\\" data-expand=\\\"true\\\">\\r\\n      <gui-progress-bar data-id=\\\"Progress\\\"></gui-progress-bar>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-shrink=\\\"1\\\" data-align=\\\"end\\\">\\r\\n      <gui-button-bar>\\r\\n        <gui-button data-id=\\\"ButtonCancel\\\" data-disabled=\\\"true\\\">LBL_CANCEL</gui-button>\\r\\n      </gui-button-bar>\\r\\n    </gui-vbox-container>\\r\\n  </gui-vbox>\\r\\n</application-dialog>\\r\\n\\r\\n<!--\\r\\n\\r\\n  Dialog: File Upload\\r\\n\\r\\n-->\\r\\n<application-dialog data-id=\\\"FileUpload\\\">\\r\\n  <gui-vbox>\\r\\n    <gui-vbox-container data-shrink=\\\"1\\\">\\r\\n      <gui-label data-id=\\\"Message\\\">DIALOG_UPLOAD_DESC</gui-label>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-grow=\\\"1\\\">\\r\\n      <gui-file-upload data-id=\\\"File\\\"></gui-file-upload>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-shrink=\\\"1\\\" data-align=\\\"end\\\">\\r\\n      <gui-button-bar>\\r\\n        <gui-button data-id=\\\"ButtonCancel\\\">LBL_CANCEL</gui-button>\\r\\n      </gui-button-bar>\\r\\n    </gui-vbox-container>\\r\\n  </gui-vbox>\\r\\n</application-dialog>\\r\\n\\r\\n<!--\\r\\n\\r\\n  Dialog: File Information\\r\\n\\r\\n-->\\r\\n<application-dialog data-id=\\\"FileInfo\\\">\\r\\n  <gui-vbox>\\r\\n    <gui-vbox-container data-grow=\\\"1\\\" data-fill=\\\"true\\\">\\r\\n      <gui-textarea data-id=\\\"Info\\\"></gui-textarea>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-shrink=\\\"1\\\" data-align=\\\"end\\\">\\r\\n      <gui-button-bar>\\r\\n        <gui-button data-id=\\\"ButtonOK\\\">LBL_OK</gui-button>\\r\\n      </gui-button-bar>\\r\\n    </gui-vbox-container>\\r\\n  </gui-vbox>\\r\\n</application-dialog>\\r\\n\\r\\n<!--\\r\\n\\r\\n  Dialog: Input\\r\\n\\r\\n-->\\r\\n<application-dialog data-id=\\\"Input\\\">\\r\\n  <gui-vbox>\\r\\n    <gui-vbox-container data-grow=\\\"1\\\">\\r\\n      <gui-label data-id=\\\"Message\\\">DIALOG_INPUT_TITLE</gui-label>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-shrink=\\\"1\\\" data-expand=\\\"true\\\">\\r\\n      <gui-text data-id=\\\"Input\\\"></gui-text>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-shrink=\\\"1\\\" data-align=\\\"end\\\">\\r\\n      <gui-button-bar>\\r\\n        <gui-button data-id=\\\"ButtonOK\\\">LBL_OK</gui-button>\\r\\n        <gui-button data-id=\\\"ButtonCancel\\\">LBL_CANCEL</gui-button>\\r\\n      </gui-button-bar>\\r\\n    </gui-vbox-container>\\r\\n  </gui-vbox>\\r\\n</application-dialog>\\r\\n\\r\\n<!--\\r\\n\\r\\n  Dialog: Alert\\r\\n\\r\\n-->\\r\\n<application-dialog data-id=\\\"Alert\\\">\\r\\n  <gui-vbox>\\r\\n    <gui-vbox-container data-grow=\\\"1\\\">\\r\\n      <gui-label data-id=\\\"Message\\\">DIALOG_ALERT_TITLE</gui-label>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-shrink=\\\"1\\\" data-align=\\\"end\\\">\\r\\n      <gui-button-bar>\\r\\n        <gui-button data-id=\\\"ButtonOK\\\">LBL_OK</gui-button>\\r\\n      </gui-button-bar>\\r\\n    </gui-vbox-container>\\r\\n  </gui-vbox>\\r\\n</application-dialog>\\r\\n\\r\\n<!--\\r\\n\\r\\n  Dialog: Confirm\\r\\n\\r\\n-->\\r\\n<application-dialog data-id=\\\"Confirm\\\">\\r\\n  <gui-vbox>\\r\\n    <gui-vbox-container data-grow=\\\"1\\\">\\r\\n      <gui-label data-id=\\\"Message\\\">DIALOG_CONFIRM_TITLE</gui-label>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-shrink=\\\"1\\\" data-align=\\\"end\\\">\\r\\n      <gui-button-bar>\\r\\n        <gui-button data-id=\\\"ButtonYes\\\">LBL_YES</gui-button>\\r\\n        <gui-button data-id=\\\"ButtonNo\\\">LBL_NO</gui-button>\\r\\n        <gui-button data-id=\\\"ButtonCancel\\\">LBL_CANCEL</gui-button>\\r\\n      </gui-button-bar>\\r\\n    </gui-vbox-container>\\r\\n  </gui-vbox>\\r\\n</application-dialog>\\r\\n\\r\\n<!--\\r\\n\\r\\n  Dialog: Color\\r\\n\\r\\n-->\\r\\n<application-dialog data-id=\\\"Color\\\">\\r\\n  <gui-vbox>\\r\\n    <gui-vbox-container data-grow=\\\"1\\\">\\r\\n      <gui-hbox>\\r\\n        <gui-hbox-container data-shrink=\\\"1\\\">\\r\\n          <gui-vbox>\\r\\n            <gui-vbox-container shrink=\\\"1\\\">\\r\\n              <gui-color-swatch data-id=\\\"ColorSelect\\\"></gui-color-swatch>\\r\\n            </gui-vbox-container>\\r\\n            <gui-vbox-container shrink=\\\"1\\\" data-expand=\\\"true\\\">\\r\\n              <gui-color-box data-id=\\\"ColorPreview\\\" data-disabled=\\\"true\\\"></gui-color-box>\\r\\n            </gui-vbox-container>\\r\\n          </gui-vbox>\\r\\n        </gui-hbox-container>\\r\\n\\r\\n        <gui-hbox-container data-grow=\\\"1\\\">\\r\\n          <gui-vbox>\\r\\n            <gui-vbox-container shrink=\\\"1\\\" data-expand=\\\"true\\\">\\r\\n              <gui-label data-id=\\\"LabelRed\\\">Red</gui-label>\\r\\n            </gui-vbox-container>\\r\\n            <gui-vbox-container shrink=\\\"1\\\" data-expand=\\\"true\\\">\\r\\n              <gui-slider data-min=\\\"0\\\" data-max=\\\"255\\\" data-id=\\\"Red\\\"></gui-slider>\\r\\n            </gui-vbox-container>\\r\\n\\r\\n            <gui-vbox-container shrink=\\\"1\\\" data-expand=\\\"true\\\">\\r\\n              <gui-label data-id=\\\"LabelGreen\\\">Green</gui-label>\\r\\n            </gui-vbox-container>\\r\\n            <gui-vbox-container shrink=\\\"1\\\" data-expand=\\\"true\\\">\\r\\n              <gui-slider data-min=\\\"0\\\" data-max=\\\"255\\\" data-id=\\\"Green\\\"></gui-slider>\\r\\n            </gui-vbox-container>\\r\\n\\r\\n            <gui-vbox-container shrink=\\\"1\\\" data-expand=\\\"true\\\">\\r\\n              <gui-label data-id=\\\"LabelBlue\\\">Blue</gui-label>\\r\\n            </gui-vbox-container>\\r\\n            <gui-vbox-container shrink=\\\"1\\\" data-expand=\\\"true\\\">\\r\\n              <gui-slider data-min=\\\"0\\\" data-max=\\\"255\\\" data-id=\\\"Blue\\\"></gui-slider>\\r\\n            </gui-vbox-container>\\r\\n\\r\\n            <gui-vbox-container shrink=\\\"1\\\" data-expand=\\\"true\\\" data-id=\\\"AlphaLabelContainer\\\">\\r\\n              <gui-label data-id=\\\"LabelAlpha\\\">Alpha</gui-label>\\r\\n            </gui-vbox-container>\\r\\n            <gui-vbox-container shrink=\\\"1\\\" data-expand=\\\"true\\\" data-id=\\\"AlphaContainer\\\">\\r\\n              <gui-slider data-min=\\\"0\\\" data-max=\\\"100\\\" data-id=\\\"Alpha\\\"></gui-slider>\\r\\n            </gui-vbox-container>\\r\\n          </gui-vbox>\\r\\n        </gui-hbox-container>\\r\\n      </gui-hbox>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-shrink=\\\"1\\\" data-align=\\\"end\\\">\\r\\n      <gui-button-bar>\\r\\n        <gui-button data-id=\\\"ButtonOK\\\">LBL_OK</gui-button>\\r\\n        <gui-button data-id=\\\"ButtonCancel\\\">LBL_CANCEL</gui-button>\\r\\n      </gui-button-bar>\\r\\n    </gui-vbox-container>\\r\\n  </gui-vbox>\\r\\n</application-dialog>\\r\\n\\r\\n<!--\\r\\n\\r\\n  Dialog: Font\\r\\n\\r\\n-->\\r\\n<application-dialog data-id=\\\"Font\\\">\\r\\n  <gui-vbox>\\r\\n    <gui-vbox-container data-grow=\\\"1\\\" data-fill=\\\"true\\\">\\r\\n      <gui-hbox>\\r\\n        <gui-hbox-container data-grow=\\\"1\\\" data-shrink=\\\"1\\\" data-basis=\\\"50%\\\" data-fill=\\\"true\\\">\\r\\n          <gui-select-list data-id=\\\"FontName\\\"></gui-select-list>\\r\\n        </gui-hbox-container>\\r\\n        <gui-hbox-container data-grow=\\\"1\\\" data-shrink=\\\"1\\\" data-basis=\\\"50%\\\" data-fill=\\\"true\\\" data-id=\\\"FontSizeContainer\\\">\\r\\n          <gui-select-list data-id=\\\"FontSize\\\"></gui-select-list>\\r\\n        </gui-hbox-container>\\r\\n      </gui-hbox>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-shrink=\\\"1\\\" data-basis=\\\"50px\\\" data-fill=\\\"true\\\">\\r\\n      <gui-textarea data-id=\\\"FontPreview\\\"></gui-textarea>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-shrink=\\\"1\\\" data-align=\\\"end\\\">\\r\\n      <gui-button-bar>\\r\\n        <gui-button data-id=\\\"ButtonOK\\\">LBL_OK</gui-button>\\r\\n        <gui-button data-id=\\\"ButtonCancel\\\">LBL_CANCEL</gui-button>\\r\\n      </gui-button-bar>\\r\\n    </gui-vbox-container>\\r\\n  </gui-vbox>\\r\\n</application-dialog>\\r\\n\"; });\ndefine('skylark-osjsv2-client/core/dialog',[\n    '../utils/dom',\n    '../utils/keycodes',\n    './window',\n    './application',\n    './window-manager',\n    '../gui/scheme',\n    './locales',\n    \"../dialogs.html\"\n], function (a, Keycodes, Window, Application, WindowManager, GUIScheme, b,dialogsHtml) {\n    'use strict';\n    return class DialogWindow extends Window {\n        constructor(className, opts, args, callback) {\n            opts = opts || {};\n            args = args || {};\n            callback = callback || function () {\n            };\n            if (typeof callback !== 'function') {\n                throw new TypeError('DialogWindow expects a callback Function, gave: ' + typeof callback);\n            }\n            console.info('DialogWindow::construct()', className, opts, args);\n            super(className, opts);\n            this._properties.gravity = 'center';\n            this._properties.allow_resize = false;\n            this._properties.allow_minimize = false;\n            this._properties.allow_maximize = false;\n            this._properties.allow_windowlist = false;\n            this._properties.allow_session = false;\n            this._state.ontop = true;\n            this._tag = 'DialogWindow';\n            if (args.scheme && args.scheme instanceof GUIScheme) {\n                this.scheme = args.scheme;\n                delete args.scheme;\n            }\n            this.args = args;\n            this.className = className;\n            this.buttonClicked = false;\n            this.closeCallback = (ev, button, result) => {\n                if (this._destroyed) {\n                    return;\n                }\n                this.buttonClicked = true;\n                callback.call(this, ev, button, result);\n                this._close();\n            };\n        }\n        destroy() {\n            if (this.scheme) {\n                this.scheme = this.scheme.destroy();\n            }\n            return super.destroy(...arguments);\n        }\n        init() {\n            const root = super.init(...arguments);\n            root.setAttribute('role', 'dialog');\n            const windowName = this.className.replace(/Dialog$/, '');\n            const focusButtons = [\n                'ButtonCancel',\n                'ButtonNo'\n            ];\n            const buttonMap = {\n                ButtonOK: 'ok',\n                ButtonCancel: 'cancel',\n                ButtonYes: 'yes',\n                ButtonNo: 'no'\n            };\n            if (this.scheme) {\n                this.scheme.render(this, windowName, root, 'application-dialog', node => {\n                    node.querySelectorAll('gui-label').forEach(el => {\n                        if (el.childNodes.length && el.childNodes[0].nodeType === 3 && el.childNodes[0].nodeValue) {\n                            const label = el.childNodes[0].nodeValue;\n                            a.$empty(el);\n                            el.appendChild(document.createTextNode(b._(label)));\n                        }\n                    });\n                });\n            } else {\n                //this._render(windowName, require('osjs-scheme-loader!dialogs.html'));\n                this._render(windowName, dialogsHtml);\n            }\n            Object.keys(buttonMap).filter(id => this._findDOM(id)).forEach(id => {\n                const btn = this._find(id);\n                btn.on('click', ev => {\n                    this.onClose(ev, buttonMap[id]);\n                });\n                if (focusButtons.indexOf(id) >= 0) {\n                    btn.focus();\n                }\n            });\n            a.$addClass(root, 'DialogWindow');\n            return root;\n        }\n        onClose(ev, button) {\n            this.closeCallback(ev, button, null);\n        }\n        _close() {\n            if (!this.buttonClicked) {\n                this.onClose(null, 'cancel', null);\n            }\n            return super._close(...arguments);\n        }\n        _onKeyEvent(ev) {\n            super._onKeyEvent(...arguments);\n            if (ev.keyCode === Keycodes.ESC) {\n                this.onClose(ev, 'cancel');\n            }\n        }\n        static parseMessage(msg) {\n            msg = a.$escape(msg || '').replace(/\\*\\*(.*)\\*\\*/g, '<span>$1</span>');\n            let tmp = document.createElement('div');\n            tmp.innerHTML = msg;\n            const frag = document.createDocumentFragment();\n            for (let i = 0; i < tmp.childNodes.length; i++) {\n                frag.appendChild(tmp.childNodes[i].cloneNode(true));\n            }\n            tmp = null;\n            return frag;\n        }\n        static create(className, args, callback, options) {\n            callback = callback || function () {\n            };\n            options = options || {};\n            let parentObj = options;\n            let parentIsWindow = parentObj instanceof Window;\n            let parentIsProcess = parentObj instanceof Application;\n            if (parentObj && !(parentIsWindow && parentIsProcess)) {\n                parentObj = options.parent;\n                parentIsWindow = parentObj instanceof Window;\n                parentIsProcess = parentObj instanceof Application;\n            }\n            function cb() {\n                if (parentObj) {\n                    if (parentIsWindow && parentObj._destroyed) {\n                        console.warn('DialogWindow::create()', 'INGORED EVENT: Window was destroyed');\n                        return;\n                    }\n                    if (parentIsProcess && parentObj.__destroyed) {\n                        console.warn('DialogWindow::create()', 'INGORED EVENT: Process was destroyed');\n                        return;\n                    }\n                }\n                if (options.modal && parentIsWindow) {\n                    parentObj._toggleDisabled(false);\n                }\n                callback.apply(null, arguments);\n            }\n            const win = typeof className === 'string' ? new OSjs.Dialogs[className](args, cb) : className(args, cb);\n            if (!parentObj) {\n                const wm = WindowManager.instance;\n                wm.addWindow(win, true);\n            } else if (parentObj instanceof Window) {\n                win._on('destroy', () => {\n                    if (parentObj) {\n                        parentObj._focus();\n                    }\n                });\n                parentObj._addChild(win, true);\n            } else if (parentObj instanceof Application) {\n                parentObj._addWindow(win);\n            }\n            if (options.modal && parentIsWindow) {\n                parentObj._toggleDisabled(true);\n            }\n            win._focus();\n            return win;\n        }\n    };\n});\ndefine('skylark-osjsv2-client/gui/splash',[],function () {\n    'use strict';\n    class SplashScreen {\n        constructor() {\n            this.$el = document.getElementById('LoadingScreen');\n            this.$progress = this.$el ? this.$el.querySelector('.progress') : null;\n        }\n        watermark(config) {\n            if (config.Watermark.enabled) {\n                var ver = config.Version || 'unknown version';\n                var html = config.Watermark.lines || [];\n                var el = document.createElement('osjs-watermark');\n                el.setAttribute('aria-hidden', 'true');\n                el.innerHTML = html.join('<br />').replace(/%VERSION%/, ver);\n                document.body.appendChild(el);\n            }\n        }\n        show() {\n            if (this.$el) {\n                this.$el.style.display = 'block';\n            }\n        }\n        hide() {\n            if (this.$el) {\n                this.$el.style.display = 'none';\n            }\n        }\n        update(p, c) {\n            if (this.$progress) {\n                let per = c ? 0 : 100;\n                if (c) {\n                    per = p / c * 100;\n                }\n                this.$progress.style.width = String(per) + '%';\n            }\n        }\n    }\n    return new SplashScreen();\n});\ndefine('skylark-osjsv2-client/gui/notification',[\n    '../utils/events',\n    '../core/window-manager'\n], function (Events, WindowManager) {\n    'use strict';\n    class Notification {\n        constructor() {\n            this.$notifications = null;\n            this.visibles = 0;\n        }\n        create(opts) {\n            opts = opts || {};\n            opts.icon = opts.icon || null;\n            opts.title = opts.title || null;\n            opts.message = opts.message || '';\n            opts.onClick = opts.onClick || function () {\n            };\n            if (!this.$notifications) {\n                this.$notifications = document.createElement('corewm-notifications');\n                this.$notifications.setAttribute('role', 'log');\n                document.body.appendChild(this.$notifications);\n            }\n            if (typeof opts.timeout === 'undefined') {\n                opts.timeout = 5000;\n            }\n            console.debug('CoreWM::notification()', opts);\n            const container = document.createElement('corewm-notification');\n            let classNames = [''];\n            let timeout = null;\n            let animationCallback = null;\n            const _remove = () => {\n                if (timeout) {\n                    clearTimeout(timeout);\n                    timeout = null;\n                }\n                container.onclick = null;\n                const _removeDOM = () => {\n                    Events.$unbind(container);\n                    if (container.parentNode) {\n                        container.parentNode.removeChild(container);\n                    }\n                    this.visibles--;\n                    if (this.visibles <= 0) {\n                        this.$notifications.style.display = 'none';\n                    }\n                };\n                const anim = WindowManager.instance.getSetting('animations');\n                if (anim) {\n                    container.setAttribute('data-hint', 'closing');\n                    animationCallback = () => _removeDOM();\n                } else {\n                    container.style.display = 'none';\n                    _removeDOM();\n                }\n            };\n            if (opts.icon) {\n                const icon = document.createElement('img');\n                icon.alt = '';\n                icon.src = opts.icon;\n                classNames.push('HasIcon');\n                container.appendChild(icon);\n            }\n            if (opts.title) {\n                const title = document.createElement('div');\n                title.className = 'Title';\n                title.appendChild(document.createTextNode(opts.title));\n                classNames.push('HasTitle');\n                container.appendChild(title);\n            }\n            if (opts.message) {\n                const message = document.createElement('div');\n                message.className = 'Message';\n                const lines = opts.message.split('\\n');\n                lines.forEach(function (line, idx) {\n                    message.appendChild(document.createTextNode(line));\n                    if (idx < lines.length - 1) {\n                        message.appendChild(document.createElement('br'));\n                    }\n                });\n                classNames.push('HasMessage');\n                container.appendChild(message);\n            }\n            this.visibles++;\n            if (this.visibles > 0) {\n                this.$notifications.style.display = 'block';\n            }\n            container.setAttribute('aria-label', String(opts.title));\n            container.setAttribute('role', 'alert');\n            container.className = classNames.join(' ');\n            container.onclick = function (ev) {\n                _remove();\n                opts.onClick(ev);\n            };\n            let preventTimeout;\n            function _onanimationend(ev) {\n                if (typeof animationCallback === 'function') {\n                    clearTimeout(preventTimeout);\n                    preventTimeout = setTimeout(function () {\n                        animationCallback(ev);\n                        animationCallback = false;\n                    }, 10);\n                }\n            }\n            Events.$bind(container, 'transitionend', _onanimationend);\n            Events.$bind(container, 'animationend', _onanimationend);\n            const space = WindowManager.instance.getWindowSpace(true);\n            this.$notifications.style.marginTop = String(space.top) + 'px';\n            this.$notifications.appendChild(container);\n            if (opts.timeout) {\n                timeout = setTimeout(function () {\n                    _remove();\n                }, opts.timeout);\n            }\n        }\n        createIcon(name, opts) {\n            const wm = WindowManager.instance;\n            if (wm && typeof wm.getNotificationArea === 'function') {\n                const pitem = wm.getNotificationArea();\n                if (pitem) {\n                    return pitem.createNotification(name, opts);\n                }\n            }\n            return null;\n        }\n        destroyIcon(name) {\n            const wm = WindowManager.instance;\n            if (wm && typeof wm.getNotificationArea === 'function') {\n                const pitem = wm.getNotificationArea();\n                if (pitem) {\n                    pitem.removeNotification(name);\n                    return true;\n                }\n            }\n            return false;\n        }\n        getIcon(name) {\n            const wm = WindowManager.instance;\n            if (wm && typeof wm.getNotificationArea === 'function') {\n                const pitem = wm.getNotificationArea();\n                if (pitem) {\n                    return pitem.getNotification(name);\n                }\n            }\n            return null;\n        }\n    }\n    return new Notification();\n});\ndefine('skylark-osjsv2-client/dialogs/alert',[\n    '../core/dialog',\n    '../core/locales'\n], function (DialogWindow, a) {\n    'use strict';\n    return class AlertDialog extends DialogWindow {\n        constructor(args, callback) {\n            args = Object.assign({}, {}, args);\n            super('AlertDialog', {\n                title: args.title || a._('DIALOG_ALERT_TITLE'),\n                icon: 'status/dialog-warning.png',\n                width: 400,\n                height: 100\n            }, args, callback);\n        }\n        init() {\n            const root = super.init(...arguments);\n            root.setAttribute('role', 'alertdialog');\n            this._find('Message').set('value', this.args.message, true);\n            return root;\n        }\n    };\n});\ndefine('skylark-osjsv2-client/dialogs/applicationchooser',[\n    '../core/dialog',\n    '../core/package-manager',\n    '../core/theme',\n    '../utils/misc',\n    '../core/locales'\n], function (DialogWindow, PackageManager, Theme, Utils, a) {\n    'use strict';\n    return class ApplicationChooserDialog extends DialogWindow {\n        constructor(args, callback) {\n            args = Object.assign({}, {}, args);\n            super('ApplicationChooserDialog', {\n                title: args.title || a._('DIALOG_APPCHOOSER_TITLE'),\n                width: 400,\n                height: 400\n            }, args, callback);\n        }\n        init() {\n            const root = super.init(...arguments);\n            const cols = [{ label: a._('LBL_NAME') }];\n            const rows = [];\n            const metadata = PackageManager.getPackages();\n            (this.args.list || []).forEach(name => {\n                const iter = metadata[name];\n                if (iter && iter.type === 'application') {\n                    const label = [iter.name];\n                    if (iter.description) {\n                        label.push(iter.description);\n                    }\n                    rows.push({\n                        value: iter,\n                        columns: [{\n                                label: label.join(' - '),\n                                icon: Theme.getIcon(iter.icon, null, name),\n                                value: JSON.stringify(iter)\n                            }]\n                    });\n                }\n            });\n            this._find('ApplicationList').set('columns', cols).add(rows).on('activate', ev => {\n                this.onClose(ev, 'ok');\n            });\n            let file = '<unknown file>';\n            let label = '<unknown mime>';\n            if (this.args.file) {\n                file = Utils.format('{0} ({1})', this.args.file.filename, this.args.file.mime);\n                label = a._('DIALOG_APPCHOOSER_SET_DEFAULT', this.args.file.mime);\n            }\n            this._find('FileName').set('value', file);\n            this._find('SetDefault').set('label', label);\n            return root;\n        }\n        onClose(ev, button) {\n            let result = null;\n            if (button === 'ok') {\n                const useDefault = this._find('SetDefault').get('value');\n                const selected = this._find('ApplicationList').get('value');\n                if (selected && selected.length) {\n                    result = selected[0].data.className;\n                }\n                if (!result) {\n                    DialogWindow.create('Alert', { message: a._('DIALOG_APPCHOOSER_NO_SELECTION') }, null, this);\n                    return;\n                }\n                result = {\n                    name: result,\n                    useDefault: useDefault\n                };\n            }\n            this.closeCallback(ev, button, result);\n        }\n    };\n});\ndefine('skylark-osjsv2-client/utils/colors',[],function () {\n    'use strict';\n    function convertToRGB(hex) {\n        const rgb = parseInt(hex.replace('#', ''), 16);\n        const val = {};\n        val.r = (rgb & 255 << 16) >> 16;\n        val.g = (rgb & 255 << 8) >> 8;\n        val.b = rgb & 255;\n        return val;\n    }\n    function convertToHEX(r, g, b) {\n        if (typeof r === 'object') {\n            g = r.g;\n            b = r.b;\n            r = r.r;\n        }\n        if (typeof r === 'undefined' || typeof g === 'undefined' || typeof b === 'undefined') {\n            throw new Error('Invalid RGB supplied to convertToHEX()');\n        }\n        const hex = [\n            parseInt(r, 10).toString(16),\n            parseInt(g, 10).toString(16),\n            parseInt(b, 10).toString(16)\n        ];\n        Object.keys(hex).forEach(i => {\n            if (hex[i].length === 1) {\n                hex[i] = '0' + hex[i];\n            }\n        });\n        return '#' + hex.join('').toUpperCase();\n    }\n    function invertHEX(hex) {\n        let color = parseInt(hex.replace('#', ''), 16);\n        color = 16777215 ^ color;\n        color = color.toString(16);\n        color = ('000000' + color).slice(-6);\n        return '#' + color;\n    }\n    return {\n        convertToRGB: convertToRGB,\n        convertToHEX: convertToHEX,\n        invertHEX: invertHEX\n    };\n});\ndefine('skylark-osjsv2-client/dialogs/color',[\n    '../core/dialog',\n    '../utils/misc',\n    '../utils/colors',\n    '../core/locales'\n], function (DialogWindow, Utils, Colors, a) {\n    'use strict';\n    function getColor(rgb) {\n        let hex = rgb;\n        if (typeof rgb === 'string') {\n            hex = rgb;\n            rgb = Colors.convertToRGB(rgb);\n            rgb.a = null;\n        } else {\n            if (typeof rgb.a === 'undefined') {\n                rgb.a = null;\n            } else {\n                if (rgb.a > 1) {\n                    rgb.a /= 100;\n                }\n            }\n            rgb = rgb || {\n                r: 0,\n                g: 0,\n                b: 0,\n                a: 100\n            };\n            hex = Colors.convertToHEX(rgb.r, rgb.g, rgb.b);\n        }\n        return [\n            rgb,\n            hex\n        ];\n    }\n    return class ColorDialog extends DialogWindow {\n        constructor(args, callback) {\n            args = Object.assign({}, {}, args);\n            const [rgb, hex] = getColor(args.color);\n            super('ColorDialog', {\n                title: args.title || a._('DIALOG_COLOR_TITLE'),\n                icon: 'apps/preferences-desktop-theme.png',\n                width: 400,\n                height: rgb.a !== null ? 300 : 220\n            }, args, callback);\n            this.color = {\n                r: rgb.r,\n                g: rgb.g,\n                b: rgb.b,\n                a: rgb.a,\n                hex: hex\n            };\n        }\n        init() {\n            const root = super.init(...arguments);\n            const updateHex = update => {\n                this._find('LabelRed').set('value', a._('DIALOG_COLOR_R', this.color.r));\n                this._find('LabelGreen').set('value', a._('DIALOG_COLOR_G', this.color.g));\n                this._find('LabelBlue').set('value', a._('DIALOG_COLOR_B', this.color.b));\n                this._find('LabelAlpha').set('value', a._('DIALOG_COLOR_A', this.color.a));\n                if (update) {\n                    this.color.hex = Colors.convertToHEX(this.color.r, this.color.g, this.color.b);\n                }\n                let value = this.color.hex;\n                if (this.color.a !== null && !isNaN(this.color.a)) {\n                    value = Utils.format('rgba({0}, {1}, {2}, {3})', this.color.r, this.color.g, this.color.b, this.color.a);\n                }\n                this._find('ColorPreview').set('value', value);\n            };\n            this._find('ColorSelect').on('change', ev => {\n                this.color = ev.detail;\n                this._find('Red').set('value', this.color.r);\n                this._find('Green').set('value', this.color.g);\n                this._find('Blue').set('value', this.color.b);\n                updateHex(true);\n            });\n            this._find('Red').on('change', ev => {\n                this.color.r = parseInt(ev.detail, 10);\n                updateHex(true);\n            }).set('value', this.color.r);\n            this._find('Green').on('change', ev => {\n                this.color.g = parseInt(ev.detail, 10);\n                updateHex(true);\n            }).set('value', this.color.g);\n            this._find('Blue').on('change', ev => {\n                this.color.b = parseInt(ev.detail, 10);\n                updateHex(true);\n            }).set('value', this.color.b);\n            this._find('Alpha').on('change', ev => {\n                this.color.a = parseInt(ev.detail, 10) / 100;\n                updateHex(true);\n            }).set('value', this.color.a * 100);\n            if (this.color.a === null) {\n                this._find('AlphaContainer').hide();\n                this._find('AlphaLabelContainer').hide();\n            }\n            updateHex(false, this.color.a !== null);\n            return root;\n        }\n        onClose(ev, button) {\n            this.closeCallback(ev, button, button === 'ok' ? this.color : null);\n        }\n    };\n});\ndefine('skylark-osjsv2-client/dialogs/confirm',[\n    '../core/dialog',\n    '../core/locales'\n], function (DialogWindow, a) {\n    'use strict';\n    return class ConfirmDialog extends DialogWindow {\n        constructor(args, callback) {\n            args = Object.assign({}, {\n                buttons: [\n                    'yes',\n                    'no',\n                    'cancel'\n                ]\n            }, args);\n            super('ConfirmDialog', {\n                title: args.title || a._('DIALOG_CONFIRM_TITLE'),\n                icon: 'status/dialog-question.png',\n                width: 400,\n                height: 100\n            }, args, callback);\n        }\n        init() {\n            const root = super.init(...arguments);\n            const msg = DialogWindow.parseMessage(this.args.message);\n            this._find('Message').empty().append(msg);\n            const buttonMap = {\n                yes: 'ButtonYes',\n                no: 'ButtonNo',\n                cancel: 'ButtonCancel'\n            };\n            const hide = [];\n            [\n                'yes',\n                'no',\n                'cancel'\n            ].forEach(b => {\n                if (this.args.buttons.indexOf(b) < 0) {\n                    hide.push(b);\n                }\n            });\n            hide.forEach(b => {\n                this._find(buttonMap[b]).hide();\n            });\n            return root;\n        }\n    };\n});\ndefine('skylark-osjsv2-client/dialogs/error',[\n    '../core/dialog',\n    '../core/locales',\n    '../core/config'\n], function (DialogWindow, a, b) {\n    'use strict';\n    return class ErrorDialog extends DialogWindow {\n        constructor(args, callback) {\n            args = Object.assign({}, {}, args);\n            const exception = args.exception || {};\n            let error = '';\n            if (exception.stack) {\n                error = exception.stack;\n            } else {\n                if (Object.keys(exception).length) {\n                    error = exception.name;\n                    error += '\\nFilename: ' + exception.fileName || '<unknown>';\n                    error += '\\nLine: ' + exception.lineNumber;\n                    error += '\\nMessage: ' + exception.message;\n                    if (exception.extMessage) {\n                        error += '\\n' + exception.extMessage;\n                    }\n                }\n            }\n            super('ErrorDialog', {\n                title: args.title || a._('DIALOG_ERROR_TITLE'),\n                icon: 'status/dialog-error.png',\n                width: 400,\n                height: error ? 400 : 200\n            }, args, callback);\n            this._sound = 'ERROR';\n            this._soundVolume = 1;\n            this.traceMessage = error;\n        }\n        init() {\n            const root = super.init(...arguments);\n            root.setAttribute('role', 'alertdialog');\n            const msg = DialogWindow.parseMessage(this.args.message);\n            this._find('Message').empty().append(msg);\n            this._find('Summary').set('value', this.args.error);\n            this._find('Trace').set('value', this.traceMessage);\n            if (!this.traceMessage) {\n                this._find('Trace').hide();\n                this._find('TraceLabel').hide();\n            }\n            if (this.args.bugreport) {\n                this._find('ButtonBugReport').on('click', () => {\n                    let title = '';\n                    let body = [];\n                    if (b.getConfig('BugReporting.options.issue')) {\n                        const obj = {};\n                        const keys = [\n                            'userAgent',\n                            'platform',\n                            'language',\n                            'appVersion'\n                        ];\n                        keys.forEach(k => {\n                            obj[k] = navigator[k];\n                        });\n                        title = b.getConfig('BugReporting.options.title');\n                        body = [\n                            '**' + b.getConfig('BugReporting.options.message').replace('%VERSION%', b.getConfig('Version')) + ':**',\n                            '\\n',\n                            '> ' + this.args.message,\n                            '\\n',\n                            '> ' + (this.args.error || 'Unknown error'),\n                            '\\n',\n                            '## Expected behaviour',\n                            '\\n',\n                            '## Actual behaviour',\n                            '\\n',\n                            '## Steps to reproduce the error',\n                            '\\n',\n                            '## (Optinal) Browser and OS information',\n                            '\\n',\n                            '```\\n' + JSON.stringify(obj) + '\\n```'\n                        ];\n                        if (this.traceMessage) {\n                            body.push('\\n## Stack Trace \\n```\\n' + this.traceMessage + '\\n```\\n');\n                        }\n                    }\n                    const url = b.getConfig('BugReporting.url').replace('%TITLE%', encodeURIComponent(title)).replace('%BODY%', encodeURIComponent(body.join('\\n')));\n                    window.open(url);\n                });\n            } else {\n                this._find('ButtonBugReport').hide();\n            }\n            return root;\n        }\n    };\n});\ndefine('skylark-osjsv2-client/dialogs/fileinfo',[\n    '../core/dialog',\n    '../vfs/fs',\n    '../core/locales'\n], function (DialogWindow, VFS, a) {\n    'use strict';\n    return class FileInfoDialog extends DialogWindow {\n        constructor(args, callback) {\n            args = Object.assign({}, {}, args);\n            super('FileInfoDialog', {\n                title: args.title || a._('DIALOG_FILEINFO_TITLE'),\n                width: 400,\n                height: 400\n            }, args, callback);\n            if (!this.args.file) {\n                throw new Error('You have to select a file for FileInfo');\n            }\n        }\n        init() {\n            const root = super.init(...arguments);\n            const txt = this._find('Info').set('value', a._('LBL_LOADING'));\n            const file = this.args.file;\n            VFS.fileinfo(file).then(data => {\n                const info = [];\n                Object.keys(data).forEach(i => {\n                    if (i === 'exif') {\n                        info.push(i + ':\\n\\n' + data[i]);\n                    } else {\n                        info.push(i + ':\\n\\t' + data[i]);\n                    }\n                });\n                txt.set('value', info.join('\\n\\n'));\n                return true;\n            }).catch(error => {\n                txt.set('value', a._('DIALOG_FILEINFO_ERROR_LOOKUP_FMT', file.path));\n            });\n            return root;\n        }\n    };\n});\ndefine('skylark-osjsv2-client/dialogs/file',[\n    '../core/dialog',\n    '../gui/element',\n    '../vfs/file',\n    '../core/settings-manager',\n    '../core/mount-manager',\n    '../utils/fs',\n    '../utils/misc',\n    '../vfs/fs',\n    '../core/locales',\n    '../core/config'\n], function (DialogWindow, GUIElement, FileMetadata, SettingsManager, MountManager, FS, Utils, VFS, a, b) {\n    'use strict';\n    return class FileDialog extends DialogWindow {\n        constructor(args, callback) {\n            args = Object.assign({}, {\n                file: null,\n                type: 'open',\n                path: b.getDefaultPath(),\n                filename: '',\n                filetypes: [],\n                extension: '',\n                mime: 'application/octet-stream',\n                filter: [],\n                mfilter: [],\n                select: null,\n                multiple: false\n            }, args);\n            args.multiple = args.type === 'save' ? false : args.multiple === true;\n            if (args.path && args.path instanceof FileMetadata) {\n                args.path = FS.dirname(args.path.path);\n            }\n            if (args.file && args.file.path) {\n                args.path = FS.dirname(args.file.path);\n                args.filename = args.file.filename;\n                args.mime = args.file.mime;\n                if (args.filetypes.length) {\n                    const setTo = args.filetypes[0];\n                    args.filename = FS.replaceFileExtension(args.filename, setTo.extension);\n                    args.mime = setTo.mime;\n                }\n            }\n            const title = args.title || a._(args.type === 'save' ? 'DIALOG_FILE_SAVE' : 'DIALOG_FILE_OPEN');\n            const icon = args.type === 'open' ? 'actions/document-open.png' : 'actions/documentsave-as.png';\n            super('FileDialog', {\n                title: title,\n                icon: icon,\n                width: 600,\n                height: 400\n            }, args, callback);\n            this.selected = null;\n            this.path = args.path;\n            this.settingsWatch = SettingsManager.watch('VFS', () => {\n                this.changePath();\n            });\n        }\n        destroy() {\n            try {\n                SettingsManager.unwatch(this.settingsWatch);\n            } catch (e) {\n            }\n            return super.destroy(...arguments);\n        }\n        init() {\n            const root = super.init(...arguments);\n            const view = this._find('FileView');\n            view.set('filter', this.args.filter);\n            view.set('filetype', this.args.select || '');\n            view.set('defaultcolumns', 'true');\n            const filename = this._find('Filename');\n            const home = this._find('HomeButton');\n            const mlist = this._find('ModuleSelect');\n            const checkEmptyInput = () => {\n                let disable = false;\n                if (this.args.select !== 'dir') {\n                    disable = !filename.get('value').length;\n                }\n                this._find('ButtonOK').set('disabled', disable);\n            };\n            this._toggleLoading(true);\n            view.set('multiple', this.args.multiple);\n            filename.set('value', this.args.filename || '');\n            this._find('ButtonMkdir').on('click', () => {\n                DialogWindow.create('Input', {\n                    message: a._('DIALOG_FILE_MKDIR_MSG', this.path),\n                    value: 'New folder'\n                }, (ev, btn, value) => {\n                    if (btn === 'ok' && value) {\n                        const path = FS.pathJoin(this.path, value);\n                        VFS.mkdir(new FileMetadata(path, 'dir')).then(() => {\n                            return this.changePath(path);\n                        }).catch(err => {\n                            OSjs.error(a._('DIALOG_FILE_ERROR'), a._('ERR_VFSMODULE_MKDIR'), err);\n                        });\n                    }\n                }, this);\n            });\n            home.on('click', () => {\n                const dpath = b.getDefaultPath();\n                this.changePath(dpath);\n            });\n            view.on('activate', ev => {\n                this.selected = null;\n                if (this.args.type !== 'save') {\n                    filename.set('value', '');\n                }\n                if (ev && ev.detail && ev.detail.entries) {\n                    const activated = ev.detail.entries[0];\n                    if (activated) {\n                        this.selected = new FileMetadata(activated.data);\n                        if (this.selected.type !== 'dir') {\n                            filename.set('value', this.selected.filename);\n                        }\n                        this.checkSelection(ev, true);\n                    }\n                }\n            });\n            view.on('select', ev => {\n                this.selected = null;\n                if (ev && ev.detail && ev.detail.entries) {\n                    const activated = ev.detail.entries[0];\n                    if (activated) {\n                        this.selected = new FileMetadata(activated.data);\n                        if (this.selected.type !== 'dir') {\n                            filename.set('value', this.selected.filename);\n                        }\n                    }\n                }\n                checkEmptyInput();\n            });\n            if (this.args.type === 'save') {\n                const filetypes = [];\n                this.args.filetypes.forEach(f => {\n                    filetypes.push({\n                        label: Utils.format('{0} (.{1} {2})', f.label, f.extension, f.mime),\n                        value: f.extension\n                    });\n                });\n                const ft = this._find('Filetype').add(filetypes).on('change', ev => {\n                    const newinput = FS.replaceFileExtension(filename.get('value'), ev.detail);\n                    filename.set('value', newinput);\n                });\n                if (filetypes.length <= 1) {\n                    new GUIElement(ft.$element.parentNode).hide();\n                }\n                filename.on('enter', ev => {\n                    this.selected = null;\n                    this.checkSelection(ev);\n                });\n                filename.on('change', ev => {\n                    checkEmptyInput();\n                });\n                filename.on('keyup', ev => {\n                    checkEmptyInput();\n                });\n            } else {\n                if (this.args.select !== 'dir') {\n                    this._find('ButtonMkdir').hide();\n                }\n                this._find('FileInput').hide();\n            }\n            const rootPath = MountManager.getModuleFromPath(this.path).option('root');\n            const modules = MountManager.getModules().filter(m => {\n                if (!this.args.mfilter.length) {\n                    return true;\n                }\n                return this.args.mfilter.every(fn => fn(m));\n            }).map(m => {\n                return {\n                    label: m.option('title') + (m.isReadOnly() ? Utils.format(' ({0})', a._('LBL_READONLY')) : ''),\n                    value: m.option('root')\n                };\n            });\n            mlist.clear().add(modules).set('value', rootPath);\n            mlist.on('change', ev => {\n                this.changePath(ev.detail, true);\n            });\n            this.changePath();\n            checkEmptyInput();\n            return root;\n        }\n        changePath(dir, fromDropdown) {\n            const view = this._find('FileView');\n            const lastDir = this.path;\n            const resetLastSelected = () => {\n                try {\n                    const rootPath = MountManager.getModuleFromPath(lastDir).option('root');\n                    this._find('ModuleSelect').set('value', rootPath);\n                } catch (e) {\n                    console.warn('FileDialog::changePath()', 'resetLastSelection()', e);\n                }\n            };\n            this._toggleLoading(true);\n            view.chdir({\n                path: dir || this.path,\n                done: error => {\n                    if (error) {\n                        if (fromDropdown) {\n                            resetLastSelected();\n                        }\n                    } else {\n                        if (dir) {\n                            this.path = dir;\n                        }\n                    }\n                    this.selected = null;\n                    this._toggleLoading(false);\n                }\n            });\n        }\n        checkFileExtension() {\n            const filename = this._find('Filename');\n            let mime = this.args.mime;\n            let input = filename.get('value');\n            if (this.args.filetypes.length) {\n                if (!input && this.args.filename) {\n                    input = this.args.filename;\n                }\n                if (input.length) {\n                    const extension = input.split('.').pop();\n                    let found = false;\n                    this.args.filetypes.forEach(f => {\n                        if (f.extension === extension) {\n                            found = f;\n                        }\n                        return !!found;\n                    });\n                    found = found || this.args.filetypes[0];\n                    input = FS.replaceFileExtension(input, found.extension);\n                    mime = found.mime;\n                }\n            }\n            return {\n                filename: input,\n                mime: mime\n            };\n        }\n        checkSelection(ev, wasActivated) {\n            if (this.selected && this.selected.type === 'dir') {\n                if (wasActivated) {\n                    this.changePath(this.selected.path);\n                    return false;\n                }\n            }\n            if (this.args.type === 'save') {\n                let check = this.checkFileExtension();\n                if (!this.path || !check.filename) {\n                    OSjs.error(a._('DIALOG_FILE_ERROR'), a._('DIALOG_FILE_MISSING_FILENAME'));\n                    return false;\n                }\n                this.selected = new FileMetadata(this.path.replace(/^\\//, '') + '/' + check.filename, check.mime);\n                this._toggleDisabled(true);\n                VFS.exists(this.selected).then(result => {\n                    this._toggleDisabled(false);\n                    if (this._destroyed) {\n                        return false;\n                    }\n                    if (result) {\n                        this._toggleDisabled(true);\n                        if (this.selected) {\n                            DialogWindow.create('Confirm', {\n                                buttons: [\n                                    'yes',\n                                    'no'\n                                ],\n                                message: a._('DIALOG_FILE_OVERWRITE', this.selected.filename)\n                            }, (ev, button) => {\n                                this._toggleDisabled(false);\n                                if (button === 'yes' || button === 'ok') {\n                                    this.closeCallback(ev, 'ok', this.selected);\n                                }\n                            }, this);\n                        }\n                    } else {\n                        this.closeCallback(ev, 'ok', this.selected);\n                    }\n                    return true;\n                }).catch(error => {\n                    this._toggleDisabled(false);\n                    if (this._destroyed) {\n                        return;\n                    }\n                    OSjs.error(a._('DIALOG_FILE_ERROR'), a._('DIALOG_FILE_MISSING_FILENAME'));\n                });\n                return false;\n            } else {\n                if (!this.selected && this.args.select !== 'dir') {\n                    OSjs.error(a._('DIALOG_FILE_ERROR'), a._('DIALOG_FILE_MISSING_SELECTION'));\n                    return false;\n                }\n                let res = this.selected;\n                if (!res && this.args.select === 'dir') {\n                    res = new FileMetadata({\n                        filename: FS.filename(this.path),\n                        path: this.path,\n                        type: 'dir'\n                    });\n                }\n                this.closeCallback(ev, 'ok', res);\n            }\n            return true;\n        }\n        onClose(ev, button) {\n            if (button === 'ok' && !this.checkSelection(ev)) {\n                return;\n            }\n            this.closeCallback(ev, button, this.selected);\n        }\n    };\n});\ndefine('skylark-osjsv2-client/dialogs/fileprogress',[\n    '../core/dialog',\n    '../core/locales'\n], function (DialogWindow, a) {\n    'use strict';\n    return class FileProgressDialog extends DialogWindow {\n        constructor(args, callback) {\n            args = Object.assign({}, {}, args);\n            super('FileProgressDialog', {\n                title: args.title || a._('DIALOG_FILEPROGRESS_TITLE'),\n                icon: 'actions/document-send.png',\n                width: 400,\n                height: 100\n            }, args, callback);\n            this.busy = !!args.filename;\n        }\n        init() {\n            const root = super.init(...arguments);\n            if (this.args.message) {\n                this._find('Message').set('value', this.args.message, true);\n            }\n            return root;\n        }\n        onClose(ev, button) {\n            this.closeCallback(ev, button, null);\n        }\n        setProgress(p, close = true) {\n            const pb = this._find('Progress');\n            if (pb) {\n                pb.set('progress', p);\n            }\n            if (close && p >= 100) {\n                this._close(true);\n            }\n        }\n        _close(force) {\n            if (!force && this.busy) {\n                return false;\n            }\n            return super._close();\n        }\n        _onKeyEvent(ev) {\n            if (!this.busy) {\n                super._onKeyEvent(...arguments);\n            }\n        }\n    };\n});\ndefine('skylark-osjsv2-client/dialogs/fileupload',[\n    '../core/dialog',\n    '../vfs/fs',\n    '../core/locales',\n    '../core/config'\n], function (DialogWindow, VFS, a, b) {\n    'use strict';\n    return class FileUploadDialog extends DialogWindow {\n        constructor(args, callback) {\n            args = Object.assign({}, {\n                dest: b.getDefaultPath(),\n                progress: {},\n                file: null\n            }, args);\n            if (args.destination) {\n                args.dest = args.destination;\n            }\n            if (!args.dest) {\n                args.dest = b.getDefaultPath();\n            }\n            super('FileUploadDialog', {\n                title: args.title || a._('DIALOG_UPLOAD_TITLE'),\n                icon: 'actions/document-new.png',\n                width: 400,\n                height: 100\n            }, args, callback);\n        }\n        init() {\n            const root = super.init(...arguments);\n            const message = this._find('Message');\n            const maxSize = b.getConfig('VFS.MaxUploadSize');\n            message.set('value', a._('DIALOG_UPLOAD_DESC', this.args.dest, maxSize), true);\n            const input = this._find('File');\n            if (this.args.file) {\n                this.setFile(this.args.file, input);\n            } else {\n                input.on('change', ev => {\n                    this.setFile(ev.detail, input);\n                });\n            }\n            return root;\n        }\n        setFile(file, input) {\n            let progressDialog;\n            const error = (msg, ev) => {\n                OSjs.error(a._('DIALOG_UPLOAD_FAILED'), a._('DIALOG_UPLOAD_FAILED_MSG'), msg || a._('DIALOG_UPLOAD_FAILED_UNKNOWN'));\n                progressDialog._close(true);\n                this.onClose(ev, 'cancel');\n            };\n            if (file) {\n                let fileSize = 0;\n                if (file.size > 1024 * 1024) {\n                    fileSize = (Math.round(file.size * 100 / (1024 * 1024)) / 100).toString() + 'MB';\n                } else {\n                    fileSize = (Math.round(file.size * 100 / 1024) / 100).toString() + 'KB';\n                }\n                if (input) {\n                    input.set('disabled', true);\n                }\n                this._find('ButtonCancel').set('disabled', true);\n                const desc = a._('DIALOG_UPLOAD_MSG_FMT', file.name, file.type, fileSize, this.args.dest);\n                progressDialog = DialogWindow.create('FileProgress', {\n                    message: desc,\n                    dest: this.args.dest,\n                    filename: file.name,\n                    mime: file.type,\n                    size: fileSize\n                }, (ev, button) => {\n                }, this);\n                VFS.upload({\n                    files: [file],\n                    destination: this.args.dest\n                }, {\n                    onprogress: ev => {\n                        if (ev.lengthComputable) {\n                            const p = Math.round(ev.loaded * 100 / ev.total);\n                            progressDialog.setProgress(p);\n                        }\n                    }\n                }).then(() => {\n                    progressDialog._close(true);\n                    return this.onClose(null, 'ok', file);\n                }).catch(error);\n                setTimeout(() => {\n                    if (progressDialog) {\n                        progressDialog._focus();\n                    }\n                }, 100);\n            }\n        }\n        onClose(ev, button, result) {\n            result = result || null;\n            this.closeCallback(ev, button, result);\n        }\n    };\n});\ndefine('skylark-osjsv2-client/dialogs/font',[\n    '../core/dialog',\n    '../core/locales',\n    '../core/config'\n], function (DialogWindow, a, b) {\n    'use strict';\n    return class FontDialog extends DialogWindow {\n        constructor(args, callback) {\n            args = Object.assign({}, {\n                fontName: b.getConfig('Fonts.default'),\n                fontSize: 12,\n                fontColor: '#000000',\n                backgroundColor: '#ffffff',\n                fonts: b.getConfig('Fonts.list'),\n                minSize: 6,\n                maxSize: 30,\n                text: 'The quick brown fox jumps over the lazy dog',\n                unit: 'px'\n            }, args);\n            if (args.unit === 'null' || args.unit === 'unit') {\n                args.unit = '';\n            }\n            super('FontDialog', {\n                title: args.title || a._('DIALOG_FONT_TITLE'),\n                width: 400,\n                height: 300\n            }, args, callback);\n            this.selection = {\n                fontName: args.fontName,\n                fontSize: args.fontSize + args.unit\n            };\n        }\n        init() {\n            const root = super.init(...arguments);\n            const preview = this._find('FontPreview');\n            const sizes = [];\n            const fonts = [];\n            for (let i = this.args.minSize; i < this.args.maxSize; i++) {\n                sizes.push({\n                    value: i,\n                    label: i\n                });\n            }\n            for (let j = 0; j < this.args.fonts.length; j++) {\n                fonts.push({\n                    value: this.args.fonts[j],\n                    label: this.args.fonts[j]\n                });\n            }\n            const updatePreview = () => {\n                preview.querySelector('textarea').style.fontFamily = this.selection.fontName;\n                preview.querySelector('textarea').style.fontSize = this.selection.fontSize;\n            };\n            const listFonts = this._find('FontName');\n            listFonts.add(fonts).set('value', this.args.fontName);\n            listFonts.on('change', ev => {\n                this.selection.fontName = ev.detail;\n                updatePreview();\n            });\n            const listSizes = this._find('FontSize');\n            listSizes.add(sizes).set('value', this.args.fontSize);\n            listSizes.on('change', ev => {\n                this.selection.fontSize = ev.detail + this.args.unit;\n                updatePreview();\n            });\n            preview.$element.style.color = this.args.fontColor;\n            preview.$element.style.backgroundColor = this.args.backgroundColor;\n            preview.set('value', this.args.text);\n            if (this.args.fontSize < 0) {\n                this._find('FontSizeContainer').hide();\n            }\n            updatePreview();\n            return root;\n        }\n        onClose(ev, button) {\n            const result = button === 'ok' ? this.selection : null;\n            this.closeCallback(ev, button, result);\n        }\n    };\n});\ndefine('skylark-osjsv2-client/dialogs/input',[\n    '../core/dialog',\n    '../core/locales'\n], function (DialogWindow, a) {\n    'use strict';\n    return class InputDialog extends DialogWindow {\n        constructor(args, callback) {\n            args = Object.assign({}, {}, args);\n            super('InputDialog', {\n                title: args.title || a._('DIALOG_INPUT_TITLE'),\n                icon: 'status/dialog-information.png',\n                width: 400,\n                height: 120\n            }, args, callback);\n        }\n        init() {\n            const root = super.init(...arguments);\n            if (this.args.message) {\n                const msg = DialogWindow.parseMessage(this.args.message);\n                this._find('Message').empty().append(msg);\n            }\n            const input = this._find('Input');\n            input.set('placeholder', this.args.placeholder || '');\n            input.set('value', this.args.value || '');\n            input.on('enter', ev => {\n                this.onClose(ev, 'ok');\n            });\n            return root;\n        }\n        _focus() {\n            if (super._focus(...arguments)) {\n                this._find('Input').focus();\n                return true;\n            }\n            return false;\n        }\n        onClose(ev, button) {\n            const result = this._find('Input').get('value');\n            this.closeCallback(ev, button, button === 'ok' ? result : null);\n        }\n        setRange(range) {\n            const input = this._find('Input');\n            if (input.$element) {\n                input.$element.querySelector('input').select(range);\n            }\n        }\n    };\n});\ndefine('skylark-osjsv2-client/vfs/transport',[\n    'skylark-axios',\n    '../core/locales'\n], function (axios, a) {\n    'use strict';\n    return class Transport {\n        request(method, args, options, mount) {\n            const readOnly = [\n                'upload',\n                'unlink',\n                'write',\n                'mkdir',\n                'move',\n                'trash',\n                'untrash',\n                'emptyTrash'\n            ];\n            if (mount.isReadOnly()) {\n                if (readOnly.indexOf(method) !== -1) {\n                    return Promise.reject(new Error(a._('ERR_VFSMODULE_READONLY')));\n                }\n            }\n            const newArgs = args.concat([\n                options,\n                mount\n            ]);\n            return this[method](...newArgs);\n        }\n        scandir(item, options, mount) {\n            return Promise.reject(new Error(a._('ERR_VFS_UNAVAILABLE')));\n        }\n        read(item, options, mount) {\n            return Promise.reject(new Error(a._('ERR_VFS_UNAVAILABLE')));\n        }\n        write(file, data, options, mount) {\n            return Promise.reject(new Error(a._('ERR_VFS_UNAVAILABLE')));\n        }\n        unlink(src, options, mount) {\n            return Promise.reject(new Error(a._('ERR_VFS_UNAVAILABLE')));\n        }\n        copy(src, dest, options, mount) {\n            return Promise.reject(new Error(a._('ERR_VFS_UNAVAILABLE')));\n        }\n        move(src, dest, options, mount) {\n            return Promise.reject(new Error(a._('ERR_VFS_UNAVAILABLE')));\n        }\n        exists(item, options, mount) {\n            return Promise.reject(new Error(a._('ERR_VFS_UNAVAILABLE')));\n        }\n        fileinfo(item, options, mount) {\n            return Promise.reject(new Error(a._('ERR_VFS_UNAVAILABLE')));\n        }\n        mkdir(dir, options, mount) {\n            return Promise.reject(new Error(a._('ERR_VFS_UNAVAILABLE')));\n        }\n        upload(file, dest, options, mount) {\n            return Promise.reject(new Error(a._('ERR_VFS_UNAVAILABLE')));\n        }\n        download(item, options, mount) {\n            return new Promise((resolve, reject) => {\n                this.url(item).then(url => {\n                    return axios({\n                        responseType: 'arraybuffer',\n                        url: url,\n                        method: 'GET'\n                    }).then(result => {\n                        return resolve(result.data);\n                    }).catch(error => {\n                        reject(error.message);\n                    });\n                }).catch(reject);\n            });\n        }\n        url(item, options, mount) {\n            return Promise.reject(new Error(a._('ERR_VFS_UNAVAILABLE')));\n        }\n        find(file, options, mount) {\n            return Promise.reject(new Error(a._('ERR_VFS_UNAVAILABLE')));\n        }\n        trash(file, options, mount) {\n            return Promise.reject(new Error(a._('ERR_VFS_UNAVAILABLE')));\n        }\n        untrash(file, options, mount) {\n            return Promise.reject(new Error(a._('ERR_VFS_UNAVAILABLE')));\n        }\n        emptyTrash(options, mount) {\n            return Promise.reject(new Error(a._('ERR_VFS_UNAVAILABLE')));\n        }\n        freeSpace(root, options, mount) {\n            return Promise.reject(new Error(a._('ERR_VFS_UNAVAILABLE')));\n        }\n    };\n});\ndefine('skylark-osjsv2-client/vfs/transports/web',[\n    'skylark-axios',\n    '../transport',\n    '../../core/connection',\n    '../../utils/fs'\n], function (axios, Transport, Connection, FS) {\n    'use strict';\n    return class WebTransport extends Transport {\n        _request(url, responseType, method, options) {\n            return new Promise((resolve, reject) => {\n                if (!options.cors) {\n                    const binary = options.type === 'text' ? false : responseType === 'arraybuffer';\n                    Connection.request('curl', {\n                        url: url,\n                        method: method,\n                        binary: binary\n                    }).then(result => {\n                        if (binary) {\n                            return FS.dataSourceToAb(result.body, 'application/octet-stream', (err, ab) => {\n                                return err ? reject(err) : resolve(ab);\n                            });\n                        }\n                        return resolve(result.body);\n                    }).catch(reject);\n                } else {\n                    axios({\n                        responseType: responseType,\n                        url: url,\n                        method: method\n                    }).then(response => {\n                        return resolve(responseType === null ? response.statusText : response.data);\n                    }).catch(e => reject(new Error(e.message || e)));\n                }\n            });\n        }\n        scandir(item, options, mount) {\n            return new Promise((resolve, reject) => {\n                const root = mount.option('root');\n                const url = item.path.replace(/\\/?$/, '/_scandir.json');\n                this._request(url, 'json', 'GET', options).then(response => {\n                    return resolve(response.map(iter => {\n                        iter.path = root + iter.path.replace(/^\\//, '');\n                        return iter;\n                    }));\n                }).catch(reject);\n            });\n        }\n        read(item, options) {\n            const mime = item.mime || 'application/octet-stream';\n            return new Promise((resolve, reject) => {\n                this._request(item.path, 'arraybuffer', 'GET', options).then(response => {\n                    if (options.cors) {\n                        if (options.type === 'text') {\n                            resolve(response);\n                        } else {\n                            FS.dataSourceToAb(response, 'application/octet-stream', (err, ab) => {\n                                return err ? reject(err) : resolve(ab);\n                            });\n                        }\n                        return true;\n                    }\n                    if (options.type === 'text') {\n                        FS.abToText(response, mime, (err, txt) => {\n                            if (err) {\n                                reject(new Error(err));\n                            } else {\n                                resolve(txt);\n                            }\n                        });\n                        return true;\n                    }\n                    return resolve(response);\n                }).catch(reject);\n            });\n        }\n        exists(item) {\n            return new Promise((resolve, reject) => {\n                this._request(item.path, null, 'HEAD').then(response => {\n                    return resolve(response.toUpperCase() === 'OK');\n                }).catch(reject);\n            });\n        }\n        url(item) {\n            return Promise.resolve(item.path);\n        }\n    };\n});\ndefine('skylark-osjsv2-client/vfs/transports/osjs',[\n    '../file',\n    '../../utils/fs',\n    '../../core/connection',\n    '../transport',\n    '../../core/config',\n    '../../core/locales'\n], function (FileMetadata, FS, Connection, Transport, a, b) {\n    'use strict';\n    return class OSjsTransport extends Transport {\n        _request(method, args, options) {\n            return Connection.request('FS:' + method, args, options);\n        }\n        _requestUpload(dest, file, options) {\n            options = options || {};\n            dest = dest instanceof FileMetadata ? dest.path : dest;\n            if (typeof file.size !== 'undefined') {\n                const maxSize = a.getConfig('VFS.MaxUploadSize');\n                if (maxSize > 0) {\n                    const bytes = file.size;\n                    if (bytes > maxSize) {\n                        const msg = b._('DIALOG_UPLOAD_TOO_BIG_FMT', FS.humanFileSize(maxSize));\n                        return Promise.reject(new Error(msg));\n                    }\n                }\n            }\n            const fd = new FormData();\n            fd.append('path', dest);\n            if (file) {\n                fd.append('filename', file.filename);\n            }\n            if (options) {\n                Object.keys(options).forEach(key => {\n                    if (key !== 'meta' && typeof options[key] !== 'function') {\n                        fd.append(key, String(options[key]));\n                    }\n                });\n            }\n            if (file instanceof window.ArrayBuffer) {\n                fd.append('size', String(file.byteLength));\n            }\n            FS.addFormFile(fd, 'upload', file, options.meta);\n            return this._request('upload', fd, options);\n        }\n        scandir(item, options) {\n            options = options || {};\n            const args = {\n                path: item.path,\n                options: { shortcuts: options.shortcuts }\n            };\n            return new Promise((resolve, reject) => {\n                this._request('scandir', args, options).then(result => {\n                    return resolve(result.map(i => new FileMetadata(i)));\n                }).catch(reject);\n            });\n        }\n        read(item, options) {\n            return this._request('get', { path: item.path }, options);\n        }\n        write(file, data, options) {\n            options = options || {};\n            options.meta = file;\n            options.overwrite = true;\n            options.onprogress = options.onprogress || function () {\n            };\n            const parentfile = new FileMetadata(FS.dirname(file.path), file.mime);\n            return this._requestUpload(parentfile, data, options);\n        }\n        unlink(src) {\n            return this._request('unlink', { path: src.path });\n        }\n        copy(src, dest, options) {\n            return this._request('copy', {\n                src: src.path,\n                dest: dest.path\n            }, options);\n        }\n        move(src, dest, options) {\n            return this._request('move', {\n                src: src.path,\n                dest: dest.path\n            }, options);\n        }\n        exists(item) {\n            return this._request('exists', { path: item.path });\n        }\n        fileinfo(item) {\n            return this._request('fileinfo', { path: item.path });\n        }\n        mkdir(dir) {\n            return this._request('mkdir', { path: dir.path });\n        }\n        upload(dest, data, options) {\n            return this._requestUpload(dest, data, options);\n        }\n        url(item, options) {\n            if (typeof item === 'string') {\n                item = new FileMetadata(item);\n            }\n            return Promise.resolve(Connection.instance.getVFSPath(item, options));\n        }\n        find(file, options) {\n            return this._request('find', {\n                path: file.path,\n                args: options\n            });\n        }\n        trash(file) {\n            return Promise.reject(new Error(b._('ERR_VFS_UNAVAILABLE')));\n        }\n        untrash(file) {\n            return Promise.reject(new Error(b._('ERR_VFS_UNAVAILABLE')));\n        }\n        emptyTrash() {\n            return Promise.reject(new Error(b._('ERR_VFS_UNAVAILABLE')));\n        }\n        freeSpace(root) {\n            return this._request('freeSpace', { root: root });\n        }\n    };\n});\ndefine('skylark-osjsv2-client/vfs/transports/dist',[\n    './osjs',\n    '../../core/mount-manager',\n    '../../core/config',\n    '../../core/locales'\n], function ( OSjsTransport, MountManager, a, b) {\n    'use strict';\n    return class DistTransport extends OSjsTransport {\n        request(method, args, options) {\n            if ([\n                    'url',\n                    'scandir',\n                    'read'\n                ].indexOf(method) === -1) {\n                return Promise.reject(new Error(b._('ERR_VFS_UNAVAILABLE')));\n            }\n            return super.request(...arguments);\n        }\n        url(item) {\n            const root = a.getBrowserPath();\n            const module = MountManager.getModuleFromPath(item.path);\n            const url = item.path.replace(module.option('match'), root).replace(/^\\/+/, '/');\n            return Promise.resolve(url);\n        }\n    };\n});\ndefine('skylark-osjsv2-client/vfs/transports/applications',[\n    '../../core/package-manager',\n    '../transport',\n    '../file',\n    '../../core/locales'\n], function ( PackageManager, Transport, FileMetadata, a) {\n    'use strict';\n    return class ApplicationTransport extends Transport {\n        request(method, args, options) {\n            if (['scandir'].indexOf(method) === -1) {\n                return Promise.reject(new Error(a._('ERR_VFS_UNAVAILABLE')));\n            }\n            return super.request(...arguments);\n        }\n        scandir() {\n            const metadata = PackageManager.getPackages(); \n            const files = [];\n            Object.keys(metadata).forEach(m => {\n                const iter = metadata[m];\n                if (iter.type !== 'extension') {\n                    files.push(new FileMetadata({\n                        filename: iter.name,\n                        type: 'application',\n                        path: 'applications:///' + m,\n                        mime: 'osjs/application'\n                    }, 'osjs/application'));\n                }\n            });\n            return Promise.resolve(files);\n        }\n        url(item) {\n            return Promise.resolve(item.path);\n        }\n    };\n});\ndefine('skylark-osjsv2-client/vfs/transports/webdav',[\n    'skylark-axios',\n    '../../core/connection',\n    '../../utils/fs',\n    '../../utils/misc',\n    '../transport',\n    '../file',\n    '../../core/config',\n    '../../core/locales'\n], function (axios, Connection, FS, Utils, Transport, FileMetadata, a, b) {\n    'use strict';\n    function getTargetPath(item, mount) {\n        return item.path.replace(mount.option('match'), '');\n    }\n    function getTargetUrl(mount, file, moduleOptions) {\n        let baseUrl = moduleOptions.host;\n        if (!moduleOptions.cors) {\n            baseUrl = Utils.parseurl(moduleOptions.host, {\n                username: moduleOptions.username,\n                password: moduleOptions.password\n            }).url;\n        }\n        const basename = getTargetPath(file, mount);\n        return baseUrl.replace(/\\/?$/, basename.replace(/^\\/?/, '/'));\n    }\n    function getFilePath(c, ns, mount) {\n        const moduleOptions = mount.option('options') || {};\n        const uri = Utils.parseurl(moduleOptions.host).path;\n        try {\n            let path = c.getElementsByTagNameNS(ns, 'href')[0].textContent;\n            return path.substr(uri.length - 1, path.length);\n        } catch (e) {\n            console.warn(e);\n        }\n        return '/';\n    }\n    function getFileMime(type, c, ns) {\n        if (type === 'file') {\n            try {\n                return c.getElementsByTagNameNS(ns, 'getcontenttype')[0].textContent || 'application/octet-stream';\n            } catch (e) {\n                return 'application/octet-stream';\n            }\n        }\n        return null;\n    }\n    function getFileId(type, c, ns) {\n        try {\n            return c.getElementsByTagNameNS(ns, 'getetag')[0].textContent;\n        } catch (e) {\n        }\n        return null;\n    }\n    function getFileSize(type, c, ns) {\n        if (type === 'file') {\n            try {\n                return parseInt(c.getElementsByTagNameNS(ns, 'getcontentlength')[0].textContent, 10) || 0;\n            } catch (e) {\n            }\n        }\n        return 0;\n    }\n    function parseListing(doc, item, mount) {\n        const root = mount.option('root');\n        const moduleOptions = mount.option('options') || {};\n        const reqpath = getTargetPath(item, mount);\n        let ns = moduleOptions.ns || 'DAV';\n        if (ns.substr(-1) !== ':') {\n            ns += ':';\n        }\n        return (doc.children || []).map(c => {\n            let path = getFilePath(c, ns, mount);\n            let type = 'file';\n            if (path.match(/\\/$/)) {\n                type = 'dir';\n                path = path.replace(/\\/$/, '') || '/';\n            }\n            if (path === reqpath) {\n                return false;\n            }\n            return new FileMetadata({\n                id: getFileId(type, c, ns),\n                path: root + path.replace(/^\\//, ''),\n                filename: FS.filename(path),\n                size: getFileSize(type, c, ns),\n                mime: getFileMime(type, c, ns),\n                type: type\n            });\n        }).filter(iter => iter !== false);\n    }\n    function parseResponse(body) {\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(body, 'application/xml');\n        return doc.firstChild;\n    }\n    return class WebDAVTransport extends Transport {\n        _request(method, args, options, mount, raw) {\n            const mime = args.mime || 'application/octet-stream';\n            const file = new FileMetadata(args, mime);\n            const moduleOptions = mount.option('options') || {};\n            const headers = {};\n            const url = getTargetUrl(mount, file, moduleOptions);\n            if (args.dest) {\n                const dest = new FileMetadata(args.dest, mime);\n                headers.Destination = getTargetUrl(mount, dest, moduleOptions);\n            }\n            if (mime) {\n                headers['Content-Type'] = mime;\n            }\n            return new Promise((resolve, reject) => {\n                if (moduleOptions.cors) {\n                    const aopts = {\n                        url: url,\n                        responseType: raw === true ? 'arraybuffer' : 'text',\n                        method: method,\n                        headers: headers,\n                        data: args.data,\n                        auth: {\n                            username: moduleOptions.username,\n                            password: moduleOptions.password\n                        }\n                    };\n                    axios(aopts).then(response => {\n                        return resolve(response.data);\n                    }).catch(e => reject(new Error(e.message || e)));\n                } else {\n                    const copts = {\n                        url: url,\n                        method: method,\n                        binary: raw === true,\n                        mime: mime,\n                        headers: headers\n                    };\n                    Connection.request('curl', copts).then(response => {\n                        const code = response.httpCode;\n                        if (!response) {\n                            return reject(new Error(b._('ERR_VFS_REMOTEREAD_EMPTY')));\n                        } else if ([\n                                200,\n                                201,\n                                203,\n                                204,\n                                205,\n                                207\n                            ].indexOf(code) < 0) {\n                            const error = new Error(b._('ERR_VFSMODULE_XHR_ERROR') + ': ' + code);\n                            error.httpCode = code;\n                            return reject(error);\n                        }\n                        if (raw === true) {\n                            return FS.dataSourceToAb(response.body, mime, (err, ab) => {\n                                return err ? reject(new Error(err)) : resolve(ab);\n                            });\n                        }\n                        return resolve(parseResponse(response.body));\n                    }).catch(reject);\n                }\n            });\n        }\n        scandir(item, options, mount) {\n            return new Promise((resolve, reject) => {\n                this._request('PROPFIND', { path: item.path }, options, mount).then(doc => {\n                    resolve(doc ? parseListing(doc, item, mount).map(iter => new FileMetadata(iter)) : []);\n                }).catch(reject);\n            });\n        }\n        read(item, options, mount) {\n            return this._request('GET', {\n                path: item.path,\n                mime: item.mime\n            }, options, mount, true);\n        }\n        write(item, data, options, mount) {\n            return this._request('PUT', {\n                path: item.path,\n                data: data,\n                mime: item.mime\n            }, options, mount);\n        }\n        unlink(item, options, mount) {\n            return this._request('DELETE', { path: item.path }, options, mount);\n        }\n        copy(src, dest, options, mount) {\n            return this._request('COPY', {\n                path: src.path,\n                dest: dest.path\n            }, options, mount);\n        }\n        move(src, dest, options, mount) {\n            return this._request('MOVE', {\n                path: src.path,\n                dest: dest.path\n            }, options, mount);\n        }\n        exists(item, options, mount) {\n            return new Promise((resolve, reject) => {\n                this._request('PROPFIND', { path: item.path }, options, mount).then(() => {\n                    resolve(false);\n                }).catch(err => {\n                    if (err.httpCode === 404) {\n                        resolve(false);\n                    } else {\n                        console.warn(err);\n                        resolve(true);\n                    }\n                });\n            });\n        }\n        mkdir(item, options, mount) {\n            return this._request('MKCOL', { path: item.path }, options, mount);\n        }\n        url(item, options, mount) {\n            const moduleOptions = mount.option('options') || {};\n            let requestUrl = getTargetUrl(mount, item, moduleOptions);\n            if (!moduleOptions.cors) {\n                requestUrl = a.getConfig('Connection.FSURI') + '/read?path=' + encodeURIComponent(requestUrl);\n            }\n            return Promise.resolve(requestUrl);\n        }\n        freeSpace(root) {\n            return Promise.resolve(-1);\n        }\n    };\n});\ndefine('skylark-osjsv2-client/helpers/service-notification-icon',[\n    '../gui/notification',\n    '../core/theme',\n    '../gui/menu',\n    '../core/locales'\n], function (Notification, Theme, Menu, a) {\n    'use strict';\n    class ServiceNotificationIcon {\n        constructor() {\n            this.entries = {};\n            this.size = 0;\n            this.notif = null;\n        }\n        init() {\n            const show = ev => {\n                this.displayMenu(ev);\n                return false;\n            };\n            this.notif = Notification.createIcon('ServiceNotificationIcon', {\n                image: Theme.getIcon('status/dialog-password.png'),\n                onContextMenu: show,\n                onClick: show,\n                onInited: (el, img) => {\n                    this._updateIcon();\n                }\n            });\n            this._updateIcon();\n        }\n        destroy() {\n            Notification.destroyIcon('ServiceNotificationIcon');\n            this.size = 0;\n            this.entries = {};\n            this.notif = null;\n        }\n        _updateIcon() {\n            if (this.notif) {\n                if (this.notif.$container) {\n                    this.notif.$container.style.display = this.size ? 'inline-block' : 'none';\n                }\n                this.notif.setTitle(a._('SERVICENOTIFICATION_TOOLTIP', this.size.toString()));\n            }\n        }\n        displayMenu(ev) {\n            const menu = [];\n            const entries = this.entries;\n            Object.keys(entries).forEach(name => {\n                menu.push({\n                    title: name,\n                    menu: entries[name]\n                });\n            });\n            Menu.create(menu, ev);\n        }\n        add(name, menu) {\n            if (!this.entries[name]) {\n                this.entries[name] = menu;\n                this.size++;\n                this._updateIcon();\n            }\n        }\n        remove(name) {\n            if (this.entries[name]) {\n                delete this.entries[name];\n                this.size--;\n                this._updateIcon();\n            }\n        }\n    }\n    return new ServiceNotificationIcon();\n});\ndefine('skylark-osjsv2-client/helpers/qs',[],function(){\r\n  'use strict';\r\n\r\n\r\n\r\n  /**\r\n   * A response from a web request\r\n   *\r\n   * @param {Number} statusCode\r\n   * @param {Object} headers\r\n   * @param {Buffer} body\r\n   * @param {String} url\r\n   */\r\n  function Response(statusCode, headers, body, url) {\r\n    if (typeof statusCode !== 'number') {\r\n      throw new TypeError('statusCode must be a number but was ' + (typeof statusCode));\r\n    }\r\n    if (headers === null) {\r\n      throw new TypeError('headers cannot be null');\r\n    }\r\n    if (typeof headers !== 'object') {\r\n      throw new TypeError('headers must be an object but was ' + (typeof headers));\r\n    }\r\n    this.statusCode = statusCode;\r\n    this.headers = {};\r\n    for (var key in headers) {\r\n      this.headers[key.toLowerCase()] = headers[key];\r\n    }\r\n    this.body = body;\r\n    this.url = url;\r\n  }\r\n\r\n  Response.prototype.getBody = function (encoding) {\r\n    if (this.statusCode >= 300) {\r\n      var err = new Error('Server responded with status code '\r\n                      + this.statusCode + ':\\n' + this.body.toString());\r\n      err.statusCode = this.statusCode;\r\n      err.headers = this.headers;\r\n      err.body = this.body;\r\n      err.url = this.url;\r\n      throw err;\r\n    }\r\n    return encoding ? this.body.toString(encoding) : this.body;\r\n  };\r\n\r\n  return Response;\r\n});\ndefine('skylark-osjsv2-client/helpers/handle-qs',['./qs'],function(qs){\r\n  var parse = qs.parse;\r\n  var stringify = qs.stringify;\r\n\r\n  return function handleQs(url, query) {\r\n    url = url.split('?');\r\n    var start = url[0];\r\n    var qs = (url[1] || '').split('#')[0];\r\n    var end = url[1] && url[1].split('#').length > 1 ? '#' + url[1].split('#')[1] : '';\r\n\r\n    var baseQs = parse(qs);\r\n    for (var i in query) {\r\n      baseQs[i] = query[i];\r\n    }\r\n    qs = stringify(baseQs);\r\n    if (qs !== '') {\r\n      qs = '?' + qs;\r\n    }\r\n    return start + qs + end;\r\n  }\r\n});\ndefine('skylark-osjsv2-client/helpers/then-jsonp',['./handle-qs'],function(handleQs){\r\n  'use strict';\r\n\r\n  var jsonpID = 0;\r\n\r\n  var queues = {};\r\n\r\n  function pquest(method, url, options, callback) {\r\n    var result = new Promise(function (resolve, reject) {\r\n\r\n      // check types of arguments\r\n\r\n      if (typeof method !== 'string') {\r\n        throw new TypeError('The method must be a string.');\r\n      }\r\n      if (typeof url !== 'string') {\r\n        throw new TypeError('The URL/path must be a string.');\r\n      }\r\n      if (typeof options === 'function') {\r\n        callback = options;\r\n        options = {};\r\n      }\r\n      if (options === null || options === undefined) {\r\n        options = {};\r\n      }\r\n      if (typeof options !== 'object') {\r\n        throw new TypeError('Options must be an object (or null).');\r\n      }\r\n      if (typeof callback !== 'function') {\r\n        callback = undefined;\r\n      }\r\n\r\n      if (options.body) {\r\n        throw new TypeError('JSONP does not support requests that have bodies');\r\n      }\r\n      if (options.headers) {\r\n        throw new TypeError('JSONP does not support requests that specify headers');\r\n      }\r\n      if (options.followRedirects === false) {\r\n        throw new TypeError('JSONP does not support requests that do not follow redirects');\r\n      }\r\n\r\n      options.qs = options.qs || {};\r\n      if (options.json) {\r\n        Object.keys(options.json).forEach(function (key) {\r\n          options.qs[key] = options.json[key];\r\n        });\r\n        delete options.json;\r\n      }\r\n\r\n      var callbackName = options.callbackName || 'then_jsonp_' + (++jsonpID);\r\n\r\n      if (options.callbackParameter !== false) {\r\n        options.qs[options.callbackParameter || 'callback'] = callbackName;\r\n      }\r\n      if (method.toLowerCase() !== 'get') {\r\n        options.qs[options.methodParameter || 'method'] = method;\r\n      }\r\n\r\n      if (queues[callbackName]) {\r\n        queues[callbackName].push(run);\r\n      } else {\r\n        queues[callbackName] = [];\r\n        run();\r\n      }\r\n\r\n      function run() {\r\n        // handle query string\r\n        if (options.qs) {\r\n          url = handleQs(url, options.qs);\r\n        }\r\n\r\n        var script = document.createElement('script');\r\n        var head = document.getElementsByTagName('head')[0] || document.documentElement;\r\n        var abortTimeout;\r\n        var done = false;\r\n        function onComplete(success) {\r\n          if (!done) {\r\n            done = true;\r\n            script.onload = script.onreadystatechange = script.onerror = null;\r\n            clearTimeout(abortTimeout);\r\n            if (callbackName in window) {\r\n              if (success) delete window[callbackName];\r\n              else window[callbackName] = function () {};\r\n            }\r\n            if (script && script.parentNode) {\r\n              script.parentNode.removeChild(script);\r\n            }\r\n            if (queues[callbackName].length) queues[callbackName].shift()();\r\n            else delete queues[callbackName];\r\n          }\r\n        }\r\n        script.onload = script.onreadystatechange = function () {\r\n          if (!this.readyState || this.readyState === \"loaded\" || this.readyState === \"complete\") {\r\n            onComplete();\r\n            setTimeout(function () {\r\n              reject(new Error('JSONP callback should already have been called'));\r\n            }, 100);\r\n          }\r\n        };\r\n        script.onerror = function () {\r\n          onComplete();\r\n          reject(new Error('JSONP request failed'));\r\n        };\r\n        window[callbackName] = function (result) {\r\n          onComplete(true);\r\n          resolve(result);\r\n        };\r\n        abortTimeout = setTimeout(function(){\r\n          onComplete();\r\n          reject(new Error('JSONP timed out'));\r\n        }, options.timeout || 10000);\r\n\r\n        script.src = url;\r\n        script.async = true;\r\n\r\n        head.appendChild(script);\r\n      }\r\n    });\r\n    result.getBody = function () {\r\n      return result.then(function (res) { return res.getBody(); });\r\n    };\r\n    return result.nodeify(callback);\r\n  }\r\n\r\n  return pquest;\r\n});\ndefine('skylark-osjsv2-client/helpers/google-api',[\n    '../core/mount-manager',\n    './service-notification-icon',\n    '../utils/preloader',\n    '../core/locales',\n    '../core/config',\n    './then-jsonp'\n], function (MountManager, ServiceNotificationIcon, Preloader, a, b, jsonp) {\n    'use strict';\n    const gapi = window.gapi = window.gapi || {};\n    let SingletonInstance = null;\n    class GoogleAPI {\n        constructor(clientId) {\n            this.clientId = clientId;\n            this.accessToken = null;\n            this.userId = null;\n            this.preloaded = false;\n            this.authenticated = false;\n            this.loaded = [];\n            this.preloads = [{\n                    type: 'javascript',\n                    src: 'https://apis.google.com/js/api.js'\n                }];\n        }\n        destroy() {\n        }\n        init(callback) {\n            callback = callback || function () {\n            };\n            if (this.preloaded) {\n                callback(false, true);\n            } else {\n                Preloader.preload(this.preloads).then(result => {\n                    if (result.failed.length) {\n                        this.preloaded = true;\n                    }\n                    callback(result.failed.join('\\n'));\n                }).catch(callback);\n            }\n        }\n        load(load, scope, client, callback) {\n            const auth = cb => {\n                this.authenticate(scope, (error, result) => {\n                    if (error) {\n                        cb(error);\n                    } else {\n                        if (!this.authenticated) {\n                            cb(a._('GAPI_AUTH_FAILURE'));\n                            return;\n                        }\n                        cb(false, result);\n                    }\n                });\n            };\n            const loadAll = finished => {\n                const lload = [];\n                load.forEach(i => {\n                    if (this.loaded.indexOf(i) === -1) {\n                        lload.push(i);\n                    }\n                });\n                let current = 0;\n                let total = lload.length;\n                console.debug('GoogleAPI::load()', load, '=>', lload, scope);\n                const _load = (iter, cb) => {\n                    let args = [];\n                    let name = null;\n                    if (iter instanceof Array) {\n                        if (iter.length > 0 && iter.length < 3) {\n                            args = args.concat(iter);\n                            name = iter[0];\n                        }\n                    } else {\n                        args.push(iter);\n                        name = iter;\n                    }\n                    args.push((a, b, c, d) => {\n                        this.loaded.push(name);\n                        cb.call(this, a, b, c, d);\n                    });\n                    if (client) {\n                        gapi.client.load.apply(gapi, args);\n                    } else {\n                        gapi.load.apply(gapi, args);\n                    }\n                };\n                function _next() {\n                    if (current >= total) {\n                        finished();\n                    } else {\n                        _load(lload[current], () => {\n                            _next();\n                        });\n                        current++;\n                    }\n                }\n                _next();\n            };\n            this.init(error => {\n                if (error) {\n                    callback(error);\n                    return;\n                }\n                if (!window.gapi || !gapi.load) {\n                    callback(a._('GAPI_LOAD_FAILURE'));\n                    return;\n                }\n                auth(error => {\n                    if (error) {\n                        callback(error);\n                        return;\n                    }\n                    loadAll((error, result) => {\n                        callback(error, result, SingletonInstance);\n                    });\n                });\n            });\n        }\n        signOut(cb) {\n            cb = cb || function () {\n            };\n            console.info('GoogleAPI::signOut()');\n            if (this.authenticated) {\n                try {\n                    gapi.auth.signOut();\n                } catch (e) {\n                    console.warn('GoogleAPI::signOut()', 'failed', e);\n                    console.warn(e.stack);\n                }\n                this.authenticated = false;\n                ServiceNotificationIcon.remove('Google API');\n            }\n            MountManager.remove('GoogleDrive');\n            cb(false, true);\n        }\n        revoke(callback) {\n            console.info('GoogleAPI::revoke()');\n            if (!this.accessToken) {\n                callback(false);\n                return;\n            }\n            const url = 'https://accounts.google.com/o/oauth2/revoke?token=' + this.accessToken;\n            jsonp('GET', url).then(() => callback(true)).catch(() => callback(false));\n        }\n        authenticate(scope, callback) {\n            console.info('GoogleAPI::authenticate()');\n            callback = callback || function () {\n            };\n            const getUserId = cb => {\n                cb = cb || function () {\n                };\n                gapi.client.load('oauth2', 'v2', () => {\n                    gapi.client.oauth2.userinfo.get().execute(resp => {\n                        console.info('GoogleAPI::authenticate() => getUserId()', resp);\n                        cb(resp.id);\n                    });\n                });\n            };\n            const login = (immediate, cb) => {\n                console.info('GoogleAPI::authenticate() => login()', immediate);\n                cb = cb || function () {\n                };\n                gapi.auth.authorize({\n                    client_id: this.clientId,\n                    scope: scope,\n                    user_id: this.userId,\n                    immediate: immediate\n                }, cb);\n            };\n            const createRingNotification = () => {\n                ServiceNotificationIcon.remove('Google API');\n                ServiceNotificationIcon.add('Google API', [\n                    {\n                        title: a._('GAPI_SIGN_OUT'),\n                        onClick: () => {\n                            this.signOut();\n                        }\n                    },\n                    {\n                        title: a._('GAPI_REVOKE'),\n                        onClick: () => {\n                            this.revoke(() => {\n                                this.signOut();\n                            });\n                        }\n                    }\n                ]);\n            };\n            const handleAuthResult = (authResult, immediate) => {\n                console.info('GoogleAPI::authenticate() => handleAuthResult()', authResult);\n                if (authResult.error) {\n                    if (authResult.error_subtype === 'origin_mismatch' || authResult.error_subtype === 'access_denied' && !immediate) {\n                        const msg = a._('GAPI_AUTH_FAILURE_FMT', authResult.error, authResult.error_subtype);\n                        callback(msg);\n                        return;\n                    }\n                }\n                if (authResult && !authResult.error) {\n                    getUserId(id => {\n                        this.userId = id;\n                        if (id) {\n                            createRingNotification();\n                            this.authenticated = true;\n                            this.accessToken = authResult.access_token || null;\n                            callback(false, true);\n                        } else {\n                            callback(false, false);\n                        }\n                    });\n                } else {\n                    login(false, res => {\n                        handleAuthResult(res, false);\n                    });\n                }\n            };\n            gapi.load('auth:client', result => {\n                if (result && result.error) {\n                    const msg = a._('GAPI_AUTH_FAILURE_FMT', result.error, result.error_subtype);\n                    callback(msg);\n                    return;\n                }\n                login(true, res => {\n                    handleAuthResult(res, true);\n                });\n            });\n        }\n    }\n    function instance() {\n        return SingletonInstance;\n    }\n    function create(args, callback) {\n        const load = args.load || [];\n        const scope = args.scope || [];\n        const client = args.client === true;\n        function _run() {\n            SingletonInstance.load(load, scope, client, callback);\n        }\n        if (SingletonInstance) {\n            _run();\n            return;\n        }\n        let clientId = null;\n        try {\n            clientId = b.getConfig('GoogleAPI.ClientId');\n        } catch (e) {\n            console.warn('getGoogleAPI()', e, e.stack);\n        }\n        if (!clientId) {\n            callback(a._('GAPI_DISABLED'));\n            return;\n        }\n        SingletonInstance = new GoogleAPI(clientId);\n        _run();\n    }\n    return {\n        instance: instance,\n        create: create\n    };\n});\ndefine('skylark-osjsv2-client/vfs/transports/google-drive',[\n    'skylark-axios',\n    '../transport',\n    '../file',\n    '../filedataurl',\n    '../../core/mount-manager',\n    '../../core/locales',\n    '../../helpers/google-api',\n    '../../utils/fs'\n], function (axios, Transport, FileMetadata, FileDataURL, MountManager, a, GoogleAPI, FS) {\n    'use strict';\n    const CACHE_CLEAR_TIMEOUT = 7000;\n    let gapi = window.gapi = window.gapi || {};\n    let _authenticated;\n    let _clearCacheTimeout;\n    let _rootFolderId;\n    let _treeCache;\n    function createDirectoryList(dir, list, item, options, match) {\n        const result = [];\n        const rdir = dir.replace(match, '/').replace(/\\/+/g, '/');\n        const isOnRoot = rdir === '/';\n        function createItem(iter, i) {\n            let path = dir;\n            if (iter.title === '..') {\n                path = FS.dirname(dir);\n            } else {\n                if (!isOnRoot) {\n                    path += '/';\n                }\n                path += iter.title;\n            }\n            let fileType = iter.mimeType === 'application/vnd.google-apps.folder' ? 'dir' : iter.kind === 'drive#file' ? 'file' : 'dir';\n            if (iter.mimeType === 'application/vnd.google-apps.trash') {\n                fileType = 'trash';\n            }\n            return new FileMetadata({\n                filename: iter.title,\n                path: path,\n                id: iter.id,\n                size: iter.quotaBytesUsed || 0,\n                mime: iter.mimeType === 'application/vnd.google-apps.folder' ? null : iter.mimeType,\n                type: fileType\n            });\n        }\n        if (list) {\n            list.forEach((iter, i) => {\n                if (!iter) {\n                    return;\n                }\n                result.push(createItem(iter, i));\n            });\n        }\n        return result ? result : [];\n    }\n    function getAllDirectoryFiles(item, callback) {\n        console.debug('GoogleDrive::*getAllDirectoryFiles()', item);\n        function retrieveAllFiles(cb) {\n            if (_clearCacheTimeout) {\n                clearTimeout(_clearCacheTimeout);\n                _clearCacheTimeout = null;\n            }\n            if (_treeCache) {\n                console.info('USING CACHE FROM PREVIOUS FETCH!');\n                cb(false, _treeCache);\n                return;\n            }\n            console.info('UPDATING CACHE');\n            let list = [];\n            function retrievePageOfFiles(request, result) {\n                request.execute(resp => {\n                    if (resp.error) {\n                        console.warn('GoogleDrive::getAllDirectoryFiles()', 'error', resp);\n                    }\n                    result = result.concat(resp.items);\n                    const nextPageToken = resp.nextPageToken;\n                    if (nextPageToken) {\n                        request = gapi.client.drive.files.list({ pageToken: nextPageToken });\n                        retrievePageOfFiles(request, result);\n                    } else {\n                        _treeCache = result;\n                        cb(false, result);\n                    }\n                });\n            }\n            try {\n                const initialRequest = gapi.client.drive.files.list({});\n                retrievePageOfFiles(initialRequest, list);\n            } catch (e) {\n                console.warn('GoogleDrive::getAllDirectoryFiles() exception', e, e.stack);\n                console.warn('THIS ERROR OCCURS WHEN MULTIPLE REQUESTS FIRE AT ONCE ?!');\n                cb(false, list);\n            }\n        }\n        function getFilesBelongingTo(list, root, cb) {\n            const idList = {};\n            const parentList = {};\n            list.forEach(iter => {\n                if (iter) {\n                    idList[iter.id] = iter;\n                    const parents = [];\n                    if (iter.parents) {\n                        iter.parents.forEach(piter => {\n                            if (piter) {\n                                parents.push(piter.id);\n                            }\n                        });\n                    }\n                    parentList[iter.id] = parents;\n                }\n            });\n            let resolves = FS.getPathFromVirtual(root).replace(/^\\/+/, '').split('/');\n            resolves = resolves.filter(el => {\n                return el !== '';\n            });\n            let currentParentId = _rootFolderId;\n            let isOnRoot = !resolves.length;\n            function _getFileList(foundId) {\n                const result = [];\n                if (!isOnRoot) {\n                    result.push({\n                        title: '..',\n                        path: FS.dirname(root),\n                        id: item.id,\n                        quotaBytesUsed: 0,\n                        mimeType: 'application/vnd.google-apps.folder'\n                    });\n                }\n                list.forEach(iter => {\n                    if (iter && parentList[iter.id] && parentList[iter.id].indexOf(foundId) !== -1) {\n                        result.push(iter);\n                    }\n                });\n                return result;\n            }\n            function _nextDir(completed) {\n                let current = resolves.shift();\n                let done = resolves.length <= 0;\n                let found;\n                if (isOnRoot) {\n                    found = currentParentId;\n                } else {\n                    if (current) {\n                        list.forEach(iter => {\n                            if (iter) {\n                                if (iter.title === current && parentList[iter.id] && parentList[iter.id].indexOf(currentParentId) !== -1) {\n                                    currentParentId = iter.id;\n                                    found = iter.id;\n                                }\n                            }\n                        });\n                    }\n                }\n                if (done) {\n                    completed(found);\n                } else {\n                    _nextDir(completed);\n                }\n            }\n            _nextDir(foundId => {\n                if (foundId && idList[foundId]) {\n                    cb(false, _getFileList(foundId));\n                    return;\n                } else {\n                    if (isOnRoot) {\n                        cb(false, _getFileList(currentParentId));\n                        return;\n                    }\n                }\n                cb('Could not list directory');\n            });\n        }\n        function doRetrieve() {\n            retrieveAllFiles((error, list) => {\n                const root = item.path;\n                if (error) {\n                    callback(error, false, root);\n                    return;\n                }\n                getFilesBelongingTo(list, root, (error, response) => {\n                    console.groupEnd();\n                    _clearCacheTimeout = setTimeout(() => {\n                        console.info('Clearing GoogleDrive filetree cache!');\n                        _treeCache = null;\n                    }, CACHE_CLEAR_TIMEOUT);\n                    console.debug('GoogleDrive::*getAllDirectoryFiles()', '=>', response);\n                    callback(error, response, root);\n                });\n            });\n        }\n        console.group('GoogleDrive::*getAllDirectoryFiles()');\n        if (!_rootFolderId) {\n            const request = gapi.client.drive.about.get();\n            request.execute(resp => {\n                if (!resp || !resp.rootFolderId) {\n                    callback(a._('ERR_VFSMODULE_ROOT_ID'));\n                    return;\n                }\n                _rootFolderId = resp.rootFolderId;\n                doRetrieve();\n            });\n        } else {\n            doRetrieve();\n        }\n    }\n    function getFileFromPath(dir, type, callback) {\n        if (dir instanceof FileMetadata) {\n            dir = dir.path;\n        }\n        const tmpItem = new FileMetadata({\n            filename: FS.filename(dir),\n            type: 'dir',\n            path: FS.dirname(dir)\n        });\n        console.debug('GoogleDrive::*getFileIdFromPath()', dir, type, tmpItem);\n        getAllDirectoryFiles(tmpItem, (error, list, ldir) => {\n            if (error) {\n                callback(error);\n                return;\n            }\n            let found = null;\n            list.forEach(iter => {\n                if (iter.title === FS.filename(dir)) {\n                    if (type) {\n                        if (iter.mimeType === type) {\n                            found = iter;\n                            return false;\n                        }\n                    } else {\n                        found = iter;\n                    }\n                }\n                return true;\n            });\n            callback(false, found);\n        });\n    }\n    function getParentPathId(item, callback) {\n        const dir = FS.dirname(item.path);\n        const type = 'application/vnd.google-apps.folder';\n        console.debug('GoogleDrive::*getParentPathId()', item);\n        getFileFromPath(dir, type, (error, item) => {\n            if (error) {\n                callback(error);\n            } else {\n                callback(false, item ? item.id : null);\n            }\n        });\n    }\n    function createBoundary(file, data, callback) {\n        const boundary = '-------314159265358979323846';\n        const delimiter = '\\r\\n--' + boundary + '\\r\\n';\n        const close_delim = '\\r\\n--' + boundary + '--';\n        const contentType = file.mime || 'text/plain';\n        function createBody(result) {\n            const metadata = {\n                title: file.filename,\n                mimeType: contentType\n            };\n            const base64Data = result;\n            const multipartRequestBody = delimiter + 'Content-Type: application/json\\r\\n\\r\\n' + JSON.stringify(metadata) + delimiter + 'Content-Type: ' + contentType + '\\r\\n' + 'Content-Transfer-Encoding: base64\\r\\n' + '\\r\\n' + base64Data + close_delim;\n            return multipartRequestBody;\n        }\n        const reqContentType = \"multipart/mixed; boundary='\" + boundary + \"'\";\n        if (data instanceof FileDataURL) {\n            callback(false, {\n                contentType: reqContentType,\n                body: createBody(data.toBase64())\n            });\n        } else {\n            FS.abToBinaryString(data, contentType, (error, response) => {\n                callback(error, error ? false : {\n                    contentType: reqContentType,\n                    body: createBody(btoa(response))\n                });\n            });\n        }\n    }\n    function setFolder(item, pid, callback) {\n        console.info('GoogleDrive::setFolder()', item, pid);\n        pid = pid || 'root';\n        function _clearFolders(cb) {\n            item.parents.forEach((p, i) => {\n                const request = gapi.client.drive.children.delete({\n                    folderId: p.id,\n                    childId: item.id\n                });\n                request.execute(resp => {\n                    if (i >= item.parents.length - 1) {\n                        cb();\n                    }\n                });\n            });\n        }\n        function _setFolder(rootId, cb) {\n            const request = gapi.client.drive.children.insert({\n                folderId: pid,\n                resource: { id: item.id }\n            });\n            request.execute(resp => {\n                console.info('GoogleDrive::setFolder()', '=>', resp);\n                callback(false, true);\n            });\n        }\n        _clearFolders(() => {\n            _setFolder(pid, callback);\n        });\n    }\n    return class GoogleDriveTransport extends Transport {\n        _init() {\n            if (_authenticated) {\n                return Promise.resolve();\n            }\n            return new Promise((resolve, reject) => {\n                GoogleAPI.create({\n                    scope: [\n                        'https://www.googleapis.com/auth/drive.install',\n                        'https://www.googleapis.com/auth/drive.file',\n                        'openid'\n                    ],\n                    load: [\n                        'drive-realtime',\n                        'drive-share'\n                    ]\n                }, (err, res) => {\n                    gapi.client.load('drive', 'v2', err => {\n                        if (!err) {\n                            _authenticated = true;\n                        }\n                        return err ? reject(new Error(err)) : resolve(true);\n                    });\n                });\n            });\n        }\n        request(method, args, options, mount) {\n            const fargs = arguments;\n            return new Promise((resolve, reject) => {\n                this._init().then(() => {\n                    return super.request(...fargs).then(resolve).catch(reject);\n                }).catch(reject);\n            });\n        }\n        scandir(item, options, mount) {\n            return new Promise((resolve, reject) => {\n                getAllDirectoryFiles(item, (error, list, dir) => {\n                    if (error) {\n                        reject(new Error(error));\n                    } else {\n                        const result = createDirectoryList(dir, list, item, options, mount.option('match'));\n                        resolve(result);\n                    }\n                });\n            });\n        }\n        read(item, options, mount) {\n            const read = ritem => new Promise((resolve, reject) => {\n                const request = gapi.client.drive.files.get({ fileId: ritem.id });\n                request.execute(file => {\n                    if (file && file.id) {\n                        let accessToken = gapi.auth.getToken().access_token;\n                        axios({\n                            url: file.downloadUrl,\n                            method: 'GET',\n                            responseType: 'arraybuffer',\n                            headers: { 'Authorization': 'Bearer ' + accessToken }\n                        }).then(response => {\n                            return resolve(response.data);\n                        }).catch(error => {\n                            reject(new Error(a._('ERR_VFSMODULE_XHR_ERROR') + ' - ' + error.message));\n                        });\n                    } else {\n                        reject(new Error(a._('ERR_VFSMODULE_NOSUCH')));\n                    }\n                });\n            });\n            return new Promise((resolve, reject) => {\n                if (item.downloadUrl) {\n                    read(item).then(resolve).catch(reject);\n                } else {\n                    getFileFromPath(item.path, item.mime, function (error, response) {\n                        if (error) {\n                            reject(new Error(error));\n                        } else if (!response) {\n                            reject(new Error(a._('ERR_VFSMODULE_NOSUCH')));\n                        } else {\n                            read(response).then(resolve).catch(reject);\n                        }\n                    });\n                }\n            });\n        }\n        write(file, data) {\n            const write = (parentId, fileId) => new Promise((resolve, reject) => {\n                let uri = '/upload/drive/v2/files';\n                let method = 'POST';\n                if (fileId) {\n                    uri = '/upload/drive/v2/files/' + fileId;\n                    method = 'PUT';\n                }\n                createBoundary(file, data, (error, fileData) => {\n                    if (error) {\n                        reject(new Error(error));\n                    } else {\n                        const request = gapi.client.request({\n                            path: uri,\n                            method: method,\n                            params: { uploadType: 'multipart' },\n                            headers: { 'Content-Type': fileData.contentType },\n                            body: fileData.body\n                        });\n                        request.execute(resp => {\n                            _treeCache = null;\n                            if (resp && resp.id) {\n                                if (parentId) {\n                                    setFolder(resp, parentId, (err, res) => {\n                                        return err ? reject(new Error(err)) : resolve(res);\n                                    });\n                                } else {\n                                    resolve(true);\n                                }\n                            } else {\n                                reject(a._('ERR_VFSMODULE_NOSUCH'));\n                            }\n                        });\n                    }\n                });\n            });\n            return new Promise((resolve, reject) => {\n                getParentPathId(file, (error, id) => {\n                    if (error) {\n                        reject(new Error(error));\n                    } else if (file.id) {\n                        write(id, file.id).then(resolve).catch(reject);\n                    } else {\n                        this.exists(file).then(exists => {\n                            return write(id, exists ? exists.id : null).then(resolve).catch(reject);\n                        }).catch(() => {\n                            write(id, null).then(resolve).catch(reject);\n                        });\n                    }\n                });\n            });\n        }\n        copy(src, dest) {\n            return new Promise((resolve, reject) => {\n                const request = gapi.client.drive.files.copy({\n                    fileId: src.id,\n                    resource: { title: FS.filename(dest.path) }\n                });\n                request.execute(resp => {\n                    if (resp.id) {\n                        getParentPathId(dest, (error, parentId) => {\n                            if (error) {\n                                console.warn(error);\n                                resolve(true);\n                            } else {\n                                _treeCache = null;\n                                setFolder(resp, parentId, (err, res) => {\n                                    return err ? reject(new Error(err)) : resolve(res);\n                                });\n                            }\n                        });\n                    } else {\n                        const msg = resp && resp.message ? resp.message : a._('ERR_APP_UNKNOWN_ERROR');\n                        reject(new Error(msg));\n                    }\n                });\n            });\n        }\n        move(src, dest) {\n            return new Promise((resolve, reject) => {\n                const request = gapi.client.drive.files.patch({\n                    fileId: src.id,\n                    resource: { title: FS.filename(dest.path) }\n                });\n                request.execute(resp => {\n                    if (resp && resp.id) {\n                        _treeCache = null;\n                        resolve(true);\n                    } else {\n                        const msg = resp && resp.message ? resp.message : a._('ERR_APP_UNKNOWN_ERROR');\n                        reject(new Error(msg));\n                    }\n                });\n            });\n        }\n        exists(item) {\n            return new Promise((resolve, reject) => {\n                const req = new FileMetadata(FS.dirname(item.path));\n                this.scandir(req).then(result => {\n                    const found = result.find(iter => iter.path === item.path);\n                    if (found) {\n                        const file = new FileMetadata(item.path, found.mimeType);\n                        file.id = found.id;\n                        file.title = found.title;\n                        return resolve(file);\n                    }\n                    return resolve(false);\n                }).catch(reject);\n            });\n        }\n        fileinfo(item) {\n            return new Promise((resolve, reject) => {\n                const request = gapi.client.drive.files.get({ fileId: item.id });\n                request.execute(resp => {\n                    if (resp && resp.id) {\n                        const useKeys = [\n                            'createdDate',\n                            'id',\n                            'lastModifyingUser',\n                            'lastViewedByMeDate',\n                            'markedViewedByMeDate',\n                            'mimeType',\n                            'modifiedByMeDate',\n                            'modifiedDate',\n                            'title',\n                            'alternateLink'\n                        ];\n                        const info = {};\n                        useKeys.forEach(k => {\n                            info[k] = resp[k];\n                        });\n                        resolve(info);\n                    } else {\n                        reject(a._('ERR_VFSMODULE_NOSUCH'));\n                    }\n                });\n            });\n        }\n        url(item) {\n            return new Promise((resolve, reject) => {\n                if (!item || !item.id) {\n                    reject(new Error('url() expects a File ref with Id'));\n                } else {\n                    const request = gapi.client.drive.files.get({ fileId: item.id });\n                    request.execute(resp => {\n                        if (resp && resp.webContentLink) {\n                            resolve(resp.webContentLink);\n                        } else {\n                            const msg = resp && resp.message ? resp.message : a._('ERR_APP_UNKNOWN_ERROR');\n                            reject(new Error(msg));\n                        }\n                    });\n                }\n            });\n        }\n        mkdir(dir) {\n            const mkdir = parents => new Promise((resolve, reject) => {\n                const request = gapi.client.request({\n                    'path': '/drive/v2/files',\n                    'method': 'POST',\n                    'body': JSON.stringify({\n                        title: dir.filename,\n                        parents: parents,\n                        mimeType: 'application/vnd.google-apps.folder'\n                    })\n                });\n                request.execute(resp => {\n                    if (resp && resp.id) {\n                        _treeCache = null;\n                        resolve(true);\n                    } else {\n                        const msg = resp && resp.message ? resp.message : a._('ERR_APP_UNKNOWN_ERROR');\n                        reject(new Error(msg));\n                    }\n                });\n            });\n            return new Promise((resolve, reject) => {\n                const module = MountManager.getModuleFromPath(dir.path);\n                const dirDest = FS.getPathFromVirtual(FS.dirname(dir.path));\n                const rootDest = FS.getPathFromVirtual(module.option('root'));\n                if (dirDest !== rootDest) {\n                    getParentPathId(dir, (error, id) => {\n                        if (error || !id) {\n                            reject(new Error(a._('ERR_VFSMODULE_PARENT_FMT', error || a._('ERR_VFSMODULE_PARENT'))));\n                        } else {\n                            mkdir([{ id: id }]).then(resolve).catch(reject);\n                        }\n                    });\n                } else {\n                    mkdir(null).then(resolve).catch(reject);\n                }\n            });\n        }\n        upload(dest, file) {\n            const item = new FileMetadata({\n                filename: file.name,\n                path: FS.pathJoin(dest.path, file.name),\n                mime: file.type,\n                size: file.size\n            });\n            return this.write(item, file);\n        }\n        trash(file) {\n            return new Promise((resolve, reject) => {\n                const request = gapi.client.drive.files.trash({ fileId: file.id });\n                request.execute(resp => {\n                    if (resp.id) {\n                        resolve(true);\n                    } else {\n                        const msg = resp && resp.message ? resp.message : a._('ERR_APP_UNKNOWN_ERROR');\n                        reject(new Error(msg));\n                    }\n                });\n            });\n        }\n        untrash(file) {\n            return new Promise((resolve, reject) => {\n                const request = gapi.client.drive.files.untrash({ fileId: file.id });\n                request.execute(resp => {\n                    if (resp.id) {\n                        resolve(true);\n                    } else {\n                        const msg = resp && resp.message ? resp.message : a._('ERR_APP_UNKNOWN_ERROR');\n                        reject(new Error(msg));\n                    }\n                });\n            });\n        }\n        emptyTrash() {\n            return new Promise((resolve, reject) => {\n                const request = gapi.client.drive.files.emptyTrash({});\n                request.execute(resp => {\n                    if (resp && resp.message) {\n                        const msg = resp && resp.message ? resp.message : a._('ERR_APP_UNKNOWN_ERROR');\n                        reject(new Error(msg));\n                    } else {\n                        resolve(true);\n                    }\n                });\n            });\n        }\n        freeSpace(root) {\n            return Promise.resolve(-1);\n        }\n        unlink(src) {\n            const unlink = s => {\n                _treeCache = null;\n                return new Promise((resolve, reject) => {\n                    const request = gapi.client.drive.files.delete({ fileId: s.id });\n                    request.execute(resp => {\n                        if (resp && typeof resp.result === 'object') {\n                            resolve(true);\n                        } else {\n                            const msg = resp && resp.message ? resp.message : a._('ERR_APP_UNKNOWN_ERROR');\n                            reject(new Error(msg));\n                        }\n                    });\n                });\n            };\n            if (!src.id) {\n                return new Promise((resolve, reject) => {\n                    getFileFromPath(src.path, src.mime, (error, response) => {\n                        if (error) {\n                            reject(new Error(error));\n                        } else if (!response) {\n                            reject(new Error(a._('ERR_VFSMODULE_NOSUCH')));\n                        } else {\n                            unlink(response).then(resolve).catch(reject);\n                        }\n                    });\n                });\n            }\n            return unlink(src);\n        }\n    };\n});\ndefine('skylark-osjsv2-client/helpers/windows-live-api',[\n    '../core/mount-manager',\n    './service-notification-icon',\n    '../utils/preloader',\n    '../core/locales',\n    '../core/config'\n], function (MountManager, ServiceNotificationIcon, Preloader, a, b) {\n    'use strict';\n    const redirectURI = window.location.href.replace(/\\/$/, '') + '/windows-live-oauth.html';\n    let SingletonInstance = null;\n    class WindowsLiveAPI {\n        constructor(clientId) {\n            this.hasSession = false;\n            this.clientId = clientId;\n            this.loaded = false;\n            this.inited = false;\n            this.accessToken = null;\n            this.lastScope = null;\n            this.preloads = [{\n                    type: 'javascript',\n                    src: '//js.live.net/v5.0/wl.js'\n                }];\n        }\n        destroy() {\n        }\n        init(callback) {\n            callback = callback || function () {\n            };\n            if (this.loaded) {\n                callback(false, true);\n            } else {\n                Preloader.preload(this.preloads).then(result => {\n                    if (!result.failed.length) {\n                        this.loaded = true;\n                    }\n                    callback(result.failed.join('\\n'));\n                }).catch(() => callback());\n            }\n        }\n        load(scope, callback) {\n            console.debug('WindowsLiveAPI::load()', scope);\n            let WL = window.WL || {};\n            const _login = () => {\n                const lastScope = (this.lastScope || []).sort();\n                const currScope = (scope || []).sort();\n                if (this.hasSession && lastScope.toString() === currScope.toString()) {\n                    callback(false, true);\n                    return;\n                }\n                this.login(scope, (error, response) => {\n                    if (error) {\n                        callback(error);\n                        return;\n                    }\n                    setTimeout(() => {\n                        callback(false, true);\n                    }, 10);\n                });\n            };\n            this.init(error => {\n                if (error) {\n                    callback(error);\n                    return;\n                }\n                if (!window.WL) {\n                    callback(a._('WLAPI_LOAD_FAILURE'));\n                    return;\n                }\n                WL = window.WL || {};\n                if (this.inited) {\n                    _login();\n                } else {\n                    this.inited = true;\n                    WL.Event.subscribe('auth.login', (a, b, c, d) => {\n                        this.onLogin(a, b, c, d);\n                    });\n                    WL.Event.subscribe('auth.logout', (a, b, c, d) => {\n                        this.onLogout(a, b, c, d);\n                    });\n                    WL.Event.subscribe('wl.log', (a, b, c, d) => {\n                        this.onLog(a, b, c, d);\n                    });\n                    WL.Event.subscribe('auth.sessionChange', (a, b, c, d) => {\n                        this.onSessionChange(a, b, c, d);\n                    });\n                    WL.init({\n                        client_id: this.clientId,\n                        display: 'popup',\n                        redirect_uri: redirectURI\n                    }).then(result => {\n                        console.debug('WindowsLiveAPI::load()', '=>', result);\n                        if (result.session) {\n                            this.accessToken = result.session.access_token || null;\n                        }\n                        if (result.status === 'connected') {\n                            callback(false, true);\n                        } else if (result.status === 'success') {\n                            _login();\n                        } else {\n                            callback(a._('WLAPI_INIT_FAILED_FMT', result.status.toString()));\n                        }\n                    }, result => {\n                        console.error('WindowsLiveAPI::load()', 'init() error', result);\n                        callback(result.error_description);\n                    });\n                }\n            });\n        }\n        _removeRing() {\n            ServiceNotificationIcon.remove('Windows Live API');\n        }\n        logout(callback) {\n            callback = callback || function () {\n            };\n            const WL = window.WL || {};\n            if (this.hasSession) {\n                callback(false, false);\n            }\n            WL.Event.unsubscribe('auth.logout');\n            WL.Event.subscribe('auth.logout', () => {\n                this._removeRing();\n                WL.Event.unsubscribe('auth.logout');\n                callback(false, true);\n            });\n            WL.logout();\n            MountManager.remove('OneDrive');\n        }\n        login(scope, callback) {\n            const WL = window.WL || {};\n            if (this.hasSession) {\n                callback(false, true);\n                return;\n            }\n            WL.login({\n                scope: scope,\n                redirect_uri: redirectURI\n            }).then(result => {\n                if (result.status === 'connected') {\n                    callback(false, true);\n                } else {\n                    callback(a._('WLAPI_LOGIN_FAILED'));\n                }\n            }, result => {\n                callback(a._('WLAPI_LOGIN_FAILED_FMT', result.error_description));\n            });\n        }\n        onSessionChange() {\n            console.warn('WindowsLiveAPI::onSessionChange()', arguments);\n            const WL = window.WL || {};\n            const session = WL.getSession();\n            if (session) {\n                this.hasSession = true;\n            } else {\n                this.hasSession = false;\n            }\n        }\n        onLogin() {\n            console.warn('WindowsLiveAPI::onLogin()', arguments);\n            this.hasSession = true;\n            ServiceNotificationIcon.add('Windows Live API', [{\n                    title: a._('WLAPI_SIGN_OUT'),\n                    onClick: () => {\n                        this.logout();\n                    }\n                }]);\n        }\n        onLogout() {\n            console.warn('WindowsLiveAPI::onLogout()', arguments);\n            this.hasSession = false;\n            this._removeRing();\n        }\n        onLog() {\n            console.debug('WindowsLiveAPI::onLog()', arguments);\n        }\n    }\n    function instance() {\n        return SingletonInstance;\n    }\n    function create(args, callback) {\n        args = args || {};\n        function _run() {\n            const scope = args.scope;\n            SingletonInstance.load(scope, error => {\n                callback(error ? error : false, SingletonInstance);\n            });\n        }\n        if (SingletonInstance) {\n            _run();\n            return;\n        }\n        let clientId = null;\n        try {\n            clientId = b.getConfig('WindowsLiveAPI.ClientId');\n        } catch (e) {\n            console.warn('getWindowsLiveAPI()', e, e.stack);\n        }\n        if (!clientId) {\n            callback(a._('WLAPI_DISABLED'));\n            return;\n        }\n        SingletonInstance = new WindowsLiveAPI(clientId);\n        _run();\n    }\n    return {\n        instance: instance,\n        create: create\n    };\n});\ndefine('skylark-osjsv2-client/vfs/transports/onedrive',[\n    'skylark-axios',\n    '../transport',\n    '../file',\n    '../../core/config',\n    '../../core/locales',\n    '../../helpers/windows-live-api',\n    '../../utils/fs',\n    '../fs'\n], function ( Promise, Transport, FileMetadata, a, b, WindowsLiveAPI, FS, VFS) {\n    'use strict';\n    let _isMounted = false;\n    let _mimeCache;\n    function onedriveCall(args, callback) {\n        console.debug('OneDrive::*onedriveCall()', args);\n        const WL = window.WL || {};\n        WL.api(args).then(response => {\n            callback(false, response);\n        }, responseFailed => {\n            console.error('OneDrive::*onedriveCall()', 'error', responseFailed, args);\n            callback(responseFailed.error.message);\n        });\n    }\n    function getItemType(iter) {\n        let type = 'file';\n        if (iter.type === 'folder' || iter.type === 'album') {\n            type = 'dir';\n        }\n        return type;\n    }\n    function getItemMime(iter) {\n        if (!_mimeCache) {\n            _mimeCache = a.getConfig('MIME.mapping', {});\n        }\n        let mime = null;\n        if (getItemType(iter) !== 'dir') {\n            mime = 'application/octet-stream';\n            let ext = FS.filext(iter.name);\n            if (ext.length) {\n                ext = '.' + ext;\n                if (_mimeCache[ext]) {\n                    mime = _mimeCache[ext];\n                }\n            }\n        }\n        return mime;\n    }\n    function getMetadataFromItem(dir, item, root) {\n        const par = dir.replace(/^\\/+/, '').replace(/\\/+$/, '');\n        const path = root + (par ? par + '/' : par) + item.name;\n        const itemFile = new FileMetadata({\n            id: item.id,\n            filename: item.name,\n            size: item.size || 0,\n            path: path,\n            mime: getItemMime(item),\n            type: getItemType(item)\n        });\n        return itemFile;\n    }\n    function createDirectoryList(dir, list, item, options, root) {\n        const result = [];\n        if (dir !== '/') {\n            result.push(new FileMetadata({\n                id: item.id,\n                filename: '..',\n                path: FS.dirname(item.path),\n                size: 0,\n                type: 'dir'\n            }));\n        }\n        list.forEach(iter => {\n            result.push(getMetadataFromItem(dir, iter, root));\n        });\n        return result;\n    }\n    function getFilesInFolder(folderId, callback) {\n        onedriveCall({\n            path: folderId + '/files',\n            method: 'GET'\n        }, (error, response) => {\n            if (error) {\n                callback(error);\n                return;\n            }\n            console.debug('OneDrive::*getFilesInFolder()', '=>', response);\n            callback(false, response.data || []);\n        });\n    }\n    function resolvePath(item, callback, useParent) {\n        if (!useParent) {\n            if (item.id) {\n                callback(false, item.id);\n                return;\n            }\n        }\n        let path = FS.getPathFromVirtual(item.path).replace(/\\/+/, '/');\n        if (useParent) {\n            path = FS.dirname(path);\n        }\n        if (path === '/') {\n            callback(false, 'me/skydrive');\n            return;\n        }\n        const resolves = path.replace(/^\\/+/, '').split('/');\n        const isOnRoot = !resolves.length;\n        let currentParentId = 'me/skydrive';\n        function _nextDir(completed) {\n            const current = resolves.shift();\n            const done = resolves.length <= 0;\n            let found;\n            if (isOnRoot) {\n                found = currentParentId;\n            } else {\n                if (current) {\n                    getFilesInFolder(currentParentId, (error, list) => {\n                        list = list || [];\n                        let lfound;\n                        if (!error) {\n                            list.forEach(iter => {\n                                if (iter) {\n                                    if (iter.name === current) {\n                                        lfound = iter.id;\n                                    }\n                                }\n                            });\n                            if (lfound) {\n                                currentParentId = lfound;\n                            }\n                        } else {\n                            console.warn('OneDrive', 'resolvePath()', 'getFilesInFolder() error', error);\n                        }\n                        if (done) {\n                            completed(lfound);\n                        } else {\n                            _nextDir(completed);\n                        }\n                    });\n                    return;\n                }\n            }\n            if (done) {\n                completed(found);\n            } else {\n                _nextDir(completed);\n            }\n        }\n        _nextDir(foundId => {\n            if (foundId) {\n                callback(false, foundId);\n            } else {\n                callback(b._('ONEDRIVE_ERR_RESOLVE'));\n            }\n        });\n    }\n    return class OneDriveTransport extends Transport {\n        _init() {\n            return new Promise((resolve, reject) => {\n                const iargs = {\n                    scope: [\n                        'wl.signin',\n                        'wl.skydrive',\n                        'wl.skydrive_update'\n                    ]\n                };\n                if (_isMounted) {\n                    resolve(true);\n                } else {\n                    WindowsLiveAPI.create(iargs, error => {\n                        if (error) {\n                            reject(new Error(error));\n                        } else {\n                            _isMounted = true;\n                            resolve(true);\n                        }\n                    });\n                }\n            });\n        }\n        request(method, args, options, mount) {\n            const fargs = arguments;\n            return new Promise((resolve, reject) => {\n                this._init().then(() => {\n                    return super.request(...fargs).then(resolve).catch(reject);\n                }).catch(reject);\n            });\n        }\n        scandir(item, options, mount) {\n            return new Promise((resolve, reject) => {\n                const relativePath = FS.getPathFromVirtual(item.path);\n                resolvePath(item, (error, drivePath) => {\n                    if (error) {\n                        reject(new Error(error));\n                    } else {\n                        onedriveCall({\n                            path: drivePath,\n                            method: 'GET'\n                        }, (error, response) => {\n                            if (error) {\n                                reject(new Error(error));\n                            } else {\n                                getFilesInFolder(response.id, (error, list) => {\n                                    if (error) {\n                                        reject(new Error(error));\n                                    } else {\n                                        const fileList = createDirectoryList(relativePath, list, item, options, mount.option('root'));\n                                        resolve(fileList);\n                                    }\n                                });\n                            }\n                        });\n                    }\n                });\n            });\n        }\n        read(item, options, mount) {\n            return new Promise((resolve, reject) => {\n                this.url(item).then(url => {\n                    const file = new FileMetadata(url, item.mime);\n                    VFS.read(file, options).then(resolve).catch(reject);\n                }).catch(reject);\n            });\n        }\n        write(file, data) {\n            return new Promise((resolve, reject) => {\n                const inst = WindowsLiveAPI.instance();\n                const url = 'https://apis.live.net/v5.0/me/skydrive/files?access_token=' + inst.accessToken;\n                const fd = new FormData();\n                FS.addFormFile(fd, 'file', data, file);\n                axios({\n                    url: url,\n                    method: 'POST',\n                    responseType: 'json',\n                    data: fd\n                }).then(response => {\n                    const result = response.data;\n                    if (result && result.id) {\n                        return resolve(result.id);\n                    }\n                    return reject(new Error(b._('ERR_APP_UNKNOWN_ERROR')));\n                }).catch(reject);\n            });\n        }\n        copy(src, dest) {\n            return new Promise((resolve, reject) => {\n                dest = new FileMetadata(FS.dirname(dest.path));\n                resolvePath(src, (error, srcDrivePath) => {\n                    if (error) {\n                        reject(new Error(error));\n                    } else {\n                        resolvePath(dest, (error, dstDrivePath) => {\n                            if (error) {\n                                reject(new Error(error));\n                            } else {\n                                onedriveCall({\n                                    path: srcDrivePath,\n                                    method: 'COPY',\n                                    body: { destination: dstDrivePath }\n                                }, (error, response) => {\n                                    return error ? reject(new Error(error)) : resolve(true);\n                                });\n                            }\n                        });\n                    }\n                });\n            });\n        }\n        move(src, dest) {\n            return new Promise((resolve, reject) => {\n                dest = new FileMetadata(FS.dirname(dest.path));\n                resolvePath(src, (error, srcDrivePath) => {\n                    if (error) {\n                        reject(new Error(error));\n                    } else {\n                        resolvePath(dest, (error, dstDrivePath) => {\n                            if (error) {\n                                reject(new Error(error));\n                            } else {\n                                onedriveCall({\n                                    path: srcDrivePath,\n                                    method: 'MOVE',\n                                    body: { destination: dstDrivePath }\n                                }, (error, response) => {\n                                    return error ? reject(new Error(error)) : resolve(true);\n                                });\n                            }\n                        });\n                    }\n                });\n            });\n        }\n        exists(item) {\n            return new Promise((resolve, reject) => {\n                this.fileinfo(item).then(() => resolve(true)).catch(() => resolve(false));\n            });\n        }\n        fileinfo(item) {\n            return new Promise((resolve, reject) => {\n                resolvePath(item, (error, drivePath) => {\n                    if (error) {\n                        reject(new Error(error));\n                    } else {\n                        onedriveCall({\n                            path: drivePath,\n                            method: 'GET'\n                        }, (error, response) => {\n                            if (error) {\n                                reject(new Error(error));\n                            } else {\n                                const useKeys = [\n                                    'created_time',\n                                    'id',\n                                    'link',\n                                    'name',\n                                    'type',\n                                    'updated_time',\n                                    'upload_location',\n                                    'description',\n                                    'client_updated_time'\n                                ];\n                                const info = {};\n                                useKeys.forEach(k => {\n                                    info[k] = response[k];\n                                });\n                                resolve(info);\n                            }\n                        });\n                    }\n                });\n            });\n        }\n        url(item) {\n            return new Promise((resolve, reject) => {\n                resolvePath(item, function (error, drivePath) {\n                    if (error) {\n                        reject(new Error(error));\n                    } else {\n                        onedriveCall({\n                            path: drivePath + '/content',\n                            method: 'GET'\n                        }, (error, response) => {\n                            if (error) {\n                                reject(new Error(error));\n                            } else {\n                                resolve(response.location);\n                            }\n                        });\n                    }\n                });\n            });\n        }\n        mkdir(dir) {\n            return new Promise((resolve, reject) => {\n                resolvePath(dir, (error, drivePath) => {\n                    if (error) {\n                        reject(error);\n                    } else {\n                        onedriveCall({\n                            path: drivePath,\n                            method: 'POST',\n                            body: { name: dir.filename }\n                        }, (error, response) => {\n                            return error ? reject(new Error(error)) : resolve(true);\n                        });\n                    }\n                }, true);\n            });\n        }\n        upload(dest, file) {\n            const item = new FileMetadata({\n                filename: file.name,\n                path: FS.pathJoin(dest.path, file.name),\n                mime: file.type,\n                size: file.size\n            });\n            return this.write(item, file);\n        }\n        freeSpace(root) {\n            return Promise.resolve(-1);\n        }\n        unlink(src) {\n            return new Promise((resolve, reject) => {\n                resolvePath(src, (error, drivePath) => {\n                    if (error) {\n                        reject(new Error(error));\n                    } else {\n                        onedriveCall({\n                            path: drivePath,\n                            method: 'DELETE'\n                        }, (error, response) => {\n                            return error ? reject(new Error(error)) : resolve(true);\n                        });\n                    }\n                });\n            });\n        }\n    };\n});\ndefine('skylark-osjsv2-client/vfs/transports/dropbox',[\n    '../transport',\n    '../../utils/preloader',\n    '../../core/config',\n    '../file',\n    '../../utils/misc',\n    '../../core/locales',\n    '../../utils/fs'\n], function (Transport, Preloader, a, FileMetadata, b, c, FS) {\n    'use strict';\n    const AUTH_TIMEOUT = 1000 * 30;\n    const MAX_RESULTS = 100;\n    return class DropboxTransport extends Transport {\n        constructor() {\n            super(...arguments);\n            this.loaded = false;\n            this.authed = false;\n            this.dbx = null;\n        }\n        _loadDependencies() {\n            if (this.loaded) {\n                return Promise.resolve(true);\n            }\n            return new Promise((resolve, reject) => {\n                Preloader.preload(['https://unpkg.com/dropbox/dist/Dropbox-sdk.min.js']).then(() => {\n                    if (window.Dropbox) {\n                        this.loaded = true;\n                        return resolve(true);\n                    }\n                    return reject(new Error(c._('ERR_DROPBOX_API')));\n                }).catch(err => {\n                    this.loaded = true;\n                    return reject(err);\n                });\n            });\n        }\n        _createClient(clientId) {\n            if (this.authed) {\n                return Promise.resolve(true);\n            }\n            return new Promise((resolve, reject) => {\n                let timedOut;\n                let loginTimeout;\n                this.dbx = new window.Dropbox({ clientId: clientId });\n                const redirectUrl = window.location.href.replace(/\\/?$/, '/') + 'dropbox-oauth.html';\n                const callbackName = '__osjs__dropbox_callback__';\n                window[callbackName] = url => {\n                    clearTimeout(loginTimeout);\n                    if (timedOut) {\n                        return;\n                    }\n                    const params = b.urlparams(url, true);\n                    if (params.access_token) {\n                        this.authed = true;\n                        this.dbx = new window.Dropbox({ accessToken: params.access_token });\n                        resolve(true);\n                    } else {\n                        reject(new Error(c._('ERR_DROPBOX_AUTH')));\n                    }\n                };\n                const authUrl = this.dbx.getAuthenticationUrl(redirectUrl);\n                loginTimeout = setTimeout(() => {\n                    timedOut = true;\n                    reject(new Error(c._('ERR_DROPBOX_AUTH')));\n                }, AUTH_TIMEOUT);\n                window.open(authUrl);\n            });\n        }\n        _init() {\n            const clientId = a.getConfig('DropboxAPI.ClientKey');\n            if (!clientId) {\n                return Promise.reject(new Error(c._('ERR_DROPBOX_KEY')));\n            }\n            return new Promise((resolve, reject) => {\n                this._loadDependencies().then(() => {\n                    return this._createClient(clientId).then(resolve).catch(reject);\n                }).catch(reject);\n            });\n        }\n        request(method, args, options, mount) {\n            const fargs = arguments;\n            return new Promise((resolve, reject) => {\n                this._init().then(() => {\n                    return super.request(...fargs).then(resolve).catch(err => {\n                        if (typeof err !== 'string' && !(err instanceof Error)) {\n                            if (err.status && err.response && err.error) {\n                                return reject(new Error(err.error.error_summary));\n                            }\n                        }\n                        return reject(err);\n                    });\n                }).catch(reject);\n            });\n        }\n        _createMetadata(root, iter) {\n            return {\n                id: iter.id,\n                filename: iter.name,\n                path: FS.pathJoin(root, iter.path_display),\n                type: iter['.tag'] === 'folder' ? 'dir' : 'file',\n                size: iter.size || 0\n            };\n        }\n        find(file, options, a, mount) {\n            const root = FS.getPathFromVirtual(file.path);\n            return new Promise((resolve, reject) => {\n                this.dbx.filesSearch({\n                    path: root === '/' ? '' : root,\n                    query: options.query,\n                    max_results: MAX_RESULTS,\n                    mode: { '.tag': 'filename' }\n                }).then(response => {\n                    return resolve(response.matches.map(iter => {\n                        return this._createMetadata(mount.option('root'), iter.metadata);\n                    }));\n                }).catch(reject);\n            });\n        }\n        scandir(item, options, mount) {\n            const root = FS.getPathFromVirtual(item.path);\n            let result = [];\n            const scandir = cursor => new Promise((resolve, reject) => {\n                const m = cursor ? 'filesListFolderContinue' : 'filesListFolder';\n                const a = cursor ? { cursor } : { path: root === '/' ? '' : root };\n                this.dbx[m](a).then(response => {\n                    const found = (response.entries || []).map(iter => {\n                        return this._createMetadata(mount.option('root'), iter);\n                    });\n                    result = result.concat(found);\n                    if (response.has_more && response.cursor) {\n                        return scandir(response.cursor).then(resolve).catch(reject);\n                    }\n                    return resolve(result);\n                }).catch(reject);\n            });\n            return scandir(null);\n        }\n        read(item, options, mount) {\n            return new Promise((resolve, reject) => {\n                this.url(item, { dl: 0 }).then(url => {\n                    this.dbx.sharingGetSharedLinkFile({ url }).then(data => {\n                        return resolve(data.fileBlob);\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        }\n        write(file, data) {\n            return new Promise((resolve, reject) => {\n                this.dbx.filesUpload({\n                    path: FS.getPathFromVirtual(file.path),\n                    mode: { '.tag': 'overwrite' },\n                    contents: data\n                }).then(() => resolve(true)).catch(reject);\n            });\n        }\n        copy(src, dest) {\n            return new Promise((resolve, reject) => {\n                this.dbx.filesCopy({\n                    from_path: FS.getPathFromVirtual(src.path),\n                    to_path: FS.getPathFromVirtual(dest.path)\n                }).then(() => resolve(true)).catch(reject);\n            });\n        }\n        move(src, dest) {\n            return new Promise((resolve, reject) => {\n                this.dbx.filesMove({\n                    from_path: FS.getPathFromVirtual(src.path),\n                    to_path: FS.getPathFromVirtual(dest.path)\n                }).then(() => resolve(true)).catch(reject);\n            });\n        }\n        exists(item) {\n            return new Promise((resolve, reject) => {\n                this.fileinfo(item).then(() => resolve(true)).catch(() => resolve(false));\n            });\n        }\n        fileinfo(item) {\n            return this.dbx.filesGetMetadata({ path: FS.getPathFromVirtual(item.path) });\n        }\n        url(item, options) {\n            const visibility = 'public';\n            const hasLink = () => new Promise((resolve, reject) => {\n                this.dbx.sharingGetSharedLinks({ path: FS.getPathFromVirtual(item.path) }).then(response => {\n                    if (response.links.length) {\n                        const found = response.links.find(iter => iter.visibility['.tag'] === visibility);\n                        const dl = typeof options.dl === 'undefined' ? 1 : options.dl;\n                        if (found) {\n                            return resolve(found.url.replace('dl=0', 'dl=' + String(dl)));\n                        }\n                    }\n                    return resolve(false);\n                }).catch(reject);\n            });\n            const newLink = () => new Promise((resolve, reject) => {\n                this.dbx.sharingCreateSharedLinkWithSettings({\n                    path: FS.getPathFromVirtual(item.path),\n                    settings: { requested_visibility: visibility }\n                }).then(response => {\n                    return resolve(response.url);\n                }).catch(reject);\n            });\n            return new Promise((resolve, reject) => {\n                hasLink().then(url => {\n                    if (url) {\n                        console.warn('ALREADY HAS URL', url);\n                        return resolve(url);\n                    }\n                    console.warn('CREATING NEW URL');\n                    return newLink().then(resolve).catch(reject);\n                }).catch(reject);\n            });\n        }\n        mkdir(dir) {\n            return new Promise((resolve, reject) => {\n                this.dbx.filesCreateFolder({ path: FS.getPathFromVirtual(dir.path) }).then(() => resolve(true)).catch(reject);\n            });\n        }\n        upload(dest, file) {\n            const item = new FileMetadata({\n                filename: file.name,\n                path: FS.pathJoin(dest.path, file.name),\n                mime: file.type,\n                size: file.size\n            });\n            return this.write(item, file);\n        }\n        freeSpace(root) {\n            return new Promise((resolve, reject) => {\n                this.dbx.usersGetSpaceUsage().then(response => {\n                    try {\n                        if (response.allocation && typeof response.allocation.individual !== 'undefined') {\n                            return resolve(response.allocation.individual.allocated);\n                        }\n                    } catch (e) {\n                        console.warn(e);\n                    }\n                    return resolve(-1);\n                }).catch(reject);\n            });\n        }\n        unlink(src) {\n            return new Promise((resolve, reject) => {\n                this.dbx.filesDelete({ path: FS.getPathFromVirtual(src.path) }).then(() => resolve(true)).catch(reject);\n            });\n        }\n    };\n});\ndefine('skylark-osjsv2-client/core/init',[\n    './locales',\n    './mount-manager',\n    './settings-manager',\n    './package-manager',\n    './search-engine',\n    './authenticator',\n    './window-manager',\n    './dialog',\n    './storage',\n    './process',\n    './theme',\n    './connection',\n    '../helpers/hooks',\n    './config',\n    '../gui/splash',\n    '../utils/misc',\n    '../gui/menu',\n    '../gui/notification',\n    '../utils/preloader',\n    '../dialogs/alert',\n    '../dialogs/applicationchooser',\n    '../dialogs/color',\n    '../dialogs/confirm',\n    '../dialogs/error',\n    '../dialogs/fileinfo',\n    '../dialogs/file',\n    '../dialogs/fileprogress',\n    '../dialogs/fileupload',\n    '../dialogs/font',\n    '../dialogs/input',\n    \"../vfs/fs\",\n    \"../vfs/transports/web\",\n    \"../vfs/transports/osjs\",\n    \"../vfs/transports/dist\",\n    \"../vfs/transports/applications\",\n    \"../vfs/transports/webdav\",\n    \"../vfs/transports/google-drive\",\n    \"../vfs/transports/onedrive\",\n    \"../vfs/transports/dropbox\"\n\n\n], function (Locales, MountManager, SettingsManager, PackageManager, SearchEngine, Authenticator, WindowManager, DialogWindow, Storage, Process, Theme, Connection, a, b, SplashScreen, Utils, Menu, Notification,Preloader, AlertDialog, ApplicationChooserDialog, ColorDialog, ConfirmDialog, ErrorDialog, FileInfoDialog, FileDialog, FileProgressDialog, FileUploadDialog, FontDialog, InputDialog,\n    VFS,\n    WebTransport,\n    OsjsTransport,\n    DistTransport,\n    ApplicationTransport,\n    WebdavTransport,\n    GdriveTransport,\n    OnedriveTransport,\n    DropboxTransport) {\n    'use strict';\n\n   const  OSJS_DEBUG = false;\n\n    Promise.each = function(arr, fn) { // take an array and a function // added by lwf\n      // invalid input\n      if(!Array.isArray(arr)) return Promise.reject(new Error(\"Non array passed to each\"));\n      // empty case\n      if(arr.length === 0) return Promise.resolve(); \n      return arr.reduce(function(prev, cur,idx) { \n        return prev.then(() => fn(cur,idx))\n      }, Promise.resolve());\n    }\n\n    function loadTransports() {\n        const result = {\n            'web' : WebdavTransport.default,\n            'osjs' : OnedriveTransport.default,\n            'dist' : DistTransport.default,\n            'applications' : ApplicationTransport.default,\n            'webdav' : WebdavTransport.default,\n            'google-drive' : GdriveTransport.default,\n            'onedrive' : OnedriveTransport.default,\n            'dropbox' : DropboxTransport.default\n        };\n\n        return result;\n    }\n\n    let hasBooted = false;\n    let hasShutDown = false;\n    function onError(title, message, error, exception, bugreport) {\n        bugreport = (() => {\n            if (b.getConfig('BugReporting.enabled')) {\n                return typeof bugreport === 'undefined' ? false : bugreport ? true : false;\n            }\n            return false;\n        })();\n        function _dialog() {\n            const wm = WindowManager.instance;\n            if (wm && wm._fullyLoaded) {\n                try {\n                    DialogWindow.create('Error', {\n                        title: title,\n                        message: message,\n                        error: error,\n                        exception: exception,\n                        bugreport: bugreport\n                    });\n                    return true;\n                } catch (e) {\n                    console.warn('An error occured while creating Error Dialog', e);\n                    console.warn('stack', e.stack);\n                }\n            }\n            return false;\n        }\n        Menu.blur();\n        if (exception instanceof Error && (exception.message.match(/^Script Error/i) && String(exception.lineNumber).match(/^0/))) {\n            console.error('VENDOR ERROR', {\n                title: title,\n                message: message,\n                error: error,\n                exception: exception\n            });\n            return;\n        } else {\n            console.error(title, message, error, exception);\n        }\n        const testMode = OSJS_DEBUG && window.location.hash.match(/mocha=true/);\n        if (!testMode) {\n            if (!_dialog()) {\n                window.alert(title + '\\n\\n' + message + '\\n\\n' + error);\n            }\n        }\n    }\n    const initPreloading = config => new Promise((resolve, reject) => {\n        const flatten = list => list.reduce((a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []);\n        Preloader.preload(flatten(config.Preloads)).then(result => {\n            return resolve();\n        }).catch(reject);\n    });\n    const initHandlers = config => new Promise((resolve, reject) => {\n        const options = config.Connection;\n        console.log({\n            authenticator: options.Authenticator,\n            connection: options.Connection,\n            storage: options.Storage\n        });\n        let Authenticator, Connection, Storage;\n        let connectionName = options.Connection.split('+').indexOf('ws') !== -1 ? 'ws' : 'http';\n        try {\n            Authenticator = OSjs.require('core/auth/' + options.Authenticator); // modified by lwf\n            Connection = OSjs.require('core/connections/' + connectionName); // modified by lwf\n            Storage = OSjs.require('core/storage/' + options.Storage ); // modified by lwf\n        } catch (e) {\n            reject(e);\n            return;\n        }\n        const connection = new Connection();\n        const authenticator = new Authenticator();\n        const storage = new Storage();\n        Promise.each([\n            connection,\n            storage,\n            authenticator\n        ], iter => {\n            return iter.init();\n        }).then(resolve).catch(reject);\n    });\n    const initVFS = config => new Promise((resolve, reject) => {\n        const mountPoints = SettingsManager.instance('VFS').get('mounts', []);\n        MountManager.init(loadTransports).then(res => {  // modified by lwf\n            return MountManager.addList(mountPoints).then(res => {\n                return resolve(res);\n            }).catch(e => {\n                console.warn('A module failed to load!', e);\n                resolve();\n            });\n        }).catch(reject);\n    });\n    const initSettingsManager = config => new Promise((resolve, reject) => {\n        const pools = config.SettingsManager || {};\n        Object.keys(pools).forEach(function (poolName) {\n            console.debug('initSettingsManager()', 'initializes pool', poolName, pools[poolName]);\n            SettingsManager.instance(poolName, pools[poolName] || {});\n        });\n        resolve();\n    });\n    const initPackageManager = config => new Promise((resolve, reject) => {\n        const list = config.PreloadOnBoot || [];\n        let metadata = {};\n        try {\n            metadata = OSjs.getManifest();\n        } catch (e) {\n        }\n        const auth = Authenticator.instance;\n        PackageManager.init(Authenticator,VFS,metadata, auth.isStandalone).then(() => { //modified by lwf\n            return Promise.each(list, iter => {\n                return new Promise(next => {\n                    var pkg = PackageManager.getPackage(iter);\n                    if (pkg && pkg.preload) {\n                        Preloader.preload(pkg.preload).then(next).catch(() => next());\n                    } else {\n                        next();\n                    }\n                });\n            }).then(resolve).catch(reject);\n        }).catch(reject);\n    });\n    const initExtensions = config => new Promise((resolve, reject) => {\n        const packages = PackageManager.getPackages(); \n        const preloadExtensions = () => new Promise((resolve, reject) => {\n            let preloads = [];\n            Object.keys(packages).forEach(k => {\n                const iter = packages[k];\n                if (iter.type === 'extension' && iter.preload) {\n                    preloads = preloads.concat(iter.preload);\n                }\n            });\n            if (preloads.length) {\n                Preloader.preload(preloads).then(resolve).catch(() => resolve());\n            } else {\n                resolve();\n            }\n        });\n        const launchExtensions = () => new Promise((resolve, reject) => {\n            const exts = Object.keys(OSjs.Extensions);\n            Promise.each(exts, entry => {\n                return new Promise((yes, no) => {\n                    try {\n                        const m = packages[entry];\n                        let promise = OSjs.Extensions[entry].init(m);\n                        if (!(promise instanceof Promise)) {\n                            promise = Promise.resolve(true);\n                        }\n                        promise.then(yes).catch(err => {\n                            console.error(err);\n                            return yes(false);\n                        });\n                    } catch (e) {\n                        console.warn('Extension init failed', e.stack, e);\n                        yes(false);\n                    }\n                });\n            }).then(resolve).catch(err => {\n                console.warn(err);\n                reject(new Error(err));\n            });\n        });\n        preloadExtensions().then(() => {\n            return launchExtensions().then(resolve).catch(reject);\n        }).catch(() => resolve());\n    });\n    const initSearchEngine = config => new Promise((resolve, reject) => {\n        SearchEngine.init().then(resolve).catch(reject);\n    });\n    const initGUI = config => new Promise((resolve, reject) => {\n        const guiElements = [\n            'containers',\n            'visual',\n            'tabs',\n            'richtext',\n            'misc',\n            'inputs',\n            'treeview',\n            'listview',\n            'iconview',\n            'fileview',\n            'menus'\n        ];\n        guiElements.forEach(f => {\n            const gel = OSjs.require('gui/elements/' + f); // modified by lwf\n            Object.keys(gel).forEach(name => {\n                gel[name].register();\n            });\n        });\n        OSjs.error = onError;\n        OSjs.Dialogs.Alert = AlertDialog;\n        OSjs.Dialogs.ApplicationChooser = ApplicationChooserDialog;\n        OSjs.Dialogs.Color = ColorDialog;\n        OSjs.Dialogs.Confirm = ConfirmDialog;\n        OSjs.Dialogs.Error = ErrorDialog;\n        OSjs.Dialogs.File = FileDialog;\n        OSjs.Dialogs.FileInfo = FileInfoDialog;\n        OSjs.Dialogs.FileProgress = FileProgressDialog;\n        OSjs.Dialogs.FileUpload = FileUploadDialog;\n        OSjs.Dialogs.Font = FontDialog;\n        OSjs.Dialogs.Input = InputDialog;\n        Theme.init(VFS); // modified by lwf\n        resolve();\n    });\n    const initWindowManager = config => new Promise((resolve, reject) => {\n        const wmConfig = config.WindowManager;\n        if (!wmConfig || !wmConfig.exec) {\n            reject(new Error(Locales._('ERR_CORE_INIT_NO_WM')));\n        } else {\n            Process.create(wmConfig.exec, wmConfig.args || {}).then(app => {\n                return app.setup().then(resolve).catch(reject);\n            }).catch(error => {\n                reject(new Error(Locales._('ERR_CORE_INIT_WM_FAILED_FMT', error)));\n            });\n        }\n    });\n    const initMocha = config => new Promise((resolve, reject) => {\n        const div = document.createElement('div');\n        div.id = 'mocha';\n        document.body.appendChild(div);\n        document.body.style.overflow = 'auto';\n        document.body.style.backgroundColor = '#ffffff';\n        Preloader.preload([\n            '/test.css',\n            '/test.js'\n        ]).then(() => {\n            OSjs.runTests();\n        });\n        resolve(true);\n    });\n    function initSession(config) {\n        console.debug('initSession()');\n        var list = [];\n        try {\n            list = config.AutoStart;\n        } catch (e) {\n            console.warn('initSession()->autostart()', 'exception', e, e.stack);\n        }\n        var checkMap = {};\n        var skipMap = [];\n        list.forEach(function (iter, idx) {\n            if (typeof iter === 'string') {\n                iter = list[idx] = { name: iter };\n            }\n            if (skipMap.indexOf(iter.name) === -1) {\n                if (!checkMap[iter.name]) {\n                    checkMap[iter.name] = idx;\n                    skipMap.push(iter.name);\n                }\n            }\n        });\n        return new Promise(resolve => {\n            Storage.instance.getLastSession(SettingsManager).then(adds => {  // modified by lwf\n                adds.forEach(function (iter) {\n                    if (typeof checkMap[iter.name] === 'undefined') {\n                        list.push(iter);\n                    } else {\n                        if (iter.args) {\n                            var refid = checkMap[iter.name];\n                            var ref = list[refid];\n                            if (!ref.args) {\n                                ref.args = {};\n                            }\n                            ref.args = Utils.mergeObject(ref.args, iter.args);\n                        }\n                    }\n                });\n                console.info('initSession()->autostart()', list);\n                return Process.createFromArray(list).then(resolve).catch(resolve);\n            }).catch(err => {\n                console.warn(err);\n                resolve();\n            });\n        });\n    }\n    function onMessage(ev) {\n        if (ev && ev.data && typeof ev.data.message !== 'undefined' && typeof ev.data.pid === 'number') {\n            console.debug('window::message()', ev.data);\n            var proc = Process.getProcess(ev.data.pid);\n            if (proc) {\n                if (typeof proc.onPostMessage === 'function') {\n                    proc.onPostMessage(ev.data.message, ev);\n                }\n                if (typeof proc._getWindow === 'function') {\n                    var win = proc._getWindow(ev.data.wid, 'wid');\n                    if (win) {\n                        win.onPostMessage(ev.data.message, ev);\n                    }\n                }\n            }\n        }\n    }\n    function start() {\n        if (hasBooted || hasShutDown) {\n            return;\n        }\n        hasBooted = true;\n        console.info('Starting OS.js');\n        const config = OSjs.getConfig();\n        const testMode = OSJS_DEBUG && window.location.hash.match(/mocha=true/);\n        const total = 9;\n        Locales.init(config.Locale, config.LocaleOptions, config.Languages);\n        SplashScreen.watermark(config);\n        SplashScreen.show();\n        a.triggerHook('initialize');\n        Promise.each([\n            initPreloading,\n            initHandlers,\n            initVFS,\n            initSettingsManager,\n            initPackageManager,\n            initExtensions,\n            initSearchEngine,\n            initGUI,\n            testMode ? initMocha : initWindowManager\n        ], (fn, index) => {\n            return new Promise((resolve, reject) => {\n                console.group('Initializing', index + 1, 'of', total);\n                SplashScreen.update(index, total);\n                return fn(config).then(res => {\n                    console.groupEnd();\n                    return resolve(res);\n                }).catch(err => {\n                    console.warn(err);\n                    console.groupEnd();\n                    return reject(new Error(err));\n                });\n            });\n        }).then(() => {\n            console.info('Done!');\n            window.addEventListener('message', onMessage, false);\n            a.triggerHook('initialized');\n            SplashScreen.hide();\n            if (!testMode) {\n                Theme.playSound('LOGIN');\n                var wm = WindowManager.instance;\n                if (wm) {\n                    wm._fullyLoaded = true;\n                }\n                initSession(config).then(() => {\n                    return a.triggerHook('sessionLoaded');\n                });\n            }\n            return true;\n        }).catch(err => {\n            const title = Locales._('ERR_CORE_INIT_FAILED');\n            const message = Locales._('ERR_CORE_INIT_FAILED_DESC');\n            alert(title + '\\n\\n' + message);\n            console.error(title, message, err);\n        });\n    }\n    function stop(restart = false) {\n        if (hasShutDown || !hasBooted) {\n            return;\n        }\n        hasShutDown = true;\n        hasBooted = false;\n        window.removeEventListener('message', onMessage, false);\n        const wm = WindowManager.instance;\n        if (wm) {\n            wm.toggleFullscreen();\n        }\n        Preloader.clear();\n        Menu.blur();\n        Process.killAll();\n        SearchEngine.destroy();\n        PackageManager.destroy();\n        Authenticator.instance.destroy();\n        Storage.instance.destroy();\n        Connection.instance.destroy();\n        a.triggerHook('shutdown');\n        console.warn('OS.js was shut down!');\n        if (!restart && b.getConfig('ReloadOnShutdown') === true) {\n            window.location.reload();\n        }\n    }\n    function restart(save = false) {\n        const lout = cb => Authenticator.instance.logout().then(cb).catch(cb);\n        const saveFunction = save && Storage.instance ? function (cb) {\n            Storage.instance.saveSession().then(() => lout(cb)).catch(() => lout(cb));\n        } : lout;\n        saveFunction(function () {\n            console.clear();\n            stop(true);\n            start();\n        });\n    }\n    function logout() {\n        const storage = Storage.instance;\n        const wm = WindowManager.instance;\n        function signOut(save) {\n            Theme.playSound('LOGOUT');\n            const lout = cb => Authenticator.instance.logout().then(cb).catch(cb);\n            if (save) {\n                storage.saveSession(Process,SettingsManager).then(() => lout(stop)).catch(() => lout(stop)); // modified by lwf\n            } else {\n                lout(stop);\n            }\n        }\n        if (wm) {\n            const user = Authenticator.instance.getUser() || { name: Locales._('LBL_UNKNOWN') };\n            DialogWindow.create('Confirm', {\n                title: Locales._('DIALOG_LOGOUT_TITLE'),\n                message: Locales._('DIALOG_LOGOUT_MSG_FMT', user.name)\n            }, function (ev, btn) {\n                if ([\n                        'no',\n                        'yes'\n                    ].indexOf(btn) !== -1) {\n                    signOut(btn === 'yes');\n                }\n            });\n        } else {\n            signOut(true);\n        }\n    }\n    function running() {\n        return !hasShutDown;\n    }\n    return {\n        start: start,\n        stop: stop,\n        restart: restart,\n        logout: logout,\n        running: running\n    };\n});\ndefine('skylark-osjsv2-client/utils/pepjs',[], function () { \r\n  'use strict';\r\n\r\n  /**\r\n   * This is the constructor for new PointerEvents.\r\n   *\r\n   * New Pointer Events must be given a type, and an optional dictionary of\r\n   * initialization properties.\r\n   *\r\n   * Due to certain platform requirements, events returned from the constructor\r\n   * identify as MouseEvents.\r\n   *\r\n   * @constructor\r\n   * @param {String} inType The type of the event to create.\r\n   * @param {Object} [inDict] An optional dictionary of initial event properties.\r\n   * @return {Event} A new PointerEvent of type `inType`, initialized with properties from `inDict`.\r\n   */\r\n  var MOUSE_PROPS = [\r\n    'bubbles',\r\n    'cancelable',\r\n    'view',\r\n    'detail',\r\n    'screenX',\r\n    'screenY',\r\n    'clientX',\r\n    'clientY',\r\n    'ctrlKey',\r\n    'altKey',\r\n    'shiftKey',\r\n    'metaKey',\r\n    'button',\r\n    'relatedTarget',\r\n    'pageX',\r\n    'pageY'\r\n  ];\r\n\r\n  var MOUSE_DEFAULTS = [\r\n    false,\r\n    false,\r\n    null,\r\n    null,\r\n    0,\r\n    0,\r\n    0,\r\n    0,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    0,\r\n    null,\r\n    0,\r\n    0\r\n  ];\r\n\r\n  function PointerEvent(inType, inDict) {\r\n    inDict = inDict || Object.create(null);\r\n\r\n    var e = document.createEvent('Event');\r\n    e.initEvent(inType, inDict.bubbles || false, inDict.cancelable || false);\r\n\r\n    // define inherited MouseEvent properties\r\n    // skip bubbles and cancelable since they're set above in initEvent()\r\n    for (var i = 2, p; i < MOUSE_PROPS.length; i++) {\r\n      p = MOUSE_PROPS[i];\r\n      e[p] = inDict[p] || MOUSE_DEFAULTS[i];\r\n    }\r\n    e.buttons = inDict.buttons || 0;\r\n\r\n    // Spec requires that pointers without pressure specified use 0.5 for down\r\n    // state and 0 for up state.\r\n    var pressure = 0;\r\n\r\n    if (inDict.pressure && e.buttons) {\r\n      pressure = inDict.pressure;\r\n    } else {\r\n      pressure = e.buttons ? 0.5 : 0;\r\n    }\r\n\r\n    // add x/y properties aliased to clientX/Y\r\n    e.x = e.clientX;\r\n    e.y = e.clientY;\r\n\r\n    // define the properties of the PointerEvent interface\r\n    e.pointerId = inDict.pointerId || 0;\r\n    e.width = inDict.width || 0;\r\n    e.height = inDict.height || 0;\r\n    e.pressure = pressure;\r\n    e.tiltX = inDict.tiltX || 0;\r\n    e.tiltY = inDict.tiltY || 0;\r\n    e.twist = inDict.twist || 0;\r\n    e.tangentialPressure = inDict.tangentialPressure || 0;\r\n    e.pointerType = inDict.pointerType || '';\r\n    e.hwTimestamp = inDict.hwTimestamp || 0;\r\n    e.isPrimary = inDict.isPrimary || false;\r\n    return e;\r\n  }\r\n\r\n  /**\r\n   * This module implements a map of pointer states\r\n   */\r\n  var USE_MAP = window.Map && window.Map.prototype.forEach;\r\n  var PointerMap = USE_MAP ? Map : SparseArrayMap;\r\n\r\n  function SparseArrayMap() {\r\n    this.array = [];\r\n    this.size = 0;\r\n  }\r\n\r\n  SparseArrayMap.prototype = {\r\n    set: function(k, v) {\r\n      if (v === undefined) {\r\n        return this.delete(k);\r\n      }\r\n      if (!this.has(k)) {\r\n        this.size++;\r\n      }\r\n      this.array[k] = v;\r\n    },\r\n    has: function(k) {\r\n      return this.array[k] !== undefined;\r\n    },\r\n    delete: function(k) {\r\n      if (this.has(k)) {\r\n        delete this.array[k];\r\n        this.size--;\r\n      }\r\n    },\r\n    get: function(k) {\r\n      return this.array[k];\r\n    },\r\n    clear: function() {\r\n      this.array.length = 0;\r\n      this.size = 0;\r\n    },\r\n\r\n    // return value, key, map\r\n    forEach: function(callback, thisArg) {\r\n      return this.array.forEach(function(v, k) {\r\n        callback.call(thisArg, v, k, this);\r\n      }, this);\r\n    }\r\n  };\r\n\r\n  var CLONE_PROPS = [\r\n\r\n    // MouseEvent\r\n    'bubbles',\r\n    'cancelable',\r\n    'view',\r\n    'detail',\r\n    'screenX',\r\n    'screenY',\r\n    'clientX',\r\n    'clientY',\r\n    'ctrlKey',\r\n    'altKey',\r\n    'shiftKey',\r\n    'metaKey',\r\n    'button',\r\n    'relatedTarget',\r\n\r\n    // DOM Level 3\r\n    'buttons',\r\n\r\n    // PointerEvent\r\n    'pointerId',\r\n    'width',\r\n    'height',\r\n    'pressure',\r\n    'tiltX',\r\n    'tiltY',\r\n    'pointerType',\r\n    'hwTimestamp',\r\n    'isPrimary',\r\n\r\n    // event instance\r\n    'type',\r\n    'target',\r\n    'currentTarget',\r\n    'which',\r\n    'pageX',\r\n    'pageY',\r\n    'timeStamp'\r\n  ];\r\n\r\n  var CLONE_DEFAULTS = [\r\n\r\n    // MouseEvent\r\n    false,\r\n    false,\r\n    null,\r\n    null,\r\n    0,\r\n    0,\r\n    0,\r\n    0,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    0,\r\n    null,\r\n\r\n    // DOM Level 3\r\n    0,\r\n\r\n    // PointerEvent\r\n    0,\r\n    0,\r\n    0,\r\n    0,\r\n    0,\r\n    0,\r\n    '',\r\n    0,\r\n    false,\r\n\r\n    // event instance\r\n    '',\r\n    null,\r\n    null,\r\n    0,\r\n    0,\r\n    0,\r\n    0\r\n  ];\r\n\r\n  var BOUNDARY_EVENTS = {\r\n    'pointerover': 1,\r\n    'pointerout': 1,\r\n    'pointerenter': 1,\r\n    'pointerleave': 1\r\n  };\r\n\r\n  var HAS_SVG_INSTANCE = (typeof SVGElementInstance !== 'undefined');\r\n\r\n  /**\r\n   * This module is for normalizing events. Mouse and Touch events will be\r\n   * collected here, and fire PointerEvents that have the same semantics, no\r\n   * matter the source.\r\n   * Events fired:\r\n   *   - pointerdown: a pointing is added\r\n   *   - pointerup: a pointer is removed\r\n   *   - pointermove: a pointer is moved\r\n   *   - pointerover: a pointer crosses into an element\r\n   *   - pointerout: a pointer leaves an element\r\n   *   - pointercancel: a pointer will no longer generate events\r\n   */\r\n  var dispatcher = {\r\n    pointermap: new PointerMap(),\r\n    eventMap: Object.create(null),\r\n    captureInfo: Object.create(null),\r\n\r\n    // Scope objects for native events.\r\n    // This exists for ease of testing.\r\n    eventSources: Object.create(null),\r\n    eventSourceList: [],\r\n    /**\r\n     * Add a new event source that will generate pointer events.\r\n     *\r\n     * `inSource` must contain an array of event names named `events`, and\r\n     * functions with the names specified in the `events` array.\r\n     * @param {string} name A name for the event source\r\n     * @param {Object} source A new source of platform events.\r\n     */\r\n    registerSource: function(name, source) {\r\n      var s = source;\r\n      var newEvents = s.events;\r\n      if (newEvents) {\r\n        newEvents.forEach(function(e) {\r\n          if (s[e]) {\r\n            this.eventMap[e] = s[e].bind(s);\r\n          }\r\n        }, this);\r\n        this.eventSources[name] = s;\r\n        this.eventSourceList.push(s);\r\n      }\r\n    },\r\n    register: function(element) {\r\n      var l = this.eventSourceList.length;\r\n      for (var i = 0, es; (i < l) && (es = this.eventSourceList[i]); i++) {\r\n\r\n        // call eventsource register\r\n        es.register.call(es, element);\r\n      }\r\n    },\r\n    unregister: function(element) {\r\n      var l = this.eventSourceList.length;\r\n      for (var i = 0, es; (i < l) && (es = this.eventSourceList[i]); i++) {\r\n\r\n        // call eventsource register\r\n        es.unregister.call(es, element);\r\n      }\r\n    },\r\n    contains: /*scope.external.contains || */function(container, contained) {\r\n      try {\r\n        return container.contains(contained);\r\n      } catch (ex) {\r\n\r\n        // most likely: https://bugzilla.mozilla.org/show_bug.cgi?id=208427\r\n        return false;\r\n      }\r\n    },\r\n\r\n    // EVENTS\r\n    down: function(inEvent) {\r\n      inEvent.bubbles = true;\r\n      this.fireEvent('pointerdown', inEvent);\r\n    },\r\n    move: function(inEvent) {\r\n      inEvent.bubbles = true;\r\n      this.fireEvent('pointermove', inEvent);\r\n    },\r\n    up: function(inEvent) {\r\n      inEvent.bubbles = true;\r\n      this.fireEvent('pointerup', inEvent);\r\n    },\r\n    enter: function(inEvent) {\r\n      inEvent.bubbles = false;\r\n      this.fireEvent('pointerenter', inEvent);\r\n    },\r\n    leave: function(inEvent) {\r\n      inEvent.bubbles = false;\r\n      this.fireEvent('pointerleave', inEvent);\r\n    },\r\n    over: function(inEvent) {\r\n      inEvent.bubbles = true;\r\n      this.fireEvent('pointerover', inEvent);\r\n    },\r\n    out: function(inEvent) {\r\n      inEvent.bubbles = true;\r\n      this.fireEvent('pointerout', inEvent);\r\n    },\r\n    cancel: function(inEvent) {\r\n      inEvent.bubbles = true;\r\n      this.fireEvent('pointercancel', inEvent);\r\n    },\r\n    leaveOut: function(event) {\r\n      this.out(event);\r\n      this.propagate(event, this.leave, false);\r\n    },\r\n    enterOver: function(event) {\r\n      this.over(event);\r\n      this.propagate(event, this.enter, true);\r\n    },\r\n\r\n    // LISTENER LOGIC\r\n    eventHandler: function(inEvent) {\r\n\r\n      // This is used to prevent multiple dispatch of pointerevents from\r\n      // platform events. This can happen when two elements in different scopes\r\n      // are set up to create pointer events, which is relevant to Shadow DOM.\r\n      if (inEvent._handledByPE) {\r\n        return;\r\n      }\r\n      var type = inEvent.type;\r\n      var fn = this.eventMap && this.eventMap[type];\r\n      if (fn) {\r\n        fn(inEvent);\r\n      }\r\n      inEvent._handledByPE = true;\r\n    },\r\n\r\n    // set up event listeners\r\n    listen: function(target, events) {\r\n      events.forEach(function(e) {\r\n        this.addEvent(target, e);\r\n      }, this);\r\n    },\r\n\r\n    // remove event listeners\r\n    unlisten: function(target, events) {\r\n      events.forEach(function(e) {\r\n        this.removeEvent(target, e);\r\n      }, this);\r\n    },\r\n    addEvent: /*scope.external.addEvent || */function(target, eventName) {\r\n      target.addEventListener(eventName, this.boundHandler);\r\n    },\r\n    removeEvent: /*scope.external.removeEvent || */function(target, eventName) {\r\n      target.removeEventListener(eventName, this.boundHandler);\r\n    },\r\n\r\n    // EVENT CREATION AND TRACKING\r\n    /**\r\n     * Creates a new Event of type `inType`, based on the information in\r\n     * `inEvent`.\r\n     *\r\n     * @param {string} inType A string representing the type of event to create\r\n     * @param {Event} inEvent A platform event with a target\r\n     * @return {Event} A PointerEvent of type `inType`\r\n     */\r\n    makeEvent: function(inType, inEvent) {\r\n\r\n      // relatedTarget must be null if pointer is captured\r\n      if (this.captureInfo[inEvent.pointerId]) {\r\n        inEvent.relatedTarget = null;\r\n      }\r\n      var e = new PointerEvent(inType, inEvent);\r\n      if (inEvent.preventDefault) {\r\n        e.preventDefault = inEvent.preventDefault;\r\n      }\r\n      e._target = e._target || inEvent.target;\r\n      return e;\r\n    },\r\n\r\n    // make and dispatch an event in one call\r\n    fireEvent: function(inType, inEvent) {\r\n      var e = this.makeEvent(inType, inEvent);\r\n      return this.dispatchEvent(e);\r\n    },\r\n    /**\r\n     * Returns a snapshot of inEvent, with writable properties.\r\n     *\r\n     * @param {Event} inEvent An event that contains properties to copy.\r\n     * @return {Object} An object containing shallow copies of `inEvent`'s\r\n     *    properties.\r\n     */\r\n    cloneEvent: function(inEvent) {\r\n      var eventCopy = Object.create(null);\r\n      var p;\r\n      for (var i = 0; i < CLONE_PROPS.length; i++) {\r\n        p = CLONE_PROPS[i];\r\n        eventCopy[p] = inEvent[p] || CLONE_DEFAULTS[i];\r\n\r\n        // Work around SVGInstanceElement shadow tree\r\n        // Return the <use> element that is represented by the instance for Safari, Chrome, IE.\r\n        // This is the behavior implemented by Firefox.\r\n        if (HAS_SVG_INSTANCE && (p === 'target' || p === 'relatedTarget')) {\r\n          if (eventCopy[p] instanceof SVGElementInstance) {\r\n            eventCopy[p] = eventCopy[p].correspondingUseElement;\r\n          }\r\n        }\r\n      }\r\n\r\n      // keep the semantics of preventDefault\r\n      if (inEvent.preventDefault) {\r\n        eventCopy.preventDefault = function() {\r\n          inEvent.preventDefault();\r\n        };\r\n      }\r\n      return eventCopy;\r\n    },\r\n    getTarget: function(inEvent) {\r\n      var capture = this.captureInfo[inEvent.pointerId];\r\n      if (!capture) {\r\n        return inEvent._target;\r\n      }\r\n      if (inEvent._target === capture || !(inEvent.type in BOUNDARY_EVENTS)) {\r\n        return capture;\r\n      }\r\n    },\r\n    propagate: function(event, fn, propagateDown) {\r\n      var target = event.target;\r\n      var targets = [];\r\n\r\n      // Order of conditions due to document.contains() missing in IE.\r\n      while (target !== document && !target.contains(event.relatedTarget)) {\r\n        targets.push(target);\r\n        target = target.parentNode;\r\n\r\n        // Touch: Do not propagate if node is detached.\r\n        if (!target) {\r\n          return;\r\n        }\r\n      }\r\n      if (propagateDown) {\r\n        targets.reverse();\r\n      }\r\n      targets.forEach(function(target) {\r\n        event.target = target;\r\n        fn.call(this, event);\r\n      }, this);\r\n    },\r\n    setCapture: function(inPointerId, inTarget, skipDispatch) {\r\n      if (this.captureInfo[inPointerId]) {\r\n        this.releaseCapture(inPointerId, skipDispatch);\r\n      }\r\n\r\n      this.captureInfo[inPointerId] = inTarget;\r\n      this.implicitRelease = this.releaseCapture.bind(this, inPointerId, skipDispatch);\r\n      document.addEventListener('pointerup', this.implicitRelease);\r\n      document.addEventListener('pointercancel', this.implicitRelease);\r\n\r\n      var e = new PointerEvent('gotpointercapture');\r\n      e.pointerId = inPointerId;\r\n      e._target = inTarget;\r\n\r\n      if (!skipDispatch) {\r\n        this.asyncDispatchEvent(e);\r\n      }\r\n    },\r\n    releaseCapture: function(inPointerId, skipDispatch) {\r\n      var t = this.captureInfo[inPointerId];\r\n      if (!t) {\r\n        return;\r\n      }\r\n\r\n      this.captureInfo[inPointerId] = undefined;\r\n      document.removeEventListener('pointerup', this.implicitRelease);\r\n      document.removeEventListener('pointercancel', this.implicitRelease);\r\n\r\n      var e = new PointerEvent('lostpointercapture');\r\n      e.pointerId = inPointerId;\r\n      e._target = t;\r\n\r\n      if (!skipDispatch) {\r\n        this.asyncDispatchEvent(e);\r\n      }\r\n    },\r\n    /**\r\n     * Dispatches the event to its target.\r\n     *\r\n     * @param {Event} inEvent The event to be dispatched.\r\n     * @return {Boolean} True if an event handler returns true, false otherwise.\r\n     */\r\n    dispatchEvent: /*scope.external.dispatchEvent || */function(inEvent) {\r\n      var t = this.getTarget(inEvent);\r\n      if (t) {\r\n        return t.dispatchEvent(inEvent);\r\n      }\r\n    },\r\n    asyncDispatchEvent: function(inEvent) {\r\n      requestAnimationFrame(this.dispatchEvent.bind(this, inEvent));\r\n    }\r\n  };\r\n  dispatcher.boundHandler = dispatcher.eventHandler.bind(dispatcher);\r\n\r\n  var targeting = {\r\n    shadow: function(inEl) {\r\n      if (inEl) {\r\n        return inEl.shadowRoot || inEl.webkitShadowRoot;\r\n      }\r\n    },\r\n    canTarget: function(shadow) {\r\n      return shadow && Boolean(shadow.elementFromPoint);\r\n    },\r\n    targetingShadow: function(inEl) {\r\n      var s = this.shadow(inEl);\r\n      if (this.canTarget(s)) {\r\n        return s;\r\n      }\r\n    },\r\n    olderShadow: function(shadow) {\r\n      var os = shadow.olderShadowRoot;\r\n      if (!os) {\r\n        var se = shadow.querySelector('shadow');\r\n        if (se) {\r\n          os = se.olderShadowRoot;\r\n        }\r\n      }\r\n      return os;\r\n    },\r\n    allShadows: function(element) {\r\n      var shadows = [];\r\n      var s = this.shadow(element);\r\n      while (s) {\r\n        shadows.push(s);\r\n        s = this.olderShadow(s);\r\n      }\r\n      return shadows;\r\n    },\r\n    searchRoot: function(inRoot, x, y) {\r\n      if (inRoot) {\r\n        var t = inRoot.elementFromPoint(x, y);\r\n        var st, sr;\r\n\r\n        // is element a shadow host?\r\n        sr = this.targetingShadow(t);\r\n        while (sr) {\r\n\r\n          // find the the element inside the shadow root\r\n          st = sr.elementFromPoint(x, y);\r\n          if (!st) {\r\n\r\n            // check for older shadows\r\n            sr = this.olderShadow(sr);\r\n          } else {\r\n\r\n            // shadowed element may contain a shadow root\r\n            var ssr = this.targetingShadow(st);\r\n            return this.searchRoot(ssr, x, y) || st;\r\n          }\r\n        }\r\n\r\n        // light dom element is the target\r\n        return t;\r\n      }\r\n    },\r\n    owner: function(element) {\r\n      var s = element;\r\n\r\n      // walk up until you hit the shadow root or document\r\n      while (s.parentNode) {\r\n        s = s.parentNode;\r\n      }\r\n\r\n      // the owner element is expected to be a Document or ShadowRoot\r\n      if (s.nodeType !== Node.DOCUMENT_NODE && s.nodeType !== Node.DOCUMENT_FRAGMENT_NODE) {\r\n        s = document;\r\n      }\r\n      return s;\r\n    },\r\n    findTarget: function(inEvent) {\r\n      var x = inEvent.clientX;\r\n      var y = inEvent.clientY;\r\n\r\n      // if the listener is in the shadow root, it is much faster to start there\r\n      var s = this.owner(inEvent.target);\r\n\r\n      // if x, y is not in this root, fall back to document search\r\n      if (!s.elementFromPoint(x, y)) {\r\n        s = document;\r\n      }\r\n      return this.searchRoot(s, x, y);\r\n    }\r\n  };\r\n\r\n  var forEach = Array.prototype.forEach.call.bind(Array.prototype.forEach);\r\n  var map = Array.prototype.map.call.bind(Array.prototype.map);\r\n  var toArray = Array.prototype.slice.call.bind(Array.prototype.slice);\r\n  var filter = Array.prototype.filter.call.bind(Array.prototype.filter);\r\n  var MO = window.MutationObserver || window.WebKitMutationObserver;\r\n  var SELECTOR = '[touch-action]';\r\n  var OBSERVER_INIT = {\r\n    subtree: true,\r\n    childList: true,\r\n    attributes: true,\r\n    attributeOldValue: true,\r\n    attributeFilter: ['touch-action']\r\n  };\r\n\r\n  function Installer(add, remove, changed, binder) {\r\n    this.addCallback = add.bind(binder);\r\n    this.removeCallback = remove.bind(binder);\r\n    this.changedCallback = changed.bind(binder);\r\n    if (MO) {\r\n      this.observer = new MO(this.mutationWatcher.bind(this));\r\n    }\r\n  }\r\n\r\n  Installer.prototype = {\r\n    watchSubtree: function(target) {\r\n\r\n      // Only watch scopes that can target find, as these are top-level.\r\n      // Otherwise we can see duplicate additions and removals that add noise.\r\n      //\r\n      // TODO(dfreedman): For some instances with ShadowDOMPolyfill, we can see\r\n      // a removal without an insertion when a node is redistributed among\r\n      // shadows. Since it all ends up correct in the document, watching only\r\n      // the document will yield the correct mutations to watch.\r\n      if (this.observer && targeting.canTarget(target)) {\r\n        this.observer.observe(target, OBSERVER_INIT);\r\n      }\r\n    },\r\n    enableOnSubtree: function(target) {\r\n      this.watchSubtree(target);\r\n      if (target === document && document.readyState !== 'complete') {\r\n        this.installOnLoad();\r\n      } else {\r\n        this.installNewSubtree(target);\r\n      }\r\n    },\r\n    installNewSubtree: function(target) {\r\n      forEach(this.findElements(target), this.addElement, this);\r\n    },\r\n    findElements: function(target) {\r\n      if (target.querySelectorAll) {\r\n        return target.querySelectorAll(SELECTOR);\r\n      }\r\n      return [];\r\n    },\r\n    removeElement: function(el) {\r\n      this.removeCallback(el);\r\n    },\r\n    addElement: function(el) {\r\n      this.addCallback(el);\r\n    },\r\n    elementChanged: function(el, oldValue) {\r\n      this.changedCallback(el, oldValue);\r\n    },\r\n    concatLists: function(accum, list) {\r\n      return accum.concat(toArray(list));\r\n    },\r\n\r\n    // register all touch-action = none nodes on document load\r\n    installOnLoad: function() {\r\n      document.addEventListener('readystatechange', function() {\r\n        if (document.readyState === 'complete') {\r\n          this.installNewSubtree(document);\r\n        }\r\n      }.bind(this));\r\n    },\r\n    isElement: function(n) {\r\n      return n.nodeType === Node.ELEMENT_NODE;\r\n    },\r\n    flattenMutationTree: function(inNodes) {\r\n\r\n      // find children with touch-action\r\n      var tree = map(inNodes, this.findElements, this);\r\n\r\n      // make sure the added nodes are accounted for\r\n      tree.push(filter(inNodes, this.isElement));\r\n\r\n      // flatten the list\r\n      return tree.reduce(this.concatLists, []);\r\n    },\r\n    mutationWatcher: function(mutations) {\r\n      mutations.forEach(this.mutationHandler, this);\r\n    },\r\n    mutationHandler: function(m) {\r\n      if (m.type === 'childList') {\r\n        var added = this.flattenMutationTree(m.addedNodes);\r\n        added.forEach(this.addElement, this);\r\n        var removed = this.flattenMutationTree(m.removedNodes);\r\n        removed.forEach(this.removeElement, this);\r\n      } else if (m.type === 'attributes') {\r\n        this.elementChanged(m.target, m.oldValue);\r\n      }\r\n    }\r\n  };\r\n\r\n  function shadowSelector(v) {\r\n    return 'body /shadow-deep/ ' + selector(v);\r\n  }\r\n  function selector(v) {\r\n    return '[touch-action=\"' + v + '\"]';\r\n  }\r\n  function rule(v) {\r\n    return '{ -ms-touch-action: ' + v + '; touch-action: ' + v + '; }';\r\n  }\r\n  var attrib2css = [\r\n    'none',\r\n    'auto',\r\n    'pan-x',\r\n    'pan-y',\r\n    {\r\n      rule: 'pan-x pan-y',\r\n      selectors: [\r\n        'pan-x pan-y',\r\n        'pan-y pan-x'\r\n      ]\r\n    }\r\n  ];\r\n  var styles = '';\r\n\r\n  // only install stylesheet if the browser has touch action support\r\n  var hasNativePE = window.PointerEvent || window.MSPointerEvent;\r\n\r\n  // only add shadow selectors if shadowdom is supported\r\n  var hasShadowRoot = !window.ShadowDOMPolyfill && document.head.createShadowRoot;\r\n\r\n  function applyAttributeStyles() {\r\n    if (hasNativePE) {\r\n      attrib2css.forEach(function(r) {\r\n        if (String(r) === r) {\r\n          styles += selector(r) + rule(r) + '\\n';\r\n          if (hasShadowRoot) {\r\n            styles += shadowSelector(r) + rule(r) + '\\n';\r\n          }\r\n        } else {\r\n          styles += r.selectors.map(selector) + rule(r.rule) + '\\n';\r\n          if (hasShadowRoot) {\r\n            styles += r.selectors.map(shadowSelector) + rule(r.rule) + '\\n';\r\n          }\r\n        }\r\n      });\r\n\r\n      var el = document.createElement('style');\r\n      el.textContent = styles;\r\n      document.head.appendChild(el);\r\n    }\r\n  }\r\n\r\n  var pointermap = dispatcher.pointermap;\r\n\r\n  // radius around touchend that swallows mouse events\r\n  var DEDUP_DIST = 25;\r\n\r\n  // left, middle, right, back, forward\r\n  var BUTTON_TO_BUTTONS = [1, 4, 2, 8, 16];\r\n\r\n  var HAS_BUTTONS = false;\r\n  try {\r\n    HAS_BUTTONS = new MouseEvent('test', { buttons: 1 }).buttons === 1;\r\n  } catch (e) {}\r\n\r\n  // handler block for native mouse events\r\n  var mouseEvents = {\r\n    POINTER_ID: 1,\r\n    POINTER_TYPE: 'mouse',\r\n    events: [\r\n      'mousedown',\r\n      'mousemove',\r\n      'mouseup',\r\n      'mouseover',\r\n      'mouseout'\r\n    ],\r\n    register: function(target) {\r\n      dispatcher.listen(target, this.events);\r\n    },\r\n    unregister: function(target) {\r\n      dispatcher.unlisten(target, this.events);\r\n    },\r\n    lastTouches: [],\r\n\r\n    // collide with the global mouse listener\r\n    isEventSimulatedFromTouch: function(inEvent) {\r\n      var lts = this.lastTouches;\r\n      var x = inEvent.clientX;\r\n      var y = inEvent.clientY;\r\n      for (var i = 0, l = lts.length, t; i < l && (t = lts[i]); i++) {\r\n\r\n        // simulated mouse events will be swallowed near a primary touchend\r\n        var dx = Math.abs(x - t.x);\r\n        var dy = Math.abs(y - t.y);\r\n        if (dx <= DEDUP_DIST && dy <= DEDUP_DIST) {\r\n          return true;\r\n        }\r\n      }\r\n    },\r\n    prepareEvent: function(inEvent) {\r\n      var e = dispatcher.cloneEvent(inEvent);\r\n\r\n      // forward mouse preventDefault\r\n      var pd = e.preventDefault;\r\n      e.preventDefault = function() {\r\n        inEvent.preventDefault();\r\n        pd();\r\n      };\r\n      e.pointerId = this.POINTER_ID;\r\n      e.isPrimary = true;\r\n      e.pointerType = this.POINTER_TYPE;\r\n      return e;\r\n    },\r\n    prepareButtonsForMove: function(e, inEvent) {\r\n      var p = pointermap.get(this.POINTER_ID);\r\n\r\n      // Update buttons state after possible out-of-document mouseup.\r\n      if (inEvent.which === 0 || !p) {\r\n        e.buttons = 0;\r\n      } else {\r\n        e.buttons = p.buttons;\r\n      }\r\n      inEvent.buttons = e.buttons;\r\n    },\r\n    mousedown: function(inEvent) {\r\n      if (!this.isEventSimulatedFromTouch(inEvent)) {\r\n        var p = pointermap.get(this.POINTER_ID);\r\n        var e = this.prepareEvent(inEvent);\r\n        if (!HAS_BUTTONS) {\r\n          e.buttons = BUTTON_TO_BUTTONS[e.button];\r\n          if (p) { e.buttons |= p.buttons; }\r\n          inEvent.buttons = e.buttons;\r\n        }\r\n        pointermap.set(this.POINTER_ID, inEvent);\r\n        if (!p || p.buttons === 0) {\r\n          dispatcher.down(e);\r\n        } else {\r\n          dispatcher.move(e);\r\n        }\r\n      }\r\n    },\r\n    mousemove: function(inEvent) {\r\n      if (!this.isEventSimulatedFromTouch(inEvent)) {\r\n        var e = this.prepareEvent(inEvent);\r\n        if (!HAS_BUTTONS) { this.prepareButtonsForMove(e, inEvent); }\r\n        e.button = -1;\r\n        pointermap.set(this.POINTER_ID, inEvent);\r\n        dispatcher.move(e);\r\n      }\r\n    },\r\n    mouseup: function(inEvent) {\r\n      if (!this.isEventSimulatedFromTouch(inEvent)) {\r\n        var p = pointermap.get(this.POINTER_ID);\r\n        var e = this.prepareEvent(inEvent);\r\n        if (!HAS_BUTTONS) {\r\n          var up = BUTTON_TO_BUTTONS[e.button];\r\n\r\n          // Produces wrong state of buttons in Browsers without `buttons` support\r\n          // when a mouse button that was pressed outside the document is released\r\n          // inside and other buttons are still pressed down.\r\n          e.buttons = p ? p.buttons & ~up : 0;\r\n          inEvent.buttons = e.buttons;\r\n        }\r\n        pointermap.set(this.POINTER_ID, inEvent);\r\n\r\n        // Support: Firefox <=44 only\r\n        // FF Ubuntu includes the lifted button in the `buttons` property on\r\n        // mouseup.\r\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1223366\r\n        e.buttons &= ~BUTTON_TO_BUTTONS[e.button];\r\n        if (e.buttons === 0) {\r\n          dispatcher.up(e);\r\n        } else {\r\n          dispatcher.move(e);\r\n        }\r\n      }\r\n    },\r\n    mouseover: function(inEvent) {\r\n      if (!this.isEventSimulatedFromTouch(inEvent)) {\r\n        var e = this.prepareEvent(inEvent);\r\n        if (!HAS_BUTTONS) { this.prepareButtonsForMove(e, inEvent); }\r\n        e.button = -1;\r\n        pointermap.set(this.POINTER_ID, inEvent);\r\n        dispatcher.enterOver(e);\r\n      }\r\n    },\r\n    mouseout: function(inEvent) {\r\n      if (!this.isEventSimulatedFromTouch(inEvent)) {\r\n        var e = this.prepareEvent(inEvent);\r\n        if (!HAS_BUTTONS) { this.prepareButtonsForMove(e, inEvent); }\r\n        e.button = -1;\r\n        dispatcher.leaveOut(e);\r\n      }\r\n    },\r\n    cancel: function(inEvent) {\r\n      var e = this.prepareEvent(inEvent);\r\n      dispatcher.cancel(e);\r\n      this.deactivateMouse();\r\n    },\r\n    deactivateMouse: function() {\r\n      pointermap.delete(this.POINTER_ID);\r\n    }\r\n  };\r\n\r\n  var captureInfo = dispatcher.captureInfo;\r\n  var findTarget = targeting.findTarget.bind(targeting);\r\n  var allShadows = targeting.allShadows.bind(targeting);\r\n  var pointermap$1 = dispatcher.pointermap;\r\n\r\n  // This should be long enough to ignore compat mouse events made by touch\r\n  var DEDUP_TIMEOUT = 2500;\r\n  var CLICK_COUNT_TIMEOUT = 200;\r\n  var ATTRIB = 'touch-action';\r\n  var INSTALLER;\r\n\r\n  // handler block for native touch events\r\n  var touchEvents = {\r\n    events: [\r\n      'touchstart',\r\n      'touchmove',\r\n      'touchend',\r\n      'touchcancel'\r\n    ],\r\n    register: function(target) {\r\n      INSTALLER.enableOnSubtree(target);\r\n    },\r\n    unregister: function() {\r\n\r\n      // TODO(dfreedman): is it worth it to disconnect the MO?\r\n    },\r\n    elementAdded: function(el) {\r\n      var a = el.getAttribute(ATTRIB);\r\n      var st = this.touchActionToScrollType(a);\r\n      if (st) {\r\n        el._scrollType = st;\r\n        dispatcher.listen(el, this.events);\r\n\r\n        // set touch-action on shadows as well\r\n        allShadows(el).forEach(function(s) {\r\n          s._scrollType = st;\r\n          dispatcher.listen(s, this.events);\r\n        }, this);\r\n      }\r\n    },\r\n    elementRemoved: function(el) {\r\n      el._scrollType = undefined;\r\n      dispatcher.unlisten(el, this.events);\r\n\r\n      // remove touch-action from shadow\r\n      allShadows(el).forEach(function(s) {\r\n        s._scrollType = undefined;\r\n        dispatcher.unlisten(s, this.events);\r\n      }, this);\r\n    },\r\n    elementChanged: function(el, oldValue) {\r\n      var a = el.getAttribute(ATTRIB);\r\n      var st = this.touchActionToScrollType(a);\r\n      var oldSt = this.touchActionToScrollType(oldValue);\r\n\r\n      // simply update scrollType if listeners are already established\r\n      if (st && oldSt) {\r\n        el._scrollType = st;\r\n        allShadows(el).forEach(function(s) {\r\n          s._scrollType = st;\r\n        }, this);\r\n      } else if (oldSt) {\r\n        this.elementRemoved(el);\r\n      } else if (st) {\r\n        this.elementAdded(el);\r\n      }\r\n    },\r\n    scrollTypes: {\r\n      EMITTER: 'none',\r\n      XSCROLLER: 'pan-x',\r\n      YSCROLLER: 'pan-y',\r\n      SCROLLER: /^(?:pan-x pan-y)|(?:pan-y pan-x)|auto$/\r\n    },\r\n    touchActionToScrollType: function(touchAction) {\r\n      var t = touchAction;\r\n      var st = this.scrollTypes;\r\n      if (t === 'none') {\r\n        return 'none';\r\n      } else if (t === st.XSCROLLER) {\r\n        return 'X';\r\n      } else if (t === st.YSCROLLER) {\r\n        return 'Y';\r\n      } else if (st.SCROLLER.exec(t)) {\r\n        return 'XY';\r\n      }\r\n    },\r\n    POINTER_TYPE: 'touch',\r\n    firstTouch: null,\r\n    isPrimaryTouch: function(inTouch) {\r\n      return this.firstTouch === inTouch.identifier;\r\n    },\r\n    setPrimaryTouch: function(inTouch) {\r\n\r\n      // set primary touch if there no pointers, or the only pointer is the mouse\r\n      if (pointermap$1.size === 0 || (pointermap$1.size === 1 && pointermap$1.has(1))) {\r\n        this.firstTouch = inTouch.identifier;\r\n        this.firstXY = { X: inTouch.clientX, Y: inTouch.clientY };\r\n        this.scrolling = false;\r\n        this.cancelResetClickCount();\r\n      }\r\n    },\r\n    removePrimaryPointer: function(inPointer) {\r\n      if (inPointer.isPrimary) {\r\n        this.firstTouch = null;\r\n        this.firstXY = null;\r\n        this.resetClickCount();\r\n      }\r\n    },\r\n    clickCount: 0,\r\n    resetId: null,\r\n    resetClickCount: function() {\r\n      var fn = function() {\r\n        this.clickCount = 0;\r\n        this.resetId = null;\r\n      }.bind(this);\r\n      this.resetId = setTimeout(fn, CLICK_COUNT_TIMEOUT);\r\n    },\r\n    cancelResetClickCount: function() {\r\n      if (this.resetId) {\r\n        clearTimeout(this.resetId);\r\n      }\r\n    },\r\n    typeToButtons: function(type) {\r\n      var ret = 0;\r\n      if (type === 'touchstart' || type === 'touchmove') {\r\n        ret = 1;\r\n      }\r\n      return ret;\r\n    },\r\n    touchToPointer: function(inTouch) {\r\n      var cte = this.currentTouchEvent;\r\n      var e = dispatcher.cloneEvent(inTouch);\r\n\r\n      // We reserve pointerId 1 for Mouse.\r\n      // Touch identifiers can start at 0.\r\n      // Add 2 to the touch identifier for compatibility.\r\n      var id = e.pointerId = inTouch.identifier + 2;\r\n      e.target = captureInfo[id] || findTarget(e);\r\n      e.bubbles = true;\r\n      e.cancelable = true;\r\n      e.detail = this.clickCount;\r\n      e.button = 0;\r\n      e.buttons = this.typeToButtons(cte.type);\r\n      e.width = (inTouch.radiusX || inTouch.webkitRadiusX || 0) * 2;\r\n      e.height = (inTouch.radiusY || inTouch.webkitRadiusY || 0) * 2;\r\n      e.pressure = inTouch.force || inTouch.webkitForce || 0.5;\r\n      e.isPrimary = this.isPrimaryTouch(inTouch);\r\n      e.pointerType = this.POINTER_TYPE;\r\n\r\n      // forward modifier keys\r\n      e.altKey = cte.altKey;\r\n      e.ctrlKey = cte.ctrlKey;\r\n      e.metaKey = cte.metaKey;\r\n      e.shiftKey = cte.shiftKey;\r\n\r\n      // forward touch preventDefaults\r\n      var self = this;\r\n      e.preventDefault = function() {\r\n        self.scrolling = false;\r\n        self.firstXY = null;\r\n        cte.preventDefault();\r\n      };\r\n      return e;\r\n    },\r\n    processTouches: function(inEvent, inFunction) {\r\n      var tl = inEvent.changedTouches;\r\n      this.currentTouchEvent = inEvent;\r\n      for (var i = 0, t; i < tl.length; i++) {\r\n        t = tl[i];\r\n        inFunction.call(this, this.touchToPointer(t));\r\n      }\r\n    },\r\n\r\n    // For single axis scrollers, determines whether the element should emit\r\n    // pointer events or behave as a scroller\r\n    shouldScroll: function(inEvent) {\r\n      if (this.firstXY) {\r\n        var ret;\r\n        var scrollAxis = inEvent.currentTarget._scrollType;\r\n        if (scrollAxis === 'none') {\r\n\r\n          // this element is a touch-action: none, should never scroll\r\n          ret = false;\r\n        } else if (scrollAxis === 'XY') {\r\n\r\n          // this element should always scroll\r\n          ret = true;\r\n        } else {\r\n          var t = inEvent.changedTouches[0];\r\n\r\n          // check the intended scroll axis, and other axis\r\n          var a = scrollAxis;\r\n          var oa = scrollAxis === 'Y' ? 'X' : 'Y';\r\n          var da = Math.abs(t['client' + a] - this.firstXY[a]);\r\n          var doa = Math.abs(t['client' + oa] - this.firstXY[oa]);\r\n\r\n          // if delta in the scroll axis > delta other axis, scroll instead of\r\n          // making events\r\n          ret = da >= doa;\r\n        }\r\n        this.firstXY = null;\r\n        return ret;\r\n      }\r\n    },\r\n    findTouch: function(inTL, inId) {\r\n      for (var i = 0, l = inTL.length, t; i < l && (t = inTL[i]); i++) {\r\n        if (t.identifier === inId) {\r\n          return true;\r\n        }\r\n      }\r\n    },\r\n\r\n    // In some instances, a touchstart can happen without a touchend. This\r\n    // leaves the pointermap in a broken state.\r\n    // Therefore, on every touchstart, we remove the touches that did not fire a\r\n    // touchend event.\r\n    // To keep state globally consistent, we fire a\r\n    // pointercancel for this \"abandoned\" touch\r\n    vacuumTouches: function(inEvent) {\r\n      var tl = inEvent.touches;\r\n\r\n      // pointermap.size should be < tl.length here, as the touchstart has not\r\n      // been processed yet.\r\n      if (pointermap$1.size >= tl.length) {\r\n        var d = [];\r\n        pointermap$1.forEach(function(value, key) {\r\n\r\n          // Never remove pointerId == 1, which is mouse.\r\n          // Touch identifiers are 2 smaller than their pointerId, which is the\r\n          // index in pointermap.\r\n          if (key !== 1 && !this.findTouch(tl, key - 2)) {\r\n            var p = value.out;\r\n            d.push(p);\r\n          }\r\n        }, this);\r\n        d.forEach(this.cancelOut, this);\r\n      }\r\n    },\r\n    touchstart: function(inEvent) {\r\n      this.vacuumTouches(inEvent);\r\n      this.setPrimaryTouch(inEvent.changedTouches[0]);\r\n      this.dedupSynthMouse(inEvent);\r\n      if (!this.scrolling) {\r\n        this.clickCount++;\r\n        this.processTouches(inEvent, this.overDown);\r\n      }\r\n    },\r\n    overDown: function(inPointer) {\r\n      pointermap$1.set(inPointer.pointerId, {\r\n        target: inPointer.target,\r\n        out: inPointer,\r\n        outTarget: inPointer.target\r\n      });\r\n      dispatcher.enterOver(inPointer);\r\n      dispatcher.down(inPointer);\r\n    },\r\n    touchmove: function(inEvent) {\r\n      if (!this.scrolling) {\r\n        if (this.shouldScroll(inEvent)) {\r\n          this.scrolling = true;\r\n          this.touchcancel(inEvent);\r\n        } else {\r\n          inEvent.preventDefault();\r\n          this.processTouches(inEvent, this.moveOverOut);\r\n        }\r\n      }\r\n    },\r\n    moveOverOut: function(inPointer) {\r\n      var event = inPointer;\r\n      var pointer = pointermap$1.get(event.pointerId);\r\n\r\n      // a finger drifted off the screen, ignore it\r\n      if (!pointer) {\r\n        return;\r\n      }\r\n      var outEvent = pointer.out;\r\n      var outTarget = pointer.outTarget;\r\n      dispatcher.move(event);\r\n      if (outEvent && outTarget !== event.target) {\r\n        outEvent.relatedTarget = event.target;\r\n        event.relatedTarget = outTarget;\r\n\r\n        // recover from retargeting by shadow\r\n        outEvent.target = outTarget;\r\n        if (event.target) {\r\n          dispatcher.leaveOut(outEvent);\r\n          dispatcher.enterOver(event);\r\n        } else {\r\n\r\n          // clean up case when finger leaves the screen\r\n          event.target = outTarget;\r\n          event.relatedTarget = null;\r\n          this.cancelOut(event);\r\n        }\r\n      }\r\n      pointer.out = event;\r\n      pointer.outTarget = event.target;\r\n    },\r\n    touchend: function(inEvent) {\r\n      this.dedupSynthMouse(inEvent);\r\n      this.processTouches(inEvent, this.upOut);\r\n    },\r\n    upOut: function(inPointer) {\r\n      if (!this.scrolling) {\r\n        dispatcher.up(inPointer);\r\n        dispatcher.leaveOut(inPointer);\r\n      }\r\n      this.cleanUpPointer(inPointer);\r\n    },\r\n    touchcancel: function(inEvent) {\r\n      this.processTouches(inEvent, this.cancelOut);\r\n    },\r\n    cancelOut: function(inPointer) {\r\n      dispatcher.cancel(inPointer);\r\n      dispatcher.leaveOut(inPointer);\r\n      this.cleanUpPointer(inPointer);\r\n    },\r\n    cleanUpPointer: function(inPointer) {\r\n      pointermap$1.delete(inPointer.pointerId);\r\n      this.removePrimaryPointer(inPointer);\r\n    },\r\n\r\n    // prevent synth mouse events from creating pointer events\r\n    dedupSynthMouse: function(inEvent) {\r\n      var lts = mouseEvents.lastTouches;\r\n      var t = inEvent.changedTouches[0];\r\n\r\n      // only the primary finger will synth mouse events\r\n      if (this.isPrimaryTouch(t)) {\r\n\r\n        // remember x/y of last touch\r\n        var lt = { x: t.clientX, y: t.clientY };\r\n        lts.push(lt);\r\n        var fn = (function(lts, lt) {\r\n          var i = lts.indexOf(lt);\r\n          if (i > -1) {\r\n            lts.splice(i, 1);\r\n          }\r\n        }).bind(null, lts, lt);\r\n        setTimeout(fn, DEDUP_TIMEOUT);\r\n      }\r\n    }\r\n  };\r\n\r\n  INSTALLER = new Installer(touchEvents.elementAdded, touchEvents.elementRemoved,\r\n    touchEvents.elementChanged, touchEvents);\r\n\r\n  var pointermap$2 = dispatcher.pointermap;\r\n  var HAS_BITMAP_TYPE = window.MSPointerEvent &&\r\n    typeof window.MSPointerEvent.MSPOINTER_TYPE_MOUSE === 'number';\r\n  var msEvents = {\r\n    events: [\r\n      'MSPointerDown',\r\n      'MSPointerMove',\r\n      'MSPointerUp',\r\n      'MSPointerOut',\r\n      'MSPointerOver',\r\n      'MSPointerCancel',\r\n      'MSGotPointerCapture',\r\n      'MSLostPointerCapture'\r\n    ],\r\n    register: function(target) {\r\n      dispatcher.listen(target, this.events);\r\n    },\r\n    unregister: function(target) {\r\n      dispatcher.unlisten(target, this.events);\r\n    },\r\n    POINTER_TYPES: [\r\n      '',\r\n      'unavailable',\r\n      'touch',\r\n      'pen',\r\n      'mouse'\r\n    ],\r\n    prepareEvent: function(inEvent) {\r\n      var e = inEvent;\r\n      if (HAS_BITMAP_TYPE) {\r\n        e = dispatcher.cloneEvent(inEvent);\r\n        e.pointerType = this.POINTER_TYPES[inEvent.pointerType];\r\n      }\r\n      return e;\r\n    },\r\n    cleanup: function(id) {\r\n      pointermap$2.delete(id);\r\n    },\r\n    MSPointerDown: function(inEvent) {\r\n      pointermap$2.set(inEvent.pointerId, inEvent);\r\n      var e = this.prepareEvent(inEvent);\r\n      dispatcher.down(e);\r\n    },\r\n    MSPointerMove: function(inEvent) {\r\n      var e = this.prepareEvent(inEvent);\r\n      dispatcher.move(e);\r\n    },\r\n    MSPointerUp: function(inEvent) {\r\n      var e = this.prepareEvent(inEvent);\r\n      dispatcher.up(e);\r\n      this.cleanup(inEvent.pointerId);\r\n    },\r\n    MSPointerOut: function(inEvent) {\r\n      var e = this.prepareEvent(inEvent);\r\n      dispatcher.leaveOut(e);\r\n    },\r\n    MSPointerOver: function(inEvent) {\r\n      var e = this.prepareEvent(inEvent);\r\n      dispatcher.enterOver(e);\r\n    },\r\n    MSPointerCancel: function(inEvent) {\r\n      var e = this.prepareEvent(inEvent);\r\n      dispatcher.cancel(e);\r\n      this.cleanup(inEvent.pointerId);\r\n    },\r\n    MSLostPointerCapture: function(inEvent) {\r\n      var e = dispatcher.makeEvent('lostpointercapture', inEvent);\r\n      dispatcher.dispatchEvent(e);\r\n    },\r\n    MSGotPointerCapture: function(inEvent) {\r\n      var e = dispatcher.makeEvent('gotpointercapture', inEvent);\r\n      dispatcher.dispatchEvent(e);\r\n    }\r\n  };\r\n\r\n  function applyPolyfill() {\r\n\r\n    // only activate if this platform does not have pointer events\r\n    if (!window.PointerEvent) {\r\n      window.PointerEvent = PointerEvent;\r\n\r\n      if (window.navigator.msPointerEnabled) {\r\n        var tp = window.navigator.msMaxTouchPoints;\r\n        Object.defineProperty(window.navigator, 'maxTouchPoints', {\r\n          value: tp,\r\n          enumerable: true\r\n        });\r\n        dispatcher.registerSource('ms', msEvents);\r\n      } else {\r\n        Object.defineProperty(window.navigator, 'maxTouchPoints', {\r\n          value: 0,\r\n          enumerable: true\r\n        });\r\n        dispatcher.registerSource('mouse', mouseEvents);\r\n        if (window.ontouchstart !== undefined) {\r\n          dispatcher.registerSource('touch', touchEvents);\r\n        }\r\n      }\r\n\r\n      dispatcher.register(document);\r\n    }\r\n  }\r\n\r\n  var n = window.navigator;\r\n  var s;\r\n  var r;\r\n  var h;\r\n  function assertActive(id) {\r\n    if (!dispatcher.pointermap.has(id)) {\r\n      var error = new Error('InvalidPointerId');\r\n      error.name = 'InvalidPointerId';\r\n      throw error;\r\n    }\r\n  }\r\n  function assertConnected(elem) {\r\n    var parent = elem.parentNode;\r\n    while (parent && parent !== elem.ownerDocument) {\r\n      parent = parent.parentNode;\r\n    }\r\n    if (!parent) {\r\n      var error = new Error('InvalidStateError');\r\n      error.name = 'InvalidStateError';\r\n      throw error;\r\n    }\r\n  }\r\n  function inActiveButtonState(id) {\r\n    var p = dispatcher.pointermap.get(id);\r\n    return p.buttons !== 0;\r\n  }\r\n  if (n.msPointerEnabled) {\r\n    s = function(pointerId) {\r\n      assertActive(pointerId);\r\n      assertConnected(this);\r\n      if (inActiveButtonState(pointerId)) {\r\n        dispatcher.setCapture(pointerId, this, true);\r\n        this.msSetPointerCapture(pointerId);\r\n      }\r\n    };\r\n    r = function(pointerId) {\r\n      assertActive(pointerId);\r\n      dispatcher.releaseCapture(pointerId, true);\r\n      this.msReleasePointerCapture(pointerId);\r\n    };\r\n  } else {\r\n    s = function setPointerCapture(pointerId) {\r\n      assertActive(pointerId);\r\n      assertConnected(this);\r\n      if (inActiveButtonState(pointerId)) {\r\n        dispatcher.setCapture(pointerId, this);\r\n      }\r\n    };\r\n    r = function releasePointerCapture(pointerId) {\r\n      assertActive(pointerId);\r\n      dispatcher.releaseCapture(pointerId);\r\n    };\r\n  }\r\n  h = function hasPointerCapture(pointerId) {\r\n    return !!dispatcher.captureInfo[pointerId];\r\n  };\r\n\r\n  function applyPolyfill$1() {\r\n    if (window.Element && !Element.prototype.setPointerCapture) {\r\n      Object.defineProperties(Element.prototype, {\r\n        'setPointerCapture': {\r\n          value: s\r\n        },\r\n        'releasePointerCapture': {\r\n          value: r\r\n        },\r\n        'hasPointerCapture': {\r\n          value: h\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  applyAttributeStyles();\r\n  applyPolyfill();\r\n  applyPolyfill$1();\r\n\r\n  var pointerevents = {\r\n    dispatcher: dispatcher,\r\n    Installer: Installer,\r\n    PointerEvent: PointerEvent,\r\n    PointerMap: PointerMap,\r\n    targetFinding: targeting\r\n  };\r\n\r\n  return pointerevents;\r\n\r\n});\ndefine('skylark-osjsv2-client/boot',[\n    './core/init',\n    \"./utils/pepjs\"\n], function (a) {\n    'use strict';\n    window.OSjs = Object.assign({\n        error: (title, message, error, exception, bugreport) => {\n            console.error(title, message, error, exception);\n        },\n        runTests: () => {\n        },\n        getConfig: () => {\n            return {};\n        },\n        getManifest: () => {\n            return {};\n        },\n        Themes: {},\n        Dialogs: {},\n        Locales: {},\n        Extensions: {},\n        Applications: {}\n    }, window.OSjs || {});\n    window.OSjs.require = n => {\n        const mod = require('skylark-osjsv2-client/' + n);\n        return mod;\n        //return mod && mod.default ? mod.default : mod;\n    };\n    if (document.readyState !== 'loading') {\n        a.start();\n    } else {\n        document.addEventListener('DOMContentLoaded', () => a.start());\n    }\n});\ndefine('skylark-osjsv2-client/locales/en_EN',[],function() {\nreturn {\n    'ERR_FILE_OPEN': 'Error opening file',\n    'ERR_WM_NOT_RUNNING': 'Window manager is not running',\n    'ERR_FILE_OPEN_FMT': \"The file '**{0}**' could not be opened\",\n    'ERR_APP_MIME_NOT_FOUND_FMT': \"Could not find any Applications with support for '{0}' files\",\n    'ERR_APP_LAUNCH_FAILED': 'Failed to launch Application',\n    'ERR_APP_LAUNCH_FAILED_FMT': 'An error occured while trying to launch: {0}',\n    'ERR_APP_CONSTRUCT_FAILED_FMT': \"Application '{0}' construct failed: {1}\",\n    'ERR_APP_INIT_FAILED_FMT': \"Application '{0}' init() failed: {1}\",\n    'ERR_APP_RESOURCES_MISSING_FMT': \"Application resources missing for '{0}' or it failed to load!\",\n    'ERR_APP_PRELOAD_FAILED_FMT': \"Application '{0}' preloading failed: \\n{1}\",\n    'ERR_APP_LAUNCH_ALREADY_RUNNING_FMT': \"The application '{0}' is already launched and allows only one instance!\",\n    'ERR_APP_LAUNCH_MANIFEST_FAILED_FMT': \"Failed to launch '{0}'. Application manifest data not found!\",\n    'ERR_APP_LAUNCH_COMPABILITY_FAILED_FMT': \"Failed to launch '{0}'. Your browser does not support: {1}\",\n    'ERR_NO_WM_RUNNING': 'No window manager is running',\n    'ERR_CORE_INIT_FAILED': 'Failed to initialize OS.js',\n    'ERR_CORE_INIT_FAILED_DESC': 'An error occured while initializing OS.js',\n    'ERR_CORE_INIT_NO_WM': 'Cannot launch OS.js: No window manager defined!',\n    'ERR_CORE_INIT_WM_FAILED_FMT': 'Cannot launch OS.js: Failed to launch Window Manager: {0}',\n    'ERR_CORE_INIT_PRELOAD_FAILED': 'Cannot launch OS.js: Failed to preload resources...',\n    'ERR_JAVASCRIPT_EXCEPTION': 'JavaScript Error Report',\n    'ERR_JAVACSRIPT_EXCEPTION_DESC': 'An unexpected error occured, maybe a bug.',\n    'ERR_APP_API_ERROR': 'Application API error',\n    'ERR_APP_API_ERROR_DESC_FMT': \"Application {0} failed to perform operation '{1}'\",\n    'ERR_APP_MISSING_ARGUMENT_FMT': 'Missing argument: {0}',\n    'ERR_APP_UNKNOWN_ERROR': 'Unknown error',\n    'ERR_OPERATION_TIMEOUT': 'Operation Timeout',\n    'ERR_OPERATION_TIMEOUT_FMT': 'Operation Timeout ({0})',\n    'ERR_ARGUMENT_FMT': \"'{0}' expects '{1}' to be a '{2}', '{3}' given\",\n    'ERR_INVALID_LOCATION': 'Invalid location',\n    'ERR_WIN_DUPLICATE_FMT': \"You already have a Window named '{0}'\",\n    'WINDOW_MINIMIZE': 'Minimize',\n    'WINDOW_MAXIMIZE': 'Maximize',\n    'WINDOW_RESTORE': 'Restore',\n    'WINDOW_CLOSE': 'Close',\n    'WINDOW_ONTOP_ON': 'Ontop (Enable)',\n    'WINDOW_ONTOP_OFF': 'Ontop (Disable)',\n    'TITLE_SIGN_OUT': 'Sign out',\n    'TITLE_SIGNED_IN_AS_FMT': 'Signed in as: {0}',\n    'ERR_LOGIN_FMT': 'Login error: {0}',\n    'ERR_LOGIN_INVALID': 'Invalid login',\n    'ERR_NO_SESSION': 'No session was created by the server. Do you want to retry login?',\n    'MSG_SESSION_WARNING': 'Are you sure you want to quit OS.js? All unsaved settings and application data will be lost!',\n    'BUGREPORT_MSG': 'Please report this if you think this is a bug.\\nInclude a brief description on how the error occured, and if you can; how to replicate it',\n    'SERVICENOTIFICATION_TOOLTIP': 'Logged into external services: {0}',\n    'CONNECTION_LOST': 'Connection to the server was lost. Reconnecting...',\n    'CONNECTION_RESTORED': 'Connection to the server was restored',\n    'CONNECTION_RESTORE_FAILED': 'Failed to re-establish connection. Trying again.',\n    'CONNECTION_ERROR': 'Connection error',\n    'ERR_UTILS_XHR_FATAL': 'Fatal Error',\n    'ERR_UTILS_XHR_FMT': 'AJAX/XHR Error: {0}',\n    'DIALOG_LOGOUT_TITLE': 'Log out (Exit)',\n    'DIALOG_LOGOUT_MSG_FMT': \"Logging out user '{0}'.\\nDo you want to save current session?\",\n    'DIALOG_CLOSE': 'Close',\n    'DIALOG_CANCEL': 'Cancel',\n    'DIALOG_APPLY': 'Apply',\n    'DIALOG_OK': 'OK',\n    'DIALOG_ALERT_TITLE': 'Alert Dialog',\n    'DIALOG_COLOR_TITLE': 'Color Dialog',\n    'DIALOG_COLOR_R': 'Red: {0}',\n    'DIALOG_COLOR_G': 'Green: {0}',\n    'DIALOG_COLOR_B': 'Blue: {0}',\n    'DIALOG_COLOR_A': 'Alpha: {0}',\n    'DIALOG_CONFIRM_TITLE': 'Confirm Dialog',\n    'DIALOG_ERROR_TITLE': 'Error',\n    'DIALOG_ERROR_MESSAGE': 'Message',\n    'DIALOG_ERROR_SUMMARY': 'Summary',\n    'DIALOG_ERROR_TRACE': 'Trace',\n    'DIALOG_ERROR_BUGREPORT': 'Report Bug',\n    'DIALOG_FILE_SAVE': 'Save',\n    'DIALOG_FILE_OPEN': 'Open',\n    'DIALOG_FILE_MKDIR': 'New Folder',\n    'DIALOG_FILE_MKDIR_MSG': 'Create a new directory in **{0}**',\n    'DIALOG_FILE_OVERWRITE': \"Are you sure you want to overwrite the file '{0}'?\",\n    'DIALOG_FILE_MNU_VIEWTYPE': 'View type',\n    'DIALOG_FILE_MNU_LISTVIEW': 'List View',\n    'DIALOG_FILE_MNU_TREEVIEW': 'Tree View',\n    'DIALOG_FILE_MNU_ICONVIEW': 'Icon View',\n    'DIALOG_FILE_ERROR': 'FileDialog Error',\n    'DIALOG_FILE_ERROR_SCANDIR': \"Failed listing directory '{0}' because an error occured\",\n    'DIALOG_FILE_ERROR_FIND': \"Failed searching directory '{0}' because an error occured\",\n    'DIALOG_FILE_MISSING_FILENAME': 'You need to select a file or enter new filename!',\n    'DIALOG_FILE_MISSING_SELECTION': 'You need to select a file!',\n    'DIALOG_FILEINFO_TITLE': 'File Information',\n    'DIALOG_FILEINFO_LOADING': 'Loading file information for: {0}',\n    'DIALOG_FILEINFO_ERROR': 'FileInformationDialog Error',\n    'DIALOG_FILEINFO_ERROR_LOOKUP': 'Failed to get file information for **{0}**',\n    'DIALOG_FILEINFO_ERROR_LOOKUP_FMT': 'Failed to get file information for: {0}',\n    'DIALOG_INPUT_TITLE': 'Input Dialog',\n    'DIALOG_FILEPROGRESS_TITLE': 'File Operation Progress',\n    'DIALOG_FILEPROGRESS_LOADING': 'Loading...',\n    'DIALOG_UPLOAD_TITLE': 'Upload Dialog',\n    'DIALOG_UPLOAD_DESC': 'Upload file to **{0}**.<br />Maximum size: {1} bytes',\n    'DIALOG_UPLOAD_MSG_FMT': \"Uploading '{0}' ({1} {2}) to {3}\",\n    'DIALOG_UPLOAD_MSG': 'Uploading file...',\n    'DIALOG_UPLOAD_FAILED': 'Upload failed',\n    'DIALOG_UPLOAD_FAILED_MSG': 'The upload has failed',\n    'DIALOG_UPLOAD_FAILED_UNKNOWN': 'Reason unknown...',\n    'DIALOG_UPLOAD_FAILED_CANCELLED': 'Cancelled by user...',\n    'DIALOG_UPLOAD_TOO_BIG': 'File is too big',\n    'DIALOG_UPLOAD_TOO_BIG_FMT': 'File is too big, exceeds {0}',\n    'DIALOG_FONT_TITLE': 'Font Dialog',\n    'DIALOG_APPCHOOSER_TITLE': 'Choose Application',\n    'DIALOG_APPCHOOSER_MSG': 'Choose an application to open',\n    'DIALOG_APPCHOOSER_NO_SELECTION': 'You need to select an application',\n    'DIALOG_APPCHOOSER_SET_DEFAULT': 'Use as default application for {0}',\n    'GAPI_DISABLED': 'GoogleAPI Module not configured or disabled',\n    'GAPI_SIGN_OUT': 'Sign out from Google API Services',\n    'GAPI_REVOKE': 'Revoke permissions and Sign Out',\n    'GAPI_AUTH_FAILURE': 'Google API Authentication failed or did not take place',\n    'GAPI_AUTH_FAILURE_FMT': 'Failed to authenticate: {0}:{1}',\n    'GAPI_LOAD_FAILURE': 'Failed to load Google API',\n    'WLAPI_DISABLED': 'Windows Live API module not configured or disabled',\n    'WLAPI_SIGN_OUT': 'Sign out from Window Live API',\n    'WLAPI_LOAD_FAILURE': 'Failed to load Windows Live API',\n    'WLAPI_LOGIN_FAILED': 'Failed to log into Windows Live API',\n    'WLAPI_LOGIN_FAILED_FMT': 'Failed to log into Windows Live API: {0}',\n    'WLAPI_INIT_FAILED_FMT': 'Windows Live API returned {0} status',\n    'IDB_MISSING_DBNAME': 'Cannot create IndexedDB without Database Name',\n    'IDB_NO_SUCH_ITEM': 'No such item',\n    'ERR_VFS_FATAL': 'Fatal Error',\n    'ERR_VFS_UNAVAILABLE': 'Not available',\n    'ERR_VFS_FILE_ARGS': 'File expects at least one argument',\n    'ERR_VFS_NUM_ARGS': 'Not enough arguments',\n    'ERR_VFS_EXPECT_FILE': 'Expects a file-object',\n    'ERR_VFS_EXPECT_SRC_FILE': 'Expects a source file-object',\n    'ERR_VFS_EXPECT_DST_FILE': 'Expects a destination file-object',\n    'ERR_VFS_FILE_EXISTS': 'Destination already exists',\n    'ERR_VFS_TARGET_NOT_EXISTS': 'Target does not exist',\n    'ERR_VFS_TRANSFER_FMT': 'An error occured while transfering between storage: {0}',\n    'ERR_VFS_UPLOAD_NO_DEST': 'Cannot upload a file without a destination',\n    'ERR_VFS_UPLOAD_NO_FILES': 'Cannot upload without any files defined',\n    'ERR_VFS_UPLOAD_FAIL_FMT': 'File upload failed: {0}',\n    'ERR_VFS_UPLOAD_CANCELLED': 'File upload was cancelled',\n    'ERR_VFS_DOWNLOAD_NO_FILE': 'Cannot download a path without a path',\n    'ERR_VFS_DOWNLOAD_FAILED': 'An error occured while downloading: {0}',\n    'ERR_VFS_REMOTEREAD_EMPTY': 'Response was empty',\n    'ERR_VFS_NO_MIME_DETECT': 'No mime type detected',\n    'ERR_VFSMODULE_INVALID': 'Invalid VFS Module',\n    'ERR_VFSMODULE_INVALID_FMT': 'Invalid VFS Module: {0}',\n    'ERR_VFSMODULE_INVALID_METHOD': 'Invalid VFS Method',\n    'ERR_VFSMODULE_INVALID_METHOD_FMT': 'Invalid VFS Method: {0}',\n    'ERR_VFSMODULE_INVALID_TYPE': 'Invalid VFS Module type',\n    'ERR_VFSMODULE_INVALID_TYPE_FMT': 'Invalid VFS Module type: {0}',\n    'ERR_VFSMODULE_INVALID_CONFIG': 'Invalid VFS Module configuration',\n    'ERR_VFSMODULE_INVALID_CONFIG_FMT': 'Invalid VFS Module configuration: {0}',\n    'ERR_VFSMODULE_ALREADY_MOUNTED': 'VFS Module already mounted',\n    'ERR_VFSMODULE_ALREADY_MOUNTED_FMT': \"VFS Module '{0}' already mounted\",\n    'ERR_VFSMODULE_NOT_MOUNTED': 'VFS Module not mounted',\n    'ERR_VFSMODULE_NOT_MOUNTED_FMT': \"VFS Module '{0}' not mounted\",\n    'ERR_VFSMODULE_EXCEPTION': 'VFS Module Exception',\n    'ERR_VFSMODULE_EXCEPTION_FMT': 'VFS Module Exception: {0}',\n    'ERR_VFSMODULE_NOT_FOUND_FMT': 'No VFS Module matches {0}. Wrong path or format ?',\n    'ERR_VFSMODULE_READONLY': 'This VFS Module is read-only',\n    'ERR_VFSMODULE_READONLY_FMT': 'This VFS Module is read-only: {0}',\n    'TOOLTIP_VFS_DOWNLOAD_NOTIFICATION': 'Downloading file',\n    'ERR_VFSMODULE_XHR_ERROR': 'XHR Error',\n    'ERR_VFSMODULE_ROOT_ID': 'Failed to find root folder id',\n    'ERR_VFSMODULE_NOSUCH': 'File does not exist',\n    'ERR_VFSMODULE_PARENT': 'No such parent',\n    'ERR_VFSMODULE_PARENT_FMT': 'Failed to look up parent: {0}',\n    'ERR_VFSMODULE_SCANDIR': 'Failed to scan directory',\n    'ERR_VFSMODULE_SCANDIR_FMT': 'Failed to scan directory: {0}',\n    'ERR_VFSMODULE_READ': 'Failed to read file',\n    'ERR_VFSMODULE_READ_FMT': 'Failed to read file: {0}',\n    'ERR_VFSMODULE_WRITE': 'Failed to write file',\n    'ERR_VFSMODULE_WRITE_FMT': 'Failed to write file: {0}',\n    'ERR_VFSMODULE_COPY': 'Failed to copy',\n    'ERR_VFSMODULE_COPY_FMT': 'Failed to copy: {0}',\n    'ERR_VFSMODULE_UNLINK': 'Failed to unlink file',\n    'ERR_VFSMODULE_UNLINK_FMT': 'Failed to unlink file: {0}',\n    'ERR_VFSMODULE_MOVE': 'Failed to move file',\n    'ERR_VFSMODULE_MOVE_FMT': 'Failed to move file: {0}',\n    'ERR_VFSMODULE_EXIST': 'Failed to check file existence',\n    'ERR_VFSMODULE_EXIST_FMT': 'Failed to check file existence: {0}',\n    'ERR_VFSMODULE_FILEINFO': 'Failed to get file information',\n    'ERR_VFSMODULE_FILEINFO_FMT': 'Failed to get file information: {0}',\n    'ERR_VFSMODULE_MKDIR': 'Failed to create directory',\n    'ERR_VFSMODULE_MKDIR_FMT': 'Failed to create directory: {0}',\n    'ERR_VFSMODULE_MKFILE': 'Failed to create file',\n    'ERR_VFSMODULE_MKFILE_FMT': 'Failed to create file: {0}',\n    'ERR_VFSMODULE_URL': 'Failed to get URL for file',\n    'ERR_VFSMODULE_URL_FMT': 'Failed to get URL for file: {0}',\n    'ERR_VFSMODULE_TRASH': 'Failed to move file to trash',\n    'ERR_VFSMODULE_TRASH_FMT': 'Failed to move file to trash: {0}',\n    'ERR_VFSMODULE_UNTRASH': 'Failed to move file out of trash',\n    'ERR_VFSMODULE_UNTRASH_FMT': 'Failed to move file out of trash: {0}',\n    'ERR_VFSMODULE_EMPTYTRASH': 'Failed to empty trash',\n    'ERR_VFSMODULE_EMPTYTRASH_FMT': 'Failed to empty trash: {0}',\n    'ERR_VFSMODULE_FIND': 'Failed to search',\n    'ERR_VFSMODULE_FIND_FMT': 'Failed to search: {0}',\n    'ERR_VFSMODULE_FREESPACE': 'Failed to get free space',\n    'ERR_VFSMODULE_FREESPACE_FMT': 'Failed to get free space: {0}',\n    'ERR_VFSMODULE_EXISTS': 'Failed to check if exists',\n    'ERR_VFSMODULE_EXISTS_FMT': 'Failed to check if exists: {0}',\n    'ERR_DROPBOX_API': 'Failed to load Dropbox API',\n    'ERR_DROPBOX_AUTH': 'Failed to authenticate via Dropbox',\n    'ERR_DROPBOX_KEY': 'No Dropbox client key configured',\n    'DROPBOX_NOTIFICATION_TITLE': 'You are signed in to Dropbox API',\n    'DROPBOX_SIGN_OUT': 'Sign out from Google API Services',\n    'ONEDRIVE_ERR_RESOLVE': 'Failed to resolve path: item not found',\n    'ZIP_PRELOAD_FAIL': 'Failed to load zip.js',\n    'ZIP_VENDOR_FAIL': 'zip.js library was not found. Did it load properly?',\n    'ZIP_NO_RESOURCE': 'No zip resource was given',\n    'ZIP_NO_PATH': 'No path given',\n    'SEARCH_LOADING': 'Searching...',\n    'SEARCH_NO_RESULTS': 'No results found',\n    'ERR_PACKAGE_EXISTS': 'Package installation directory already exists. Cannot continue!',\n    'ERR_PACKAGE_MANIFEST': 'Failed to load package manifest',\n    'ERR_PACKAGE_ENUM_FAILED': 'Failed to get package list. Make sure you\\'re not using \"Private Mode\" as this might case problems.',\n    'ERR_FILE_APP_OPEN': 'Cannot open file',\n    'ERR_FILE_APP_OPEN_FMT': 'The file {0} could not be opened because the mime {1} is not supported',\n    'ERR_FILE_APP_OPEN_ALT_FMT': 'The file {0} could not be opened: {1}',\n    'ERR_FILE_APP_SAVE_ALT_FMT': 'The file {0} could not be saved: {1}',\n    'ERR_GENERIC_APP_FMT': '{0} Application Error',\n    'ERR_GENERIC_APP_ACTION_FMT': \"Failed to perform action '{0}'\",\n    'ERR_GENERIC_APP_UNKNOWN': 'Unknown Error',\n    'ERR_GENERIC_APP_REQUEST': 'An error occured while handling your request',\n    'ERR_GENERIC_APP_FATAL_FMT': 'Fatal Error: {0}',\n    'MSG_GENERIC_APP_DISCARD': 'Discard changes?',\n    'MSG_FILE_CHANGED': 'The file has changed. Reload?',\n    'MSG_APPLICATION_WARNING': 'Application Warning',\n    'MSG_MIME_OVERRIDE': 'The filetype \"{0}\" is not supported, using \"{1}\" instead.',\n    'ERR_OPEN_LOCATION': 'Failed to open location',\n    'ERR_OPEN_LOCATION_FMT': 'Failed to open location: {0}',\n    'LBL_UNKNOWN': 'Unknown',\n    'LBL_APPEARANCE': 'Appearance',\n    'LBL_USER': 'User',\n    'LBL_NAME': 'Name',\n    'LBL_APPLY': 'Apply',\n    'LBL_FILENAME': 'Filename',\n    'LBL_PATH': 'Path',\n    'LBL_SIZE': 'Size',\n    'LBL_TYPE': 'Type',\n    'LBL_MIME': 'MIME',\n    'LBL_LOADING': 'Loading',\n    'LBL_SETTINGS': 'Settings',\n    'LBL_ADD_FILE': 'Add file',\n    'LBL_COMMENT': 'Comment',\n    'LBL_ACCOUNT': 'Account',\n    'LBL_CONNECT': 'Connect',\n    'LBL_ONLINE': 'Online',\n    'LBL_OFFLINE': 'Offline',\n    'LBL_AWAY': 'Away',\n    'LBL_BUSY': 'Busy',\n    'LBL_CHAT': 'Chat',\n    'LBL_HELP': 'Help',\n    'LBL_ABOUT': 'About',\n    'LBL_PANELS': 'Panels',\n    'LBL_LOCALES': 'Locales',\n    'LBL_THEME': 'Theme',\n    'LBL_COLOR': 'Color',\n    'LBL_PID': 'PID',\n    'LBL_KILL': 'Kill',\n    'LBL_ALIVE': 'Alive',\n    'LBL_INDEX': 'Index',\n    'LBL_ADD': 'Add',\n    'LBL_FONT': 'Font',\n    'LBL_YES': 'Yes',\n    'LBL_NO': 'No',\n    'LBL_CANCEL': 'Cancel',\n    'LBL_TOP': 'Top',\n    'LBL_LEFT': 'Left',\n    'LBL_RIGHT': 'Right',\n    'LBL_BOTTOM': 'Bottom',\n    'LBL_CENTER': 'Center',\n    'LBL_FILE': 'File',\n    'LBL_NEW': 'New',\n    'LBL_OPEN': 'Open',\n    'LBL_SAVE': 'Save',\n    'LBL_SAVEAS': 'Save as...',\n    'LBL_CLOSE': 'Close',\n    'LBL_MKDIR': 'Create directory',\n    'LBL_UPLOAD': 'Upload',\n    'LBL_VIEW': 'View',\n    'LBL_EDIT': 'Edit',\n    'LBL_RENAME': 'Rename',\n    'LBL_DELETE': 'Delete',\n    'LBL_OPENWITH': 'Open With ...',\n    'LBL_ICONVIEW': 'Icon View',\n    'LBL_TREEVIEW': 'Tree View',\n    'LBL_LISTVIEW': 'List View',\n    'LBL_REFRESH': 'Refresh',\n    'LBL_VIEWTYPE': 'View type',\n    'LBL_BOLD': 'Bold',\n    'LBL_ITALIC': 'Italic',\n    'LBL_UNDERLINE': 'Underline',\n    'LBL_REGULAR': 'Regular',\n    'LBL_STRIKE': 'Strike',\n    'LBL_INDENT': 'Indent',\n    'LBL_OUTDENT': 'Outdate',\n    'LBL_UNDO': 'Undo',\n    'LBL_REDO': 'Redo',\n    'LBL_CUT': 'Cut',\n    'LBL_UNLINK': 'Unlink',\n    'LBL_COPY': 'Copy',\n    'LBL_PASTE': 'Paste',\n    'LBL_INSERT': 'Insert',\n    'LBL_IMAGE': 'Image',\n    'LBL_LINK': 'Link',\n    'LBL_DISCONNECT': 'Disconnect',\n    'LBL_APPLICATIONS': 'Applications',\n    'LBL_ADD_FOLDER': 'Add folder',\n    'LBL_INFORMATION': 'Information',\n    'LBL_TEXT_COLOR': 'Text Color',\n    'LBL_BACK_COLOR': 'Back Color',\n    'LBL_RESET_DEFAULT': 'Reset to defaults',\n    'LBL_DOWNLOAD_COMP': 'Download to computer',\n    'LBL_ORDERED_LIST': 'Ordered List',\n    'LBL_BACKGROUND_IMAGE': 'Background Image',\n    'LBL_BACKGROUND_COLOR': 'Background Color',\n    'LBL_UNORDERED_LIST': 'Unordered List',\n    'LBL_STATUS': 'Status',\n    'LBL_READONLY': 'Read-Only',\n    'LBL_CREATED': 'Created',\n    'LBL_MODIFIED': 'Modified',\n    'LBL_SHOW_COLUMNS': 'Show Columns',\n    'LBL_MOVE': 'Move',\n    'LBL_OPTIONS': 'Options',\n    'LBL_OK': 'OK',\n    'LBL_DIRECTORY': 'Directory',\n    'LBL_CREATE': 'Create',\n    'LBL_BUGREPORT': 'Bugreport',\n    'LBL_INSTALL': 'Install',\n    'LBL_UPDATE': 'Update',\n    'LBL_REMOVE': 'Remove',\n    'LBL_SHOW_SIDEBAR': 'Show sidebar',\n    'LBL_SHOW_NAVIGATION': 'Show navigation',\n    'LBL_SHOW_HIDDENFILES': 'Show hidden files',\n    'LBL_SHOW_FILEEXTENSIONS': 'Show file extensions',\n    'LBL_MOUNT': 'Mount',\n    'LBL_DESCRIPTION': 'Description',\n    'LBL_USERNAME': 'Username',\n    'LBL_PASSWORD': 'Password',\n    'LBL_HOST': 'Host',\n    'LBL_NAMESPACE': 'Namespace',\n    'LBL_SEARCH': 'Search',\n    'LBL_BACK': 'Back',\n    'LBL_ICONS': 'Icons',\n    'LBL_ICON': 'Icon',\n    'LBL_UNINSTALL': 'Uninstall',\n    'LBL_REGENERATE': 'Regenerate',\n    'LBL_DESKTOP': 'Desktop',\n    'LBL_WINDOWMANAGER': 'Window Manager',\n    'LBL_HOTKEY': 'Hotkey',\n    'LBL_HOTKEYS': 'Hotkeys',\n    'LBL_MOUNTS': 'Mounts',\n    'LBL_ID': 'ID',\n    'LBL_APPLICATION': 'Application',\n    'LBL_SCOPE': 'Scope',\n    'LBL_HIDE': 'Hide',\n    'LBL_REPOSITORY': 'Repository',\n    'LBL_VERSION': 'Version',\n    'LBL_AUTHOR': 'Author',\n    'LBL_GROUPS': 'Groups',\n    'LBL_AUTOHIDE': 'Autohide',\n    'LBL_PERSONAL': 'Personal',\n    'LBL_SYSTEM': 'System',\n    'LBL_STARTING': 'Starting',\n    'LBL_SOUNDS': 'Sounds',\n    'LBL_STORE': 'Store',\n    'LBL_LOCALE': 'Locale',\n    'LBL_PACKAGE': 'Package',\n    'LBL_PACKAGES': 'Packages',\n    'LBL_INPUT': 'Input',\n    'LBL_MISC': 'Misc',\n    'LBL_OTHER': 'Other',\n    'LBL_USERS': 'Users',\n    'LBL_FONTS': 'Fonts',\n    'LBL_OPEN_LOCATION': 'Open Location',\n    'LBL_HOME': 'Home',\n    'LBL_WIDGET': 'Widget',\n    'LBL_WIDGETS': 'Widgets',\n    'LBL_LOCK': 'Lock',\n    'LBL_UNLOCK': 'Unlock',\n    'LBL_WARNING': 'Warning',\n    'LBL_INFO': 'Info',\n    'LBL_POSITION': 'Position',\n    'LBL_OPACITY': 'Opactiy',\n    'LBL_ITEMS': 'Items',\n    'LBL_ONTOP': 'On top',\n    'LBL_BACKGROUND': 'Background',\n    'LBL_QUIT': 'Quit',\n    'LBL_EXIT': 'Exit',\n    'LBL_WINDOWS': 'Windows'\n};\n});\n\ndefine('skylark-osjsv2-client/core/auth/database',[\n\t'../authenticator'\n], function (Authenticator) {\n    'use strict';\n    return class DatabaseAuthenticator extends Authenticator {\n    };\n});\ndefine('skylark-osjsv2-client/core/auth/demo',[\n    '../authenticator'\n], function (Authenticator) {\n    'use strict';\n    return class DemoAuthenticator extends Authenticator {\n        _getSettings() {\n            let settings = {};\n            let key;\n            for (let i = 0; i < localStorage.length; i++) {\n                key = localStorage.key(i);\n                if (key.match(/^OSjs\\//)) {\n                    try {\n                        settings[key.replace(/^OSjs\\//, '')] = JSON.parse(localStorage.getItem(key));\n                    } catch (e) {\n                        console.warn('DemoAuthenticator::login()', e, e.stack);\n                    }\n                }\n            }\n            return settings;\n        }\n        login(login) {\n            return new Promise((resolve, reject) => {\n                super.login(login).then(result => {\n                    result.userSettings = this._getSettings();\n                    return resolve(result);\n                }).catch(reject);\n            });\n        }\n        createUI() {\n            return this.requestLogin({\n                username: 'demo',\n                password: 'demo'\n            });\n        }\n    };\n});\ndefine('skylark-osjsv2-client/core/auth/pam',[\n\t'../authenticator'\n], function (Authenticator) {\n    'use strict';\n    return class PAMAuthenticator extends Authenticator {\n    };\n});\ndefine('skylark-osjsv2-client/core/auth/standalone',[\n    './demo'\n], function (DemoAuthenticator) {\n    'use strict';\n    return class StandaloneAuthenticator extends DemoAuthenticator {\n        constructor() {\n            super();\n            this.isStandalone = true;\n        }\n        login(login) {\n            return Promise.resolve({\n                userData: {\n                    id: 1,\n                    username: 'root',\n                    name: 'Administrator User',\n                    groups: ['admin']\n                },\n                userSettings: this._getSettings(),\n                blacklistedPackages: []\n            });\n        }\n    };\n});\ndefine('skylark-osjsv2-client/core/connections/http',[\n    '../../vfs/fs',\n    '../../vfs/file',\n    '../connection'\n], function (VFS, FileMetadata, Connection) {\n    'use strict';\n    return class HttpConnection extends Connection {\n        onVFSRequestCompleted(module, method, args, result, appRef) {\n            if ([\n                    'upload',\n                    'write',\n                    'mkdir',\n                    'copy',\n                    'move',\n                    'unlink'\n                ].indexOf(method) !== -1) {\n                const arg = method === 'move' ? {\n                    source: args[0] instanceof FileMetadata ? args[0] : null,\n                    destination: args[1] instanceof FileMetadata ? args[1] : null\n                } : args[method === 'copy' ? 1 : 0];\n                VFS.triggerWatch(method, arg, appRef);\n            }\n            return super.onVFSRequestCompleted(...arguments);\n        }\n    };\n});\ndefine('skylark-osjsv2-client/core/connections/standalone',[\n    './http'\n], function (HttpConnection) {\n    'use strict';\n    return class StandaloneConnection extends HttpConnection {\n        createRequest(method, args, options) {\n            if (method === 'packages') {\n                return Promise.resolve({ result: OSjs.getManifest() });\n            }\n            return Promise.reject(new Error('You are currently running locally and cannot perform this operation!'));\n        }\n    };\n});\ndefine('skylark-osjsv2-client/core/connections/ws',[\n    '../config',\n    '../locales',\n    '../../vfs/fs',\n    '../../vfs/file',\n    '../connection'\n], function (a, b, VFS, FileMetadata, Connection) {\n    'use strict';\n    return class WSConnection extends Connection {\n        constructor() {\n            super(...arguments);\n            const port = a.getConfig('Connection.WSPort');\n            const path = a.getConfig('Connection.WSPath') || '';\n            let url = window.location.protocol.replace('http', 'ws') + '//' + window.location.host;\n            if (port !== 'upgrade') {\n                if (url.match(/:\\d+$/)) {\n                    url = url.replace(/:\\d+$/, '');\n                }\n                url += ':' + port;\n            }\n            url += path;\n            this.ws = null;\n            this.wsurl = url;\n            this.wsqueue = {};\n            this.destroying = false;\n        }\n        destroy() {\n            if (!this.destroying) {\n                if (this.ws) {\n                    this.ws.close();\n                }\n                this.ws = null;\n                this.wsqueue = {};\n            }\n            this.destroying = true;\n            return super.destroy.apply(this, arguments);\n        }\n        init() {\n            this.destroying = false;\n            return new Promise((resolve, reject) => {\n                this._connect(false, (err, res) => {\n                    if (err) {\n                        reject(err instanceof Error ? err : new Error(err));\n                    } else {\n                        resolve(res);\n                    }\n                });\n            });\n        }\n        _connect(reconnect, callback) {\n            if (this.destroying || this.ws && !reconnect) {\n                return;\n            }\n            console.info('Trying WebSocket Connection', this.wsurl);\n            let connected = false;\n            this.ws = new WebSocket(this.wsurl);\n            this.ws.onopen = function (ev) {\n                connected = true;\n                setTimeout(() => callback(false), 0);\n            };\n            this.ws.onmessage = ev => {\n                console.debug('websocket open', ev);\n                const data = JSON.parse(ev.data);\n                const idx = data._index;\n                this._onmessage(idx, data);\n            };\n            this.ws.onerror = ev => {\n                console.error('websocket error', ev);\n            };\n            this.ws.onclose = ev => {\n                console.debug('websocket close', ev);\n                if (!connected && ev.code !== 3001) {\n                    callback(b._('CONNECTION_ERROR'));\n                    return;\n                }\n                this._onclose();\n            };\n        }\n        _onmessage(idx, data) {\n            if (typeof idx === 'undefined') {\n                this.message(data);\n            } else {\n                if (this.wsqueue[idx]) {\n                    delete data._index;\n                    this.wsqueue[idx](false, data);\n                    delete this.wsqueue[idx];\n                }\n            }\n        }\n        _onclose(reconnecting) {\n            if (this.destroying) {\n                return;\n            }\n            this.onOffline(reconnecting);\n            this.ws = null;\n            setTimeout(() => {\n                this._connect(true, err => {\n                    if (err) {\n                        this._onclose((reconnecting || 0) + 1);\n                    } else {\n                        this.onOnline();\n                    }\n                });\n            }, reconnecting ? 10000 : 1000);\n        }\n        message(data) {\n            if (data.action === 'vfs:watch') {\n                VFS.triggerWatch(data.args.event, new FileMetadata(data.args.file));\n            }\n            if (this._evHandler) {\n                this._evHandler.emit(data.action, data.args);\n            }\n        }\n        createRequest(method, args, options) {\n            if (!this.ws) {\n                return Promise.reject(new Error('No websocket connection'));\n            }\n            if ([\n                    'FS:upload',\n                    'FS:get',\n                    'logout'\n                ].indexOf(method) !== -1) {\n                return super.createRequest(...arguments);\n            }\n            const idx = this.index++;\n            const base = method.match(/^FS:/) ? '/FS/' : '/API/';\n            try {\n                this.ws.send(JSON.stringify({\n                    _index: idx,\n                    path: base + method.replace(/^FS:/, ''),\n                    args: args\n                }));\n            } catch (e) {\n                return Promise.reject(e);\n            }\n            return new Promise((resolve, reject) => {\n                this.wsqueue[idx] = function (err, res) {\n                    return err ? reject(err) : resolve(res);\n                };\n            });\n        }\n    };\n});\ndefine('skylark-osjsv2-client/core/storage/database',[\n\t'../storage'\n], function (Storage) {\n    'use strict';\n    return class DatabaseStorage extends Storage {\n    };\n});\ndefine('skylark-osjsv2-client/core/storage/demo',[\n    '../config',\n    '../storage'\n], function (a, Storage) {\n    'use strict';\n    return class DemoStorage extends Storage {\n        init() {\n            const curr = a.getConfig('Version');\n            const version = localStorage.getItem('__version__');\n            if (curr !== version) {\n                localStorage.clear();\n            }\n            localStorage.setItem('__version__', String(curr));\n            return Promise.resolve();\n        }\n        saveSettings(pool, storage) {\n            Object.keys(storage).forEach(key => {\n                if (pool && key !== pool) {\n                    return;\n                }\n                try {\n                    localStorage.setItem('OSjs/' + key, JSON.stringify(storage[key]));\n                } catch (e) {\n                    console.warn('DemoStorage::settings()', e, e.stack);\n                }\n            });\n            return Promise.resolve();\n        }\n    };\n});\ndefine('skylark-osjsv2-client/core/storage/standalone',[\n\t'./demo'\n], function (DemoStorage) {\n    'use strict';\n    return class StandaloneStorage extends DemoStorage {\n    };\n});\ndefine('skylark-osjsv2-client/core/storage/system',[\n\t'../storage'\n], function (Storage) {\n    'use strict';\n    return class SystemStorage extends Storage {\n    };\n});\ndefine('skylark-osjsv2-client/gui/elements/containers',[\n    '../../utils/gui',\n    '../../utils/events',\n    '../element'\n], function (GUI, Events, GUIElement) {\n    'use strict';\n    function toggleState(el, expanded) {\n        if (typeof expanded === 'undefined') {\n            expanded = el.getAttribute('data-expanded') !== 'false';\n            expanded = !expanded;\n        }\n        el.setAttribute('aria-expanded', String(expanded));\n        el.setAttribute('data-expanded', String(expanded));\n        return expanded;\n    }\n    class GUIPanedView extends GUIElement {\n        static register() {\n            return super.register({\n                tagName: 'gui-paned-view',\n                type: 'container',\n                allowedChildren: ['gui-paned-view-container']\n            }, this);\n        }\n        on(evName, callback, params) {\n            const el = this.$element;\n            if (evName === 'resize') {\n                evName = '_' + evName;\n            }\n            Events.$bind(el, evName, callback.bind(this), params);\n            return this;\n        }\n        build() {\n            const el = this.$element;\n            const orient = el.getAttribute('data-orientation') || 'horizontal';\n            function bindResizer(resizer, idx, cel) {\n                const resizeEl = resizer.previousElementSibling;\n                if (!resizeEl) {\n                    return;\n                }\n                let startWidth = resizeEl.offsetWidth;\n                let startHeight = resizeEl.offsetHeight;\n                let minSize = 16;\n                let maxSize = Number.MAX_VALUE;\n                GUI.createDrag(resizer, ev => {\n                    startWidth = resizeEl.offsetWidth;\n                    startHeight = resizeEl.offsetHeight;\n                    minSize = parseInt(cel.getAttribute('data-min-size'), 10) || minSize;\n                    const max = parseInt(cel.getAttribute('data-max-size'), 10);\n                    if (!max) {\n                        const totalSize = resizer.parentNode[orient === 'horizontal' ? 'offsetWidth' : 'offsetHeight'];\n                        const totalContainers = resizer.parentNode.querySelectorAll('gui-paned-view-container').length;\n                        const totalSpacers = resizer.parentNode.querySelectorAll('gui-paned-view-handle').length;\n                        maxSize = totalSize - totalContainers * 16 - totalSpacers * 8;\n                    }\n                }, (ev, diff) => {\n                    const newWidth = startWidth + diff.x;\n                    const newHeight = startHeight + diff.y;\n                    let flex;\n                    if (orient === 'horizontal') {\n                        if (!isNaN(newWidth) && newWidth > 0 && newWidth >= minSize && newWidth <= maxSize) {\n                            flex = newWidth.toString() + 'px';\n                        }\n                    } else {\n                        if (!isNaN(newHeight) && newHeight > 0 && newHeight >= minSize && newHeight <= maxSize) {\n                            flex = newHeight.toString() + 'px';\n                        }\n                    }\n                    if (flex) {\n                        resizeEl.style.webkitFlexBasis = flex;\n                        resizeEl.style.mozFflexBasis = flex;\n                        resizeEl.style.msFflexBasis = flex;\n                        resizeEl.style.oFlexBasis = flex;\n                        resizeEl.style.flexBasis = flex;\n                    }\n                }, ev => {\n                    el.dispatchEvent(new CustomEvent('_resize', { detail: { index: idx } }));\n                });\n            }\n            el.querySelectorAll('gui-paned-view-container').forEach((cel, idx) => {\n                if (idx % 2) {\n                    const resizer = document.createElement('gui-paned-view-handle');\n                    resizer.setAttribute('role', 'separator');\n                    cel.parentNode.insertBefore(resizer, cel);\n                    bindResizer(resizer, idx, cel);\n                }\n            });\n            return this;\n        }\n    }\n    class GUIPanedViewContainer extends GUIElement {\n        static register() {\n            return super.register({\n                tagName: 'gui-paned-view-container',\n                type: 'container',\n                allowedParents: ['gui-paned-view']\n            }, this);\n        }\n        build() {\n            GUI.setFlexbox(this.$element);\n            return this;\n        }\n    }\n    class GUIButtonBar extends GUIElement {\n        static register() {\n            return super.register({\n                tagName: 'gui-button-bar',\n                type: 'container'\n            }, this);\n        }\n        build() {\n            this.$element.setAttribute('role', 'toolbar');\n            return this;\n        }\n    }\n    class GUIToolBar extends GUIElement {\n        static register() {\n            return super.register({\n                tagName: 'gui-toolbar',\n                type: 'container'\n            }, this);\n        }\n        build() {\n            this.$element.setAttribute('role', 'toolbar');\n            return this;\n        }\n    }\n    class GUIGrid extends GUIElement {\n        static register() {\n            return super.register({\n                tagName: 'gui-grid',\n                type: 'container',\n                allowedChildren: ['gui-grid-row']\n            }, this);\n        }\n        build() {\n            const rows = this.$element.querySelectorAll('gui-grid-row');\n            const p = 100 / rows.length;\n            rows.forEach(r => {\n                r.style.height = String(p) + '%';\n            });\n            return this;\n        }\n    }\n    class GUIGridRow extends GUIElement {\n        static register() {\n            return super.register({\n                tagName: 'gui-grid-row',\n                type: 'container',\n                allowedChildren: ['gui-grid-entry'],\n                allowedParents: ['gui-grid-row']\n            }, this);\n        }\n    }\n    class GUIGridEntry extends GUIElement {\n        static register() {\n            return super.register({\n                tagName: 'gui-grid-entry',\n                type: 'container',\n                allowedParents: ['gui-grid-row']\n            }, this);\n        }\n    }\n    class GUIVBox extends GUIElement {\n        static register() {\n            return super.register({\n                tagName: 'gui-vbox',\n                type: 'container',\n                allowedChildren: ['gui-vbox-container']\n            }, this);\n        }\n    }\n    class GUIVBoxContainer extends GUIElement {\n        static register() {\n            return super.register({\n                tagName: 'gui-vbox-container',\n                type: 'container',\n                allowedParents: ['gui-vbox']\n            }, this);\n        }\n        build() {\n            GUI.setFlexbox(this.$element);\n            return this;\n        }\n    }\n    class GUIHBox extends GUIElement {\n        static register() {\n            return super.register({\n                tagName: 'gui-hbox',\n                type: 'container',\n                allowedChildren: ['gui-hbox-container']\n            }, this);\n        }\n    }\n    class GUIHBoxContainer extends GUIElement {\n        static register() {\n            return super.register({\n                tagName: 'gui-hbox-container',\n                type: 'container',\n                allowedParents: ['gui-hbox']\n            }, this);\n        }\n        build() {\n            GUI.setFlexbox(this.$element);\n            return this;\n        }\n    }\n    class GUIExpander extends GUIElement {\n        static register() {\n            return super.register({\n                tagName: 'gui-expander',\n                type: 'container'\n            }, this);\n        }\n        set(param, value) {\n            if (param === 'expanded') {\n                return toggleState(this.$element, value === true);\n            }\n            return super.set(...arguments);\n        }\n        on(evName, callback, params) {\n            if (['change'].indexOf(evName) !== -1) {\n                evName = '_' + evName;\n            }\n            Events.$bind(this.$element, evName, callback.bind(this), params);\n            return this;\n        }\n        build() {\n            const el = this.$element;\n            const lbltxt = el.getAttribute('data-label') || '';\n            const label = document.createElement('gui-expander-label');\n            Events.$bind(label, 'pointerdown', ev => {\n                el.dispatchEvent(new CustomEvent('_change', { detail: { expanded: toggleState(el) } }));\n            }, false);\n            label.appendChild(document.createTextNode(lbltxt));\n            el.setAttribute('role', 'toolbar');\n            el.setAttribute('aria-expanded', 'true');\n            el.setAttribute('data-expanded', 'true');\n            if (el.children.length) {\n                el.insertBefore(label, el.children[0]);\n            } else {\n                el.appendChild(label);\n            }\n            return this;\n        }\n    }\n    return {\n        GUIPanedView: GUIPanedView,\n        GUIPanedViewContainer: GUIPanedViewContainer,\n        GUIButtonBar: GUIButtonBar,\n        GUIToolBar: GUIToolBar,\n        GUIGrid: GUIGrid,\n        GUIGridRow: GUIGridRow,\n        GUIGridEntry: GUIGridEntry,\n        GUIVBox: GUIVBox,\n        GUIVBoxContainer: GUIVBoxContainer,\n        GUIHBox: GUIHBox,\n        GUIHBoxContainer: GUIHBoxContainer,\n        GUIExpander: GUIExpander\n    };\n});\ndefine('skylark-osjsv2-client/utils/clipboard',[],function () {\n    'use strict';\n    let _CLIPBOARD;\n    function setClipboard(data) {\n        console.debug('setClipboard()', data);\n        _CLIPBOARD = data;\n    }\n    function getClipboard() {\n        return _CLIPBOARD;\n    }\n    return {\n        setClipboard: setClipboard,\n        getClipboard: getClipboard\n    };\n});\ndefine('skylark-osjsv2-client/gui/dataview',[\n    '../utils/gui',\n    '../utils/dom',\n    '../utils/events',\n    '../utils/clipboard',\n    '../utils/keycodes',\n    '../vfs/file',\n    './element'\n], function (GUI, DOM, Events, Clipboard, Keycodes, FileMetadata, GUIElement) {\n    'use strict';\n    const _classMap = { 'gui-list-view': 'gui-list-view-row' };\n    function getEntryTagName(type) {\n        if (typeof type !== 'string') {\n            type = type.tagName.toLowerCase();\n        }\n        let className = _classMap[type];\n        if (!className) {\n            className = type + '-entry';\n        }\n        return className;\n    }\n    function getEntryFromEvent(ev, header) {\n        const t = ev.target;\n        const tn = t.tagName.toLowerCase();\n        if (tn.match(/(view|textarea|body)$/)) {\n            return null;\n        } else if (tn === 'gui-list-view-column' && !header) {\n            return t.parentNode;\n        }\n        return t;\n    }\n    function isHeader(ev, row) {\n        row = row || getEntryFromEvent(ev);\n        return row && row.parentNode.tagName === 'GUI-LIST-VIEW-HEAD';\n    }\n    function handleItemSelection(ev, item, idx, className, selected, root, multipleSelect) {\n        root = root || item.parentNode;\n        if (isHeader(null, item)) {\n            return multipleSelect ? [] : null;\n        }\n        if (idx === -1) {\n            root.querySelectorAll(getEntryTagName(root)).forEach(function (e) {\n                DOM.$removeClass(e, 'gui-active');\n            });\n            selected = [];\n        } else {\n            if (!multipleSelect || !ev.shiftKey) {\n                root.querySelectorAll(className).forEach(function (i) {\n                    DOM.$removeClass(i, 'gui-active');\n                });\n                selected = [];\n            }\n            const findex = selected.indexOf(idx);\n            if (findex >= 0) {\n                selected.splice(findex, 1);\n                DOM.$removeClass(item, 'gui-active');\n            } else {\n                selected.push(idx);\n                DOM.$addClass(item, 'gui-active');\n            }\n        }\n        selected.sort(function (a, b) {\n            return a - b;\n        });\n        return selected;\n    }\n    function handleKeyPress(cls, el, ev) {\n        const map = {};\n        const key = ev.keyCode;\n        const type = el.tagName.toLowerCase();\n        const className = getEntryTagName(type);\n        const root = el.querySelector(type + '-body');\n        const entries = root.querySelectorAll(className);\n        const count = entries.length;\n        if (!count) {\n            return;\n        }\n        if (key === Keycodes.ENTER) {\n            el.dispatchEvent(new CustomEvent('_activate', { detail: { entries: cls.values() } }));\n            return;\n        }\n        map[Keycodes.C] = function (ev) {\n            if (ev.ctrlKey) {\n                const selected = cls.values();\n                if (selected && selected.length) {\n                    const data = [];\n                    selected.forEach(function (s) {\n                        if (s && s.data) {\n                            data.push(new FileMetadata(s.data.path, s.data.mime));\n                        }\n                    });\n                    Clipboard.setClipboard(data);\n                }\n            }\n        };\n        const selected = el._selected.concat() || [];\n        const first = selected.length ? selected[0] : 0;\n        const last = selected.length > 1 ? selected[selected.length - 1] : first;\n        let current = 0;\n        function select() {\n            const item = entries[current];\n            if (item) {\n                el._selected = handleItemSelection(ev, item, current, className, selected, root, ev.shiftKey);\n                cls.scrollIntoView(item);\n            }\n        }\n        function getRowSize() {\n            let d = 0;\n            let lastTop = -1;\n            entries.forEach(function (e) {\n                if (lastTop === -1) {\n                    lastTop = e.offsetTop;\n                }\n                if (lastTop !== e.offsetTop) {\n                    return false;\n                }\n                lastTop = e.offsetTop;\n                d++;\n                return true;\n            });\n            return d;\n        }\n        function handleKey() {\n            function next() {\n                current = Math.min(last + 1, count);\n                select();\n            }\n            function prev() {\n                current = Math.max(0, first - 1);\n                select();\n            }\n            if (type === 'gui-tree-view' || type === 'gui-list-view') {\n                map[Keycodes.UP] = prev;\n                map[Keycodes.DOWN] = next;\n            } else {\n                map[Keycodes.UP] = function () {\n                    current = Math.max(0, first - getRowSize());\n                    select();\n                };\n                map[Keycodes.DOWN] = function () {\n                    current = Math.max(last, last + getRowSize());\n                    select();\n                };\n                map[Keycodes.LEFT] = prev;\n                map[Keycodes.RIGHT] = next;\n            }\n            if (map[key]) {\n                map[key](ev);\n            }\n        }\n        handleKey();\n    }\n    function getValueParameter(r) {\n        const value = r.getAttribute('data-value');\n        try {\n            return JSON.parse(value);\n        } catch (e) {\n        }\n        return value;\n    }\n    function matchValueByKey(r, val, key, idx) {\n        const value = r.getAttribute('data-value');\n        if (!key && (val === idx || val === value)) {\n            return r;\n        } else {\n            try {\n                const json = JSON.parse(value);\n                if (typeof json[key] === 'object' ? json[key] === val : String(json[key]) === String(val)) {\n                    return r;\n                }\n            } catch (e) {\n            }\n        }\n        return false;\n    }\n    return class UIDataView extends GUIElement {\n        clear(body) {\n            const el = this.$element;\n            if (!arguments.length) {\n                body = el;\n            }\n            el.querySelectorAll(getEntryTagName(el)).forEach(row => {\n                Events.$unbind(row);\n            });\n            DOM.$empty(body);\n            body.scrollTop = 0;\n            el._selected = [];\n            return this;\n        }\n        add(entries, oncreate) {\n            oncreate = oncreate || function () {\n            };\n            if (!(entries instanceof Array)) {\n                entries = [entries];\n            }\n            entries.forEach(el => {\n                oncreate(this, el);\n            });\n            return this;\n        }\n        patch(entries, className, body, oncreate, oninit) {\n            let single = false;\n            if (!(entries instanceof Array)) {\n                entries = [entries];\n                single = true;\n            }\n            let inView = {};\n            body.querySelectorAll(className).forEach(row => {\n                const id = row.getAttribute('data-id');\n                if (id !== null) {\n                    inView[id] = row;\n                }\n            });\n            entries.forEach(entry => {\n                let insertBefore;\n                if (typeof entry.id !== 'undefined' && entry.id !== null) {\n                    if (inView[entry.id]) {\n                        insertBefore = inView[entry.id];\n                        delete inView[entry.id];\n                    }\n                    const row = oncreate(this, entry);\n                    if (row) {\n                        if (insertBefore) {\n                            if (DOM.$hasClass(insertBefore, 'gui-active')) {\n                                DOM.$addClass(row, 'gui-active');\n                            }\n                            body.insertBefore(row, insertBefore);\n                            UIDataView.prototype.remove.call(this, null, className, insertBefore, body);\n                        } else {\n                            body.appendChild(row);\n                        }\n                        oninit(this, row);\n                    }\n                }\n            });\n            if (!single) {\n                Object.keys(inView).forEach(k => {\n                    UIDataView.prototype.remove.call(this, null, className, inView[k]);\n                });\n            }\n            inView = {};\n            this.updateActiveSelection(className);\n            return this;\n        }\n        remove(args, className, target, parentEl) {\n            args = args || [];\n            parentEl = parentEl || this.$element;\n            if (target) {\n                DOM.$remove(target);\n            } else if (typeof args[1] === 'undefined' && typeof args[0] === 'number') {\n                DOM.$remove(parentEl.querySelectorAll(className)[args[0]]);\n            } else {\n                const findId = args[0];\n                const findKey = args[1] || 'id';\n                const q = 'data-' + findKey + '=\"' + findId + '\"';\n                parentEl.querySelectorAll(className + '[' + q + ']').forEach(DOM.$remove);\n            }\n            this.updateActiveSelection(className);\n            return this;\n        }\n        updateActiveSelection(className) {\n            const active = [];\n            this.$element.querySelectorAll(className + '.gui-active').forEach(cel => {\n                active.push(DOM.$index(cel));\n            });\n            this.$element._active = active;\n        }\n        scrollIntoView(element) {\n            const el = this.$element;\n            const pos = DOM.$position(element, el);\n            let marginTop = 0;\n            if (el.tagName.toLowerCase() === 'gui-list-view') {\n                const header = el.querySelector('gui-list-view-head');\n                if (header) {\n                    marginTop = header.offsetHeight;\n                }\n            }\n            const scrollSpace = el.scrollTop + el.offsetHeight - marginTop;\n            const scrollTop = el.scrollTop + marginTop;\n            const elTop = pos.top - marginTop;\n            if (pos !== null && (elTop > scrollSpace || elTop < scrollTop)) {\n                el.scrollTop = elTop;\n                return true;\n            }\n            return false;\n        }\n        bindEntryEvents(row, className) {\n            const el = this.$element;\n            function createDraggable() {\n                let value = row.getAttribute('data-value');\n                if (value !== null) {\n                    try {\n                        value = JSON.parse(value);\n                    } catch (e) {\n                    }\n                }\n                let source = row.getAttribute('data-draggable-source');\n                if (source === null) {\n                    source = GUI.getWindowId(el);\n                    if (source !== null) {\n                        source = { wid: source };\n                    }\n                }\n                GUI.createDraggable(row, {\n                    type: el.getAttribute('data-draggable-type') || row.getAttribute('data-draggable-type'),\n                    source: source,\n                    data: value\n                });\n                let tooltip = row.getAttribute('data-tooltip');\n                if (tooltip && !row.getAttribute('title')) {\n                    row.setAttribute('title', tooltip);\n                }\n            }\n            el.dispatchEvent(new CustomEvent('_render', {\n                detail: {\n                    element: row,\n                    data: GUI.getViewNodeValue(row)\n                }\n            }));\n            if (el.getAttribute('data-draggable') === 'true') {\n                createDraggable();\n            }\n        }\n        getSelected(entries) {\n            const selected = [];\n            entries.forEach((iter, idx) => {\n                if (DOM.$hasClass(iter, 'gui-active')) {\n                    selected.push({\n                        index: idx,\n                        data: GUI.getViewNodeValue(iter)\n                    });\n                }\n            });\n            return selected;\n        }\n        getEntry(entries, val, key, asValue) {\n            if (val) {\n                let result = null;\n                entries.forEach((r, idx) => {\n                    if (!result && matchValueByKey(r, val, key, idx)) {\n                        result = r;\n                    }\n                });\n                return asValue && result ? getValueParameter(result) : result;\n            }\n            if (asValue && entries) {\n                try {\n                    return entries.map(iter => {\n                        return getValueParameter(iter);\n                    });\n                } catch (e) {\n                    console.warn(e);\n                }\n            }\n            return entries;\n        }\n        setSelected(body, entries, val, key, opts) {\n            const select = [];\n            const el = this.$element;\n            let scrollIntoView = false;\n            if (typeof opts === 'object') {\n                scrollIntoView = opts.scroll === true;\n            }\n            const sel = (r, idx) => {\n                select.push(idx);\n                DOM.$addClass(r, 'gui-active');\n                if (scrollIntoView) {\n                    this.scrollIntoView(r);\n                }\n            };\n            entries.forEach((r, idx) => {\n                DOM.$removeClass(r, 'gui-active');\n                if (matchValueByKey(r, val, key, idx)) {\n                    sel(r, idx);\n                }\n            });\n            el._selected = select;\n        }\n        build(applyArgs) {\n            const el = this.$element;\n            el._selected = [];\n            el.scrollTop = 0;\n            DOM.$addClass(el, 'gui-data-view');\n            const singleClick = el.getAttribute('data-single-click') === 'true';\n            let moved;\n            let wasResized = false;\n            let multipleSelect = el.getAttribute('data-multiple');\n            multipleSelect = multipleSelect === null || multipleSelect === 'true';\n            const select = ev => {\n                if (moved || wasResized) {\n                    return false;\n                }\n                const row = getEntryFromEvent(ev);\n                if (!row) {\n                    return false;\n                }\n                const className = row.tagName.toLowerCase();\n                if (isHeader(null, row)) {\n                    const col = getEntryFromEvent(ev, true);\n                    if (col) {\n                        let sortBy = col.getAttribute('data-sortby');\n                        if (sortBy) {\n                            let sortDir = col.getAttribute('data-sortdir');\n                            let resetDir = sortDir === 'desc';\n                            sortDir = sortDir === 'asc' ? 'desc' : resetDir ? null : 'asc';\n                            sortBy = resetDir ? null : sortBy;\n                            col.setAttribute('data-sortdir', sortDir);\n                            el.setAttribute('data-sortby', sortBy || '');\n                            el.setAttribute('data-sortdir', sortDir || '');\n                            el.dispatchEvent(new CustomEvent('_sort', {\n                                detail: {\n                                    sortDir: sortDir,\n                                    sortBy: sortBy\n                                }\n                            }));\n                        }\n                    }\n                    return false;\n                }\n                if (className === 'gui-tree-view-expander') {\n                    this.expand({\n                        ev: ev,\n                        entry: row.parentNode\n                    });\n                    return true;\n                }\n                const idx = DOM.$index(row);\n                el._selected = handleItemSelection(ev, row, idx, className, el._selected, el, multipleSelect);\n                el.dispatchEvent(new CustomEvent('_select', { detail: { entries: this.values() } }));\n                return true;\n            };\n            const activate = ev => {\n                if (moved || isHeader(ev)) {\n                    return;\n                }\n                if (singleClick) {\n                    if (select(ev) === false) {\n                        return;\n                    }\n                } else {\n                    if (!getEntryFromEvent(ev)) {\n                        return;\n                    }\n                }\n                el.dispatchEvent(new CustomEvent('_activate', { detail: { entries: this.values() } }));\n            };\n            const context = ev => {\n                if (isHeader(ev)) {\n                    return;\n                }\n                select(ev);\n                el.dispatchEvent(new CustomEvent('_contextmenu', {\n                    detail: {\n                        entries: this.values(),\n                        x: ev.clientX,\n                        y: ev.clientY\n                    }\n                }));\n            };\n            if (!el.querySelector('textarea.gui-focus-element') && !el.getAttribute('no-selection')) {\n                const underlay = document.createElement('textarea');\n                underlay.setAttribute('aria-label', '');\n                underlay.setAttribute('aria-hidden', 'true');\n                underlay.setAttribute('readonly', 'true');\n                underlay.className = 'gui-focus-element';\n                Events.$bind(underlay, 'focus', ev => {\n                    ev.preventDefault();\n                    DOM.$addClass(el, 'gui-element-focused');\n                });\n                Events.$bind(underlay, 'blur', ev => {\n                    ev.preventDefault();\n                    DOM.$removeClass(el, 'gui-element-focused');\n                });\n                Events.$bind(underlay, 'keydown', ev => {\n                    ev.preventDefault();\n                    handleKeyPress(this, el, ev);\n                });\n                Events.$bind(underlay, 'keypress', ev => {\n                    ev.preventDefault();\n                });\n                Events.$bind(el, 'pointerdown,touchstart', ev => {\n                    moved = false;\n                    const target = ev.target;\n                    wasResized = target && target.tagName === 'GUI-LIST-VIEW-COLUMN-RESIZER';\n                }, true);\n                Events.$bind(el, 'touchmove', ev => {\n                    moved = true;\n                }, true);\n                if (singleClick) {\n                    Events.$bind(el, 'click', activate, true);\n                } else {\n                    Events.$bind(el, 'click', select, true);\n                    Events.$bind(el, 'dblclick', activate, true);\n                }\n                Events.$bind(el, 'contextmenu', ev => {\n                    ev.preventDefault();\n                    context(ev);\n                    return false;\n                }, true);\n                this.on('select', ev => {\n                    if (DOM.$hasClass(el, 'gui-element-focused')) {\n                        return;\n                    }\n                    const oldTop = el.scrollTop;\n                    underlay.focus();\n                    el.scrollTop = oldTop;\n                    setTimeout(() => {\n                        el.scrollTop = oldTop;\n                    }, 2);\n                }, true);\n                el.appendChild(underlay);\n            }\n        }\n        focus() {\n            try {\n                const underlay = this.$element.querySelector('.gui-focus-element');\n                underlay.focus();\n            } catch (e) {\n                console.warn(e, e.stack);\n            }\n        }\n        blur() {\n            try {\n                const underlay = this.$element.querySelector('.gui-focus-element');\n                underlay.blur();\n            } catch (e) {\n                console.warn(e, e.stack);\n            }\n        }\n        values() {\n            return [];\n        }\n        on(evName, callback, params) {\n            if ([\n                    'activate',\n                    'select',\n                    'expand',\n                    'contextmenu',\n                    'render',\n                    'drop',\n                    'sort'\n                ].indexOf(evName) !== -1) {\n                evName = '_' + evName;\n            }\n            Events.$bind(this.$element, evName, callback.bind(this), params);\n            return this;\n        }\n    };\n});\ndefine('skylark-osjsv2-client/helpers/date',[],function () {\n    'use strict';\n    class ExtendedDate {\n        constructor(date) {\n            if (date) {\n                if (date instanceof Date) {\n                    this.date = date;\n                } else if (date instanceof ExtendedDate) {\n                    this.date = date.date;\n                } else if (typeof date === 'string') {\n                    this.date = new Date(date);\n                }\n            }\n            if (!this.date) {\n                this.date = new Date();\n            }\n        }\n        static get config() {\n            return { defaultFormat: 'isoDateTime' };\n        }\n        static get dayNames() {\n            return [\n                'Sun',\n                'Mon',\n                'Tue',\n                'Wed',\n                'Thu',\n                'Fri',\n                'Sat',\n                'Sunday',\n                'Monday',\n                'Tuesday',\n                'Wednesday',\n                'Thursday',\n                'Friday',\n                'Saturday'\n            ];\n        }\n        static get monthNames() {\n            return [\n                'Jan',\n                'Feb',\n                'Mar',\n                'Apr',\n                'May',\n                'Jun',\n                'Jul',\n                'Aug',\n                'Sep',\n                'Oct',\n                'Nov',\n                'Dec',\n                'January',\n                'February',\n                'March',\n                'April',\n                'May',\n                'June',\n                'July',\n                'August',\n                'September',\n                'October',\n                'November',\n                'December'\n            ];\n        }\n        get() {\n            return this.date;\n        }\n        format(fmt) {\n            return ExtendedDate.format(this, fmt);\n        }\n        getFirstDayInMonth(fmt) {\n            return ExtendedDate.getFirstDayInMonth(fmt, null, null, this);\n        }\n        getLastDayInMonth(fmt) {\n            return ExtendedDate.getLastDayInMonth(fmt, null, null, this);\n        }\n        getDaysInMonth() {\n            return ExtendedDate.getDaysInMonth(null, null, this);\n        }\n        getWeekNumber() {\n            return ExtendedDate.getWeekNumber(this);\n        }\n        isWithinMonth(from, to) {\n            return ExtendedDate.isWithinMonth(this, from, to);\n        }\n        getDayOfTheYear() {\n            return ExtendedDate.getDayOfTheYear();\n        }\n        static format(date, fmt) {\n            return format(fmt, date);\n        }\n        static getPreviousMonth(now) {\n            now = now ? now instanceof ExtendedDate ? now.date : now : new Date();\n            let current;\n            if (now.getMonth() === 0) {\n                current = new Date(now.getFullYear() - 1, 11, now.getDate());\n            } else {\n                current = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());\n            }\n            return new ExtendedDate(current);\n        }\n        static getNextMonth(now) {\n            now = now ? now instanceof ExtendedDate ? now.date : now : new Date();\n            let current;\n            if (now.getMonth() === 11) {\n                current = new Date(now.getFullYear() + 1, 0, now.getDate());\n            } else {\n                current = new Date(now.getFullYear(), now.getMonth() + 1, now.getDate());\n            }\n            return new ExtendedDate(current);\n        }\n        static getFirstDayInMonth(fmt, y, m, now) {\n            now = _now(now);\n            y = _y(y, now);\n            m = _m(m, now);\n            const date = new Date();\n            date.setFullYear(y, m, 1);\n            if (fmt === true) {\n                return date.getDate();\n            }\n            return fmt ? format(fmt, date) : new ExtendedDate(date);\n        }\n        static getLastDayInMonth(fmt, y, m, now) {\n            now = _now(now);\n            y = _y(y, now);\n            m = _m(m, now);\n            const date = new Date();\n            date.setFullYear(y, m, 0);\n            if (fmt === true) {\n                return date.getDate();\n            }\n            return fmt ? format(fmt, date) : new ExtendedDate(date);\n        }\n        static getDaysInMonth(y, m, now) {\n            now = _now(now);\n            y = _y(y, now);\n            m = _m(m, now);\n            const date = new Date();\n            date.setFullYear(y, m, 0);\n            return parseInt(date.getDate(), 10);\n        }\n        static getWeekNumber(now) {\n            now = now ? now instanceof ExtendedDate ? now.date : now : new Date();\n            const d = new Date(+now);\n            d.setHours(0, 0, 0);\n            d.setDate(d.getDate() + 4 - (d.getDay() || 7));\n            return Math.ceil(((d - new Date(d.getFullYear(), 0, 1)) / 86400000 + 1) / 7);\n        }\n        static getDayName(index, shrt) {\n            if (index < 0 || index === null || typeof index === 'undefined') {\n                return filter(ExtendedDate.dayNames, index, shrt, 7);\n            }\n            shrt = shrt ? 0 : 1;\n            const idx = index + (shrt + 7);\n            return ExtendedDate.dayNames[idx];\n        }\n        static getMonthName(index, shrt) {\n            if (index < 0 || index === null || typeof index === 'undefined') {\n                return filter(ExtendedDate.monthNames, index, shrt, 12);\n            }\n            shrt = shrt ? 0 : 1;\n            const idx = index + (shrt + 12);\n            return ExtendedDate.monthNames[idx];\n        }\n        static isWithinMonth(now, from, to) {\n            if (now.getFullYear() >= from.getFullYear() && now.getMonth() >= from.getMonth()) {\n                if (now.getFullYear() <= to.getFullYear() && now.getMonth() <= to.getMonth()) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        static getDayOfTheYear() {\n            const now = new Date();\n            const start = new Date(now.getFullYear(), 0, 0);\n            const diff = now - start;\n            const oneDay = 1000 * 60 * 60 * 24;\n            return Math.floor(diff / oneDay);\n        }\n    };\n    const methods = [\n        'UTC',\n        'toString',\n        'now',\n        'parse',\n        'getDate',\n        'getDay',\n        'getFullYear',\n        'getHours',\n        'getMilliseconds',\n        'getMinutes',\n        'getMonth',\n        'getSeconds',\n        'getTime',\n        'getTimezoneOffset',\n        'getUTCDate',\n        'getUTCDay',\n        'getUTCFullYear',\n        'getUTCHours',\n        'getUTCMilliseconds',\n        'getUTCMinutes',\n        'getUTCMonth',\n        'getUTCSeconds',\n        'getYear',\n        'setDate',\n        'setFullYear',\n        'setHours',\n        'setMilliseconds',\n        'setMinutes',\n        'setMonth',\n        'setSeconds',\n        'setTime',\n        'setUTCDate',\n        'setUTCFullYear',\n        'setUTCHours',\n        'setUTCMilliseconds',\n        'setUTCMinutes',\n        'setUTCMonth',\n        'setUTCSeconds',\n        'setYear',\n        'toDateString',\n        'toGMTString',\n        'toISOString',\n        'toJSON',\n        'toLocaleDateString',\n        'toLocaleFormat',\n        'toLocaleString',\n        'toLocaleTimeString',\n        'toSource',\n        'toString',\n        'toTimeString',\n        'toUTCString',\n        'valueOf'\n    ];\n    methods.forEach(function (m) {\n        ExtendedDate.prototype[m] = function () {\n            return this.date[m].apply(this.date, arguments);\n        };\n    });\n    function formatDate(date, format, utc) {\n        utc = utc === true;\n        function pad(val, len) {\n            val = String(val);\n            len = len || 2;\n            while (val.length < len) {\n                val = '0' + val;\n            }\n            return val;\n        }\n        const defaultFormats = {\n            'default': 'Y-m-d H:i:s',\n            shortDate: 'm/d/y',\n            mediumDate: 'M d, Y',\n            longDate: 'F d, Y',\n            fullDate: 'l, F d, Y',\n            shortTime: 'h:i A',\n            mediumTime: 'h:i:s A',\n            longTime: 'h:i:s A T',\n            isoDate: 'Y-m-d',\n            isoTime: 'H:i:s',\n            isoDateTime: 'Y-m-d H:i:s'\n        };\n        format = defaultFormats[format] || format;\n        if (!(date instanceof ExtendedDate)) {\n            date = new ExtendedDate(date);\n        }\n        const map = {\n            d: function (s) {\n                return pad(map.j(s));\n            },\n            D: function (s) {\n                return ExtendedDate.dayNames[utc ? date.getUTCDay() : date.getDay()];\n            },\n            j: function (s) {\n                return utc ? date.getUTCDate() : date.getDate();\n            },\n            l: function (s) {\n                return ExtendedDate.dayNames[(utc ? date.getUTCDay() : date.getDay()) + 7];\n            },\n            w: function (s) {\n                return utc ? date.getUTCDay() : date.getDay();\n            },\n            z: function (s) {\n                return date.getDayOfTheYear();\n            },\n            S: function (s) {\n                const d = utc ? date.getUTCDate() : date.getDate();\n                return [\n                    'th',\n                    'st',\n                    'nd',\n                    'rd'\n                ][d % 10 > 3 ? 0 : (d % 100 - d % 10 !== 10) * d % 10];\n            },\n            W: function (s) {\n                return date.getWeekNumber();\n            },\n            F: function (s) {\n                return ExtendedDate.monthNames[(utc ? date.getUTCMonth() : date.getMonth()) + 12];\n            },\n            m: function (s) {\n                return pad(map.n(s));\n            },\n            M: function (s) {\n                return ExtendedDate.monthNames[utc ? date.getUTCMonth() : date.getMonth()];\n            },\n            n: function (s) {\n                return (utc ? date.getUTCMonth() : date.getMonth()) + 1;\n            },\n            t: function (s) {\n                return date.getDaysInMonth();\n            },\n            Y: function (s) {\n                return utc ? date.getUTCFullYear() : date.getFullYear();\n            },\n            y: function (s) {\n                return String(map.Y(s)).slice(2);\n            },\n            a: function (s) {\n                return map.G(s) < 12 ? 'am' : 'pm';\n            },\n            A: function (s) {\n                return map.a(s).toUpperCase();\n            },\n            g: function (s) {\n                return map.G(s) % 12 || 12;\n            },\n            G: function (s) {\n                return utc ? date.getUTCHours() : date.getHours();\n            },\n            h: function (s) {\n                return pad(map.g(s));\n            },\n            H: function (s) {\n                return pad(map.G(s));\n            },\n            i: function (s) {\n                return pad(utc ? date.getUTCMinutes() : date.getMinutes());\n            },\n            s: function (s) {\n                return pad(utc ? date.getUTCSeconds() : date.getSeconds());\n            },\n            O: function (s) {\n                const tzo = -date.getTimezoneOffset();\n                const dif = tzo >= 0 ? '+' : '-';\n                function ppad(num) {\n                    const norm = Math.abs(Math.floor(num));\n                    return (norm < 10 ? '0' : '') + norm;\n                }\n                const str = dif + ppad(tzo / 60) + ':' + ppad(tzo % 60);\n                return str;\n            },\n            T: function (s) {\n                if (utc) {\n                    return 'UTC';\n                }\n                const timezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g;\n                const zones = String(date.date).match(timezone) || [''];\n                return zones.pop().replace(/(\\+|\\-)[0-9]+$/, '');\n            },\n            U: function (s) {\n                return date.getTime();\n            }\n        };\n        const result = [];\n        format.split('').forEach(function (s) {\n            result.push(map[s] ? map[s]() : s);\n        });\n        return result.join('');\n    }\n\n    function filter(from, index, shrt, toindex) {\n        const list = [];\n        for (let i = shrt ? 0 : toindex; i < from.length; i++) {\n            list.push(from[i]);\n        }\n        return list;\n    }\n    function format(fmt, date) {\n        let utc;\n        if (typeof fmt === 'undefined' || !fmt) {\n            fmt = ExtendedDate.config.defaultFormat;\n        } else {\n            if (typeof fmt !== 'string') {\n                utc = fmt.utc;\n                fmt = fmt.format;\n            } else {\n                utc = ExtendedDate.config.utc;\n            }\n        }\n        return formatDate(date, fmt, utc);\n    }\n    function _now(now) {\n        return now ? now instanceof ExtendedDate ? now.date : now : new Date();\n    }\n    function _y(y, now) {\n        return typeof y === 'undefined' || y === null || y < 0 ? now.getFullYear() : y;\n    }\n    function _m(m, now) {\n        return typeof m === 'undefined' || m === null || m < 0 ? now.getMonth() : m;\n    }\n    return ExtendedDate;\n});\ndefine('skylark-osjsv2-client/gui/elements/fileview',[\n    '../../utils/fs',\n    '../../vfs/fs',\n    '../../utils/dom',\n    '../../utils/gui',\n    '../../utils/misc',\n    '../../utils/events',\n    '../menu',\n    '../element',\n    '../dataview',\n    '../../core/package-manager',\n    '../../core/settings-manager',\n    '../../vfs/file',\n    '../../helpers/date',\n    '../../core/theme',\n    '../../core/locales',\n    '../../core/config'\n], function (FS, VFS, DOM, GUI, Utils, Events, Menu, GUIElement, GUIDataView, PackageManager, SettingsManager, FileMetadata, DateExtended, Theme, a, b) {\n    'use strict';\n    let _iconSizes = { 'gui-icon-view': '32x32' };\n    function getFileIcon(iter, size) {\n        if (iter.icon && typeof iter.icon === 'object') {\n            if (iter.icon.application) {\n                return PackageManager.getPackageResource(iter.icon.filename, iter.icon.application);\n            }\n            return Theme.getIcon(iter.icon.filename, size, iter.icon.application);\n        }\n        const icon = 'status/dialog-question.png';\n        return Theme.getFileIcon(iter, size, icon);\n    }\n    function getFileSize(iter) {\n        let filesize = '';\n        if (iter.type !== 'dir' && iter.size >= 0) {\n            filesize = FS.humanFileSize(iter.size);\n        }\n        return filesize;\n    }\n    const removeExtension = (() => {\n        let mimeConfig;\n        return (str, opts) => {\n            if (!mimeConfig) {\n                mimeConfig = b.getConfig('MIME.mapping');\n            }\n            if (opts.extensions === false) {\n                let ext = FS.filext(str);\n                if (ext) {\n                    ext = '.' + ext;\n                    if (mimeConfig[ext]) {\n                        str = str.substr(0, str.length - ext.length);\n                    }\n                }\n            }\n            return str;\n        };\n    })();\n    function getDateFromStamp(stamp) {\n        if (typeof stamp === 'string') {\n            let date = null;\n            try {\n                date = new Date(stamp);\n            } catch (e) {\n            }\n            if (date) {\n                return DateExtended.format(date);\n            }\n        }\n        return stamp;\n    }\n    function getListViewColumns(cls, iter, opts) {\n        opts = opts || {};\n        const columnMapping = {\n            filename: {\n                label: 'LBL_FILENAME',\n                icon: () => {\n                    return getFileIcon(iter);\n                },\n                value: () => {\n                    return removeExtension(iter.filename, opts);\n                }\n            },\n            mime: {\n                label: 'LBL_MIME',\n                size: '100px',\n                icon: () => {\n                    return null;\n                },\n                value: () => {\n                    return iter.mime;\n                }\n            },\n            mtime: {\n                label: 'LBL_MODIFIED',\n                size: '160px',\n                icon: () => {\n                    return null;\n                },\n                value: () => {\n                    return getDateFromStamp(iter.mtime);\n                }\n            },\n            ctime: {\n                label: 'LBL_CREATED',\n                size: '160px',\n                icon: () => {\n                    return null;\n                },\n                value: () => {\n                    return getDateFromStamp(iter.ctime);\n                }\n            },\n            size: {\n                label: 'LBL_SIZE',\n                size: '120px',\n                icon: () => {\n                    return null;\n                },\n                value: () => {\n                    return getFileSize(iter);\n                }\n            }\n        };\n        let defColumns = [\n            'filename',\n            'mime',\n            'size'\n        ];\n        let useColumns = defColumns;\n        if (!opts.defaultcolumns) {\n            const vfsOptions = Utils.cloneObject(SettingsManager.get('VFS') || {});\n            const scandirOptions = vfsOptions.scandir || {};\n            useColumns = scandirOptions.columns || defColumns;\n        }\n        const columns = [];\n        const sortBy = cls.$element.getAttribute('data-sortby');\n        const sortDir = cls.$element.getAttribute('data-sortdir');\n        useColumns.forEach((key, idx) => {\n            const map = columnMapping[key];\n            if (iter) {\n                columns.push({\n                    sortBy: key,\n                    label: map.value(),\n                    icon: map.icon(),\n                    textalign: idx === 0 ? 'left' : 'right'\n                });\n            } else {\n                columns.push({\n                    sortBy: key,\n                    sortDir: key === sortBy ? sortDir : null,\n                    label: a._(map.label),\n                    size: map.size || '',\n                    resizable: idx > 0,\n                    textalign: idx === 0 ? 'left' : 'right'\n                });\n            }\n        });\n        return columns;\n    }\n    function scandir(dir, opts, cb, oncreate) {\n        const file = new FileMetadata(dir);\n        file.type = 'dir';\n        const scanopts = {\n            backlink: opts.backlink,\n            showDotFiles: opts.dotfiles === true,\n            showFileExtensions: opts.extensions === true,\n            mimeFilter: opts.filter || [],\n            typeFilter: opts.filetype || null,\n            sortBy: opts.sortby,\n            sortDir: opts.sortdir\n        };\n        VFS.scandir(file, scanopts).then(result => {\n            const list = [];\n            const summary = {\n                size: 0,\n                directories: 0,\n                files: 0,\n                hidden: 0\n            };\n            function isHidden(iter) {\n                return (iter.filename || '').substr(0) === '.';\n            }\n            (result || []).forEach(iter => {\n                list.push(oncreate(iter));\n                summary.size += iter.size || 0;\n                summary.directories += iter.type === 'dir' ? 1 : 0;\n                summary.files += iter.type !== 'dir' ? 1 : 0;\n                summary.hidden += isHidden(iter) ? 1 : 0;\n            });\n            cb(false, list, summary);\n        }).catch(cb);\n    }\n    function readdir(cls, dir, done, sopts) {\n        const childView = cls.getChildView();\n        if (!childView) {\n            return;\n        }\n        sopts = sopts || {};\n        const vfsOptions = Utils.cloneObject(SettingsManager.get('VFS') || {});\n        const scandirOptions = vfsOptions.scandir || {};\n        const el = cls.$element;\n        const target = childView.$element;\n        const tagName = target.tagName.toLowerCase();\n        el.setAttribute('data-path', dir);\n        const opts = {\n            filter: null,\n            backlink: sopts.backlink\n        };\n        function setOption(s, d, c, cc) {\n            if (el.hasAttribute(s)) {\n                opts[d] = c(el.getAttribute(s));\n            } else {\n                opts[d] = (cc || function () {\n                })();\n            }\n        }\n        setOption('data-sortby', 'sortby', val => {\n            return val;\n        });\n        setOption('data-sortdir', 'sortdir', val => {\n            return val;\n        });\n        setOption('data-dotfiles', 'dotfiles', val => {\n            return val === 'true';\n        }, () => {\n            return scandirOptions.showHiddenFiles === true;\n        });\n        setOption('data-extensions', 'extensions', val => {\n            return val === 'true';\n        }, () => {\n            return scandirOptions.showFileExtensions === true;\n        });\n        setOption('data-filetype', 'filetype', val => {\n            return val;\n        });\n        setOption('data-defaultcolumns', 'defaultcolumns', val => {\n            return val === 'true';\n        });\n        try {\n            opts.filter = JSON.parse(el.getAttribute('data-filter'));\n        } catch (e) {\n        }\n        scandir(dir, opts, (error, result, summary) => {\n            if (tagName === 'gui-list-view') {\n                cls.getChildView().set('zebra', true);\n                if (sopts.headers !== false) {\n                    cls.getChildView().set('columns', getListViewColumns(cls, null, opts));\n                }\n            }\n            done(error, result, summary);\n        }, iter => {\n            const tooltip = Utils.format('{0}\\n{1}\\n{2} {3}', iter.type.toUpperCase(), iter.filename, getFileSize(iter), iter.mime || '');\n            function _createEntry() {\n                const row = {\n                    value: iter,\n                    id: iter.id || removeExtension(iter.filename, opts),\n                    label: iter.filename,\n                    tooltip: tooltip,\n                    icon: getFileIcon(iter, _iconSizes[tagName] || '16x16')\n                };\n                if (tagName === 'gui-tree-view' && iter.type === 'dir') {\n                    if (iter.filename !== '..') {\n                        row.entries = [{ label: 'Loading...' }];\n                    }\n                }\n                return row;\n            }\n            if (tagName !== 'gui-list-view') {\n                return _createEntry();\n            }\n            return {\n                value: iter,\n                id: iter.id || iter.filename,\n                tooltip: tooltip,\n                columns: getListViewColumns(cls, iter, opts)\n            };\n        });\n    }\n    class GUIFileView extends GUIElement {\n        static register() {\n            return super.register({ tagName: 'gui-file-view' }, this);\n        }\n        on(evName, callback, params) {\n            if ([\n                    'activate',\n                    'select',\n                    'contextmenu',\n                    'sort'\n                ].indexOf(evName) !== -1) {\n                evName = '_' + evName;\n            }\n            const el = this.$element;\n            if (evName === '_contextmenu') {\n                el.setAttribute('data-has-contextmenu', 'true');\n            }\n            Events.$bind(el, evName, callback.bind(this), params);\n            return this;\n        }\n        set(param, value, arg, arg2) {\n            const el = this.$element;\n            if (param === 'type') {\n                const firstChild = el.children[0];\n                if (firstChild && firstChild.tagName.toLowerCase() === value) {\n                    return true;\n                }\n                el.setAttribute('data-type', value);\n                this.buildChildView();\n                if (typeof arg === 'undefined' || arg === true) {\n                    this.chdir({ path: el.getAttribute('data-path') });\n                }\n                return this;\n            } else if ([\n                    'filter',\n                    'dotfiles',\n                    'filetype',\n                    'extensions',\n                    'defaultcolumns',\n                    'sortby',\n                    'sortdir'\n                ].indexOf(param) >= 0) {\n                GUI.setProperty(el, param, value);\n                return this;\n            }\n            const childView = this.getChildView();\n            if (childView) {\n                return childView.set.apply(childView, arguments);\n            }\n            return GUIDataView.prototype.set.apply(this, arguments);\n        }\n        build() {\n            if (this.childView) {\n                return this;\n            }\n            this.buildChildView();\n            const el = this.$element;\n            Events.$bind(el, '_expand', ev => {\n                const target = ev.detail.element;\n                if (target.getAttribute('data-was-rendered')) {\n                    return;\n                }\n                if (ev.detail.expanded) {\n                    const entry = ev.detail.entries[0].data;\n                    target.setAttribute('data-was-rendered', String(true));\n                    readdir(this, entry.path, (error, result, summary) => {\n                        if (!error) {\n                            target.querySelectorAll('gui-tree-view-entry').forEach(e => {\n                                DOM.$remove(e);\n                            });\n                            const childView = this.getChildView();\n                            if (childView) {\n                                childView.add({\n                                    entries: result,\n                                    parentNode: target\n                                });\n                            }\n                        }\n                    }, { backlink: false });\n                }\n            });\n            return this;\n        }\n        values() {\n            const childView = this.getChildView();\n            if (childView) {\n                return childView.values();\n            }\n            return null;\n        }\n        contextmenu(ev) {\n            const vfsOptions = SettingsManager.instance('VFS');\n            const scandirOptions = vfsOptions.get('scandir') || {};\n            function setOption(opt, toggle) {\n                const opts = { scandir: {} };\n                opts.scandir[opt] = toggle;\n                vfsOptions.set(null, opts, true);\n            }\n            Menu.create([\n                {\n                    title: a._('LBL_SHOW_HIDDENFILES'),\n                    type: 'checkbox',\n                    checked: scandirOptions.showHiddenFiles === true,\n                    onClick: () => {\n                        setOption('showHiddenFiles', !scandirOptions.showHiddenFiles);\n                    }\n                },\n                {\n                    title: a._('LBL_SHOW_FILEEXTENSIONS'),\n                    type: 'checkbox',\n                    checked: scandirOptions.showFileExtensions === true,\n                    onClick: () => {\n                        setOption('showFileExtensions', !scandirOptions.showFileExtensions);\n                    }\n                }\n            ], ev);\n        }\n        chdir(args) {\n            let childView = this.getChildView();\n            if (!childView) {\n                childView = this.buildChildView();\n            }\n            const cb = args.done || function () {\n            };\n            const dir = args.path || b.getDefaultPath();\n            const child = childView;\n            const el = this.$element;\n            clearTimeout(el._readdirTimeout);\n            el._readdirTimeout = setTimeout(() => {\n                readdir(this, dir, (error, result, summary) => {\n                    if (error) {\n                        OSjs.error(a._('ERR_VFSMODULE_XHR_ERROR'), a._('ERR_VFSMODULE_SCANDIR_FMT', dir), error);\n                    } else {\n                        child.clear();\n                        child.add(result);\n                    }\n                    cb(error, summary);\n                }, args.opts);\n            }, 50);\n        }\n        getChildViewType() {\n            let type = this.$element.getAttribute('data-type') || 'list-view';\n            if (!type.match(/^gui\\-/)) {\n                type = 'gui-' + type;\n            }\n            return type;\n        }\n        getChildView() {\n            return GUIElement.createFromNode(this.$element.children[0]);\n        }\n        buildChildView() {\n            const el = this.$element;\n            const type = this.getChildViewType();\n            const childView = this.getChildView();\n            if (childView) {\n                if (childView.$element && childView.$element.tagName.toLowerCase() === type) {\n                    return null;\n                }\n            }\n            DOM.$empty(el);\n            const nel = GUIElement.create(type, {\n                'draggable': true,\n                'draggable-type': 'file'\n            });\n            nel.build();\n            nel.on('select', ev => {\n                el.dispatchEvent(new CustomEvent('_select', { detail: ev.detail }));\n            });\n            nel.on('activate', ev => {\n                el.dispatchEvent(new CustomEvent('_activate', { detail: ev.detail }));\n            });\n            nel.on('sort', ev => {\n                el.setAttribute('data-sortby', String(ev.detail.sortBy));\n                el.setAttribute('data-sortdir', String(ev.detail.sortDir));\n                this.chdir({\n                    sopts: { headers: false },\n                    path: el.getAttribute('data-path')\n                });\n                el.dispatchEvent(new CustomEvent('_sort', { detail: ev.detail }));\n            });\n            nel.on('contextmenu', ev => {\n                if (!el.hasAttribute('data-has-contextmenu') || el.hasAttribute('data-has-contextmenu') === 'false') {\n                    this.contextmenu(ev);\n                }\n                el.dispatchEvent(new CustomEvent('_contextmenu', { detail: ev.detail }));\n            });\n            if (type === 'gui-tree-view') {\n                nel.on('expand', ev => {\n                    el.dispatchEvent(new CustomEvent('_expand', { detail: ev.detail }));\n                });\n            }\n            el.setAttribute('role', 'region');\n            el.appendChild(nel.$element);\n            return nel;\n        }\n    }\n    return { GUIFileView: GUIFileView };\n});\ndefine('skylark-osjsv2-client/gui/elements/iconview',[\n    '../../utils/gui',\n    '../dataview'\n], function (GUI, GUIDataView) {\n    'use strict';\n    function createEntry(cls, e) {\n        const entry = GUI.createElement('gui-icon-view-entry', e);\n        return entry;\n    }\n    function initEntry(cls, cel) {\n        const icon = cel.getAttribute('data-icon');\n        const label = GUI.getLabel(cel);\n        const dicon = document.createElement('div');\n        const dimg = document.createElement('img');\n        dimg.src = icon;\n        dicon.appendChild(dimg);\n        const dlabel = document.createElement('div');\n        const dspan = document.createElement('span');\n        dspan.appendChild(document.createTextNode(label));\n        dlabel.appendChild(dspan);\n        cls.bindEntryEvents(cel, 'gui-icon-view-entry');\n        cel.setAttribute('role', 'listitem');\n        cel.appendChild(dicon);\n        cel.appendChild(dlabel);\n    }\n    class GUIIconView extends GUIDataView {\n        static register() {\n            return super.register({\n                parent: GUIDataView,\n                tagName: 'gui-icon-view'\n            }, this);\n        }\n        values() {\n            return this.getSelected(this.$element.querySelectorAll('gui-icon-view-entry'));\n        }\n        build() {\n            const el = this.$element;\n            let body = el.querySelector('gui-icon-view-body');\n            const found = !!body;\n            if (!found) {\n                body = document.createElement('gui-icon-view-body');\n                el.appendChild(body);\n            }\n            el.querySelectorAll('gui-icon-view-entry').forEach((cel, idx) => {\n                if (!found) {\n                    body.appendChild(cel);\n                }\n                initEntry(this, cel);\n            });\n            el.setAttribute('role', 'list');\n            return super.build(...arguments);\n        }\n        get(param, value, arg, asValue) {\n            if (param === 'entry') {\n                const body = this.$element.querySelector('gui-icon-view-body');\n                const rows = body.querySelectorAll('gui-icon-view-entry');\n                return this.getEntry(rows, value, arg, asValue);\n            }\n            return super.get(...arguments);\n        }\n        set(param, value, arg) {\n            const body = this.$element.querySelector('gui-icon-view-body');\n            if (param === 'selected' || param === 'value') {\n                if (body) {\n                    this.setSelected(body, body.querySelectorAll('gui-icon-view-entry'), value, arg);\n                }\n                return this;\n            }\n            return super.set(...arguments);\n        }\n        add(entries) {\n            const body = this.$element.querySelector('gui-icon-view-body');\n            return super.add(entries, (cls, e) => {\n                const entry = createEntry(this, e);\n                body.appendChild(entry);\n                initEntry(this, entry);\n            });\n        }\n        clear() {\n            const body = this.$element.querySelector('gui-icon-view-body');\n            return super.clear(body);\n        }\n        remove(entries) {\n            return super.remove(entries, 'gui-icon-view-entry');\n        }\n        patch(entries) {\n            const body = this.$element.querySelector('gui-icon-view-body');\n            return super.patch(entries, 'gui-icon-view-entry', body, createEntry, initEntry);\n        }\n    }\n    return { GUIIconView: GUIIconView };\n});\ndefine('skylark-osjsv2-client/gui/elements/inputs',[\n    '../../utils/dom',\n    '../../utils/gui',\n    '../../utils/clipboard',\n    '../../utils/events',\n    '../../utils/keycodes',\n    '../element',\n    '../../core/locales'\n], function (DOM, GUI, Clipboard, Events, Keycodes, GUIElement, locales) {\n    'use strict';\n    let _buttonCount = 0;\n    function createInputOfType(el, type) {\n        const group = el.getAttribute('data-group');\n        const placeholder = el.getAttribute('data-placeholder');\n        const disabled = String(el.getAttribute('data-disabled')) === 'true';\n        const value = el.childNodes.length ? el.childNodes[0].nodeValue : null;\n        DOM.$empty(el);\n        const input = document.createElement(type === 'textarea' ? 'textarea' : 'input');\n        const attribs = {\n            value: null,\n            type: type,\n            tabindex: -1,\n            placeholder: placeholder,\n            disabled: disabled ? 'disabled' : null,\n            name: group ? group + '[]' : null\n        };\n        [\n            'autocomplete',\n            'autocorrect',\n            'autocapitalize',\n            'spellcheck'\n        ].forEach(a => {\n            attribs[a] = el.getAttribute('data-' + a) || 'false';\n        });\n        function _bindDefaults() {\n            if ([\n                    'range',\n                    'slider'\n                ].indexOf(type) >= 0) {\n                attribs.min = el.getAttribute('data-min');\n                attribs.max = el.getAttribute('data-max');\n                attribs.step = el.getAttribute('data-step');\n            } else if ([\n                    'radio',\n                    'checkbox'\n                ].indexOf(type) >= 0) {\n                if (el.getAttribute('data-value') === 'true') {\n                    attribs.checked = 'checked';\n                }\n            } else if ([\n                    'text',\n                    'password',\n                    'textarea'\n                ].indexOf(type) >= 0) {\n                attribs.value = value || '';\n            }\n            Object.keys(attribs).forEach(a => {\n                if (attribs[a] !== null) {\n                    if (a === 'value') {\n                        input.value = attribs[a];\n                    } else {\n                        input.setAttribute(a, attribs[a]);\n                    }\n                }\n            });\n        }\n        function _bindEvents() {\n            if (type === 'text' || type === 'password' || type === 'textarea') {\n                Events.$bind(input, 'keydown', ev => {\n                    if (ev.keyCode === Keycodes.ENTER) {\n                        input.dispatchEvent(new CustomEvent('_enter', { detail: input.value }));\n                    } else if (ev.keyCode === Keycodes.C && ev.ctrlKey) {\n                        Clipboard.setClipboard(input.value);\n                    }\n                    if (type === 'textarea' && ev.keyCode === Keycodes.TAB) {\n                        ev.preventDefault();\n                        input.value += '\\t';\n                    }\n                }, false);\n            }\n        }\n        function _create() {\n            _bindDefaults();\n            _bindEvents();\n            GUI.createInputLabel(el, type, input);\n            const rolemap = {\n                'TEXTAREA': () => {\n                    return 'textbox';\n                },\n                'INPUT': i => {\n                    const typemap = {\n                        'range': 'slider',\n                        'text': 'textbox',\n                        'password': 'textbox'\n                    };\n                    return typemap[i.type] || i.type;\n                }\n            };\n            if (rolemap[el.tagName]) {\n                input.setAttribute('role', rolemap[el.tagName](input));\n            }\n            input.setAttribute('aria-label', el.getAttribute('title') || '');\n            el.setAttribute('role', 'region');\n            el.setAttribute('aria-disabled', String(disabled));\n            Events.$bind(input, 'change', ev => {\n                let value = input.value;\n                if (type === 'radio' || type === 'checkbox') {\n                    value = input.checked;\n                }\n                input.dispatchEvent(new CustomEvent('_change', { detail: value }));\n            }, false);\n        }\n        _create();\n    }\n    function addToSelectBox(el, entries) {\n        const target = el.querySelector('select');\n        if (!(entries instanceof Array)) {\n            entries = [entries];\n        }\n        entries.forEach(e => {\n            const opt = document.createElement('option');\n            opt.setAttribute('role', 'option');\n            opt.setAttribute('value', e.value);\n            opt.appendChild(document.createTextNode(e.label));\n            target.appendChild(opt);\n        });\n    }\n    function removeFromSelectBox(el, what) {\n        const target = el.querySelector('select');\n        target.querySelectorAll('option').forEach(opt => {\n            if (String(opt.value) === String(what)) {\n                DOM.$remove(opt);\n                return false;\n            }\n            return true;\n        });\n    }\n    function createSelectInput(el, multiple) {\n        const disabled = el.getAttribute('data-disabled') !== null;\n        const selected = el.getAttribute('data-selected');\n        const select = document.createElement('select');\n        if (multiple) {\n            select.setAttribute('size', el.getAttribute('data-size') || 2);\n            multiple = el.getAttribute('data-multiple') === 'true';\n        }\n        if (multiple) {\n            select.setAttribute('multiple', 'multiple');\n        }\n        if (disabled) {\n            select.setAttribute('disabled', 'disabled');\n        }\n        if (selected !== null) {\n            select.selectedIndex = selected;\n        }\n        el.querySelectorAll('gui-select-option').forEach(sel => {\n            const value = sel.getAttribute('data-value') || '';\n            const label = sel.childNodes.length ? sel.childNodes[0].nodeValue : '';\n            const option = document.createElement('option');\n            option.setAttribute('role', 'option');\n            option.setAttribute('value', value);\n            option.appendChild(document.createTextNode(label));\n            if (sel.getAttribute('selected')) {\n                option.setAttribute('selected', 'selected');\n            }\n            select.appendChild(option);\n            sel.parentNode.removeChild(sel);\n        });\n        Events.$bind(select, 'change', ev => {\n            select.dispatchEvent(new CustomEvent('_change', { detail: select.value }));\n        }, false);\n        select.setAttribute('role', 'listbox');\n        select.setAttribute('aria-label', el.getAttribute('title') || '');\n        el.setAttribute('aria-disabled', String(disabled));\n        el.setAttribute('role', 'region');\n        el.appendChild(select);\n    }\n    function setSwitchValue(val, input, button) {\n        if (val !== true) {\n            input.removeAttribute('checked');\n            DOM.$removeClass(button, 'gui-active');\n            button.innerHTML = '0';\n        } else {\n            input.setAttribute('checked', 'checked');\n            DOM.$addClass(button, 'gui-active');\n            button.innerHTML = '1';\n        }\n    }\n    class _GUIInput extends GUIElement {\n        on(evName, callback, params) {\n            if (evName === 'enter') {\n                evName = '_enter';\n            } else if (evName === 'change') {\n                evName = '_change';\n            }\n            const target = this.$element.querySelector('textarea, input, select');\n            Events.$bind(target, evName, callback.bind(this), params);\n            return this;\n        }\n    }\n    class GUILabel extends GUIElement {\n        static register() {\n            return super.register({ tagName: 'gui-label' }, this);\n        }\n        set(param, value, isHTML) {\n            const el = this.$element;\n            if (param === 'value' || param === 'label') {\n                el.setAttribute('data-label', String(value));\n                const lbl = el.querySelector('label');\n                DOM.$empty(lbl);\n                if (isHTML) {\n                    lbl.innerHTML = value;\n                } else {\n                    lbl.appendChild(document.createTextNode(value));\n                }\n                return this;\n            }\n            return super.set(...arguments);\n        }\n        build() {\n            const el = this.$element;\n            const label = GUI.getValueLabel(el, true);\n            const lbl = document.createElement('label');\n            lbl.appendChild(document.createTextNode(label));\n            el.setAttribute('role', 'heading');\n            el.setAttribute('data-label', String(label));\n            el.appendChild(lbl);\n            return this;\n        }\n    }\n    class GUITextarea extends _GUIInput {\n        static register() {\n            return super.register({\n                tagName: 'gui-textarea',\n                type: 'input'\n            }, this);\n        }\n        build() {\n            createInputOfType(this.$element, 'textarea');\n            return this;\n        }\n        set(param, value) {\n            const el = this.$element;\n            if (el && param === 'scrollTop') {\n                if (typeof value !== 'number') {\n                    value = el.firstChild.scrollHeight;\n                }\n                el.firstChild.scrollTop = value;\n                return this;\n            }\n            return super.set(...arguments);\n        }\n    }\n    class GUIText extends _GUIInput {\n        static register() {\n            return super.register({\n                tagName: 'gui-text',\n                type: 'input'\n            }, this);\n        }\n        build() {\n            createInputOfType(this.$element, 'text');\n            return this;\n        }\n    }\n    class GUIPassword extends _GUIInput {\n        static register() {\n            return super.register({\n                tagName: 'gui-password',\n                type: 'input'\n            }, this);\n        }\n        build() {\n            createInputOfType(this.$element, 'password');\n            return this;\n        }\n    }\n    class GUIFileUpload extends _GUIInput {\n        static register() {\n            return super.register({\n                tagName: 'gui-file-upload',\n                type: 'input'\n            }, this);\n        }\n        build() {\n            const input = document.createElement('input');\n            input.setAttribute('role', 'button');\n            input.setAttribute('type', 'file');\n            input.onchange = ev => {\n                input.dispatchEvent(new CustomEvent('_change', { detail: input.files[0] }));\n            };\n            this.$element.appendChild(input);\n            return this;\n        }\n    }\n    class GUIRadio extends _GUIInput {\n        static register() {\n            return super.register({\n                tagName: 'gui-radio',\n                type: 'input'\n            }, this);\n        }\n        build() {\n            createInputOfType(this.$element, 'radio');\n            return this;\n        }\n    }\n    class GUICheckbox extends _GUIInput {\n        static register() {\n            return super.register({\n                tagName: 'gui-checkbox',\n                type: 'input'\n            }, this);\n        }\n        build() {\n            createInputOfType(this.$element, 'checkbox');\n            return this;\n        }\n    }\n    class GUISwitch extends _GUIInput {\n        static register() {\n            return super.register({\n                tagName: 'gui-switch',\n                type: 'input'\n            }, this);\n        }\n        set(param, value) {\n            if (param === 'value') {\n                const input = this.$element.querySelector('input');\n                const button = this.$element.querySelector('button');\n                setSwitchValue(value, input, button);\n                return this;\n            }\n            return super.set(...arguments);\n        }\n        build() {\n            const el = this.$element;\n            const input = document.createElement('input');\n            input.type = 'checkbox';\n            el.appendChild(input);\n            const inner = document.createElement('div');\n            const button = document.createElement('button');\n            inner.appendChild(button);\n            GUI.createInputLabel(el, 'switch', inner);\n            function toggleValue(v) {\n                let val = false;\n                if (typeof v === 'undefined') {\n                    val = !!input.checked;\n                    val = !val;\n                } else {\n                    val = v;\n                }\n                setSwitchValue(val, input, button);\n            }\n            Events.$bind(inner, 'pointerup', ev => {\n                ev.preventDefault();\n                const disabled = el.getAttribute('data-disabled') !== null;\n                if (!disabled) {\n                    toggleValue();\n                }\n            }, false);\n            toggleValue(false);\n            return this;\n        }\n    }\n    class GUIButton extends GUIElement {\n        static register() {\n            return super.register({\n                tagName: 'gui-button',\n                type: 'input'\n            }, this);\n        }\n        set(param, value, isHTML) {\n            if (param === 'value' || param === 'label') {\n                const lbl = this.$element.querySelector('button');\n                DOM.$empty(lbl);\n                if (isHTML) {\n                    lbl.innerHTML = value;\n                } else {\n                    lbl.appendChild(document.createTextNode(value));\n                }\n                lbl.setAttribute('aria-label', value);\n                return this;\n            }\n            return super.set(...arguments);\n        }\n        create(params) {\n            const label = params.label;\n            if (params.label) {\n                delete params.label;\n            }\n            const el = GUI.createElement('gui-button', params);\n            if (label) {\n                el.appendChild(document.createTextNode(label));\n            }\n            return el;\n        }\n        on(evName, callback, params) {\n            const target = this.$element.querySelector('button');\n            Events.$bind(target, evName, callback.bind(this), params);\n            return this;\n        }\n        build() {\n            const el = this.$element;\n            const icon = el.getAttribute('data-icon');\n            const disabled = el.getAttribute('data-disabled') !== null;\n            const group = el.getAttribute('data-group');\n            const label = GUI.getValueLabel(el);\n            const input = document.createElement('button');\n            function setGroup(g) {\n                if (g) {\n                    input.setAttribute('name', g + '[' + _buttonCount + ']');\n                    Events.$bind(input, 'pointerup', () => {\n                        let root = el;\n                        while (root.parentNode) {\n                            if (root.tagName.toLowerCase() === 'application-window-content') {\n                                break;\n                            }\n                            root = root.parentNode;\n                        }\n                        DOM.$addClass(input, 'gui-active');\n                        root.querySelectorAll('gui-button[data-group=\"' + g + '\"] > button').forEach(b => {\n                            if (b.name === input.name) {\n                                return;\n                            }\n                            DOM.$removeClass(b, 'gui-active');\n                        });\n                    });\n                }\n            }\n            function setImage() {\n                if (icon && icon !== 'null') {\n                    const tip = locales._(el.getAttribute('data-tooltip') || '');\n                    const img = document.createElement('img');\n                    img.src = icon;\n                    img.alt = tip;\n                    img.title = tip;\n                    if (input.firstChild) {\n                        input.insertBefore(img, input.firstChild);\n                    } else {\n                        input.appendChild(img);\n                    }\n                    DOM.$addClass(el, 'gui-has-image');\n                }\n            }\n            function setLabel() {\n                if (label) {\n                    DOM.$addClass(el, 'gui-has-label');\n                }\n                input.appendChild(document.createTextNode(label));\n                input.setAttribute('aria-label', label);\n            }\n            if (disabled) {\n                input.setAttribute('disabled', 'disabled');\n            }\n            setLabel();\n            setImage();\n            setGroup(group);\n            _buttonCount++;\n            el.setAttribute('role', 'navigation');\n            el.appendChild(input);\n            return this;\n        }\n    }\n    class _GUISelect extends _GUIInput {\n        add(arg) {\n            addToSelectBox(this.$element, arg);\n            return this;\n        }\n        remove(arg) {\n            removeFromSelectBox(this.$element, arg);\n            return this;\n        }\n        clear() {\n            const target = this.$element.querySelector('select');\n            DOM.$empty(target);\n            return this;\n        }\n        build() {\n            const el = this.$element;\n            const multiple = el.tagName.toLowerCase() === 'gui-select-list';\n            createSelectInput(el, multiple);\n            return this;\n        }\n    }\n    class GUISelect extends _GUISelect {\n        static register() {\n            return super.register({\n                tagName: 'gui-select',\n                type: 'input'\n            }, this);\n        }\n    }\n    class GUISelectList extends _GUISelect {\n        static register() {\n            return super.register({\n                tagName: 'gui-select-list',\n                type: 'input'\n            }, this);\n        }\n    }\n    class GUISlider extends _GUIInput {\n        static register() {\n            return super.register({\n                tagName: 'gui-slider',\n                type: 'input'\n            }, this);\n        }\n        get(param) {\n            const val = GUIElement.getProperty(this.$element, param); // modified by lwf\n            if (param === 'value') {\n                return parseInt(val, 10);\n            }\n            return val;\n        }\n        build() {\n            createInputOfType(this.$element, 'range');\n            return this;\n        }\n    }\n    class GUIInputModal extends GUIElement {\n        static register() {\n            return super.register({\n                tagName: 'gui-input-modal',\n                type: 'input'\n            }, this);\n        }\n        on(evName, callback, params) {\n            if (evName === 'open') {\n                evName = '_open';\n            }\n            Events.$bind(this.$element, evName, callback.bind(this), params);\n            return this;\n        }\n        get(param) {\n            if (param === 'value') {\n                const input = this.$element.querySelector('input');\n                return input.value;\n            }\n            return super.get(...arguments);\n        }\n        set(param, value) {\n            if (param === 'value') {\n                const input = this.$element.querySelector('input');\n                input.removeAttribute('disabled');\n                input.value = value;\n                input.setAttribute('disabled', 'disabled');\n                input.setAttribute('aria-disabled', 'true');\n                return this;\n            }\n            return super.set(...arguments);\n        }\n        build() {\n            const el = this.$element;\n            const container = document.createElement('div');\n            const input = document.createElement('input');\n            input.type = 'text';\n            input.setAttribute('disabled', 'disabled');\n            const button = document.createElement('button');\n            button.innerHTML = '...';\n            Events.$bind(button, 'pointerup', ev => {\n                el.dispatchEvent(new CustomEvent('_open', { detail: input.value }));\n            }, false);\n            container.appendChild(input);\n            container.appendChild(button);\n            el.appendChild(container);\n            return this;\n        }\n    }\n    return {\n        GUILabel: GUILabel,\n        GUITextarea: GUITextarea,\n        GUIText: GUIText,\n        GUIPassword: GUIPassword,\n        GUIFileUpload: GUIFileUpload,\n        GUIRadio: GUIRadio,\n        GUICheckbox: GUICheckbox,\n        GUISwitch: GUISwitch,\n        GUIButton: GUIButton,\n        GUISelect: GUISelect,\n        GUISelectList: GUISelectList,\n        GUISlider: GUISlider,\n        GUIInputModal: GUIInputModal\n    };\n});\ndefine('skylark-osjsv2-client/gui/elements/listview',[\n    '../../utils/dom',\n    '../../utils/gui',\n    '../../utils/events',\n    '../dataview'\n], function (DOM, GUI, Events, GUIDataView) {\n    'use strict';\n    function createFakeHeader(el) {\n        function createResizers() {\n            const fhead = el.querySelector('gui-list-view-fake-head');\n            const head = el.querySelector('gui-list-view-head');\n            const fcols = fhead.querySelectorAll('gui-list-view-column');\n            const cols = head.querySelectorAll('gui-list-view-column');\n            fhead.querySelectorAll('gui-list-view-column-resizer').forEach(rel => {\n                DOM.$remove(rel);\n            });\n            cols.forEach((col, idx) => {\n                const attr = col.getAttribute('data-resizable');\n                if (attr === 'true') {\n                    const fcol = fcols[idx];\n                    const resizer = document.createElement('gui-list-view-column-resizer');\n                    fcol.appendChild(resizer);\n                    let startWidth = 0;\n                    let maxWidth = 0;\n                    let widthOffset = 16;\n                    let minWidth = widthOffset;\n                    let tmpEl = null;\n                    GUI.createDrag(resizer, ev => {\n                        startWidth = col.offsetWidth;\n                        minWidth = widthOffset;\n                        maxWidth = el.offsetWidth - el.children.length * widthOffset;\n                    }, (ev, diff) => {\n                        const newWidth = startWidth - diff.x;\n                        if (!isNaN(newWidth) && newWidth > minWidth && newWidth < maxWidth) {\n                            col.style.width = String(newWidth) + 'px';\n                            fcol.style.width = String(newWidth) + 'px';\n                        }\n                        tmpEl = DOM.$remove(tmpEl);\n                    });\n                }\n            });\n        }\n        const fh = el.querySelector('gui-list-view-fake-head gui-list-view-head');\n        DOM.$empty(fh);\n        const row = el.querySelector('gui-list-view-head gui-list-view-row');\n        if (row) {\n            fh.appendChild(row.cloneNode(true));\n            createResizers();\n        }\n    }\n    function initRow(cls, row) {\n        const el = cls.$element;\n        row.querySelectorAll('gui-list-view-column').forEach((cel, idx) => {\n            const icon = cel.getAttribute('data-icon');\n            if (icon && icon !== 'null') {\n                DOM.$addClass(cel, 'gui-has-image');\n                cel.style.backgroundImage = 'url(' + icon + ')';\n            }\n            const text = cel.firstChild;\n            if (text && text.nodeType === 3) {\n                const span = document.createElement('span');\n                span.appendChild(document.createTextNode(text.nodeValue));\n                cel.insertBefore(span, text);\n                cel.removeChild(text);\n            }\n            if (el._columns[idx] && !el._columns[idx].visible) {\n                cel.style.display = 'none';\n            }\n            cel.setAttribute('role', 'listitem');\n        });\n        cls.bindEntryEvents(row, 'gui-list-view-row');\n    }\n    function createEntry(cls, v, head) {\n        const label = v.label || '';\n        if (v.label) {\n            delete v.label;\n        }\n        let setSize = null;\n        if (v.size) {\n            setSize = v.size;\n            delete v.size;\n        }\n        const nel = GUI.createElement('gui-list-view-column', v);\n        if (setSize) {\n            nel.style.width = setSize;\n        }\n        if (typeof label === 'function') {\n            nel.appendChild(label.call(nel, nel, v));\n        } else {\n            const span = document.createElement('span');\n            span.appendChild(document.createTextNode(label));\n            nel.appendChild(span);\n        }\n        return nel;\n    }\n    function createRow(cls, e) {\n        e = e || {};\n        if (e.columns) {\n            const row = GUI.createElement('gui-list-view-row', e, ['columns']);\n            e.columns.forEach(se => {\n                row.appendChild(createEntry(cls, se));\n            });\n            return row;\n        }\n        return null;\n    }\n    class GUIListView extends GUIDataView {\n        static register() {\n            return super.register({\n                parent: GUIDataView,\n                tagName: 'gui-list-view'\n            }, this);\n        }\n        values() {\n            const body = this.$element.querySelector('gui-list-view-body');\n            const values = this.getSelected(body.querySelectorAll('gui-list-view-row'));\n            return values;\n        }\n        get(param, value, arg, asValue) {\n            if (param === 'entry') {\n                const body = this.$element.querySelector('gui-list-view-body');\n                const rows = body.querySelectorAll('gui-list-view-row');\n                return this.getEntry(rows, value, arg, asValue);\n            }\n            return super.get(...arguments);\n        }\n        set(param, value, arg, arg2) {\n            const el = this.$element;\n            if (param === 'columns') {\n                const head = el.querySelector('gui-list-view-head');\n                const row = document.createElement('gui-list-view-row');\n                DOM.$empty(head);\n                el._columns = [];\n                value.forEach(v => {\n                    v.visible = typeof v.visible === 'undefined' || v.visible === true;\n                    const nel = createEntry(this, v, true);\n                    el._columns.push(v);\n                    if (!v.visible) {\n                        nel.style.display = 'none';\n                    }\n                    row.appendChild(nel);\n                });\n                head.appendChild(row);\n                createFakeHeader(el);\n                return this;\n            } else if (param === 'selected' || param === 'value') {\n                const body = el.querySelector('gui-list-view-body');\n                this.setSelected(body, body.querySelectorAll('gui-list-view-row'), value, arg, arg2);\n                return this;\n            }\n            return super.set(...arguments);\n        }\n        add(entries) {\n            const body = this.$element.querySelector('gui-list-view-body');\n            return super.add(entries, (cls, e) => {\n                const cbCreated = e.onCreated || function () {\n                };\n                const row = createRow(this, e);\n                if (row) {\n                    body.appendChild(row);\n                    initRow(this, row);\n                }\n                cbCreated(row);\n            });\n        }\n        clear() {\n            const body = this.$element.querySelector('gui-list-view-body');\n            return super.clear(body);\n        }\n        remove(entries) {\n            const body = this.$element.querySelector('gui-list-view-body');\n            return super.remove(entries, 'gui-list-view-row', null, body);\n        }\n        patch(entries) {\n            const body = this.$element.querySelector('gui-list-view-body');\n            return super.patch(entries, 'gui-list-view-row', body, createRow, initRow);\n        }\n        build() {\n            const el = this.$element;\n            el._columns = [];\n            let inner = el.querySelector('gui-list-view-inner');\n            let head = el.querySelector('gui-list-view-head');\n            let body = el.querySelector('gui-list-view-body');\n            function moveIntoInner(cel) {\n                if (cel.parentNode.tagName !== 'GUI-LIST-VIEW-INNER') {\n                    inner.appendChild(cel);\n                }\n            }\n            let fakeHead = el.querySelector('gui-list-view-fake-head');\n            if (!fakeHead) {\n                fakeHead = document.createElement('gui-list-view-fake-head');\n                const fakeHeadInner = document.createElement('gui-list-view-inner');\n                fakeHeadInner.appendChild(document.createElement('gui-list-view-head'));\n                fakeHead.appendChild(fakeHeadInner);\n            }\n            if (!inner) {\n                inner = document.createElement('gui-list-view-inner');\n                el.appendChild(inner);\n            }\n            (function _createBody() {\n                if (body) {\n                    moveIntoInner(body);\n                } else {\n                    body = document.createElement('gui-list-view-body');\n                    inner.appendChild(body);\n                }\n                body.setAttribute('role', 'group');\n            }());\n            (function _createHead() {\n                if (head) {\n                    moveIntoInner(head);\n                } else {\n                    head = document.createElement('gui-list-view-head');\n                    inner.insertBefore(head, body);\n                }\n                head.setAttribute('role', 'group');\n            }());\n            el.setAttribute('role', 'list');\n            el.appendChild(fakeHead);\n            Events.$bind(el, 'scroll', ev => {\n                fakeHead.style.top = el.scrollTop + 'px';\n            }, false);\n            const hcols = el.querySelectorAll('gui-list-view-head gui-list-view-column');\n            hcols.forEach((cel, idx) => {\n                const vis = cel.getAttribute('data-visible');\n                const iter = {\n                    visible: vis === null || vis === 'true',\n                    size: cel.getAttribute('data-size')\n                };\n                if (iter.size) {\n                    cel.style.width = iter.size;\n                }\n                el._columns.push(iter);\n                if (!iter.visible) {\n                    cel.style.display = 'none';\n                }\n            });\n            createFakeHeader(el);\n            el.querySelectorAll('gui-list-view-body gui-list-view-row').forEach(row => {\n                initRow(this, row);\n            });\n            return super.build(...arguments);\n        }\n    }\n    return { GUIListView: GUIListView };\n});\ndefine('skylark-osjsv2-client/gui/elements/menus',[\n    '../../utils/dom',\n    '../../utils/gui',\n    '../../utils/events',\n    '../menu',\n    '../element'\n], function (DOM, GUI, Events, Menu, GUIElement) {\n    'use strict';\n    let debounce;\n    function getSelectionEventAttribs(mel, didx) {\n        const id = mel.getAttribute('data-id');\n        let idx = DOM.$index(mel);\n        if (!didx) {\n            idx = parseInt(mel.getAttribute('data-index'), 10);\n        }\n        const result = {\n            index: idx,\n            id: id\n        };\n        Array.prototype.slice.call(mel.attributes).forEach(item => {\n            if (item.name.match(/^data\\-/)) {\n                const an = item.name.replace(/^data\\-/, '');\n                if (typeof result[an] === 'undefined') {\n                    result[an] = item.value;\n                }\n            }\n        });\n        return result;\n    }\n    function getEventName(evName) {\n        if ([\n                'select',\n                'click'\n            ].indexOf(evName) !== -1) {\n            return '_select';\n        }\n        return evName;\n    }\n    function runChildren(pel, level, winRef, cb) {\n        level = level || 0;\n        cb = cb || function () {\n        };\n        if (pel.children) {\n            pel.children.forEach((child, i) => {\n                if (child && child.tagName.toLowerCase() === 'gui-menu-entry') {\n                    GUIElement.createFromNode(child).build(null, winRef);\n                    cb(child, level);\n                }\n            });\n        }\n    }\n    function onEntryClick(ev, pos, target, original) {\n        const isExpander = !!target.querySelector('gui-menu');\n        if (!isExpander) {\n            const dispatcher = (original || target).querySelector('label');\n            dispatcher.dispatchEvent(new CustomEvent('_select', { detail: getSelectionEventAttribs(target, true) }));\n        }\n    }\n    function createTyped(child, par) {\n        const type = child.getAttribute('data-type');\n        const value = child.getAttribute('data-checked') === 'true';\n        let input = null;\n        if (type) {\n            const group = child.getAttribute('data-group');\n            input = document.createElement('input');\n            input.type = type;\n            input.name = group ? group + '[]' : '';\n            if (value) {\n                input.setAttribute('checked', 'checked');\n            }\n            par.setAttribute('role', 'menuitem' + type);\n            par.appendChild(input);\n        }\n    }\n    class GUIMenuEntry extends GUIElement {\n        static register() {\n            return super.register({ tagName: 'gui-menu-entry' }, this);\n        }\n        on(evName, callback, params) {\n            evName = getEventName(evName);\n            const target = this.$element.querySelector('gui-menu-entry > label');\n            Events.$bind(target, evName, callback.bind(this), params);\n            return this;\n        }\n        build(arg, winRef) {\n            const child = this.$element;\n            if (arguments.length < 2) {\n                return this;\n            }\n            child.setAttribute('role', 'menuitem' + (child.getAttribute('data-type') || ''));\n            const label = GUI.getLabel(child);\n            const icon = GUI.getIcon(child, winRef);\n            child.setAttribute('aria-label', label);\n            const span = document.createElement('label');\n            if (icon) {\n                child.style.backgroundImage = 'url(' + icon + ')';\n                DOM.$addClass(span, 'gui-has-image');\n            }\n            child.appendChild(span);\n            createTyped(child, span);\n            if (child.getAttribute('data-labelhtml') === 'true') {\n                span.innerHTML = label;\n            } else {\n                span.appendChild(document.createTextNode(label));\n            }\n            if (child.querySelector('gui-menu')) {\n                DOM.$addClass(child, 'gui-menu-expand');\n                child.setAttribute('aria-haspopup', 'true');\n            } else {\n                child.setAttribute('aria-haspopup', 'false');\n            }\n            return this;\n        }\n    }\n    class GUIMenu extends GUIElement {\n        static register() {\n            return super.register({ tagName: 'gui-menu' }, this);\n        }\n        on(evName, callback, params) {\n            evName = getEventName(evName);\n            Events.$bind(this.$element, evName, function (ev) {\n                if (ev.target.tagName === 'LABEL') {\n                    callback.apply(new GUIElement(ev.target.parentNode), arguments);\n                }\n            }, true);\n            return this;\n        }\n        show(ev) {\n            ev.stopPropagation();\n            ev.preventDefault();\n            const newNode = this.$element.cloneNode(true);\n            Menu.create(null, ev, newNode);\n        }\n        set(param, value, arg) {\n            if (param === 'checked') {\n                const found = this.$element.querySelector('gui-menu-entry[data-id=\"' + value + '\"]');\n                if (found) {\n                    const input = found.querySelector('input');\n                    if (input) {\n                        if (arg) {\n                            input.setAttribute('checked', 'checked');\n                        } else {\n                            input.removeAttribute('checked');\n                        }\n                    }\n                }\n                return this;\n            }\n            return super.set(...arguments);\n        }\n        build(customMenu, winRef) {\n            const el = this.$element;\n            el.setAttribute('role', 'menu');\n            try {\n                runChildren(el, 0, winRef, (child, level) => {\n                    if (customMenu) {\n                        if (child) {\n                            const submenus = child.getElementsByTagName('gui-menu');\n                            submenus.forEach(sub => {\n                                if (sub) {\n                                    runChildren(sub, level + 1, winRef);\n                                }\n                            });\n                        }\n                    }\n                });\n            } catch (e) {\n                console.warn(e);\n            }\n            if (!customMenu) {\n                Events.$bind(el, 'click', (ev, pos) => {\n                    clearTimeout(debounce);\n                    debounce = setTimeout(() => {\n                        debounce = clearTimeout(debounce);\n                        Menu.clickWrapper(ev, pos, onEntryClick);\n                    }, 1);\n                }, true);\n            }\n            return this;\n        }\n    }\n    class GUIMenuBar extends GUIElement {\n        static register() {\n            return super.register({ tagName: 'gui-menu-bar' }, this);\n        }\n        on(evName, callback, params) {\n            evName = getEventName(evName);\n            this.$element.querySelectorAll('gui-menu-bar-entry').forEach(target => {\n                Events.$bind(target, evName, callback.bind(this), params);\n            });\n            return this;\n        }\n        build() {\n            const el = this.$element;\n            el.setAttribute('role', 'menubar');\n            function updateChildren(sm, level) {\n                if (sm && sm.children) {\n                    const children = sm.children;\n                    let child;\n                    for (let i = 0; i < children.length; i++) {\n                        child = children[i];\n                        if (child.tagName === 'GUI-MENU-ENTRY') {\n                            child.setAttribute('aria-haspopup', String(!!child.firstChild));\n                            updateChildren(child.firstChild, level + 1);\n                        }\n                    }\n                }\n            }\n            function _onClick(ev) {\n                ev.preventDefault();\n                const mel = ev.target;\n                const submenu = mel.querySelector('gui-menu');\n                if (mel.getAttribute('data-disabled') === 'true') {\n                    return;\n                }\n                mel.querySelectorAll('gui-menu-entry').forEach(c => {\n                    DOM.$removeClass(c, 'gui-hover');\n                });\n                if (submenu) {\n                    Menu.setActive(ev => {\n                        if (ev instanceof window.Event) {\n                            ev.stopPropagation();\n                        }\n                        DOM.$removeClass(mel, 'gui-active');\n                    });\n                }\n                if (DOM.$hasClass(mel, 'gui-active')) {\n                    if (submenu) {\n                        DOM.$removeClass(mel, 'gui-active');\n                    }\n                } else {\n                    if (submenu) {\n                        DOM.$addClass(mel, 'gui-active');\n                    }\n                    mel.dispatchEvent(new CustomEvent('_select', { detail: getSelectionEventAttribs(mel) }));\n                }\n            }\n            el.querySelectorAll('gui-menu-bar-entry').forEach((mel, idx) => {\n                const label = GUI.getLabel(mel);\n                const span = document.createElement('span');\n                span.appendChild(document.createTextNode(label));\n                mel.setAttribute('role', 'menuitem');\n                mel.insertBefore(span, mel.firstChild);\n                const submenu = mel.querySelector('gui-menu');\n                Menu.clamp(submenu);\n                mel.setAttribute('aria-haspopup', String(!!submenu));\n                mel.setAttribute('data-index', String(idx));\n                updateChildren(submenu, 2);\n            });\n            Events.$bind(el, 'click', ev => {\n                if (ev.target.tagName === 'GUI-MENU-BAR-ENTRY') {\n                    _onClick(ev);\n                }\n            }, true);\n            return this;\n        }\n    }\n    return {\n        GUIMenuEntry: GUIMenuEntry,\n        GUIMenuBar: GUIMenuBar,\n        GUIMenu: GUIMenu\n    };\n});\ndefine('skylark-osjsv2-client/gui/elements/misc',[\n    '../../utils/dom',\n    '../../utils/events',\n    '../../utils/colors',\n    '../element'\n], function (DOM, Events, Colors, GUIElement) {\n    'use strict';\n    class GUIColorBox extends GUIElement {\n        static register() {\n            return super.register({ tagName: 'gui-color-box' }, this);\n        }\n        on(evName, callback, params) {\n            const el = this.$element;\n            const target = el.querySelector('div');\n            Events.$bind(target, evName, callback.bind(this), params);\n            return this;\n        }\n        set(param, value) {\n            if (param === 'value') {\n                this.$element.firstChild.style.backgroundColor = value;\n                return this;\n            }\n            return super.set(...arguments);\n        }\n        build() {\n            const inner = document.createElement('div');\n            this.$element.appendChild(inner);\n            return this;\n        }\n    }\n    class GUIColorSwatch extends GUIElement {\n        static register() {\n            return super.register({ tagName: 'gui-color-swatch' }, this);\n        }\n        on(evName, callback, params) {\n            const el = this.$element;\n            const target = el.querySelector('canvas');\n            if (evName === 'select' || evName === 'change') {\n                evName = '_change';\n            }\n            Events.$bind(target, evName, callback.bind(this), params);\n            return this;\n        }\n        build() {\n            const el = this.$element;\n            const cv = document.createElement('canvas');\n            cv.width = 100;\n            cv.height = 100;\n            const ctx = cv.getContext('2d');\n            let gradient = ctx.createLinearGradient(0, 0, ctx.canvas.width, 0);\n            function getColor(ev) {\n                const pos = DOM.$position(cv);\n                const cx = typeof ev.offsetX === 'undefined' ? ev.clientX - pos.left : ev.offsetX;\n                const cy = typeof ev.offsetY === 'undefined' ? ev.clientY - pos.top : ev.offsetY;\n                if (isNaN(cx) || isNaN(cy)) {\n                    return null;\n                }\n                const data = ctx.getImageData(cx, cy, 1, 1).data;\n                return {\n                    r: data[0],\n                    g: data[1],\n                    b: data[2],\n                    hex: Colors.convertToHEX(data[0], data[1], data[2])\n                };\n            }\n            gradient.addColorStop(0, 'rgb(255,   0,   0)');\n            gradient.addColorStop(0.15, 'rgb(255,   0, 255)');\n            gradient.addColorStop(0.33, 'rgb(0,     0, 255)');\n            gradient.addColorStop(0.49, 'rgb(0,   255, 255)');\n            gradient.addColorStop(0.67, 'rgb(0,   255,   0)');\n            gradient.addColorStop(0.84, 'rgb(255, 255,   0)');\n            gradient.addColorStop(1, 'rgb(255,   0,   0)');\n            ctx.fillStyle = gradient;\n            ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n            gradient = ctx.createLinearGradient(0, 0, 0, ctx.canvas.height);\n            gradient.addColorStop(0, 'rgba(255, 255, 255, 1)');\n            gradient.addColorStop(0.5, 'rgba(255, 255, 255, 0)');\n            gradient.addColorStop(0.5, 'rgba(0,     0,   0, 0)');\n            gradient.addColorStop(1, 'rgba(0,     0,   0, 1)');\n            ctx.fillStyle = gradient;\n            ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n            Events.$bind(cv, 'pointerdown', ev => {\n                const c = getColor(ev);\n                if (c) {\n                    cv.dispatchEvent(new CustomEvent('_change', { detail: c }));\n                }\n            }, false);\n            el.appendChild(cv);\n            return this;\n        }\n    }\n    class GUIIframe extends GUIElement {\n        static register() {\n            return super.register({ tagName: 'gui-iframe' }, this);\n        }\n        static get _tagName() {\n            let isStandalone = false;\n            try {\n                isStandalone = window.navigator.standalone || window.matchMedia('(display-mode: standalone)').matches;\n            } catch (e) {\n            }\n            return isStandalone ? 'webview' : 'iframe';\n        }\n        set(key, val) {\n            if (key === 'src') {\n                this.$element.querySelector(GUIIframe._tagName).src = val;\n                return this;\n            }\n            return super.set(...arguments);\n        }\n        build() {\n            const el = this.$element;\n            const src = el.getAttribute('data-src') || 'about:blank';\n            const iframe = document.createElement(GUIIframe._tagName);\n            iframe.src = src;\n            iframe.setAttribute('border', 0);\n            el.appendChild(iframe);\n            return this;\n        }\n    }\n    class GUIProgressBar extends GUIElement {\n        static register() {\n            return super.register({ tagName: 'gui-progress-bar' }, this);\n        }\n        set(param, value) {\n            const el = this.$element;\n            el.setAttribute('data-' + param, value);\n            if (param === 'progress' || param === 'value') {\n                value = parseInt(value, 10);\n                value = Math.max(0, Math.min(100, value));\n                el.setAttribute('aria-label', String(value));\n                el.setAttribute('aria-valuenow', String(value));\n                el.querySelector('div').style.width = value.toString() + '%';\n                el.querySelector('span').innerHTML = value + '%';\n                return this;\n            }\n            return super.set(...arguments);\n        }\n        build() {\n            const el = this.$element;\n            let p = el.getAttribute('data-progress') || 0;\n            p = Math.max(0, Math.min(100, p));\n            const percentage = p.toString() + '%';\n            const progress = document.createElement('div');\n            progress.style.width = percentage;\n            const span = document.createElement('span');\n            span.appendChild(document.createTextNode(percentage));\n            el.setAttribute('role', 'progressbar');\n            el.setAttribute('aria-valuemin', 0);\n            el.setAttribute('aria-valuemax', 100);\n            el.setAttribute('aria-label', 0);\n            el.setAttribute('aria-valuenow', 0);\n            el.appendChild(progress);\n            el.appendChild(span);\n            return this;\n        }\n    }\n    class GUIStatusBar extends GUIElement {\n        static register() {\n            return super.register({ tagName: 'gui-statusbar' }, this);\n        }\n        set(param, value) {\n            if (param === 'label' || param === 'value') {\n                const span = this.$element.getElementsByTagName('gui-statusbar-label')[0];\n                if (span) {\n                    DOM.$empty(span);\n                    span.innerHTML = value;\n                }\n                return this;\n            }\n            return super.set(...arguments);\n        }\n        build(args, win) {\n            const el = this.$element;\n            const span = document.createElement('gui-statusbar-label');\n            let lbl = el.getAttribute('data-label') || el.getAttribute('data-value');\n            if (!lbl) {\n                lbl = (() => {\n                    let textNodes = [];\n                    let node, value;\n                    for (let i = 0; i < el.childNodes.length; i++) {\n                        node = el.childNodes[i];\n                        if (node.nodeType === Node.TEXT_NODE) {\n                            value = node.nodeValue.replace(/\\s+/g, '').replace(/^\\s+/g, '');\n                            if (value.length > 0) {\n                                textNodes.push(value);\n                            }\n                            el.removeChild(node);\n                            i++;\n                        }\n                    }\n                    return textNodes.join(' ');\n                })();\n            }\n            span.innerHTML = lbl;\n            el.setAttribute('role', 'log');\n            el.appendChild(span);\n            return this;\n        }\n    }\n    return {\n        GUIColorBox: GUIColorBox,\n        GUIColorSwatch: GUIColorSwatch,\n        GUIIframe: GUIIframe,\n        GUIProgressBar: GUIProgressBar,\n        GUIStatusBar: GUIStatusBar\n    };\n});\ndefine('skylark-osjsv2-client/gui/elements/richtext',[\n    '../../utils/dom',\n    '../../utils/events',\n    '../../core/theme',\n    '../element'\n], function (DOM, Events, Theme, GUIElement) {\n    'use strict';\n    function getDocument(el, iframe) {\n        iframe = iframe || el.querySelector('iframe');\n        return iframe.contentDocument || iframe.contentWindow.document;\n    }\n    function getDocumentData(el) {\n        try {\n            const doc = getDocument(el);\n            return doc.body.innerHTML;\n        } catch (error) {\n            console.error('gui-richtext', 'getDocumentData()', error.stack, error);\n        }\n        return '';\n    }\n    function destroyFixInterval(el) {\n        el._fixTry = 0;\n        el._fixInterval = clearInterval(el._fixInterval);\n    }\n    function createFixInterval(el, doc, text) {\n        if (el._fixTry > 10) {\n            el._fixTry = 0;\n            return;\n        }\n        el._fixInterval = setInterval(() => {\n            try {\n                if (text) {\n                    doc.body.innerHTML = text;\n                }\n                destroyFixInterval(el);\n            } catch (error) {\n                console.warn('gui-richtext', 'setDocumentData()', error.stack, error, '... trying again');\n            }\n            el._fixTry++;\n        }, 100);\n    }\n    function setDocumentData(el, text) {\n        destroyFixInterval(el);\n        text = text || '';\n        const themeName = Theme.getStyleTheme();\n        const themeSrc = '/themes.css';\n        let editable = el.getAttribute('data-editable');\n        editable = editable === null || editable === 'true';\n        function onMouseDown(ev) {\n            function insertTextAtCursor(text) {\n                let sel, range;\n                if (window.getSelection) {\n                    sel = window.getSelection();\n                    if (sel.getRangeAt && sel.rangeCount) {\n                        range = sel.getRangeAt(0);\n                        range.deleteContents();\n                        range.insertNode(document.createTextNode(text));\n                    }\n                } else if (document.selection && document.selection.createRange) {\n                    document.selection.createRange().text = text;\n                }\n            }\n            if (ev.keyCode === 9) {\n                insertTextAtCursor('\\xA0');\n                ev.preventDefault();\n            }\n        }\n        const script = onMouseDown.toString() + ';window.addEventListener(\"keydown\", onMouseDown)';\n        let template = '<!DOCTYPE html><html><head><link rel=\"stylesheet\" type=\"text/css\" href=\"' + themeSrc + '\" /><script>' + script + '</script></head><body contentEditable=\"true\" data-style-theme=\"' + themeName + '\"></body></html>';\n        if (!editable) {\n            template = template.replace(' contentEditable=\"true\"', '');\n        }\n        const doc = getDocument(el);\n        doc.open();\n        doc.write(template);\n        doc.close();\n        createFixInterval(el, doc, text);\n    }\n    class GUIRichText extends GUIElement {\n        static register() {\n            return super.register({ tagName: 'gui-richtext' }, this);\n        }\n        on(evName, callback, params) {\n            if (['selection'].indexOf(evName) !== -1) {\n                evName = '_' + evName;\n            }\n            Events.$bind(this.$element, evName, callback.bind(this), params);\n            return this;\n        }\n        build() {\n            const el = this.$element;\n            const text = el.childNodes.length ? el.childNodes[0].nodeValue : '';\n            DOM.$empty(el);\n            const iframe = document.createElement('iframe');\n            iframe.setAttribute('border', 0);\n            iframe.onload = () => {\n                iframe.contentWindow.addEventListener('selectstart', () => {\n                    el.dispatchEvent(new CustomEvent('_selection', { detail: {} }));\n                });\n                iframe.contentWindow.addEventListener('pointerup', () => {\n                    el.dispatchEvent(new CustomEvent('_selection', { detail: {} }));\n                });\n            };\n            el.appendChild(iframe);\n            setTimeout(() => {\n                try {\n                    setDocumentData(el, text);\n                } catch (e) {\n                    console.warn('gui-richtext', 'build()', e);\n                }\n            }, 1);\n            return this;\n        }\n        command() {\n            try {\n                const doc = getDocument(this.$element);\n                if (doc && doc.execCommand) {\n                    return doc.execCommand.apply(doc, arguments);\n                }\n            } catch (e) {\n                console.warn('gui-richtext call() warning', e.stack, e);\n            }\n            return this;\n        }\n        query() {\n            try {\n                const doc = getDocument(this.$element);\n                if (doc && doc.queryCommandValue) {\n                    return doc.queryCommandValue.apply(doc, arguments);\n                }\n            } catch (e) {\n                console.warn('gui-richtext call() warning', e.stack, e);\n            }\n            return null;\n        }\n        get(param, value) {\n            if (param === 'value') {\n                return getDocumentData(this.$element);\n            }\n            return super.get(...arguments);\n        }\n        set(param, value) {\n            if (param === 'value') {\n                setDocumentData(this.$element, value);\n                return this;\n            }\n            return super.set(...arguments);\n        }\n    }\n    return { GUIRichText: GUIRichText };\n});\ndefine('skylark-osjsv2-client/gui/elements/tabs',[\n    '../../utils/dom',\n    '../../utils/gui',\n    '../../utils/events',\n    '../element'\n], function (DOM, GUI, Events, GUIElement) {\n    'use strict';\n    function toggleActive(el, eidx, idx) {\n        DOM.$removeClass(el, 'gui-active');\n        if (eidx === idx) {\n            DOM.$addClass(el, 'gui-active');\n        }\n    }\n    function selectTab(el, tabs, ev, idx, tab) {\n        tabs.querySelectorAll('li').forEach((tel, eidx) => {\n            toggleActive(tel, eidx, idx);\n        });\n        el.querySelectorAll('gui-tab-container').forEach((tel, eidx) => {\n            toggleActive(tel, eidx, idx);\n        });\n        DOM.$addClass(tab, 'gui-active');\n        el.dispatchEvent(new CustomEvent('_change', { detail: { index: idx } }));\n    }\n    function findTab(el, tabs, idx) {\n        let found = null;\n        if (typeof idx === 'number') {\n            found = idx;\n        } else {\n            tabs.querySelectorAll('li').forEach((iter, i) => {\n                if (found === null && iter.firstChild.textContent === idx) {\n                    found = i;\n                }\n            });\n        }\n        return found;\n    }\n    function removeTab(el, tabs, idx) {\n        const found = findTab(el, tabs, idx);\n        if (found !== null) {\n            tabs.children[found].remove();\n            el.querySelectorAll('gui-tab-container')[found].remove();\n        }\n    }\n    function createTab(el, tabs, label, prog) {\n        const tab = document.createElement('li');\n        const idx = tabs.children.length;\n        Events.$bind(tab, 'pointerdown', ev => {\n            selectTab(el, tabs, ev, idx, tab);\n        }, false);\n        tab.setAttribute('role', 'tab');\n        tab.setAttribute('aria-label', label);\n        tab.appendChild(document.createTextNode(label));\n        tabs.appendChild(tab);\n        if (prog) {\n            const tel = document.createElement('gui-tab-container');\n            tel.setAttribute('data-label', label);\n            tel.setAttribute('role', 'tabpanel');\n            el.appendChild(tel);\n        }\n    }\n    class GUITabs extends GUIElement {\n        static register() {\n            return super.register({ tagName: 'gui-tabs' }, this);\n        }\n        on(evName, callback, params) {\n            if ([\n                    'select',\n                    'activate'\n                ].indexOf(evName) !== -1) {\n                evName = 'change';\n            }\n            if (evName === 'change') {\n                evName = '_' + evName;\n            }\n            Events.$bind(this.$element, evName, callback.bind(this), params);\n            return this;\n        }\n        set(param, value) {\n            if ([\n                    'current',\n                    'selected',\n                    'active'\n                ].indexOf(param) !== -1) {\n                const el = this.$element;\n                const tabs = el.querySelector('ul');\n                const found = findTab(el, tabs, value);\n                if (found !== null) {\n                    selectTab(el, tabs, null, found, tabs[found]);\n                }\n                return this;\n            }\n            return super.set(...arguments);\n        }\n        get(param, value) {\n            if ([\n                    'current',\n                    'selected',\n                    'active'\n                ].indexOf(param) !== -1) {\n                const cur = this.$element.querySelector('ul > li[class=\"gui-active\"]');\n                return DOM.$index(cur);\n            }\n            return super.get(...arguments);\n        }\n        add(newtabs) {\n            const el = this.$element;\n            const tabs = el.querySelector('ul');\n            if (!(newtabs instanceof Array)) {\n                newtabs = [newtabs];\n            }\n            newtabs.forEach(label => {\n                createTab(el, tabs, label, true);\n            });\n            return this;\n        }\n        remove(removetabs) {\n            const el = this.$element;\n            const tabs = el.querySelector('ul');\n            if (!(removetabs instanceof Array)) {\n                removetabs = [removetabs];\n            }\n            removetabs.forEach(id => {\n                removeTab(el, tabs, id);\n            });\n            return this;\n        }\n        build() {\n            const el = this.$element;\n            const tabs = document.createElement('ul');\n            el.querySelectorAll('gui-tab-container').forEach((tel, idx) => {\n                createTab(el, tabs, GUI.getLabel(tel));\n                tel.setAttribute('role', 'tabpanel');\n            });\n            tabs.setAttribute('role', 'tablist');\n            el.setAttribute('role', 'navigation');\n            if (el.children.length) {\n                el.insertBefore(tabs, el.children[0]);\n            } else {\n                el.appendChild(tabs);\n            }\n            const currentTab = parseInt(el.getAttribute('data-selected-index'), 10) || 0;\n            selectTab(el, tabs, null, currentTab);\n            return this;\n        }\n    }\n    return { GUITabs: GUITabs };\n});\ndefine('skylark-osjsv2-client/gui/elements/treeview',[\n    '../../utils/dom',\n    '../../utils/gui',\n    '../dataview'\n], function (DOM, GUI, GUIDataView) {\n    'use strict';\n    function createEntry(cls, e) {\n        const entry = GUI.createElement('gui-tree-view-entry', e, ['entries']);\n        return entry;\n    }\n    function handleItemExpand(ev, el, root, expanded) {\n        if (typeof expanded === 'undefined') {\n            expanded = !DOM.$hasClass(root, 'gui-expanded');\n        }\n        DOM.$removeClass(root, 'gui-expanded');\n        if (expanded) {\n            DOM.$addClass(root, 'gui-expanded');\n        }\n        const children = root.children;\n        for (let i = 0; i < children.length; i++) {\n            if (children[i].tagName.toLowerCase() === 'gui-tree-view-entry') {\n                children[i].style.display = expanded ? 'block' : 'none';\n            }\n        }\n        const selected = {\n            index: DOM.$index(root),\n            data: GUI.getViewNodeValue(root)\n        };\n        root.setAttribute('data-expanded', String(expanded));\n        root.setAttribute('aria-expanded', String(expanded));\n        el.dispatchEvent(new CustomEvent('_expand', {\n            detail: {\n                entries: [selected],\n                expanded: expanded,\n                element: root\n            }\n        }));\n    }\n    function initEntry(cls, sel) {\n        const el = cls.$element;\n        if (sel._rendered) {\n            return;\n        }\n        sel._rendered = true;\n        const icon = sel.getAttribute('data-icon');\n        const label = GUI.getLabel(sel);\n        const expanded = el.getAttribute('data-expanded') === 'true';\n        const next = sel.querySelector('gui-tree-view-entry');\n        const container = document.createElement('div');\n        const dspan = document.createElement('span');\n        function onDndEnter(ev) {\n            ev.stopPropagation();\n            DOM.$addClass(sel, 'dnd-over');\n        }\n        function onDndLeave(ev) {\n            DOM.$removeClass(sel, 'dnd-over');\n        }\n        if (icon) {\n            dspan.style.backgroundImage = 'url(' + icon + ')';\n            DOM.$addClass(dspan, 'gui-has-image');\n        }\n        dspan.appendChild(document.createTextNode(label));\n        container.appendChild(dspan);\n        if (next) {\n            DOM.$addClass(sel, 'gui-expandable');\n            const expander = document.createElement('gui-tree-view-expander');\n            sel.insertBefore(container, next);\n            sel.insertBefore(expander, container);\n        } else {\n            sel.appendChild(container);\n        }\n        if (String(sel.getAttribute('data-draggable')) === 'true') {\n            GUI.createDraggable(container, (() => {\n                let data = {};\n                try {\n                    data = JSON.parse(sel.getAttribute('data-value'));\n                } catch (e) {\n                }\n                return { data: data };\n            })());\n        }\n        if (String(sel.getAttribute('data-droppable')) === 'true') {\n            let timeout;\n            GUI.createDroppable(container, {\n                onEnter: onDndEnter,\n                onOver: onDndEnter,\n                onLeave: onDndLeave,\n                onDrop: onDndLeave,\n                onItemDropped: (ev, eel, item) => {\n                    ev.stopPropagation();\n                    ev.preventDefault();\n                    timeout = clearTimeout(timeout);\n                    timeout = setTimeout(() => {\n                        DOM.$removeClass(sel, 'dnd-over');\n                    }, 10);\n                    let dval = {};\n                    try {\n                        dval = JSON.parse(eel.parentNode.getAttribute('data-value'));\n                    } catch (e) {\n                    }\n                    el.dispatchEvent(new CustomEvent('_drop', {\n                        detail: {\n                            src: item.data,\n                            dest: dval\n                        }\n                    }));\n                }\n            });\n        }\n        handleItemExpand(null, el, sel, expanded);\n        cls.bindEntryEvents(sel, 'gui-tree-view-entry');\n    }\n    class GUITreeView extends GUIDataView {\n        static register() {\n            return super.register({\n                parent: GUIDataView,\n                tagName: 'gui-tree-view'\n            }, this);\n        }\n        values() {\n            const el = this.$element;\n            return this.getSelected(el.querySelectorAll('gui-tree-view-entry'));\n        }\n        build(applyArgs) {\n            const el = this.$element;\n            let body = el.querySelector('gui-tree-view-body');\n            let found = !!body;\n            if (!body) {\n                body = document.createElement('gui-tree-view-body');\n                el.appendChild(body);\n            }\n            body.setAttribute('role', 'group');\n            el.setAttribute('role', 'tree');\n            el.setAttribute('aria-multiselectable', body.getAttribute('data-multiselect') || 'false');\n            el.querySelectorAll('gui-tree-view-entry').forEach((sel, idx) => {\n                sel.setAttribute('aria-expanded', 'false');\n                if (!found) {\n                    body.appendChild(sel);\n                }\n                sel.setAttribute('role', 'treeitem');\n                initEntry(this, sel);\n            });\n            return super.build(...arguments);\n        }\n        get(param, value, arg) {\n            if (param === 'entry') {\n                const body = this.$element.querySelector('gui-tree-view-body');\n                return this.getEntry(body.querySelectorAll('gui-tree-view-entry'), value, arg);\n            }\n            return super.get(...arguments);\n        }\n        set(param, value, arg, arg2) {\n            const el = this.$element;\n            const body = el.querySelector('gui-tree-view-body');\n            if (param === 'selected' || param === 'value') {\n                this.setSelected(body, body.querySelectorAll('gui-tree-view-entry'), value, arg, arg2);\n                return this;\n            }\n            return super.set(...arguments);\n        }\n        clear() {\n            const body = this.$element.querySelector('gui-tree-view-body');\n            return super.clear(body);\n        }\n        add(entries) {\n            const body = this.$element.querySelector('gui-tree-view-body');\n            let parentNode = body;\n            const recurse = (a, root, level) => {\n                super.add(a, (cls, e) => {\n                    if (e) {\n                        if (e.parentNode) {\n                            delete e.parentNode;\n                        }\n                        const entry = createEntry(this, e);\n                        root.appendChild(entry);\n                        if (e.entries) {\n                            recurse(e.entries, entry, level + 1);\n                        }\n                        initEntry(this, entry);\n                    }\n                });\n            };\n            if (typeof entries === 'object' && !(entries instanceof Array) && Object.keys(entries).length) {\n                parentNode = entries.parentNode || body;\n                entries = entries.entries || [];\n            }\n            recurse(entries, parentNode, 0);\n            return this;\n        }\n        remove(entries) {\n            return super.remove(entries, 'gui-tree-view-entry');\n        }\n        patch(entries) {\n            const body = this.$element.querySelector('gui-tree-view-body');\n            return super.patch(entries, 'gui-list-view-entry', body, createEntry, initEntry);\n        }\n        expand(entry) {\n            handleItemExpand(entry.ev, this.$element, entry.entry);\n            return this;\n        }\n    }\n    return { GUITreeView: GUITreeView };\n});\ndefine('skylark-osjsv2-client/gui/elements/visual',[\n    '../../utils/events',\n    '../element'\n], function (Events, GUIElement) {\n    'use strict';\n    function createVisualElement(el, nodeType, applyArgs) {\n        applyArgs = applyArgs || {};\n        if (typeof applyArgs !== 'object') {\n            console.error('Derp', 'applyArgs was not an object ?!');\n            applyArgs = {};\n        }\n        const img = document.createElement(nodeType);\n        const src = el.getAttribute('data-src');\n        const controls = el.getAttribute('data-controls');\n        if (controls) {\n            img.setAttribute('controls', 'controls');\n        }\n        const autoplay = el.getAttribute('data-autoplay');\n        if (autoplay) {\n            img.setAttribute('autoplay', 'autoplay');\n        }\n        Object.keys(applyArgs).forEach(function (k) {\n            let val = applyArgs[k];\n            if (typeof val === 'function') {\n                k = k.replace(/^on/, '');\n                if ((nodeType === 'video' || nodeType === 'audio') && k === 'load') {\n                    k = 'loadedmetadata';\n                }\n                Events.$bind(img, k, val.bind(img), false);\n            } else {\n                if (typeof applyArgs[k] === 'boolean') {\n                    val = val ? 'true' : 'false';\n                }\n                img.setAttribute(k, val);\n            }\n        });\n        img.src = src || 'about:blank';\n        el.appendChild(img);\n    }\n    class GUIAudio extends GUIElement {\n        static register() {\n            return super.register({ tagName: 'gui-audio' }, this);\n        }\n        on(evName, callback, params) {\n            const target = this.$element.querySelector('audio');\n            Events.$bind(target, evName, callback.bind(this), params);\n            return this;\n        }\n        build(applyArgs) {\n            createVisualElement(this.$element, 'audio', applyArgs);\n            return this;\n        }\n    }\n    class GUIVideo extends GUIElement {\n        static register() {\n            return super.register({ tagName: 'gui-video' }, this);\n        }\n        on(evName, callback, params) {\n            const target = this.$element.querySelector('video');\n            Events.$bind(target, evName, callback.bind(this), params);\n            return this;\n        }\n        build(applyArgs) {\n            createVisualElement(this.$element, 'video', applyArgs);\n            return this;\n        }\n    }\n    class GUIImage extends GUIElement {\n        static register() {\n            return super.register({ tagName: 'gui-image' }, this);\n        }\n        on(evName, callback, params) {\n            const target = this.$element.querySelector('img');\n            Events.$bind(target, evName, callback.bind(this), params);\n            return this;\n        }\n        build(applyArgs) {\n            createVisualElement(this.$element, 'img', applyArgs);\n            return this;\n        }\n    }\n    class GUICanvas extends GUIElement {\n        static register() {\n            return super.register({ tagName: 'gui-canvas' }, this);\n        }\n        on(evName, callback, params) {\n            const target = this.$element.querySelector('canvas');\n            Events.$bind(target, evName, callback.bind(this), params);\n            return this;\n        }\n        build() {\n            const canvas = document.createElement('canvas');\n            this.$element.appendChild(canvas);\n            return this;\n        }\n    }\n    return {\n        GUIAudio: GUIAudio,\n        GUIVideo: GUIVideo,\n        GUIImage: GUIImage,\n        GUICanvas: GUICanvas\n    };\n});\ndefine('skylark-osjsv2-client/helpers/default-application-window',[\n    '../vfs/file',\n    '../core/window',\n    '../core/dialog',\n    '../core/locales'\n], function (FileMetadata, Window, DialogWindow, a) {\n    'use strict';\n    return class DefaultApplicationWindow extends Window {\n        constructor(name, args, app, file) {\n            super(...arguments);\n            this.hasClosingDialog = false;\n            this.currentFile = file ? new FileMetadata(file) : null;\n            this.hasChanged = false;\n        }\n        destroy() {\n            super.destroy(...arguments);\n            this.currentFile = null;\n        }\n        init(wm, app) {\n            const root = super.init(...arguments);\n            return root;\n        }\n        _inited() {\n            const result = Window.prototype._inited.apply(this, arguments);\n            const app = this._app;\n            const menuMap = {\n                MenuNew: () => {\n                    app.newDialog(this.currentFile, this);\n                },\n                MenuSave: () => {\n                    app.saveDialog(this.currentFile, this);\n                },\n                MenuSaveAs: () => {\n                    app.saveDialog(this.currentFile, this, true);\n                },\n                MenuOpen: () => {\n                    app.openDialog(this.currentFile, this);\n                },\n                MenuClose: () => {\n                    this._close();\n                }\n            };\n            this._find('SubmenuFile').on('select', ev => {\n                if (menuMap[ev.detail.id]) {\n                    menuMap[ev.detail.id]();\n                }\n            });\n            this._find('MenuSave').set('disabled', true);\n            if (this.currentFile) {\n                if (!this._app.openFile(this.currentFile, this)) {\n                    this.currentFile = null;\n                }\n            }\n            return result;\n        }\n        _onDndEvent(ev, type, item, args) {\n            if (!Window.prototype._onDndEvent.apply(this, arguments)) {\n                return;\n            }\n            if (type === 'itemDrop' && item) {\n                const data = item.data;\n                if (data && data.type === 'file' && data.mime) {\n                    this._app.openFile(new FileMetadata(data), this);\n                }\n            }\n        }\n        _close() {\n            if (this.hasClosingDialog) {\n                return;\n            }\n            if (this.hasChanged) {\n                this.hasClosingDialog = true;\n                this.checkHasChanged(discard => {\n                    this.hasClosingDialog = false;\n                    if (discard) {\n                        this.hasChanged = false;\n                        this._close();\n                    }\n                });\n                return;\n            }\n            Window.prototype._close.apply(this, arguments);\n        }\n        checkHasChanged(cb) {\n            if (this.hasChanged) {\n                DialogWindow.create('Confirm', {\n                    buttons: [\n                        'yes',\n                        'no'\n                    ],\n                    message: a._('MSG_GENERIC_APP_DISCARD')\n                }, function (ev, button) {\n                    cb(button === 'ok' || button === 'yes');\n                }, {\n                    parent: this,\n                    modal: true\n                });\n                return;\n            }\n            cb(true);\n        }\n        showFile(file, content) {\n            this.updateFile(file);\n        }\n        updateFile(file) {\n            this.currentFile = file || null;\n            this.hasChanged = false;\n            if (this._scheme) {\n                this._find('MenuSave').set('disabled', !file);\n            }\n            if (file) {\n                this._setTitle(file.filename, true);\n            } else {\n                this._setTitle();\n            }\n        }\n        getFileData() {\n            return null;\n        }\n        _onKeyEvent(ev, type, shortcut) {\n            if (shortcut === 'SAVE') {\n                this._app.saveDialog(this.currentFile, this, !this.currentFile);\n                return false;\n            } else if (shortcut === 'SAVEAS') {\n                this._app.saveDialog(this.currentFile, this, true);\n                return false;\n            } else if (shortcut === 'OPEN') {\n                this._app.openDialog(this.currentFile, this);\n                return false;\n            }\n            return Window.prototype._onKeyEvent.apply(this, arguments);\n        }\n    };\n});\ndefine('skylark-osjsv2-client/helpers/default-application',[\n    '../core/application',\n    '../core/dialog',\n    '../vfs/file',\n    '../vfs/fs',\n    '../utils/fs',\n    '../core/locales'\n], function (Application, DialogWindow, FileMetadata, VFS, FS, a) {\n    'use strict';\n    return class DefaultApplication extends Application {\n        constructor(name, args, metadata, opts) {\n            super(...arguments);\n            this.defaultOptions = Object.assign({}, {\n                readData: true,\n                rawData: false,\n                extension: '',\n                mime: 'application/octet-stream',\n                filetypes: [],\n                filename: 'New file'\n            }, opts);\n        }\n        destroy() {\n            super.destroy(...arguments);\n        }\n        _onMessage(msg, obj, args) {\n            super._onMessage(...arguments);\n            const current = this._getArgument('file');\n            const win = this._getWindow(this.__mainwindow);\n            if (msg === 'vfs' && args.source !== null && args.source !== this.__pid && args.file) {\n                if (win && current && current.path === args.file.path) {\n                    DialogWindow.create('Confirm', {\n                        buttons: [\n                            'yes',\n                            'no'\n                        ],\n                        message: a._('MSG_FILE_CHANGED')\n                    }, (ev, button) => {\n                        if (button === 'ok' || button === 'yes') {\n                            this.openFile(new FileMetadata(args.file), win);\n                        }\n                    }, {\n                        parent: win,\n                        modal: true\n                    });\n                }\n            }\n        }\n        openFile(file, win) {\n            if (!file) {\n                return false;\n            }\n            const onError = error => {\n                if (error) {\n                    OSjs.error(this.__label, a._('ERR_FILE_APP_OPEN'), a._('ERR_FILE_APP_OPEN_ALT_FMT', file.path, error));\n                    return true;\n                }\n                return false;\n            };\n            const onDone = result => {\n                this._setArgument('file', file);\n                win.showFile(file, result);\n            };\n            const check = this.__metadata.mime || [];\n            if (!FS.checkAcceptMime(file.mime, check)) {\n                OSjs.error(this.__label, a._('ERR_FILE_APP_OPEN'), a._('ERR_FILE_APP_OPEN_FMT', file.path, file.mime));\n                return false;\n            }\n            win._toggleLoading(true);\n            function callbackVFS(error, result) {\n                win._toggleLoading(false);\n                if (onError(error)) {\n                    return;\n                }\n                onDone(result);\n            }\n            if (this.defaultOptions.readData) {\n                VFS.read(file, { type: this.defaultOptions.rawData ? 'binary' : 'text' }, this).then(res => callbackVFS(false, res)).catch(err => callbackVFS(err));\n            } else {\n                VFS.url(file).then(res => callbackVFS(false, res)).catch(err => callbackVFS(err));\n            }\n            return true;\n        }\n        saveFile(file, value, win) {\n            if (!file) {\n                return;\n            }\n            win._toggleLoading(true);\n            VFS.write(file, value || '', null, this).then(() => {\n                this._setArgument('file', file);\n                win.updateFile(file);\n                return true;\n            }).catch(error => {\n                OSjs.error(this.__label, a._('ERR_FILE_APP_SAVE'), a._('ERR_FILE_APP_SAVE_ALT_FMT', file.path, error));\n            }).finally(() => {\n                win._toggleLoading(false);\n            });\n        }\n        saveDialog(file, win, saveAs, cb) {\n            const value = win.getFileData();\n            if (!saveAs) {\n                this.saveFile(file, value, win);\n                return;\n            }\n            DialogWindow.create('File', {\n                file: file,\n                filename: file ? file.filename : this.defaultOptions.filename,\n                filetypes: this.defaultOptions.filetypes,\n                filter: this.__metadata.mime,\n                extension: this.defaultOptions.extension,\n                mime: this.defaultOptions.mime,\n                type: 'save'\n            }, (ev, button, result) => {\n                if (button === 'ok') {\n                    this.saveFile(result, value, win);\n                }\n                if (typeof cb === 'function') {\n                    cb(ev, button, result);\n                }\n            }, {\n                parent: win,\n                modal: true\n            });\n        }\n        openDialog(file, win) {\n            const openDialog = () => {\n                DialogWindow.create('File', {\n                    file: file,\n                    filter: this.__metadata.mime\n                }, (ev, button, result) => {\n                    if (button === 'ok' && result) {\n                        this.openFile(new FileMetadata(result), win);\n                    }\n                }, {\n                    parent: win,\n                    modal: true\n                });\n            };\n            win.checkHasChanged(discard => {\n                if (discard) {\n                    openDialog();\n                }\n            });\n        }\n        newDialog(path, win) {\n            win.checkHasChanged(discard => {\n                if (discard) {\n                    this._setArgument('file', null);\n                    win.showFile(null, null);\n                }\n            });\n        }\n    };\n});\ndefine('skylark-osjsv2-client/helpers/iframe-application-window',['../core/window'], function (Window) {\n    'use strict';\n    let IFRAME_COUNT = 0;\n    return class IFrameApplicationWindow extends Window {\n        constructor(name, opts, app) {\n            opts = Object.assign({}, {\n                src: 'about:blank',\n                focus: function () {\n                },\n                blur: function () {\n                },\n                icon: null,\n                title: 'IframeApplicationWindow',\n                width: 320,\n                height: 240,\n                allow_resize: false,\n                allow_restore: false,\n                allow_maximize: false\n            }, opts);\n            super('IFrameApplicationWindow', opts, app);\n            this._iwin = null;\n            this._frame = null;\n        }\n        destroy() {\n            this.postMessage('Window::destroy');\n            return super.destroy(...arguments);\n        }\n        init(wmRef, app) {\n            const root = super.init(...arguments);\n            root.style.overflow = 'visible';\n            const id = 'IframeApplicationWindow' + IFRAME_COUNT.toString();\n            const iframe = document.createElement('iframe');\n            iframe.setAttribute('border', 0);\n            iframe.id = id;\n            iframe.className = 'IframeApplicationFrame';\n            iframe.addEventListener('load', () => {\n                this._iwin = iframe.contentWindow;\n                this.postMessage('Window::init');\n            });\n            this.setLocation(this._opts.src, iframe);\n            root.appendChild(iframe);\n            this._frame = iframe;\n            try {\n                this._iwin = iframe.contentWindow;\n            } catch (e) {\n            }\n            if (this._iwin) {\n                this._iwin.focus();\n            }\n            this._frame.focus();\n            this._opts.focus(this._frame, this._iwin);\n            IFRAME_COUNT++;\n            return root;\n        }\n        _blur() {\n            if (super._blur(...arguments)) {\n                if (this._iwin) {\n                    this._iwin.blur();\n                }\n                if (this._frame) {\n                    this._frame.blur();\n                }\n                this._opts.blur(this._frame, this._iwin);\n                return true;\n            }\n            return false;\n        }\n        _focus() {\n            if (super._focus(...arguments)) {\n                if (this._iwin) {\n                    this._iwin.focus();\n                }\n                if (this._frame) {\n                    this._frame.focus();\n                }\n                this._opts.focus(this._frame, this._iwin);\n                return true;\n            }\n            return false;\n        }\n        postMessage(message) {\n            if (this._iwin && this._app) {\n                console.debug('IFrameApplicationWindow::postMessage()', message);\n                this._iwin.postMessage({\n                    message: message,\n                    pid: this._app.__pid,\n                    wid: this._wid\n                }, window.location.href);\n            }\n        }\n        onPostMessage(message, ev) {\n            console.debug('IFrameApplicationWindow::onPostMessage()', message);\n        }\n        setLocation(src, iframe) {\n            iframe = iframe || this._frame;\n            const oldbefore = window.onbeforeunload;\n            window.onbeforeunload = null;\n            iframe.src = src;\n            window.onbeforeunload = oldbefore;\n        }\n    };\n});\ndefine('skylark-osjsv2-client/helpers/iframe-application',[\n    './iframe-application-window',\n    '../core/application'\n], function (IFrameApplicationWindow, Application) {\n    'use strict';\n    return class IFrameApplication extends Application {\n        constructor(name, args, metadata, opts) {\n            super(...arguments);\n            this.options = Object.assign({}, {\n                icon: '',\n                title: 'IframeApplicationWindow'\n            }, opts);\n            this.options.src = this._getResource(this.options.src);\n        }\n        init(settings, metadata) {\n            super.init(...arguments);\n            const name = this.__pname + 'Window';\n            this._addWindow(new IFrameApplicationWindow(name, this.options, this));\n        }\n        onPostMessage(message, ev) {\n            console.debug('IFrameApplication::onPostMessage()', message);\n            const _response = (err, res) => {\n                this.postMessage({\n                    id: message.id,\n                    method: message.method,\n                    error: err,\n                    result: Object.assign({}, res)\n                });\n            };\n            if (typeof message.id === 'number' && message.method) {\n                if (this[message.method]) {\n                    this[message.method](message.args || {}, _response);\n                } else {\n                    _response('No such method');\n                }\n            }\n        }\n        postMessage(message) {\n            const win = this._getMainWindow();\n            if (win) {\n                win.postMessage(message);\n            }\n        }\n    };\n});\ndefine('skylark-osjsv2-client/main',[\r\n\t\"skylark-langx/skylark\",\r\n\t\"./boot\",\r\n\t\"./locales/en_EN\",\r\n\t\"./core/auth/database\",\r\n\t\"./core/auth/demo\",\r\n\t\"./core/auth/pam\",\r\n\t\"./core/auth/standalone\",\r\n\t\"./core/connections/http\",\r\n\t\"./core/connections/standalone\",\r\n\t\"./core/connections/ws\",\r\n\t\"./core/storage/database\",\r\n\t\"./core/storage/demo\",\r\n\t\"./core/storage/standalone\",\r\n\t\"./core/storage/system\",\r\n\t\"./gui/elements/containers\",\r\n\t\"./gui/elements/fileview\",\r\n\t\"./gui/elements/iconview\",\r\n\t\"./gui/elements/inputs\",\r\n\t\"./gui/elements/listview\",\r\n\t\"./gui/elements/menus\",\r\n\t\"./gui/elements/misc\",\r\n\t\"./gui/elements/richtext\",\r\n\t\"./gui/elements/tabs\",\r\n\t\"./gui/elements/treeview\",\r\n\t\"./gui/elements/visual\",\r\n\t\"./helpers/default-application-window\",\r\n\t\"./helpers/default-application\",\r\n\t\"./helpers/event-handler\",\r\n\t\"./helpers/handle-qs\",\r\n\t\"./helpers/hooks\",\r\n\t\"./helpers/iframe-application-window\",\r\n\t\"./helpers/iframe-application\",\r\n\t\"./helpers/settings-fragment\",\r\n\t\"./helpers/window-behaviour\",\r\n\r\n],function(){\r\n\treturn {};\r\n});\ndefine('skylark-osjsv2-client', ['skylark-osjsv2-client/main'], function (main) { return main; });\n\n"]}