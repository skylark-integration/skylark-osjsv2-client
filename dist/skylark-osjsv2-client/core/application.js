/**
 * skylark-osjsv2-client - A version of osjs-client that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-osjsv2-client/
 * @license MIT
 */
define(["./process","./settings-manager","./window-manager","./window"],function(i,t,s,n){"use strict";return class extends i{constructor(i,s,n,e,o){console.group("Application::constructor()",arguments),o=Object.assign({closeWithMain:!0,closeOnEmpty:!0},o||{}),super(...arguments),this.__inited=!1,this.__mainwindow=null,this.__windows=[],this.__settings=null,this.__destroying=!1,this.__options=o;try{this.__settings=t.instance(i,e||{})}catch(s){console.warn("Application::construct()","An error occured while loading application settings",s),console.warn(s.stack),this.__settings=t.instance(i,{})}console.groupEnd()}init(i,t){const n=s.instance,e=()=>{let i;n&&this.__windows.forEach((t,s)=>{t&&(n.addWindow(t),i=t)}),i&&i._focus()};this.__inited||(console.debug("Application::init()",this.__pname),this.__settings&&this.__settings.set(null,i),this.__inited=!0,this.__evHandler.emit("init",[i,t]),e())}destroy(){if(this.__destroying||this.__destroyed)return!0;this.__destroying=!0,console.group("Application::destroy()",this.__pname),this.__windows.forEach(i=>i&&i.destroy()),this.__scheme&&"function"==typeof this.__scheme.destroy&&this.__scheme.destroy(),this.__mainwindow=null,this.__settings={},this.__windows=[],this.__scheme=null;const i=super.destroy(...arguments);return console.groupEnd(),i}_onMessage(i,t,s){return!this.__destroying&&!this.__destroyed&&("destroyWindow"===i?this.__destroying||(this._removeWindow(t),this.__options.closeOnEmpty&&!this.__windows.length?(console.info("All windows removed, destroying application"),this.destroy()):t._name===this.__mainwindow&&this.__options.closeWithMain&&(console.info("Main window was closed, destroying application"),this.destroy())):"attention"===i&&this.__windows.length&&this.__windows[0]&&this.__windows[0]._focus(),super._onMessage(...arguments))}_addWindow(i,t,e){if(!(i instanceof n))throw new TypeError("Application::_addWindow() expects Core.Window");console.debug("Application::_addWindow()"),this.__windows.push(i),(e||1===this.__windows.length)&&(this.__mainwindow=i._name);const o=s.instance;return this.__inited&&(o&&o.addWindow(i),i._properties.start_focused&&setTimeout(()=>{i._focus()},5)),(t||function(){})(i,o),i}_removeWindow(i){if(!(i instanceof n))throw new TypeError("Application::_removeWindow() expects Core.Window");const t=this.__windows.findIndex(t=>t&&t._wid===i._wid);if(-1!==t){const i=this.__windows[t];console.debug("Application::_removeWindow()",i._wid);try{i.destroy()}catch(i){console.warn(i)}this.__windows.splice(t,1)}return-1!==t}_getWindow(i,t){t=t||"name",null===i&&(i=this.__mainwindow);let s="tag"===t?[]:null;return this.__windows.every((n,e)=>{if(n&&n["_"+t]===i){if("tag"!==t)return s=n,!1;s.push(n)}return!0}),s}_getWindowByName(i){return this._getWindow(i)}_getWindowsByTag(i){return this._getWindow(i,"tag")}_getWindows(){return this.__windows}_getMainWindow(){return this._getWindow(this.__mainwindow,"name")}_getSetting(i){return this.__settings?this.__settings.get(i):null}_getSessionData(){const i=this.__args,t=this.__windows,s={name:this.__pname,args:i,windows:[]};return t.forEach((i,t)=>{i&&i._properties.allow_session&&s.windows.push({name:i._name,dimension:i._dimension,position:i._position,state:i._state})}),s}_setSetting(i,t,s){void 0===s&&(s=!0),4===arguments.length&&"function"==typeof arguments[3]&&(s=arguments[3]),this.__settings&&this.__settings.set(i,t,s)}}});
//# sourceMappingURL=../sourcemaps/core/application.js.map
