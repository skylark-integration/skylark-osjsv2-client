/**
 * skylark-osjsv2-client - A version of osjs-client that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-osjsv2-client/
 * @license MIT
 */
define(["./storage","../helpers/settings-fragment"],function(t,e){"use strict";return new class{constructor(){this.storage={},this.defaultSettings={},this.watches=[]}init(t){return this.storage=t||{},Promise.resolve()}get(t,e){try{return this.storage[t]&&Object.keys(this.storage[t]).length?e?this.storage[t][e]:this.storage[t]:e?this.defaultSettings[t][e]:this.defaultSettings[t]}catch(t){console.warn("SettingsManager::get()","exception",t,t.stack)}return!1}set(t,e,s,a,r){let i=Promise.resolve(!0);try{e?(void 0===this.storage[t]&&(this.storage[t]={}),["number","string"].indexOf(typeof e)>=0?this.storage[t][e]=s:console.warn("SettingsManager::set()","expects key to be a valid iter, not",e)):this.storage[t]=s}catch(t){console.warn("SettingsManager::set()","exception",t,t.stack)}return a&&(i=this.save(t),"function"==typeof a&&(console.warn("Using a callback is deprecated, you should use the returned promise"),i.then(t=>a(!1,t)).catch(t=>a(t,!1)))),void 0!==r&&!0!==r||this.changed(t),i}save(e){console.debug("SettingsManager::save()",e,this.storage);const s={};return Object.keys(this.storage).filter(t=>!t.match(/^__/)).forEach(t=>{s[t]=this.storage[t]}),t.instance.saveSettings(e,s)}defaults(t,e){this.defaultSettings[t]=e}instance(t,s){(!this.storage[t]||this.storage[t]instanceof Array)&&(this.storage[t]={});const a=new e(this.storage[t],t,this);return arguments.length>1&&(this.defaults(t,s),a.mergeDefaults(s)),a}unwatch(t){void 0!==this.watches[t]&&delete this.watches[t]}watch(t,e){return!!this.storage[t]&&this.watches.push({pool:t,callback:e})-1}changed(t){return this.watches.forEach(e=>{e&&e.pool===t&&e.callback(this.storage[t])}),this}clear(t,e){return e=void 0===e||!0===e,this.set(t,null,{},e),this}}});
//# sourceMappingURL=../sourcemaps/core/settings-manager.js.map
