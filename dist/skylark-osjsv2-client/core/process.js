/**
 * skylark-osjsv2-client - A version of osjs-client that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-osjsv2-client/
 * @license MIT
 */
define(["./connection","../helpers/event-handler","./theme","../utils/fs","./config","../utils/compability","./locales","../helpers/hooks","../helpers/loader","../vfs/file","../utils/preloader","./settings-manager","./package-manager"],function(e,t,s,r,a,i,n,o,_,c,l,h,p){"use strict";let d=[],u=[];function f(e,t){if(e>=0&&u[e])try{const s=u[e].destroy(t);if(console.warn("Killing application",e,s),!1!==s)return u[e]=null,!0}catch(e){console.warn(e)}return!1}return class g{constructor(e,s,r){console.group("Process::constructor()",u.length,arguments),this.__pid=u.push(this)-1,this.__pname=e,this.__args=s||{},this.__metadata=r||{},this.__started=new Date,this.__destroyed=!1,this.__evHandler=new t(e,["message","attention","hashchange","api","destroy","destroyWindow","vfs","vfs:mount","vfs:unmount","vfs:mkdir","vfs:write","vfs:move","vfs:copy","vfs:delete","vfs:upload","vfs:update"]),this.__label=this.__metadata.name,this.__path=this.__metadata.path,this.__scope=this.__metadata.scope||"system",this.__iter=this.__metadata.className,console.groupEnd()}destroy(){return!this.__destroyed&&(this.__destroyed=!0,console.group("Process::destroy()",this.__pid,this.__pname),this._emit("destroy",[]),this.__evHandler&&(this.__evHandler=this.__evHandler.destroy()),this.__pid>=0&&(u[this.__pid]=null),console.groupEnd(),!0)}_onMessage(e,t,s){let r=(s=s||{}).source;r&&"object"==typeof r&&(r instanceof g?r=r.__pid:r._app&&(r=r._app?r._app.__pid:-1)),this.__evHandler&&r!==this.__pid&&(console.debug("Process::_onMessage()",e,t,s,this.__pid,this.__pname),this.__evHandler.emit("message",[e,t,s]),"vfs"===e.substr(0,3)&&this.__evHandler.emit("vfs",[e,t,s]),this.__evHandler.emit(e,[t,s,e]))}_emit(e,t){return this.__evHandler?this.__evHandler.emit(e,t):null}_on(e,t){return this.__evHandler?this.__evHandler.on(e,t,this):null}_off(e,t){this.__evHandler&&this.__evHandler.off(e,t)}_api(t,s,r){return"boolean"==typeof r?r={indicator:r}:"object"!=typeof r&&(r={}),this._emit("api",[t]),new Promise((a,i)=>{e.request("application",{application:this.__iter,path:this.__path,method:t,args:s},r).then(e=>this.__destroyed?(console.warn("Process::_api()","INGORED RESPONSE: Process was closed"),!1):(a(e),!0)).catch(e=>{this.__destroyed||i(e instanceof Error?e:new Error(e))})})}_getArgument(e){return void 0===this.__args[e]?null:this.__args[e]}_getArguments(){return this.__args}_getResource(e,t){return p.getPackageResource(this,e,t)}_setArgument(e,t){this.__args[e]=t}static kill(e){return f(e)}static killAll(e){let t=()=>!0;e&&(t=e instanceof RegExp?t=>t.__pname.match(e):t=>t.__pname===e),this.getProcesses().filter(e=>t(e)).forEach(e=>f(e.__pid,!0)),u=[]}static message(e,t,s){s=s||{},console.debug("Process::message()",e,t,s);let r=s.filter||(()=>!0);if("string"==typeof r){const e=r;r=(t=>t.__pname===e)}this.getProcesses().filter(r).forEach(r=>r._onMessage(e,t,s))}static getProcess(e,t){if("number"==typeof e)return u[e];const s=this.getProcesses().filter(t=>t.__pname===e);return t?s[0]:s}static getProcesses(){return u.filter(e=>!!e)}static reload(e){e instanceof Array||(e=[e]),e.map(e=>this.getProcess(e,!0)).filter(e=>!!e).forEach(e=>{let t,s=null,r=e._getSessionData(),a={};try{t=e.__pname,s=e.destroy()}catch(e){console.warn("Process::reload()",e.stack,e)}null!==r&&((a=r.args).__resume__=!0,a.__windows__=r.windows||[]),a.__preload__={force:!0},s instanceof Promise||(s=Promise.resolve(!0)),t&&s.then(()=>setTimeout(()=>{this.create(t,a)},500))})}static create(e,t,r){t=t||{},r=r||function(){};const c=e+JSON.stringify(t);if(-1!==d.indexOf(c))return Promise.resolve(null);d.push(c);return new Promise((f,m)=>{console.group("Process::create()",e,t);const P=()=>{console.groupEnd();const t=d.indexOf(c);t>=0&&d.splice(t,1),_.destroy("Main.launch."+e)},E=t=>(_.destroy("Main.launch."+e),P(),u=t,OSjs.error(n._("ERR_APP_LAUNCH_FAILED"),n._("ERR_APP_LAUNCH_FAILED_FMT",e),u,u,!0),m(t));try{(()=>{if(!e)throw new Error("Cannot Process::create() witout a application name");const c=i.getCompability(),d=p.getPackage(e),u=g.getProcess(e,!0);if(!d)throw new Error(n._("ERR_APP_LAUNCH_MANIFEST_FAILED_FMT",e));const f=(d.compability||[]).filter(e=>void 0!==c[e]&&!c[e]);if(f.length)throw new Error(n._("ERR_APP_LAUNCH_COMPABILITY_FAILED_FMT",e,f.join(", ")));if(!0===d.singular&&u)return console.warn("Process::create()","detected that this application is a singular and already running..."),u._onMessage("attention",t),Promise.resolve(u);o.triggerHook("processStart",[e,t]),_.create("Main.launch."+e,{title:n._("LBL_STARTING")+" "+d.name,icon:s.getIcon(d.icon,"16x16")});let m={max:!0===d.preloadParallel?a.getConfig("Connection.PreloadParallel"):d.preloadParallel};return t.__preload__&&(m=Object.assign(m,t.__preload__),delete t.__preload__),new Promise((s,a)=>{const i=e=>(console.warn(e),a(new Error(e)));l.preload(d.preload,m).then(a=>{if(a.failed.length)return i(n._("ERR_APP_PRELOAD_FAILED_FMT",e,a.failed.join(",")));if(void 0===OSjs.Applications[e])return i(new Error(n._("ERR_APP_RESOURCES_MISSING_FMT",e)));let _;try{_=new(0,OSjs.Applications[e])(t,d),r(_,d)}catch(e){return i(e)}try{const s=h.get(_.__pname)||{};_.init(s,d),o.triggerHook("processStarted",[{application:_,name:e,args:t,settings:s,metadata:d}])}catch(e){return i(e)}return s(_)}).catch(i)})})().then(f).catch(E).finally(P)}catch(e){E(e)}});var u}static createFromArray(e,t){return e=e||[],t=t||function(){},console.info("Process::createFromArray()",e),Promise.each(e,e=>new Promise((s,r)=>{if((e=function(e){if("string"==typeof e){const t=e.split("@"),s=t[0];let r={};if(void 0!==t[1])try{r=JSON.parse(t[1])}catch(e){}e={name:s,args:r}}return e}(e)).name)try{this.create(e.name,e.args,(s,r)=>{t(s,r,e.name,e.args)}).then(s).catch(r)}catch(e){r(e)}else s()}))}static createFromFile(e,t){if(e=new c(e),(t=Object.assign({file:e},t||{})).args&&Object.keys(t.args).forEach(e=>{t[e]=t.args[e]}),!e.path)throw new Error("Cannot open file without a path");if(console.info("Process::createFromFile()",e,t),"osjs/application"===e.mime)return this.create(r.filename(e.path));if("dir"===e.type){const t=h.instance("DefaultApplication").get("dir","ApplicationFileManager");return this.create(t,{path:e.path})}return new Promise((s,r)=>{const a=h.get("DefaultApplication",e.mime);let i=p.getPackagesByMime(e.mime);if(!t.forceList&&a&&p.getPackage(a)&&(console.debug("Process::createFromFile()","default application",a),i=[a]),0===i.length)OSjs.error(n._("ERR_FILE_OPEN"),n._("ERR_FILE_OPEN_FMT",e.path),n._("ERR_APP_MIME_NOT_FOUND_FMT",e.mime)),r(new Error(n._("ERR_APP_MIME_NOT_FOUND_FMT",e.mime)));else if(1===i.length)this.create(i[0],t).then(s).catch(r);else{OSjs.require("core/dialog").default.create("ApplicationChooser",{file:e,list:i},(a,i,n)=>{"ok"===i&&(this.create(n.name,t),h.set("DefaultApplication",e.mime,n.useDefault?n.name:null,!0).then(s).catch(e=>{r("string"==typeof e?new Error(e):e)}))})}})}}});
//# sourceMappingURL=../sourcemaps/core/process.js.map
