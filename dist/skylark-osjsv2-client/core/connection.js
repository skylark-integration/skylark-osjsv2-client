/**
 * skylark-osjsv2-client - A version of osjs-client that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-osjsv2-client/
 * @license MIT
 */
define(["skylark-axios","../helpers/event-handler","../helpers/loader","./config"],function(e,n,t,o){"use strict";function r(e,n){e.lengthComputable?n(e,e.loaded/e.total):n(e,-1)}let i;return class{static get instance(){return i}constructor(){i||(i=this),this.offline=!1,this.index=0,this._evHandler=new n(name,[]),this.onlineFn=(()=>this.onOnline()),this.offlineFn=(()=>this.onOffline())}init(){return void 0!==navigator.onLine&&(window.addEventListener("offline",this.offlineFn),window.addEventListener("online",this.onlineFn)),Promise.resolve()}destroy(){window.removeEventListener("offline",this.offlineFn),window.removeEventListener("online",this.onlineFn),this._evHandler&&(this._evHandler=this._evHandler.destroy()),i=null}getVFSPath(e,n){n=n||{};const t=o.getConfig("Connection.RootURI","/").replace(/\/?$/,"/"),r=o.getConfig("VFS.Dist");if("file:"===window.location.protocol)return e?t+e.path.substr(r.length):t;let i=o.getConfig("Connection.FSURI","/");if(e?(i+="/read",n.path=e.path):i+="/upload",n){const e=Object.keys(n).map(e=>e+"="+encodeURIComponent(n[e]));e.length&&(i+="?"+e.join("&"))}return i}isOnline(){return!this.offline}isOffline(){return this.offline}onVFSRequestCompleted(e,n,t,o,r){return Promise.resolve(!0)}onOnline(){console.warn("Connection::onOnline()","Going online..."),this.offline=!1,this._evHandler&&this._evHandler.emit("online")}onOffline(e){console.warn("Connection::onOffline()","Going offline..."),!this.offline&&this._evHandler&&this._evHandler.emit("offline",[e]),this.offline=!0}createRequest(n,t,o){if(t=t||{},o=o||{},this.offline)return Promise.reject(new Error("You are currently off-line and cannot perform this operation!"));const{raw:i,requestOptions:s}=this.createRequestOptions(n,t);return new Promise((n,t)=>{e(function(e,n){const t=(n=n||{}).onprogress||function(){},o=["onsuccess","onerror","onprogress","oncanceled"];return Object.keys(n).forEach(t=>{-1===o.indexOf(t)&&(e[t]=n[t])}),e.onUploadProgress=(e=>r(e,t)),e.onDownloadProgress=(e=>r(e,t)),e}(s,o)).then(e=>n(i?e.data:{error:!1,result:e.data})).catch(e=>{t(new Error(e.message||e))})})}createRequestOptions(e,n){const t=e.replace(/^FS:/,"");let r=!0,i={responseType:"json",url:o.getConfig("Connection.APIURI")+"/"+t,method:"POST",data:n};return e.match(/^FS:/)&&("get"===t?(i.responseType="arraybuffer",i.url=n.url||this.getVFSPath({path:n.path}),i.method=n.method||"GET",r=!1):i.url="upload"===t?this.getVFSPath():o.getConfig("Connection.FSURI")+"/"+t),{raw:r,requestOptions:i}}subscribe(e,n){return this._evHandler.on(e,n,this)}unsubscribe(e,n){return this._evHandler.off(e,n)}static request(e,n,o){return n=n||{},(o=o||{})&&"object"!=typeof o?Promise.reject(new TypeError("request() expects an object as options")):(t.create("Connection.request"),void 0!==o.indicator&&delete o.indicator,new Promise((r,i)=>{this.instance.createRequest(e,n,o).then(e=>e.error?i(new Error(e.error)):r(e.result)).catch(e=>{i(new Error(e))}).finally(()=>{t.destroy("Connection.request")})}))}}});
//# sourceMappingURL=../sourcemaps/core/connection.js.map
