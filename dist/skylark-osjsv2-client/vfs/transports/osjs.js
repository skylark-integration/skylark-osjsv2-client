/**
 * skylark-osjsv2-client - A version of osjs-client that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-osjsv2-client/
 * @license MIT
 */
define(["../file","../../utils/fs","../../core/connection","../transport","../../core/config","../../core/locales"],function(e,t,r,n,s,i){"use strict";return class extends n{_request(e,t,n){return r.request("FS:"+e,t,n)}_requestUpload(r,n,a){if(a=a||{},r=r instanceof e?r.path:r,void 0!==n.size){const e=s.getConfig("VFS.MaxUploadSize");if(e>0){if(n.size>e){const r=i._("DIALOG_UPLOAD_TOO_BIG_FMT",t.humanFileSize(e));return Promise.reject(new Error(r))}}}const o=new FormData;return o.append("path",r),n&&o.append("filename",n.filename),a&&Object.keys(a).forEach(e=>{"meta"!==e&&"function"!=typeof a[e]&&o.append(e,String(a[e]))}),n instanceof window.ArrayBuffer&&o.append("size",String(n.byteLength)),t.addFormFile(o,"upload",n,a.meta),this._request("upload",o,a)}scandir(t,r){r=r||{};const n={path:t.path,options:{shortcuts:r.shortcuts}};return new Promise((t,s)=>{this._request("scandir",n,r).then(r=>t(r.map(t=>new e(t)))).catch(s)})}read(e,t){return this._request("get",{path:e.path},t)}write(r,n,s){(s=s||{}).meta=r,s.overwrite=!0,s.onprogress=s.onprogress||function(){};const i=new e(t.dirname(r.path),r.mime);return this._requestUpload(i,n,s)}unlink(e){return this._request("unlink",{path:e.path})}copy(e,t,r){return this._request("copy",{src:e.path,dest:t.path},r)}move(e,t,r){return this._request("move",{src:e.path,dest:t.path},r)}exists(e){return this._request("exists",{path:e.path})}fileinfo(e){return this._request("fileinfo",{path:e.path})}mkdir(e){return this._request("mkdir",{path:e.path})}upload(e,t,r){return this._requestUpload(e,t,r)}url(t,n){return"string"==typeof t&&(t=new e(t)),Promise.resolve(r.instance.getVFSPath(t,n))}find(e,t){return this._request("find",{path:e.path,args:t})}trash(e){return Promise.reject(new Error(i._("ERR_VFS_UNAVAILABLE")))}untrash(e){return Promise.reject(new Error(i._("ERR_VFS_UNAVAILABLE")))}emptyTrash(){return Promise.reject(new Error(i._("ERR_VFS_UNAVAILABLE")))}freeSpace(e){return this._request("freeSpace",{root:e})}}});
//# sourceMappingURL=../../sourcemaps/vfs/transports/osjs.js.map
