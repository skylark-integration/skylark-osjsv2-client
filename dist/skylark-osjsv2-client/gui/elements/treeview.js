/**
 * skylark-osjsv2-client - A version of osjs-client that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-osjsv2-client/
 * @license MIT
 */
define(["../../utils/dom","../../utils/gui","../dataview"],function(e,t,r){"use strict";function n(e,r){return t.createElement("gui-tree-view-entry",r,["entries"])}function i(r,n,i,a){void 0===a&&(a=!e.$hasClass(i,"gui-expanded")),e.$removeClass(i,"gui-expanded"),a&&e.$addClass(i,"gui-expanded");const s=i.children;for(let e=0;e<s.length;e++)"gui-tree-view-entry"===s[e].tagName.toLowerCase()&&(s[e].style.display=a?"block":"none");const d={index:e.$index(i),data:t.getViewNodeValue(i)};i.setAttribute("data-expanded",String(a)),i.setAttribute("aria-expanded",String(a)),n.dispatchEvent(new CustomEvent("_expand",{detail:{entries:[d],expanded:a,element:i}}))}function a(r,n){const a=r.$element;if(n._rendered)return;n._rendered=!0;const s=n.getAttribute("data-icon"),d=t.getLabel(n),u="true"===a.getAttribute("data-expanded"),l=n.querySelector("gui-tree-view-entry"),o=document.createElement("div"),c=document.createElement("span");function p(t){t.stopPropagation(),e.$addClass(n,"dnd-over")}function g(t){e.$removeClass(n,"dnd-over")}if(s&&(c.style.backgroundImage="url("+s+")",e.$addClass(c,"gui-has-image")),c.appendChild(document.createTextNode(d)),o.appendChild(c),l){e.$addClass(n,"gui-expandable");const t=document.createElement("gui-tree-view-expander");n.insertBefore(o,l),n.insertBefore(t,o)}else n.appendChild(o);if("true"===String(n.getAttribute("data-draggable"))&&t.createDraggable(o,(()=>{let e={};try{e=JSON.parse(n.getAttribute("data-value"))}catch(e){}return{data:e}})()),"true"===String(n.getAttribute("data-droppable"))){let r;t.createDroppable(o,{onEnter:p,onOver:p,onLeave:g,onDrop:g,onItemDropped:(t,i,s)=>{t.stopPropagation(),t.preventDefault(),r=clearTimeout(r),r=setTimeout(()=>{e.$removeClass(n,"dnd-over")},10);let d={};try{d=JSON.parse(i.parentNode.getAttribute("data-value"))}catch(e){}a.dispatchEvent(new CustomEvent("_drop",{detail:{src:s.data,dest:d}}))}})}i(0,a,n,u),r.bindEntryEvents(n,"gui-tree-view-entry")}return{GUITreeView:class extends r{static register(){return super.register({parent:r,tagName:"gui-tree-view"},this)}values(){const e=this.$element;return this.getSelected(e.querySelectorAll("gui-tree-view-entry"))}build(e){const t=this.$element;let r=t.querySelector("gui-tree-view-body"),n=!!r;return r||(r=document.createElement("gui-tree-view-body"),t.appendChild(r)),r.setAttribute("role","group"),t.setAttribute("role","tree"),t.setAttribute("aria-multiselectable",r.getAttribute("data-multiselect")||"false"),t.querySelectorAll("gui-tree-view-entry").forEach((e,t)=>{e.setAttribute("aria-expanded","false"),n||r.appendChild(e),e.setAttribute("role","treeitem"),a(this,e)}),super.build(...arguments)}get(e,t,r){if("entry"===e){const e=this.$element.querySelector("gui-tree-view-body");return this.getEntry(e.querySelectorAll("gui-tree-view-entry"),t,r)}return super.get(...arguments)}set(e,t,r,n){const i=this.$element.querySelector("gui-tree-view-body");return"selected"===e||"value"===e?(this.setSelected(i,i.querySelectorAll("gui-tree-view-entry"),t,r,n),this):super.set(...arguments)}clear(){const e=this.$element.querySelector("gui-tree-view-body");return super.clear(e)}add(e){const t=this.$element.querySelector("gui-tree-view-body");let r=t;const i=(e,t,r)=>{super.add(e,(e,s)=>{if(s){s.parentNode&&delete s.parentNode;const e=n(0,s);t.appendChild(e),s.entries&&i(s.entries,e,r+1),a(this,e)}})};return"object"!=typeof e||e instanceof Array||!Object.keys(e).length||(r=e.parentNode||t,e=e.entries||[]),i(e,r,0),this}remove(e){return super.remove(e,"gui-tree-view-entry")}patch(e){const t=this.$element.querySelector("gui-tree-view-body");return super.patch(e,"gui-list-view-entry",t,n,a)}expand(e){return i(e.ev,this.$element,e.entry),this}}}});
//# sourceMappingURL=../../sourcemaps/gui/elements/treeview.js.map
