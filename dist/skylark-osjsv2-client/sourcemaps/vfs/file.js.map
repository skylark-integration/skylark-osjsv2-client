{"version":3,"sources":["vfs/file.js"],"names":["define","FS","a","b","FileMetadata","[object Object]","arg","mime","Error","_","this","path","filename","type","size","id","shortcut","setData","match","_guessMime","o","Object","keys","forEach","k","ext","filext","getConfig","destination","f","name","replace"],"mappings":";;;;;;;AAAAA,QACI,cACA,iBACA,mBACD,SAAUC,EAAIC,EAAGC,GAChB,aACA,aAAaC,EACTC,YAAYC,EAAKC,GACb,IAAKD,EACD,MAAM,IAAIE,MAAML,EAAEM,EAAE,sBAExBC,KAAKC,KAAO,KACZD,KAAKE,SAAW,KAChBF,KAAKG,KAAO,KACZH,KAAKI,KAAO,KACZJ,KAAKH,KAAO,KACZG,KAAKK,GAAK,KACVL,KAAKM,UAAW,EACG,iBAARV,EACPI,KAAKO,QAAQX,GACS,iBAARA,IACdI,KAAKC,KAAOL,EACZI,KAAKO,WAEW,iBAATV,IACHA,EAAKW,MAAM,MACXR,KAAKH,KAAOA,EAEZG,KAAKG,KAAON,GAGpBG,KAAKS,aAETd,QAAQe,GACAA,GACAC,OAAOC,KAAKF,GAAGG,QAAQC,IACT,aAANA,IACAd,KAAKc,GAAKJ,EAAEI,MAInBd,KAAKE,WACNF,KAAKE,SAAWX,EAAGW,SAASF,KAAKC,OAGzCN,UACI,OACIM,KAAMD,KAAKC,KACXC,SAAUF,KAAKE,SACfC,KAAMH,KAAKG,KACXC,KAAMJ,KAAKI,KACXP,KAAMG,KAAKH,KACXQ,GAAIL,KAAKK,IAGjBV,aACI,GAAIK,KAAKH,MAAsB,QAAdG,KAAKG,OAAoBH,KAAKC,MAAQD,KAAKC,KAAKO,MAAM,OACnE,OAEJ,MAAMO,EAAMxB,EAAGyB,OAAOhB,KAAKC,MAC3BD,KAAKH,KAAOL,EAAEyB,UAAU,gBAAgB,IAAMF,IAAQ,2BAE1DpB,kBAAkBuB,EAAaC,GAC3B,OAAO,IAAIzB,GACPQ,SAAUiB,EAAEC,KACZnB,MAAOiB,EAAc,IAAMC,EAAEC,MAAMC,QAAQ,YAAa,OACxDxB,KAAMsB,EAAEtB,MAAQ,2BAChBO,KAAMe,EAAEf","file":"../../vfs/file.js","sourcesContent":["define([\n    '../utils/fs',\n    '../core/config',\n    '../core/locales'\n], function (FS, a, b) {\n    'use strict';\n    return class FileMetadata {\n        constructor(arg, mime) {\n            if (!arg) {\n                throw new Error(b._('ERR_VFS_FILE_ARGS'));\n            }\n            this.path = null;\n            this.filename = null;\n            this.type = null;\n            this.size = null;\n            this.mime = null;\n            this.id = null;\n            this.shortcut = false;\n            if (typeof arg === 'object') {\n                this.setData(arg);\n            } else if (typeof arg === 'string') {\n                this.path = arg;\n                this.setData();\n            }\n            if (typeof mime === 'string') {\n                if (mime.match(/\\//)) {\n                    this.mime = mime;\n                } else {\n                    this.type = mime;\n                }\n            }\n            this._guessMime();\n        }\n        setData(o) {\n            if (o) {\n                Object.keys(o).forEach(k => {\n                    if (k !== '_element') {\n                        this[k] = o[k];\n                    }\n                });\n            }\n            if (!this.filename) {\n                this.filename = FS.filename(this.path);\n            }\n        }\n        getData() {\n            return {\n                path: this.path,\n                filename: this.filename,\n                type: this.type,\n                size: this.size,\n                mime: this.mime,\n                id: this.id\n            };\n        }\n        _guessMime() {\n            if (this.mime || this.type === 'dir' || (!this.path || this.path.match(/\\/$/))) {\n                return;\n            }\n            const ext = FS.filext(this.path);\n            this.mime = a.getConfig('MIME.mapping')['.' + ext] || 'application/octet-stream';\n        }\n        static fromUpload(destination, f) {\n            return new FileMetadata({\n                filename: f.name,\n                path: (destination + '/' + f.name).replace(/\\/\\/\\/\\/+/, '///'),\n                mime: f.mime || 'application/octet-stream',\n                size: f.size\n            });\n        }\n    };\n});"]}