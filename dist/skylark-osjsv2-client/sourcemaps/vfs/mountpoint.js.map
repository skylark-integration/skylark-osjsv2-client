{"version":3,"sources":["vfs/mountpoint.js"],"names":["define","Process","Locales","[object Object]","options","this","Object","assign","name","root","match","enabled","readOnly","transport","visible","searchable","dynamic","internal","special","Error","_","sname","replace","toLowerCase","defaults","icon","title","description","m","RegExp","createMatch","keys","forEach","k","isMounted","notify","option","message","source","Promise","resolve","mounted","method","args","request","reject","test"],"mappings":";;;;;;;AAAAA,QACI,kBACA,mBACD,SAAWC,EAASC,GACnB,aASA,aACIC,YAAYC,GAeR,GAdAC,KAAKD,QAAUE,OAAOC,QAClBC,KAAM,KACNC,KAAM,KACNC,MAAO,KACPC,SAAS,EACTC,UAAU,EACVC,UAAW,KACXC,SAAS,EACTC,YAAY,EACZC,SAAS,EACTC,UAAU,EACVC,SAAS,EACTd,YACDA,IACEC,KAAKD,QAAQS,UACd,MAAM,IAAIM,MAAM,2CAA6Cd,KAAKD,QAAQI,MAE9E,IAAKH,KAAKD,QAAQI,KACd,MAAM,IAAIW,MAAMjB,EAAQkB,EAAE,qCAE9B,MAAMC,EAAQhB,KAAKD,QAAQI,KAAKc,QAAQ,MAAO,KAAKC,cAC9CC,GACFC,KAAM,6BACNjB,KAAMa,EACNK,MAAOrB,KAAKD,QAAQI,KACpBmB,YAAatB,KAAKD,QAAQuB,aAAetB,KAAKD,QAAQI,KACtDC,KAAMY,EAAQ,OACdX,MArCZ,SAAqBkB,EAAGP,GACpB,MAAiB,iBAANO,EACA,IAAIC,OAAOD,GACVA,GACD,IAAIC,OAAO,KAAOR,EAAQ,OAAOC,QAAQ,sCAAuC,SAiC5EQ,CAAYzB,KAAKD,QAAQM,MAAOW,IAE3Cf,OAAOyB,KAAKP,GAAUQ,QAAQC,IACrB5B,KAAKD,QAAQ6B,KACd5B,KAAKD,QAAQ6B,GAAKT,EAASS,MAGnC5B,KAAKG,KAAOa,EACZhB,KAAK6B,WAAY,EAErB/B,MAAMC,GAQF,OAPAA,EAAUE,OAAOC,QAAS4B,QAAQ,GAAQ/B,OACrCC,KAAK6B,WAAc7B,KAAK+B,OAAO,aAC5BhC,EAAQ+B,QACRlC,EAAQoC,QAAQ,YAAahC,KAAK+B,OAAO,SAAWE,OAAQ,OAEhEjC,KAAK6B,WAAY,GAEdK,QAAQC,UAEnBrC,QAAQC,GAQJ,OAPAA,EAAUE,OAAOC,QAAS4B,QAAQ,GAAQ/B,OACtCC,KAAK6B,YAAc7B,KAAK+B,OAAO,aAC3BhC,EAAQ+B,QACRlC,EAAQoC,QAAQ,cAAehC,KAAK+B,OAAO,SAAWE,OAAQ,OAElEjC,KAAK6B,WAAY,GAEdK,QAAQC,UAEnBrC,UACI,OAAOE,KAAK6B,UAEhB/B,UACI,OAAOE,KAAK+B,OAAO,WAEvBjC,OAAOK,GACH,OAAOH,KAAKD,QAAQI,GAExBL,aACI,OAAOE,KAAK+B,OAAO,YAEvBjC,WAAWsC,GACPpC,KAAK6B,WAAwB,IAAZO,EAErBtC,QAAQuC,EAAQC,EAAMvC,GAClB,MAAMS,EAAYR,KAAK+B,OAAO,aAC9B,OAAIvB,EACOA,EAAU+B,QAAQF,EAAQC,EAAMvC,EAASC,MAE7CkC,QAAQM,OAAO,IAAI1B,MAAMjB,EAAQkB,EAAE,8BAA+B0B","file":"../../vfs/mountpoint.js","sourcesContent":["define([\n    '../core/process',\n    '../core/locales'\n], function ( Process, Locales) {\n    'use strict';\n    function createMatch(m, sname) {\n        if (typeof m === 'string') {\n            return new RegExp(m);\n        } else if (!m) {\n            return new RegExp('^' + (sname + '://').replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&'));\n        }\n        return m;\n    }\n    return class Mountpoint {\n        constructor(options) {\n            this.options = Object.assign({\n                name: null,\n                root: null,\n                match: null,\n                enabled: true,\n                readOnly: false,\n                transport: null,\n                visible: true,\n                searchable: false,\n                dynamic: true,\n                internal: false,\n                special: false,\n                options: {}\n            }, options);\n            if (!this.options.transport) {\n                throw new Error('No transport was defined for mountpoint ' + this.options.name);\n            }\n            if (!this.options.name) {\n                throw new Error(Locales._('ERR_VFSMODULE_INVALID_CONFIG_FMT'));\n            }\n            const sname = this.options.name.replace(/\\s/g, '-').toLowerCase();\n            const defaults = {\n                icon: 'devices/drive-harddisk.png',\n                name: sname,\n                title: this.options.name,\n                description: this.options.description || this.options.name,\n                root: sname + ':///',\n                match: createMatch(this.options.match, sname)\n            };\n            Object.keys(defaults).forEach(k => {\n                if (!this.options[k]) {\n                    this.options[k] = defaults[k];\n                }\n            });\n            this.name = sname;\n            this.isMounted = false;\n        }\n        mount(options) {\n            options = Object.assign({ notify: true }, options || {});\n            if (!this.isMounted && !this.option('special')) {\n                if (options.notify) {\n                    Process.message('vfs:mount', this.option('name'), { source: null });\n                }\n                this.isMounted = true;\n            }\n            return Promise.resolve();\n        }\n        unmount(options) {\n            options = Object.assign({ notify: true }, options || {});\n            if (this.isMounted && !this.option('special')) {\n                if (options.notify) {\n                    Process.message('vfs:unmount', this.option('name'), { source: null });\n                }\n                this.isMounted = false;\n            }\n            return Promise.resolve();\n        }\n        mounted() {\n            return this.isMounted;\n        }\n        enabled() {\n            return this.option('enabled');\n        }\n        option(name) {\n            return this.options[name];\n        }\n        isReadOnly() {\n            return this.option('readOnly');\n        }\n        setMounted(mounted) {\n            this.isMounted = mounted === true;\n        }\n        request(method, args, options) {\n            const transport = this.option('transport');\n            if (transport) {\n                return transport.request(method, args, options, this);\n            }\n            return Promise.reject(new Error(Locales._('ERR_VFSMODULE_NOT_FOUND_FMT', test)));\n        }\n    };\n});"]}