{"version":3,"sources":["vfs/transports/onedrive.js"],"names":["define","Promise","Transport","FileMetadata","a","Locales","WindowsLiveAPI","FS","VFS","_mimeCache","_isMounted","onedriveCall","args","callback","console","debug","window","WL","api","then","response","responseFailed","error","message","getItemType","iter","type","getMetadataFromItem","dir","item","root","par","replace","path","name","id","filename","size","mime","getConfig","ext","filext","length","getItemMime","getFilesInFolder","folderId","method","data","resolvePath","useParent","getPathFromVirtual","dirname","resolves","split","isOnRoot","currentParentId","_nextDir","completed","current","shift","done","found","list","lfound","warn","forEach","foundId","_","[object Object]","resolve","reject","iargs","scope","create","Error","options","mount","fargs","arguments","this","_init","super","request","catch","relativePath","drivePath","fileList","result","push","createDirectoryList","option","url","file","read","instance","accessToken","fd","FormData","addFormFile","axios","responseType","src","dest","srcDrivePath","dstDrivePath","body","destination","fileinfo","info","k","location","pathJoin","write"],"mappings":"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","file":"../../../vfs/transports/onedrive.js","sourcesContent":["define([\n    'skylark-axios',\n    '../transport',\n    '../file',\n    '../../core/config',\n    '../../core/locales',\n    '../../helpers/windows-live-api',\n    '../../utils/fs',\n    '../fs'\n], function ( Promise, Transport, FileMetadata, a, Locales, WindowsLiveAPI, FS, VFS) {\n    'use strict';\n    let _isMounted = false;\n    let _mimeCache;\n    function onedriveCall(args, callback) {\n        console.debug('OneDrive::*onedriveCall()', args);\n        const WL = window.WL || {};\n        WL.api(args).then(response => {\n            callback(false, response);\n        }, responseFailed => {\n            console.error('OneDrive::*onedriveCall()', 'error', responseFailed, args);\n            callback(responseFailed.error.message);\n        });\n    }\n    function getItemType(iter) {\n        let type = 'file';\n        if (iter.type === 'folder' || iter.type === 'album') {\n            type = 'dir';\n        }\n        return type;\n    }\n    function getItemMime(iter) {\n        if (!_mimeCache) {\n            _mimeCache = a.getConfig('MIME.mapping', {});\n        }\n        let mime = null;\n        if (getItemType(iter) !== 'dir') {\n            mime = 'application/octet-stream';\n            let ext = FS.filext(iter.name);\n            if (ext.length) {\n                ext = '.' + ext;\n                if (_mimeCache[ext]) {\n                    mime = _mimeCache[ext];\n                }\n            }\n        }\n        return mime;\n    }\n    function getMetadataFromItem(dir, item, root) {\n        const par = dir.replace(/^\\/+/, '').replace(/\\/+$/, '');\n        const path = root + (par ? par + '/' : par) + item.name;\n        const itemFile = new FileMetadata({\n            id: item.id,\n            filename: item.name,\n            size: item.size || 0,\n            path: path,\n            mime: getItemMime(item),\n            type: getItemType(item)\n        });\n        return itemFile;\n    }\n    function createDirectoryList(dir, list, item, options, root) {\n        const result = [];\n        if (dir !== '/') {\n            result.push(new FileMetadata({\n                id: item.id,\n                filename: '..',\n                path: FS.dirname(item.path),\n                size: 0,\n                type: 'dir'\n            }));\n        }\n        list.forEach(iter => {\n            result.push(getMetadataFromItem(dir, iter, root));\n        });\n        return result;\n    }\n    function getFilesInFolder(folderId, callback) {\n        onedriveCall({\n            path: folderId + '/files',\n            method: 'GET'\n        }, (error, response) => {\n            if (error) {\n                callback(error);\n                return;\n            }\n            console.debug('OneDrive::*getFilesInFolder()', '=>', response);\n            callback(false, response.data || []);\n        });\n    }\n    function resolvePath(item, callback, useParent) {\n        if (!useParent) {\n            if (item.id) {\n                callback(false, item.id);\n                return;\n            }\n        }\n        let path = FS.getPathFromVirtual(item.path).replace(/\\/+/, '/');\n        if (useParent) {\n            path = FS.dirname(path);\n        }\n        if (path === '/') {\n            callback(false, 'me/skydrive');\n            return;\n        }\n        const resolves = path.replace(/^\\/+/, '').split('/');\n        const isOnRoot = !resolves.length;\n        let currentParentId = 'me/skydrive';\n        function _nextDir(completed) {\n            const current = resolves.shift();\n            const done = resolves.length <= 0;\n            let found;\n            if (isOnRoot) {\n                found = currentParentId;\n            } else {\n                if (current) {\n                    getFilesInFolder(currentParentId, (error, list) => {\n                        list = list || [];\n                        let lfound;\n                        if (!error) {\n                            list.forEach(iter => {\n                                if (iter) {\n                                    if (iter.name === current) {\n                                        lfound = iter.id;\n                                    }\n                                }\n                            });\n                            if (lfound) {\n                                currentParentId = lfound;\n                            }\n                        } else {\n                            console.warn('OneDrive', 'resolvePath()', 'getFilesInFolder() error', error);\n                        }\n                        if (done) {\n                            completed(lfound);\n                        } else {\n                            _nextDir(completed);\n                        }\n                    });\n                    return;\n                }\n            }\n            if (done) {\n                completed(found);\n            } else {\n                _nextDir(completed);\n            }\n        }\n        _nextDir(foundId => {\n            if (foundId) {\n                callback(false, foundId);\n            } else {\n                callback(Locales._('ONEDRIVE_ERR_RESOLVE'));\n            }\n        });\n    }\n    return class OneDriveTransport extends Transport {\n        _init() {\n            return new Promise((resolve, reject) => {\n                const iargs = {\n                    scope: [\n                        'wl.signin',\n                        'wl.skydrive',\n                        'wl.skydrive_update'\n                    ]\n                };\n                if (_isMounted) {\n                    resolve(true);\n                } else {\n                    WindowsLiveAPI.create(iargs, error => {\n                        if (error) {\n                            reject(new Error(error));\n                        } else {\n                            _isMounted = true;\n                            resolve(true);\n                        }\n                    });\n                }\n            });\n        }\n        request(method, args, options, mount) {\n            const fargs = arguments;\n            return new Promise((resolve, reject) => {\n                this._init().then(() => {\n                    return super.request(...fargs).then(resolve).catch(reject);\n                }).catch(reject);\n            });\n        }\n        scandir(item, options, mount) {\n            return new Promise((resolve, reject) => {\n                const relativePath = FS.getPathFromVirtual(item.path);\n                resolvePath(item, (error, drivePath) => {\n                    if (error) {\n                        reject(new Error(error));\n                    } else {\n                        onedriveCall({\n                            path: drivePath,\n                            method: 'GET'\n                        }, (error, response) => {\n                            if (error) {\n                                reject(new Error(error));\n                            } else {\n                                getFilesInFolder(response.id, (error, list) => {\n                                    if (error) {\n                                        reject(new Error(error));\n                                    } else {\n                                        const fileList = createDirectoryList(relativePath, list, item, options, mount.option('root'));\n                                        resolve(fileList);\n                                    }\n                                });\n                            }\n                        });\n                    }\n                });\n            });\n        }\n        read(item, options, mount) {\n            return new Promise((resolve, reject) => {\n                this.url(item).then(url => {\n                    const file = new FileMetadata(url, item.mime);\n                    VFS.read(file, options).then(resolve).catch(reject);\n                }).catch(reject);\n            });\n        }\n        write(file, data) {\n            return new Promise((resolve, reject) => {\n                const inst = WindowsLiveAPI.instance();\n                const url = 'https://apis.live.net/v5.0/me/skydrive/files?access_token=' + inst.accessToken;\n                const fd = new FormData();\n                FS.addFormFile(fd, 'file', data, file);\n                axios({\n                    url: url,\n                    method: 'POST',\n                    responseType: 'json',\n                    data: fd\n                }).then(response => {\n                    const result = response.data;\n                    if (result && result.id) {\n                        return resolve(result.id);\n                    }\n                    return reject(new Error(Locales._('ERR_APP_UNKNOWN_ERROR')));\n                }).catch(reject);\n            });\n        }\n        copy(src, dest) {\n            return new Promise((resolve, reject) => {\n                dest = new FileMetadata(FS.dirname(dest.path));\n                resolvePath(src, (error, srcDrivePath) => {\n                    if (error) {\n                        reject(new Error(error));\n                    } else {\n                        resolvePath(dest, (error, dstDrivePath) => {\n                            if (error) {\n                                reject(new Error(error));\n                            } else {\n                                onedriveCall({\n                                    path: srcDrivePath,\n                                    method: 'COPY',\n                                    body: { destination: dstDrivePath }\n                                }, (error, response) => {\n                                    return error ? reject(new Error(error)) : resolve(true);\n                                });\n                            }\n                        });\n                    }\n                });\n            });\n        }\n        move(src, dest) {\n            return new Promise((resolve, reject) => {\n                dest = new FileMetadata(FS.dirname(dest.path));\n                resolvePath(src, (error, srcDrivePath) => {\n                    if (error) {\n                        reject(new Error(error));\n                    } else {\n                        resolvePath(dest, (error, dstDrivePath) => {\n                            if (error) {\n                                reject(new Error(error));\n                            } else {\n                                onedriveCall({\n                                    path: srcDrivePath,\n                                    method: 'MOVE',\n                                    body: { destination: dstDrivePath }\n                                }, (error, response) => {\n                                    return error ? reject(new Error(error)) : resolve(true);\n                                });\n                            }\n                        });\n                    }\n                });\n            });\n        }\n        exists(item) {\n            return new Promise((resolve, reject) => {\n                this.fileinfo(item).then(() => resolve(true)).catch(() => resolve(false));\n            });\n        }\n        fileinfo(item) {\n            return new Promise((resolve, reject) => {\n                resolvePath(item, (error, drivePath) => {\n                    if (error) {\n                        reject(new Error(error));\n                    } else {\n                        onedriveCall({\n                            path: drivePath,\n                            method: 'GET'\n                        }, (error, response) => {\n                            if (error) {\n                                reject(new Error(error));\n                            } else {\n                                const useKeys = [\n                                    'created_time',\n                                    'id',\n                                    'link',\n                                    'name',\n                                    'type',\n                                    'updated_time',\n                                    'upload_location',\n                                    'description',\n                                    'client_updated_time'\n                                ];\n                                const info = {};\n                                useKeys.forEach(k => {\n                                    info[k] = response[k];\n                                });\n                                resolve(info);\n                            }\n                        });\n                    }\n                });\n            });\n        }\n        url(item) {\n            return new Promise((resolve, reject) => {\n                resolvePath(item, function (error, drivePath) {\n                    if (error) {\n                        reject(new Error(error));\n                    } else {\n                        onedriveCall({\n                            path: drivePath + '/content',\n                            method: 'GET'\n                        }, (error, response) => {\n                            if (error) {\n                                reject(new Error(error));\n                            } else {\n                                resolve(response.location);\n                            }\n                        });\n                    }\n                });\n            });\n        }\n        mkdir(dir) {\n            return new Promise((resolve, reject) => {\n                resolvePath(dir, (error, drivePath) => {\n                    if (error) {\n                        reject(error);\n                    } else {\n                        onedriveCall({\n                            path: drivePath,\n                            method: 'POST',\n                            body: { name: dir.filename }\n                        }, (error, response) => {\n                            return error ? reject(new Error(error)) : resolve(true);\n                        });\n                    }\n                }, true);\n            });\n        }\n        upload(dest, file) {\n            const item = new FileMetadata({\n                filename: file.name,\n                path: FS.pathJoin(dest.path, file.name),\n                mime: file.type,\n                size: file.size\n            });\n            return this.write(item, file);\n        }\n        freeSpace(root) {\n            return Promise.resolve(-1);\n        }\n        unlink(src) {\n            return new Promise((resolve, reject) => {\n                resolvePath(src, (error, drivePath) => {\n                    if (error) {\n                        reject(new Error(error));\n                    } else {\n                        onedriveCall({\n                            path: drivePath,\n                            method: 'DELETE'\n                        }, (error, response) => {\n                            return error ? reject(new Error(error)) : resolve(true);\n                        });\n                    }\n                });\n            });\n        }\n    };\n});"]}