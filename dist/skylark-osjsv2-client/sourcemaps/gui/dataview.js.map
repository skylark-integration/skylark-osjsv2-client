{"version":3,"sources":["gui/dataview.js"],"names":["define","GUI","DOM","Events","Clipboard","Keycodes","FileMetadata","GUIElement","_classMap","gui-list-view","getEntryTagName","type","tagName","toLowerCase","className","getEntryFromEvent","ev","header","t","target","tn","match","parentNode","isHeader","row","handleItemSelection","item","idx","selected","root","multipleSelect","querySelectorAll","forEach","e","$removeClass","shiftKey","i","findex","indexOf","splice","push","$addClass","sort","a","b","getValueParameter","r","value","getAttribute","JSON","parse","matchValueByKey","val","key","json","String","UIDataView","[object Object]","body","el","this","$element","arguments","length","$unbind","$empty","scrollTop","_selected","entries","oncreate","Array","oninit","single","inView","id","entry","insertBefore","$hasClass","prototype","remove","call","appendChild","Object","keys","k","updateActiveSelection","args","parentEl","$remove","findId","q","active","cel","$index","_active","element","pos","$position","marginTop","querySelector","offsetHeight","scrollSpace","elTop","top","dispatchEvent","CustomEvent","detail","data","getViewNodeValue","source","getWindowId","wid","createDraggable","tooltip","setAttribute","iter","index","asValue","result","map","console","warn","opts","select","scrollIntoView","scroll","sel","applyArgs","singleClick","moved","wasResized","col","sortBy","sortDir","resetDir","expand","values","activate","context","x","clientX","y","clientY","underlay","document","createElement","$bind","preventDefault","cls","keyCode","count","ENTER","C","ctrlKey","s","path","mime","setClipboard","concat","first","last","current","getRowSize","d","lastTop","offsetTop","next","Math","min","prev","max","UP","DOWN","LEFT","RIGHT","handleKey","handleKeyPress","on","oldTop","focus","setTimeout","stack","blur","evName","callback","params","bind"],"mappings":"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","file":"../../gui/dataview.js","sourcesContent":["define([\n    '../utils/gui',\n    '../utils/dom',\n    '../utils/events',\n    '../utils/clipboard',\n    '../utils/keycodes',\n    '../vfs/file',\n    './element'\n], function (GUI, DOM, Events, Clipboard, Keycodes, FileMetadata, GUIElement) {\n    'use strict';\n    const _classMap = { 'gui-list-view': 'gui-list-view-row' };\n    function getEntryTagName(type) {\n        if (typeof type !== 'string') {\n            type = type.tagName.toLowerCase();\n        }\n        let className = _classMap[type];\n        if (!className) {\n            className = type + '-entry';\n        }\n        return className;\n    }\n    function getEntryFromEvent(ev, header) {\n        const t = ev.target;\n        const tn = t.tagName.toLowerCase();\n        if (tn.match(/(view|textarea|body)$/)) {\n            return null;\n        } else if (tn === 'gui-list-view-column' && !header) {\n            return t.parentNode;\n        }\n        return t;\n    }\n    function isHeader(ev, row) {\n        row = row || getEntryFromEvent(ev);\n        return row && row.parentNode.tagName === 'GUI-LIST-VIEW-HEAD';\n    }\n    function handleItemSelection(ev, item, idx, className, selected, root, multipleSelect) {\n        root = root || item.parentNode;\n        if (isHeader(null, item)) {\n            return multipleSelect ? [] : null;\n        }\n        if (idx === -1) {\n            root.querySelectorAll(getEntryTagName(root)).forEach(function (e) {\n                DOM.$removeClass(e, 'gui-active');\n            });\n            selected = [];\n        } else {\n            if (!multipleSelect || !ev.shiftKey) {\n                root.querySelectorAll(className).forEach(function (i) {\n                    DOM.$removeClass(i, 'gui-active');\n                });\n                selected = [];\n            }\n            const findex = selected.indexOf(idx);\n            if (findex >= 0) {\n                selected.splice(findex, 1);\n                DOM.$removeClass(item, 'gui-active');\n            } else {\n                selected.push(idx);\n                DOM.$addClass(item, 'gui-active');\n            }\n        }\n        selected.sort(function (a, b) {\n            return a - b;\n        });\n        return selected;\n    }\n    function handleKeyPress(cls, el, ev) {\n        const map = {};\n        const key = ev.keyCode;\n        const type = el.tagName.toLowerCase();\n        const className = getEntryTagName(type);\n        const root = el.querySelector(type + '-body');\n        const entries = root.querySelectorAll(className);\n        const count = entries.length;\n        if (!count) {\n            return;\n        }\n        if (key === Keycodes.ENTER) {\n            el.dispatchEvent(new CustomEvent('_activate', { detail: { entries: cls.values() } }));\n            return;\n        }\n        map[Keycodes.C] = function (ev) {\n            if (ev.ctrlKey) {\n                const selected = cls.values();\n                if (selected && selected.length) {\n                    const data = [];\n                    selected.forEach(function (s) {\n                        if (s && s.data) {\n                            data.push(new FileMetadata(s.data.path, s.data.mime));\n                        }\n                    });\n                    Clipboard.setClipboard(data);\n                }\n            }\n        };\n        const selected = el._selected.concat() || [];\n        const first = selected.length ? selected[0] : 0;\n        const last = selected.length > 1 ? selected[selected.length - 1] : first;\n        let current = 0;\n        function select() {\n            const item = entries[current];\n            if (item) {\n                el._selected = handleItemSelection(ev, item, current, className, selected, root, ev.shiftKey);\n                cls.scrollIntoView(item);\n            }\n        }\n        function getRowSize() {\n            let d = 0;\n            let lastTop = -1;\n            entries.forEach(function (e) {\n                if (lastTop === -1) {\n                    lastTop = e.offsetTop;\n                }\n                if (lastTop !== e.offsetTop) {\n                    return false;\n                }\n                lastTop = e.offsetTop;\n                d++;\n                return true;\n            });\n            return d;\n        }\n        function handleKey() {\n            function next() {\n                current = Math.min(last + 1, count);\n                select();\n            }\n            function prev() {\n                current = Math.max(0, first - 1);\n                select();\n            }\n            if (type === 'gui-tree-view' || type === 'gui-list-view') {\n                map[Keycodes.UP] = prev;\n                map[Keycodes.DOWN] = next;\n            } else {\n                map[Keycodes.UP] = function () {\n                    current = Math.max(0, first - getRowSize());\n                    select();\n                };\n                map[Keycodes.DOWN] = function () {\n                    current = Math.max(last, last + getRowSize());\n                    select();\n                };\n                map[Keycodes.LEFT] = prev;\n                map[Keycodes.RIGHT] = next;\n            }\n            if (map[key]) {\n                map[key](ev);\n            }\n        }\n        handleKey();\n    }\n    function getValueParameter(r) {\n        const value = r.getAttribute('data-value');\n        try {\n            return JSON.parse(value);\n        } catch (e) {\n        }\n        return value;\n    }\n    function matchValueByKey(r, val, key, idx) {\n        const value = r.getAttribute('data-value');\n        if (!key && (val === idx || val === value)) {\n            return r;\n        } else {\n            try {\n                const json = JSON.parse(value);\n                if (typeof json[key] === 'object' ? json[key] === val : String(json[key]) === String(val)) {\n                    return r;\n                }\n            } catch (e) {\n            }\n        }\n        return false;\n    }\n    return class UIDataView extends GUIElement {\n        clear(body) {\n            const el = this.$element;\n            if (!arguments.length) {\n                body = el;\n            }\n            el.querySelectorAll(getEntryTagName(el)).forEach(row => {\n                Events.$unbind(row);\n            });\n            DOM.$empty(body);\n            body.scrollTop = 0;\n            el._selected = [];\n            return this;\n        }\n        add(entries, oncreate) {\n            oncreate = oncreate || function () {\n            };\n            if (!(entries instanceof Array)) {\n                entries = [entries];\n            }\n            entries.forEach(el => {\n                oncreate(this, el);\n            });\n            return this;\n        }\n        patch(entries, className, body, oncreate, oninit) {\n            let single = false;\n            if (!(entries instanceof Array)) {\n                entries = [entries];\n                single = true;\n            }\n            let inView = {};\n            body.querySelectorAll(className).forEach(row => {\n                const id = row.getAttribute('data-id');\n                if (id !== null) {\n                    inView[id] = row;\n                }\n            });\n            entries.forEach(entry => {\n                let insertBefore;\n                if (typeof entry.id !== 'undefined' && entry.id !== null) {\n                    if (inView[entry.id]) {\n                        insertBefore = inView[entry.id];\n                        delete inView[entry.id];\n                    }\n                    const row = oncreate(this, entry);\n                    if (row) {\n                        if (insertBefore) {\n                            if (DOM.$hasClass(insertBefore, 'gui-active')) {\n                                DOM.$addClass(row, 'gui-active');\n                            }\n                            body.insertBefore(row, insertBefore);\n                            UIDataView.prototype.remove.call(this, null, className, insertBefore, body);\n                        } else {\n                            body.appendChild(row);\n                        }\n                        oninit(this, row);\n                    }\n                }\n            });\n            if (!single) {\n                Object.keys(inView).forEach(k => {\n                    UIDataView.prototype.remove.call(this, null, className, inView[k]);\n                });\n            }\n            inView = {};\n            this.updateActiveSelection(className);\n            return this;\n        }\n        remove(args, className, target, parentEl) {\n            args = args || [];\n            parentEl = parentEl || this.$element;\n            if (target) {\n                DOM.$remove(target);\n            } else if (typeof args[1] === 'undefined' && typeof args[0] === 'number') {\n                DOM.$remove(parentEl.querySelectorAll(className)[args[0]]);\n            } else {\n                const findId = args[0];\n                const findKey = args[1] || 'id';\n                const q = 'data-' + findKey + '=\"' + findId + '\"';\n                parentEl.querySelectorAll(className + '[' + q + ']').forEach(DOM.$remove);\n            }\n            this.updateActiveSelection(className);\n            return this;\n        }\n        updateActiveSelection(className) {\n            const active = [];\n            this.$element.querySelectorAll(className + '.gui-active').forEach(cel => {\n                active.push(DOM.$index(cel));\n            });\n            this.$element._active = active;\n        }\n        scrollIntoView(element) {\n            const el = this.$element;\n            const pos = DOM.$position(element, el);\n            let marginTop = 0;\n            if (el.tagName.toLowerCase() === 'gui-list-view') {\n                const header = el.querySelector('gui-list-view-head');\n                if (header) {\n                    marginTop = header.offsetHeight;\n                }\n            }\n            const scrollSpace = el.scrollTop + el.offsetHeight - marginTop;\n            const scrollTop = el.scrollTop + marginTop;\n            const elTop = pos.top - marginTop;\n            if (pos !== null && (elTop > scrollSpace || elTop < scrollTop)) {\n                el.scrollTop = elTop;\n                return true;\n            }\n            return false;\n        }\n        bindEntryEvents(row, className) {\n            const el = this.$element;\n            function createDraggable() {\n                let value = row.getAttribute('data-value');\n                if (value !== null) {\n                    try {\n                        value = JSON.parse(value);\n                    } catch (e) {\n                    }\n                }\n                let source = row.getAttribute('data-draggable-source');\n                if (source === null) {\n                    source = GUI.getWindowId(el);\n                    if (source !== null) {\n                        source = { wid: source };\n                    }\n                }\n                GUI.createDraggable(row, {\n                    type: el.getAttribute('data-draggable-type') || row.getAttribute('data-draggable-type'),\n                    source: source,\n                    data: value\n                });\n                let tooltip = row.getAttribute('data-tooltip');\n                if (tooltip && !row.getAttribute('title')) {\n                    row.setAttribute('title', tooltip);\n                }\n            }\n            el.dispatchEvent(new CustomEvent('_render', {\n                detail: {\n                    element: row,\n                    data: GUI.getViewNodeValue(row)\n                }\n            }));\n            if (el.getAttribute('data-draggable') === 'true') {\n                createDraggable();\n            }\n        }\n        getSelected(entries) {\n            const selected = [];\n            entries.forEach((iter, idx) => {\n                if (DOM.$hasClass(iter, 'gui-active')) {\n                    selected.push({\n                        index: idx,\n                        data: GUI.getViewNodeValue(iter)\n                    });\n                }\n            });\n            return selected;\n        }\n        getEntry(entries, val, key, asValue) {\n            if (val) {\n                let result = null;\n                entries.forEach((r, idx) => {\n                    if (!result && matchValueByKey(r, val, key, idx)) {\n                        result = r;\n                    }\n                });\n                return asValue && result ? getValueParameter(result) : result;\n            }\n            if (asValue && entries) {\n                try {\n                    return entries.map(iter => {\n                        return getValueParameter(iter);\n                    });\n                } catch (e) {\n                    console.warn(e);\n                }\n            }\n            return entries;\n        }\n        setSelected(body, entries, val, key, opts) {\n            const select = [];\n            const el = this.$element;\n            let scrollIntoView = false;\n            if (typeof opts === 'object') {\n                scrollIntoView = opts.scroll === true;\n            }\n            const sel = (r, idx) => {\n                select.push(idx);\n                DOM.$addClass(r, 'gui-active');\n                if (scrollIntoView) {\n                    this.scrollIntoView(r);\n                }\n            };\n            entries.forEach((r, idx) => {\n                DOM.$removeClass(r, 'gui-active');\n                if (matchValueByKey(r, val, key, idx)) {\n                    sel(r, idx);\n                }\n            });\n            el._selected = select;\n        }\n        build(applyArgs) {\n            const el = this.$element;\n            el._selected = [];\n            el.scrollTop = 0;\n            DOM.$addClass(el, 'gui-data-view');\n            const singleClick = el.getAttribute('data-single-click') === 'true';\n            let moved;\n            let wasResized = false;\n            let multipleSelect = el.getAttribute('data-multiple');\n            multipleSelect = multipleSelect === null || multipleSelect === 'true';\n            const select = ev => {\n                if (moved || wasResized) {\n                    return false;\n                }\n                const row = getEntryFromEvent(ev);\n                if (!row) {\n                    return false;\n                }\n                const className = row.tagName.toLowerCase();\n                if (isHeader(null, row)) {\n                    const col = getEntryFromEvent(ev, true);\n                    if (col) {\n                        let sortBy = col.getAttribute('data-sortby');\n                        if (sortBy) {\n                            let sortDir = col.getAttribute('data-sortdir');\n                            let resetDir = sortDir === 'desc';\n                            sortDir = sortDir === 'asc' ? 'desc' : resetDir ? null : 'asc';\n                            sortBy = resetDir ? null : sortBy;\n                            col.setAttribute('data-sortdir', sortDir);\n                            el.setAttribute('data-sortby', sortBy || '');\n                            el.setAttribute('data-sortdir', sortDir || '');\n                            el.dispatchEvent(new CustomEvent('_sort', {\n                                detail: {\n                                    sortDir: sortDir,\n                                    sortBy: sortBy\n                                }\n                            }));\n                        }\n                    }\n                    return false;\n                }\n                if (className === 'gui-tree-view-expander') {\n                    this.expand({\n                        ev: ev,\n                        entry: row.parentNode\n                    });\n                    return true;\n                }\n                const idx = DOM.$index(row);\n                el._selected = handleItemSelection(ev, row, idx, className, el._selected, el, multipleSelect);\n                el.dispatchEvent(new CustomEvent('_select', { detail: { entries: this.values() } }));\n                return true;\n            };\n            const activate = ev => {\n                if (moved || isHeader(ev)) {\n                    return;\n                }\n                if (singleClick) {\n                    if (select(ev) === false) {\n                        return;\n                    }\n                } else {\n                    if (!getEntryFromEvent(ev)) {\n                        return;\n                    }\n                }\n                el.dispatchEvent(new CustomEvent('_activate', { detail: { entries: this.values() } }));\n            };\n            const context = ev => {\n                if (isHeader(ev)) {\n                    return;\n                }\n                select(ev);\n                el.dispatchEvent(new CustomEvent('_contextmenu', {\n                    detail: {\n                        entries: this.values(),\n                        x: ev.clientX,\n                        y: ev.clientY\n                    }\n                }));\n            };\n            if (!el.querySelector('textarea.gui-focus-element') && !el.getAttribute('no-selection')) {\n                const underlay = document.createElement('textarea');\n                underlay.setAttribute('aria-label', '');\n                underlay.setAttribute('aria-hidden', 'true');\n                underlay.setAttribute('readonly', 'true');\n                underlay.className = 'gui-focus-element';\n                Events.$bind(underlay, 'focus', ev => {\n                    ev.preventDefault();\n                    DOM.$addClass(el, 'gui-element-focused');\n                });\n                Events.$bind(underlay, 'blur', ev => {\n                    ev.preventDefault();\n                    DOM.$removeClass(el, 'gui-element-focused');\n                });\n                Events.$bind(underlay, 'keydown', ev => {\n                    ev.preventDefault();\n                    handleKeyPress(this, el, ev);\n                });\n                Events.$bind(underlay, 'keypress', ev => {\n                    ev.preventDefault();\n                });\n                Events.$bind(el, 'pointerdown,touchstart', ev => {\n                    moved = false;\n                    const target = ev.target;\n                    wasResized = target && target.tagName === 'GUI-LIST-VIEW-COLUMN-RESIZER';\n                }, true);\n                Events.$bind(el, 'touchmove', ev => {\n                    moved = true;\n                }, true);\n                if (singleClick) {\n                    Events.$bind(el, 'click', activate, true);\n                } else {\n                    Events.$bind(el, 'click', select, true);\n                    Events.$bind(el, 'dblclick', activate, true);\n                }\n                Events.$bind(el, 'contextmenu', ev => {\n                    ev.preventDefault();\n                    context(ev);\n                    return false;\n                }, true);\n                this.on('select', ev => {\n                    if (DOM.$hasClass(el, 'gui-element-focused')) {\n                        return;\n                    }\n                    const oldTop = el.scrollTop;\n                    underlay.focus();\n                    el.scrollTop = oldTop;\n                    setTimeout(() => {\n                        el.scrollTop = oldTop;\n                    }, 2);\n                }, true);\n                el.appendChild(underlay);\n            }\n        }\n        focus() {\n            try {\n                const underlay = this.$element.querySelector('.gui-focus-element');\n                underlay.focus();\n            } catch (e) {\n                console.warn(e, e.stack);\n            }\n        }\n        blur() {\n            try {\n                const underlay = this.$element.querySelector('.gui-focus-element');\n                underlay.blur();\n            } catch (e) {\n                console.warn(e, e.stack);\n            }\n        }\n        values() {\n            return [];\n        }\n        on(evName, callback, params) {\n            if ([\n                    'activate',\n                    'select',\n                    'expand',\n                    'contextmenu',\n                    'render',\n                    'drop',\n                    'sort'\n                ].indexOf(evName) !== -1) {\n                evName = '_' + evName;\n            }\n            Events.$bind(this.$element, evName, callback.bind(this), params);\n            return this;\n        }\n    };\n});"]}