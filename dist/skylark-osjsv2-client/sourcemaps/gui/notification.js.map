{"version":3,"sources":["gui/notification.js"],"names":["define","Events","WindowManager","[object Object]","this","$notifications","visibles","opts","icon","title","message","onClick","document","createElement","setAttribute","body","appendChild","timeout","console","debug","container","classNames","animationCallback","_remove","clearTimeout","onclick","_removeDOM","$unbind","parentNode","removeChild","style","display","instance","getSetting","alt","src","push","className","createTextNode","lines","split","forEach","line","idx","length","preventTimeout","_onanimationend","ev","setTimeout","String","join","$bind","space","getWindowSpace","marginTop","top","name","wm","getNotificationArea","pitem","createNotification","removeNotification","getNotification"],"mappings":";;;;;;;AAAAA,QACI,kBACA,0BACD,SAAUC,EAAQC,GACjB,aA8IA,OAAO,UA5IHC,cACIC,KAAKC,eAAiB,KACtBD,KAAKE,SAAW,EAEpBH,OAAOI,IACHA,EAAOA,OACFC,KAAOD,EAAKC,MAAQ,KACzBD,EAAKE,MAAQF,EAAKE,OAAS,KAC3BF,EAAKG,QAAUH,EAAKG,SAAW,GAC/BH,EAAKI,QAAUJ,EAAKI,SAAW,aAE1BP,KAAKC,iBACND,KAAKC,eAAiBO,SAASC,cAAc,wBAC7CT,KAAKC,eAAeS,aAAa,OAAQ,OACzCF,SAASG,KAAKC,YAAYZ,KAAKC,sBAEP,IAAjBE,EAAKU,UACZV,EAAKU,QAAU,KAEnBC,QAAQC,MAAM,yBAA0BZ,GACxC,MAAMa,EAAYR,SAASC,cAAc,uBACzC,IAAIQ,GAAc,IACdJ,EAAU,KACVK,EAAoB,KACxB,MAAMC,EAAU,KACRN,IACAO,aAAaP,GACbA,EAAU,MAEdG,EAAUK,QAAU,KACpB,MAAMC,EAAa,KACfzB,EAAO0B,QAAQP,GACXA,EAAUQ,YACVR,EAAUQ,WAAWC,YAAYT,GAErChB,KAAKE,WACDF,KAAKE,UAAY,IACjBF,KAAKC,eAAeyB,MAAMC,QAAU,SAG/B7B,EAAc8B,SAASC,WAAW,eAE3Cb,EAAUN,aAAa,YAAa,WACpCQ,EAAoB,KAAMI,OAE1BN,EAAUU,MAAMC,QAAU,OAC1BL,MAGR,GAAInB,EAAKC,KAAM,CACX,MAAMA,EAAOI,SAASC,cAAc,OACpCL,EAAK0B,IAAM,GACX1B,EAAK2B,IAAM5B,EAAKC,KAChBa,EAAWe,KAAK,WAChBhB,EAAUJ,YAAYR,GAE1B,GAAID,EAAKE,MAAO,CACZ,MAAMA,EAAQG,SAASC,cAAc,OACrCJ,EAAM4B,UAAY,QAClB5B,EAAMO,YAAYJ,SAAS0B,eAAe/B,EAAKE,QAC/CY,EAAWe,KAAK,YAChBhB,EAAUJ,YAAYP,GAE1B,GAAIF,EAAKG,QAAS,CACd,MAAMA,EAAUE,SAASC,cAAc,OACvCH,EAAQ2B,UAAY,UACpB,MAAME,EAAQhC,EAAKG,QAAQ8B,MAAM,MACjCD,EAAME,QAAQ,SAAUC,EAAMC,GAC1BjC,EAAQM,YAAYJ,SAAS0B,eAAeI,IACxCC,EAAMJ,EAAMK,OAAS,GACrBlC,EAAQM,YAAYJ,SAASC,cAAc,SAGnDQ,EAAWe,KAAK,cAChBhB,EAAUJ,YAAYN,GAa1B,IAAImC,EACJ,SAASC,EAAgBC,GACY,mBAAtBzB,IACPE,aAAaqB,GACbA,EAAiBG,WAAW,WACxB1B,EAAkByB,GAClBzB,GAAoB,GACrB,KAlBXlB,KAAKE,WACDF,KAAKE,SAAW,IAChBF,KAAKC,eAAeyB,MAAMC,QAAU,SAExCX,EAAUN,aAAa,aAAcmC,OAAO1C,EAAKE,QACjDW,EAAUN,aAAa,OAAQ,SAC/BM,EAAUiB,UAAYhB,EAAW6B,KAAK,KACtC9B,EAAUK,QAAU,SAAUsB,GAC1BxB,IACAhB,EAAKI,QAAQoC,IAYjB9C,EAAOkD,MAAM/B,EAAW,gBAAiB0B,GACzC7C,EAAOkD,MAAM/B,EAAW,eAAgB0B,GACxC,MAAMM,EAAQlD,EAAc8B,SAASqB,gBAAe,GACpDjD,KAAKC,eAAeyB,MAAMwB,UAAYL,OAAOG,EAAMG,KAAO,KAC1DnD,KAAKC,eAAeW,YAAYI,GAC5Bb,EAAKU,UACLA,EAAU+B,WAAW,WACjBzB,KACDhB,EAAKU,UAGhBd,WAAWqD,EAAMjD,GACb,MAAMkD,EAAKvD,EAAc8B,SACzB,GAAIyB,GAAwC,mBAA3BA,EAAGC,oBAAoC,CACpD,MAAMC,EAAQF,EAAGC,sBACjB,GAAIC,EACA,OAAOA,EAAMC,mBAAmBJ,EAAMjD,GAG9C,OAAO,KAEXJ,YAAYqD,GACR,MAAMC,EAAKvD,EAAc8B,SACzB,GAAIyB,GAAwC,mBAA3BA,EAAGC,oBAAoC,CACpD,MAAMC,EAAQF,EAAGC,sBACjB,GAAIC,EAEA,OADAA,EAAME,mBAAmBL,IAClB,EAGf,OAAO,EAEXrD,QAAQqD,GACJ,MAAMC,EAAKvD,EAAc8B,SACzB,GAAIyB,GAAwC,mBAA3BA,EAAGC,oBAAoC,CACpD,MAAMC,EAAQF,EAAGC,sBACjB,GAAIC,EACA,OAAOA,EAAMG,gBAAgBN,GAGrC,OAAO","file":"../../gui/notification.js","sourcesContent":["define([\n    '../utils/events',\n    '../core/window-manager'\n], function (Events, WindowManager) {\n    'use strict';\n    class Notification {\n        constructor() {\n            this.$notifications = null;\n            this.visibles = 0;\n        }\n        create(opts) {\n            opts = opts || {};\n            opts.icon = opts.icon || null;\n            opts.title = opts.title || null;\n            opts.message = opts.message || '';\n            opts.onClick = opts.onClick || function () {\n            };\n            if (!this.$notifications) {\n                this.$notifications = document.createElement('corewm-notifications');\n                this.$notifications.setAttribute('role', 'log');\n                document.body.appendChild(this.$notifications);\n            }\n            if (typeof opts.timeout === 'undefined') {\n                opts.timeout = 5000;\n            }\n            console.debug('CoreWM::notification()', opts);\n            const container = document.createElement('corewm-notification');\n            let classNames = [''];\n            let timeout = null;\n            let animationCallback = null;\n            const _remove = () => {\n                if (timeout) {\n                    clearTimeout(timeout);\n                    timeout = null;\n                }\n                container.onclick = null;\n                const _removeDOM = () => {\n                    Events.$unbind(container);\n                    if (container.parentNode) {\n                        container.parentNode.removeChild(container);\n                    }\n                    this.visibles--;\n                    if (this.visibles <= 0) {\n                        this.$notifications.style.display = 'none';\n                    }\n                };\n                const anim = WindowManager.instance.getSetting('animations');\n                if (anim) {\n                    container.setAttribute('data-hint', 'closing');\n                    animationCallback = () => _removeDOM();\n                } else {\n                    container.style.display = 'none';\n                    _removeDOM();\n                }\n            };\n            if (opts.icon) {\n                const icon = document.createElement('img');\n                icon.alt = '';\n                icon.src = opts.icon;\n                classNames.push('HasIcon');\n                container.appendChild(icon);\n            }\n            if (opts.title) {\n                const title = document.createElement('div');\n                title.className = 'Title';\n                title.appendChild(document.createTextNode(opts.title));\n                classNames.push('HasTitle');\n                container.appendChild(title);\n            }\n            if (opts.message) {\n                const message = document.createElement('div');\n                message.className = 'Message';\n                const lines = opts.message.split('\\n');\n                lines.forEach(function (line, idx) {\n                    message.appendChild(document.createTextNode(line));\n                    if (idx < lines.length - 1) {\n                        message.appendChild(document.createElement('br'));\n                    }\n                });\n                classNames.push('HasMessage');\n                container.appendChild(message);\n            }\n            this.visibles++;\n            if (this.visibles > 0) {\n                this.$notifications.style.display = 'block';\n            }\n            container.setAttribute('aria-label', String(opts.title));\n            container.setAttribute('role', 'alert');\n            container.className = classNames.join(' ');\n            container.onclick = function (ev) {\n                _remove();\n                opts.onClick(ev);\n            };\n            let preventTimeout;\n            function _onanimationend(ev) {\n                if (typeof animationCallback === 'function') {\n                    clearTimeout(preventTimeout);\n                    preventTimeout = setTimeout(function () {\n                        animationCallback(ev);\n                        animationCallback = false;\n                    }, 10);\n                }\n            }\n            Events.$bind(container, 'transitionend', _onanimationend);\n            Events.$bind(container, 'animationend', _onanimationend);\n            const space = WindowManager.instance.getWindowSpace(true);\n            this.$notifications.style.marginTop = String(space.top) + 'px';\n            this.$notifications.appendChild(container);\n            if (opts.timeout) {\n                timeout = setTimeout(function () {\n                    _remove();\n                }, opts.timeout);\n            }\n        }\n        createIcon(name, opts) {\n            const wm = WindowManager.instance;\n            if (wm && typeof wm.getNotificationArea === 'function') {\n                const pitem = wm.getNotificationArea();\n                if (pitem) {\n                    return pitem.createNotification(name, opts);\n                }\n            }\n            return null;\n        }\n        destroyIcon(name) {\n            const wm = WindowManager.instance;\n            if (wm && typeof wm.getNotificationArea === 'function') {\n                const pitem = wm.getNotificationArea();\n                if (pitem) {\n                    pitem.removeNotification(name);\n                    return true;\n                }\n            }\n            return false;\n        }\n        getIcon(name) {\n            const wm = WindowManager.instance;\n            if (wm && typeof wm.getNotificationArea === 'function') {\n                const pitem = wm.getNotificationArea();\n                if (pitem) {\n                    return pitem.getNotification(name);\n                }\n            }\n            return null;\n        }\n    }\n    return new Notification();\n});"]}