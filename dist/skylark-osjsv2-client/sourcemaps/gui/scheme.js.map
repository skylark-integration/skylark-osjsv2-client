{"version":3,"sources":["gui/scheme.js"],"names":["define","axios","DOM","GUIElement","Config","addChildren","frag","root","before","children","i","length","parentNode","insertBefore","appendChild","cleanScheme","html","$clean","str","split","newhtml","edsplit","removeSelfClosingTags","GUIScheme","[object Object]","url","console","debug","this","scheme","triggers","render","$empty","f","fn","push","args","forEach","apply","src","doc","document","createDocumentFragment","wrapper","createElement","innerHTML","cloneNode","getConfig","group","querySelectorAll","node","tagName","toLowerCase","gelData","getRegisteredElement","ac","metadata","allowedChildren","Array","map","sNode","chk","idx","indexOf","warn","ap","allowedParents","parentTagName","groupEnd","cb","cbxhr","substr","match","getBrowserPath","method","then","response","data","_load","catch","err","message","id","type","content","querySelector","win","onparse","getFragment","error","resolve","_resolve","nodes","el","getAttribute","$remove","resolving","resolveFragments","parseNode","_getRoot","$element","parse","e","_restored","width","parseInt","height","allow_maximize","allow_minimize","allow_close","allow_resize","isNaN","_resize","_setProperty","setWindowProperties","_trigger","firstChild","inst","cleaned"],"mappings":"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","file":"../../gui/scheme.js","sourcesContent":["define([\n    'skylark-axios',\n    '../utils/dom',\n    './element',\n    '../core/config'\n], function (axios, DOM, GUIElement, Config) {\n    'use strict';\n    function addChildren(frag, root, before) {\n        if (frag) {\n            const children = frag.children;\n            let i = 0;\n            while (children.length && i < 10000) {\n                if (before) {\n                    root.parentNode.insertBefore(children[0], root);\n                } else {\n                    root.appendChild(children[0]);\n                }\n                i++;\n            }\n        }\n    }\n    function resolveFragments(scheme, node) {\n        function _resolve() {\n            const nodes = node.querySelectorAll('gui-fragment');\n            if (nodes.length) {\n                nodes.forEach(function (el) {\n                    const id = el.getAttribute('data-fragment-id');\n                    if (id) {\n                        const frag = scheme.getFragment(id, 'application-fragment');\n                        if (frag) {\n                            addChildren(frag.cloneNode(true), el.parentNode);\n                        } else {\n                            console.warn('Fragment', id, 'not found');\n                        }\n                    }\n                    DOM.$remove(el);\n                });\n                return true;\n            }\n            return false;\n        }\n        if (scheme) {\n            let resolving = true;\n            while (resolving) {\n                resolving = _resolve();\n            }\n        }\n    }\n    function removeSelfClosingTags(str) {\n        const split = (str || '').split('/>');\n        let newhtml = '';\n        for (let i = 0; i < split.length - 1; i++) {\n            const edsplit = split[i].split('<');\n            newhtml += split[i] + '></' + edsplit[edsplit.length - 1].split(' ')[0] + '>';\n        }\n        return newhtml + split[split.length - 1];\n    }\n    function cleanScheme(html) {\n        return DOM.$clean(removeSelfClosingTags(html));\n    }\n    return class GUIScheme {\n        constructor(url) {\n            console.debug('GUIScheme::construct()', url);\n            this.url = url;\n            this.scheme = null;\n            this.triggers = { render: [] };\n        }\n        destroy() {\n            DOM.$empty(this.scheme);\n            this.scheme = null;\n            this.triggers = {};\n        }\n        on(f, fn) {\n            this.triggers[f].push(fn);\n        }\n        _trigger(f, args) {\n            args = args || [];\n            if (this.triggers[f]) {\n                this.triggers[f].forEach(fn => {\n                    fn.apply(this, args);\n                });\n            }\n        }\n        _load(html, src) {\n            let doc = document.createDocumentFragment();\n            let wrapper = document.createElement('div');\n            wrapper.innerHTML = html;\n            doc.appendChild(wrapper);\n            this.scheme = doc.cloneNode(true);\n            if (Config.getConfig('DebugScheme')) {\n                console.group('Scheme::_load() validation', src);\n                this.scheme.querySelectorAll('*').forEach(node => {\n                    const tagName = node.tagName.toLowerCase();\n                    const gelData = GUIElement.getRegisteredElement(tagName);\n                    if (gelData) {\n                        const ac = gelData.metadata.allowedChildren;\n                        if (ac instanceof Array && ac.length) {\n                            const childrenTagNames = node.children.map(sNode => {\n                                return sNode.tagName.toLowerCase();\n                            });\n                            childrenTagNames.forEach((chk, idx) => {\n                                const found = ac.indexOf(chk);\n                                if (found === -1) {\n                                    console.warn(chk, node.children[idx], 'is not a valid child of type', tagName);\n                                }\n                            });\n                        }\n                        const ap = gelData.metadata.allowedParents;\n                        if (ap instanceof Array && ap.length) {\n                            const parentTagName = node.parentNode.tagName.toLowerCase();\n                            if (ap.indexOf(parentTagName) === -1) {\n                                console.warn(parentTagName, node.parentNode, 'is in an invalid parent of type', tagName);\n                            }\n                        }\n                    }\n                });\n                console.groupEnd();\n            }\n            wrapper = null;\n            doc = null;\n        }\n        load(cb, cbxhr) {\n            cbxhr = cbxhr || function () {\n            };\n            console.debug('GUIScheme::load()', this.url);\n            let src = this.url;\n            if (src.substr(0, 1) !== '/' && !src.match(/^(https?|ftp)/)) {\n                src = Config.getBrowserPath(src);\n            }\n            axios({\n                url: src,\n                method: 'GET'\n            }).then(response => {\n                const html = cleanScheme(response.data);\n                cbxhr(false, html);\n                this._load(html, src);\n                cb(false, this.scheme);\n            }).catch(err => {\n                cb('Failed to fetch scheme: ' + err.message);\n                cbxhr(true);\n            });\n        }\n        getFragment(id, type) {\n            let content = null;\n            if (id) {\n                if (type) {\n                    content = this.scheme.querySelector(type + '[data-id=\"' + id + '\"]');\n                } else {\n                    content = this.scheme.querySelector('application-window[data-id=\"' + id + '\"]') || this.scheme.querySelector('application-dialog[data-id=\"' + id + '\"]') || this.scheme.querySelector('application-fragment[data-id=\"' + id + '\"]');\n                }\n            }\n            return content;\n        }\n        parse(id, type, win, onparse, args) {\n            const content = this.getFragment(id, type);\n            console.debug('GUIScheme::parse()', id);\n            if (!content) {\n                console.error('GUIScheme::parse()', 'No fragment found', id + '@' + type);\n                return null;\n            }\n            type = type || content.tagName.toLowerCase();\n            args = args || {};\n            if (content) {\n                const node = content.cloneNode(true);\n                if (args.resolve !== false) {\n                    resolveFragments(this, node);\n                }\n                GUIElement.parseNode(win, node, type, args, onparse, id);\n                return node;\n            }\n            return null;\n        }\n        render(win, id, root, type, onparse, args) {\n            root = root || win._getRoot();\n            if (root instanceof GUIElement) {\n                root = root.$element;\n            }\n            function setWindowProperties(frag) {\n                if (frag) {\n                    const width = parseInt(frag.getAttribute('data-width'), 10) || 0;\n                    const height = parseInt(frag.getAttribute('data-height'), 10) || 0;\n                    const allow_maximize = frag.getAttribute('data-allow_maximize');\n                    const allow_minimize = frag.getAttribute('data-allow_minimize');\n                    const allow_close = frag.getAttribute('data-allow_close');\n                    const allow_resize = frag.getAttribute('data-allow_resize');\n                    if (!isNaN(width) && width > 0 || !isNaN(height) && height > 0) {\n                        win._resize(width, height);\n                    }\n                    win._setProperty('allow_maximize', allow_maximize);\n                    win._setProperty('allow_minimize', allow_minimize);\n                    win._setProperty('allow_close', allow_close);\n                    win._setProperty('allow_resize', allow_resize);\n                }\n            }\n            console.debug('GUIScheme::render()', id);\n            const content = this.parse(id, type, win, onparse, args);\n            addChildren(content, root);\n            root.querySelectorAll('application-fragment').forEach(e => {\n                DOM.$remove(e);\n            });\n            if (!win._restored) {\n                setWindowProperties(this.getFragment(id));\n            }\n            this._trigger('render', [root]);\n        }\n        getHTML() {\n            return this.scheme.firstChild.innerHTML;\n        }\n        static fromString(str) {\n            const inst = new GUIScheme(null);\n            const cleaned = cleanScheme(str);\n            inst._load(cleaned, '<html>');\n            return inst;\n        }\n    };\n});"]}