{"version":3,"sources":["gui/elements/richtext.js"],"names":["define","DOM","Events","Theme","GUIElement","getDocument","el","iframe","querySelector","contentDocument","contentWindow","document","destroyFixInterval","_fixTry","_fixInterval","clearInterval","setDocumentData","text","themeName","getStyleTheme","editable","getAttribute","template","ev","keyCode","sel","range","window","getSelection","getRangeAt","rangeCount","deleteContents","insertNode","createTextNode","selection","createRange","insertTextAtCursor","preventDefault","toString","replace","doc","open","write","close","setInterval","body","innerHTML","error","console","warn","stack","createFixInterval","GUIRichText","[object Object]","super","register","tagName","this","evName","callback","params","indexOf","$bind","$element","bind","childNodes","length","nodeValue","$empty","createElement","setAttribute","onload","addEventListener","dispatchEvent","CustomEvent","detail","appendChild","setTimeout","e","execCommand","apply","arguments","queryCommandValue","param","value","getDocumentData","get","set"],"mappings":"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","file":"../../../gui/elements/richtext.js","sourcesContent":["define([\n    '../../utils/dom',\n    '../../utils/events',\n    '../../core/theme',\n    '../element'\n], function (DOM, Events, Theme, GUIElement) {\n    'use strict';\n    function getDocument(el, iframe) {\n        iframe = iframe || el.querySelector('iframe');\n        return iframe.contentDocument || iframe.contentWindow.document;\n    }\n    function getDocumentData(el) {\n        try {\n            const doc = getDocument(el);\n            return doc.body.innerHTML;\n        } catch (error) {\n            console.error('gui-richtext', 'getDocumentData()', error.stack, error);\n        }\n        return '';\n    }\n    function destroyFixInterval(el) {\n        el._fixTry = 0;\n        el._fixInterval = clearInterval(el._fixInterval);\n    }\n    function createFixInterval(el, doc, text) {\n        if (el._fixTry > 10) {\n            el._fixTry = 0;\n            return;\n        }\n        el._fixInterval = setInterval(() => {\n            try {\n                if (text) {\n                    doc.body.innerHTML = text;\n                }\n                destroyFixInterval(el);\n            } catch (error) {\n                console.warn('gui-richtext', 'setDocumentData()', error.stack, error, '... trying again');\n            }\n            el._fixTry++;\n        }, 100);\n    }\n    function setDocumentData(el, text) {\n        destroyFixInterval(el);\n        text = text || '';\n        const themeName = Theme.getStyleTheme();\n        const themeSrc = '/themes.css';\n        let editable = el.getAttribute('data-editable');\n        editable = editable === null || editable === 'true';\n        function onMouseDown(ev) {\n            function insertTextAtCursor(text) {\n                let sel, range;\n                if (window.getSelection) {\n                    sel = window.getSelection();\n                    if (sel.getRangeAt && sel.rangeCount) {\n                        range = sel.getRangeAt(0);\n                        range.deleteContents();\n                        range.insertNode(document.createTextNode(text));\n                    }\n                } else if (document.selection && document.selection.createRange) {\n                    document.selection.createRange().text = text;\n                }\n            }\n            if (ev.keyCode === 9) {\n                insertTextAtCursor('\\xA0');\n                ev.preventDefault();\n            }\n        }\n        const script = onMouseDown.toString() + ';window.addEventListener(\"keydown\", onMouseDown)';\n        let template = '<!DOCTYPE html><html><head><link rel=\"stylesheet\" type=\"text/css\" href=\"' + themeSrc + '\" /><script>' + script + '</script></head><body contentEditable=\"true\" data-style-theme=\"' + themeName + '\"></body></html>';\n        if (!editable) {\n            template = template.replace(' contentEditable=\"true\"', '');\n        }\n        const doc = getDocument(el);\n        doc.open();\n        doc.write(template);\n        doc.close();\n        createFixInterval(el, doc, text);\n    }\n    class GUIRichText extends GUIElement {\n        static register() {\n            return super.register({ tagName: 'gui-richtext' }, this);\n        }\n        on(evName, callback, params) {\n            if (['selection'].indexOf(evName) !== -1) {\n                evName = '_' + evName;\n            }\n            Events.$bind(this.$element, evName, callback.bind(this), params);\n            return this;\n        }\n        build() {\n            const el = this.$element;\n            const text = el.childNodes.length ? el.childNodes[0].nodeValue : '';\n            DOM.$empty(el);\n            const iframe = document.createElement('iframe');\n            iframe.setAttribute('border', 0);\n            iframe.onload = () => {\n                iframe.contentWindow.addEventListener('selectstart', () => {\n                    el.dispatchEvent(new CustomEvent('_selection', { detail: {} }));\n                });\n                iframe.contentWindow.addEventListener('pointerup', () => {\n                    el.dispatchEvent(new CustomEvent('_selection', { detail: {} }));\n                });\n            };\n            el.appendChild(iframe);\n            setTimeout(() => {\n                try {\n                    setDocumentData(el, text);\n                } catch (e) {\n                    console.warn('gui-richtext', 'build()', e);\n                }\n            }, 1);\n            return this;\n        }\n        command() {\n            try {\n                const doc = getDocument(this.$element);\n                if (doc && doc.execCommand) {\n                    return doc.execCommand.apply(doc, arguments);\n                }\n            } catch (e) {\n                console.warn('gui-richtext call() warning', e.stack, e);\n            }\n            return this;\n        }\n        query() {\n            try {\n                const doc = getDocument(this.$element);\n                if (doc && doc.queryCommandValue) {\n                    return doc.queryCommandValue.apply(doc, arguments);\n                }\n            } catch (e) {\n                console.warn('gui-richtext call() warning', e.stack, e);\n            }\n            return null;\n        }\n        get(param, value) {\n            if (param === 'value') {\n                return getDocumentData(this.$element);\n            }\n            return super.get(...arguments);\n        }\n        set(param, value) {\n            if (param === 'value') {\n                setDocumentData(this.$element, value);\n                return this;\n            }\n            return super.set(...arguments);\n        }\n    }\n    return { GUIRichText: GUIRichText };\n});"]}