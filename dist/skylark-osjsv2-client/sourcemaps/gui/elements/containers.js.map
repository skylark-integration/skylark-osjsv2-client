{"version":3,"sources":["gui/elements/containers.js"],"names":["define","GUI","Events","GUIElement","toggleState","el","expanded","getAttribute","setAttribute","String","GUIPanedView","[object Object]","super","register","tagName","type","allowedChildren","this","evName","callback","params","$element","$bind","bind","orient","querySelectorAll","forEach","cel","idx","resizer","document","createElement","parentNode","insertBefore","resizeEl","previousElementSibling","startWidth","offsetWidth","startHeight","offsetHeight","minSize","maxSize","Number","MAX_VALUE","createDrag","ev","parseInt","totalSize","totalContainers","length","totalSpacers","diff","newWidth","x","newHeight","y","flex","isNaN","toString","style","webkitFlexBasis","mozFflexBasis","msFflexBasis","oFlexBasis","flexBasis","dispatchEvent","CustomEvent","detail","index","bindResizer","GUIPanedViewContainer","allowedParents","setFlexbox","GUIButtonBar","GUIToolBar","GUIGrid","rows","p","r","height","GUIGridRow","GUIGridEntry","GUIVBox","GUIVBoxContainer","GUIHBox","GUIHBoxContainer","GUIExpander","param","value","set","arguments","indexOf","lbltxt","label","appendChild","createTextNode","children"],"mappings":"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","file":"../../../gui/elements/containers.js","sourcesContent":["define([\n    '../../utils/gui',\n    '../../utils/events',\n    '../element'\n], function (GUI, Events, GUIElement) {\n    'use strict';\n    function toggleState(el, expanded) {\n        if (typeof expanded === 'undefined') {\n            expanded = el.getAttribute('data-expanded') !== 'false';\n            expanded = !expanded;\n        }\n        el.setAttribute('aria-expanded', String(expanded));\n        el.setAttribute('data-expanded', String(expanded));\n        return expanded;\n    }\n    class GUIPanedView extends GUIElement {\n        static register() {\n            return super.register({\n                tagName: 'gui-paned-view',\n                type: 'container',\n                allowedChildren: ['gui-paned-view-container']\n            }, this);\n        }\n        on(evName, callback, params) {\n            const el = this.$element;\n            if (evName === 'resize') {\n                evName = '_' + evName;\n            }\n            Events.$bind(el, evName, callback.bind(this), params);\n            return this;\n        }\n        build() {\n            const el = this.$element;\n            const orient = el.getAttribute('data-orientation') || 'horizontal';\n            function bindResizer(resizer, idx, cel) {\n                const resizeEl = resizer.previousElementSibling;\n                if (!resizeEl) {\n                    return;\n                }\n                let startWidth = resizeEl.offsetWidth;\n                let startHeight = resizeEl.offsetHeight;\n                let minSize = 16;\n                let maxSize = Number.MAX_VALUE;\n                GUI.createDrag(resizer, ev => {\n                    startWidth = resizeEl.offsetWidth;\n                    startHeight = resizeEl.offsetHeight;\n                    minSize = parseInt(cel.getAttribute('data-min-size'), 10) || minSize;\n                    const max = parseInt(cel.getAttribute('data-max-size'), 10);\n                    if (!max) {\n                        const totalSize = resizer.parentNode[orient === 'horizontal' ? 'offsetWidth' : 'offsetHeight'];\n                        const totalContainers = resizer.parentNode.querySelectorAll('gui-paned-view-container').length;\n                        const totalSpacers = resizer.parentNode.querySelectorAll('gui-paned-view-handle').length;\n                        maxSize = totalSize - totalContainers * 16 - totalSpacers * 8;\n                    }\n                }, (ev, diff) => {\n                    const newWidth = startWidth + diff.x;\n                    const newHeight = startHeight + diff.y;\n                    let flex;\n                    if (orient === 'horizontal') {\n                        if (!isNaN(newWidth) && newWidth > 0 && newWidth >= minSize && newWidth <= maxSize) {\n                            flex = newWidth.toString() + 'px';\n                        }\n                    } else {\n                        if (!isNaN(newHeight) && newHeight > 0 && newHeight >= minSize && newHeight <= maxSize) {\n                            flex = newHeight.toString() + 'px';\n                        }\n                    }\n                    if (flex) {\n                        resizeEl.style.webkitFlexBasis = flex;\n                        resizeEl.style.mozFflexBasis = flex;\n                        resizeEl.style.msFflexBasis = flex;\n                        resizeEl.style.oFlexBasis = flex;\n                        resizeEl.style.flexBasis = flex;\n                    }\n                }, ev => {\n                    el.dispatchEvent(new CustomEvent('_resize', { detail: { index: idx } }));\n                });\n            }\n            el.querySelectorAll('gui-paned-view-container').forEach((cel, idx) => {\n                if (idx % 2) {\n                    const resizer = document.createElement('gui-paned-view-handle');\n                    resizer.setAttribute('role', 'separator');\n                    cel.parentNode.insertBefore(resizer, cel);\n                    bindResizer(resizer, idx, cel);\n                }\n            });\n            return this;\n        }\n    }\n    class GUIPanedViewContainer extends GUIElement {\n        static register() {\n            return super.register({\n                tagName: 'gui-paned-view-container',\n                type: 'container',\n                allowedParents: ['gui-paned-view']\n            }, this);\n        }\n        build() {\n            GUI.setFlexbox(this.$element);\n            return this;\n        }\n    }\n    class GUIButtonBar extends GUIElement {\n        static register() {\n            return super.register({\n                tagName: 'gui-button-bar',\n                type: 'container'\n            }, this);\n        }\n        build() {\n            this.$element.setAttribute('role', 'toolbar');\n            return this;\n        }\n    }\n    class GUIToolBar extends GUIElement {\n        static register() {\n            return super.register({\n                tagName: 'gui-toolbar',\n                type: 'container'\n            }, this);\n        }\n        build() {\n            this.$element.setAttribute('role', 'toolbar');\n            return this;\n        }\n    }\n    class GUIGrid extends GUIElement {\n        static register() {\n            return super.register({\n                tagName: 'gui-grid',\n                type: 'container',\n                allowedChildren: ['gui-grid-row']\n            }, this);\n        }\n        build() {\n            const rows = this.$element.querySelectorAll('gui-grid-row');\n            const p = 100 / rows.length;\n            rows.forEach(r => {\n                r.style.height = String(p) + '%';\n            });\n            return this;\n        }\n    }\n    class GUIGridRow extends GUIElement {\n        static register() {\n            return super.register({\n                tagName: 'gui-grid-row',\n                type: 'container',\n                allowedChildren: ['gui-grid-entry'],\n                allowedParents: ['gui-grid-row']\n            }, this);\n        }\n    }\n    class GUIGridEntry extends GUIElement {\n        static register() {\n            return super.register({\n                tagName: 'gui-grid-entry',\n                type: 'container',\n                allowedParents: ['gui-grid-row']\n            }, this);\n        }\n    }\n    class GUIVBox extends GUIElement {\n        static register() {\n            return super.register({\n                tagName: 'gui-vbox',\n                type: 'container',\n                allowedChildren: ['gui-vbox-container']\n            }, this);\n        }\n    }\n    class GUIVBoxContainer extends GUIElement {\n        static register() {\n            return super.register({\n                tagName: 'gui-vbox-container',\n                type: 'container',\n                allowedParents: ['gui-vbox']\n            }, this);\n        }\n        build() {\n            GUI.setFlexbox(this.$element);\n            return this;\n        }\n    }\n    class GUIHBox extends GUIElement {\n        static register() {\n            return super.register({\n                tagName: 'gui-hbox',\n                type: 'container',\n                allowedChildren: ['gui-hbox-container']\n            }, this);\n        }\n    }\n    class GUIHBoxContainer extends GUIElement {\n        static register() {\n            return super.register({\n                tagName: 'gui-hbox-container',\n                type: 'container',\n                allowedParents: ['gui-hbox']\n            }, this);\n        }\n        build() {\n            GUI.setFlexbox(this.$element);\n            return this;\n        }\n    }\n    class GUIExpander extends GUIElement {\n        static register() {\n            return super.register({\n                tagName: 'gui-expander',\n                type: 'container'\n            }, this);\n        }\n        set(param, value) {\n            if (param === 'expanded') {\n                return toggleState(this.$element, value === true);\n            }\n            return super.set(...arguments);\n        }\n        on(evName, callback, params) {\n            if (['change'].indexOf(evName) !== -1) {\n                evName = '_' + evName;\n            }\n            Events.$bind(this.$element, evName, callback.bind(this), params);\n            return this;\n        }\n        build() {\n            const el = this.$element;\n            const lbltxt = el.getAttribute('data-label') || '';\n            const label = document.createElement('gui-expander-label');\n            Events.$bind(label, 'pointerdown', ev => {\n                el.dispatchEvent(new CustomEvent('_change', { detail: { expanded: toggleState(el) } }));\n            }, false);\n            label.appendChild(document.createTextNode(lbltxt));\n            el.setAttribute('role', 'toolbar');\n            el.setAttribute('aria-expanded', 'true');\n            el.setAttribute('data-expanded', 'true');\n            if (el.children.length) {\n                el.insertBefore(label, el.children[0]);\n            } else {\n                el.appendChild(label);\n            }\n            return this;\n        }\n    }\n    return {\n        GUIPanedView: GUIPanedView,\n        GUIPanedViewContainer: GUIPanedViewContainer,\n        GUIButtonBar: GUIButtonBar,\n        GUIToolBar: GUIToolBar,\n        GUIGrid: GUIGrid,\n        GUIGridRow: GUIGridRow,\n        GUIGridEntry: GUIGridEntry,\n        GUIVBox: GUIVBox,\n        GUIVBoxContainer: GUIVBoxContainer,\n        GUIHBox: GUIHBox,\n        GUIHBoxContainer: GUIHBoxContainer,\n        GUIExpander: GUIExpander\n    };\n});"]}