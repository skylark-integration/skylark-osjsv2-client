{"version":3,"sources":["gui/elements/menus.js"],"names":["define","DOM","GUI","Events","Menu","GUIElement","debounce","getSelectionEventAttribs","mel","didx","id","getAttribute","idx","$index","parseInt","result","index","Array","prototype","slice","call","attributes","forEach","item","name","match","an","replace","value","getEventName","evName","indexOf","runChildren","pel","level","winRef","cb","children","child","i","tagName","toLowerCase","createFromNode","build","onEntryClick","ev","pos","target","original","querySelector","dispatchEvent","CustomEvent","detail","GUIMenuEntry","[object Object]","super","register","this","callback","params","$element","$bind","bind","arg","arguments","length","setAttribute","label","getLabel","icon","getIcon","span","document","createElement","style","backgroundImage","$addClass","appendChild","par","type","input","group","createTyped","innerHTML","createTextNode","GUIMenuBar","querySelectorAll","el","insertBefore","firstChild","submenu","clamp","String","updateChildren","sm","preventDefault","c","$removeClass","setActive","window","Event","stopPropagation","$hasClass","_onClick","GUIMenu","apply","parentNode","newNode","cloneNode","create","param","found","removeAttribute","set","customMenu","getElementsByTagName","sub","e","console","warn","clearTimeout","setTimeout","clickWrapper"],"mappings":"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","file":"../../../gui/elements/menus.js","sourcesContent":["define([\n    '../../utils/dom',\n    '../../utils/gui',\n    '../../utils/events',\n    '../menu',\n    '../element'\n], function (DOM, GUI, Events, Menu, GUIElement) {\n    'use strict';\n    let debounce;\n    function getSelectionEventAttribs(mel, didx) {\n        const id = mel.getAttribute('data-id');\n        let idx = DOM.$index(mel);\n        if (!didx) {\n            idx = parseInt(mel.getAttribute('data-index'), 10);\n        }\n        const result = {\n            index: idx,\n            id: id\n        };\n        Array.prototype.slice.call(mel.attributes).forEach(item => {\n            if (item.name.match(/^data\\-/)) {\n                const an = item.name.replace(/^data\\-/, '');\n                if (typeof result[an] === 'undefined') {\n                    result[an] = item.value;\n                }\n            }\n        });\n        return result;\n    }\n    function getEventName(evName) {\n        if ([\n                'select',\n                'click'\n            ].indexOf(evName) !== -1) {\n            return '_select';\n        }\n        return evName;\n    }\n    function runChildren(pel, level, winRef, cb) {\n        level = level || 0;\n        cb = cb || function () {\n        };\n        if (pel.children) {\n            pel.children.forEach((child, i) => {\n                if (child && child.tagName.toLowerCase() === 'gui-menu-entry') {\n                    GUIElement.createFromNode(child).build(null, winRef);\n                    cb(child, level);\n                }\n            });\n        }\n    }\n    function onEntryClick(ev, pos, target, original) {\n        const isExpander = !!target.querySelector('gui-menu');\n        if (!isExpander) {\n            const dispatcher = (original || target).querySelector('label');\n            dispatcher.dispatchEvent(new CustomEvent('_select', { detail: getSelectionEventAttribs(target, true) }));\n        }\n    }\n    function createTyped(child, par) {\n        const type = child.getAttribute('data-type');\n        const value = child.getAttribute('data-checked') === 'true';\n        let input = null;\n        if (type) {\n            const group = child.getAttribute('data-group');\n            input = document.createElement('input');\n            input.type = type;\n            input.name = group ? group + '[]' : '';\n            if (value) {\n                input.setAttribute('checked', 'checked');\n            }\n            par.setAttribute('role', 'menuitem' + type);\n            par.appendChild(input);\n        }\n    }\n    class GUIMenuEntry extends GUIElement {\n        static register() {\n            return super.register({ tagName: 'gui-menu-entry' }, this);\n        }\n        on(evName, callback, params) {\n            evName = getEventName(evName);\n            const target = this.$element.querySelector('gui-menu-entry > label');\n            Events.$bind(target, evName, callback.bind(this), params);\n            return this;\n        }\n        build(arg, winRef) {\n            const child = this.$element;\n            if (arguments.length < 2) {\n                return this;\n            }\n            child.setAttribute('role', 'menuitem' + (child.getAttribute('data-type') || ''));\n            const label = GUI.getLabel(child);\n            const icon = GUI.getIcon(child, winRef);\n            child.setAttribute('aria-label', label);\n            const span = document.createElement('label');\n            if (icon) {\n                child.style.backgroundImage = 'url(' + icon + ')';\n                DOM.$addClass(span, 'gui-has-image');\n            }\n            child.appendChild(span);\n            createTyped(child, span);\n            if (child.getAttribute('data-labelhtml') === 'true') {\n                span.innerHTML = label;\n            } else {\n                span.appendChild(document.createTextNode(label));\n            }\n            if (child.querySelector('gui-menu')) {\n                DOM.$addClass(child, 'gui-menu-expand');\n                child.setAttribute('aria-haspopup', 'true');\n            } else {\n                child.setAttribute('aria-haspopup', 'false');\n            }\n            return this;\n        }\n    }\n    class GUIMenu extends GUIElement {\n        static register() {\n            return super.register({ tagName: 'gui-menu' }, this);\n        }\n        on(evName, callback, params) {\n            evName = getEventName(evName);\n            Events.$bind(this.$element, evName, function (ev) {\n                if (ev.target.tagName === 'LABEL') {\n                    callback.apply(new GUIElement(ev.target.parentNode), arguments);\n                }\n            }, true);\n            return this;\n        }\n        show(ev) {\n            ev.stopPropagation();\n            ev.preventDefault();\n            const newNode = this.$element.cloneNode(true);\n            Menu.create(null, ev, newNode);\n        }\n        set(param, value, arg) {\n            if (param === 'checked') {\n                const found = this.$element.querySelector('gui-menu-entry[data-id=\"' + value + '\"]');\n                if (found) {\n                    const input = found.querySelector('input');\n                    if (input) {\n                        if (arg) {\n                            input.setAttribute('checked', 'checked');\n                        } else {\n                            input.removeAttribute('checked');\n                        }\n                    }\n                }\n                return this;\n            }\n            return super.set(...arguments);\n        }\n        build(customMenu, winRef) {\n            const el = this.$element;\n            el.setAttribute('role', 'menu');\n            try {\n                runChildren(el, 0, winRef, (child, level) => {\n                    if (customMenu) {\n                        if (child) {\n                            const submenus = child.getElementsByTagName('gui-menu');\n                            submenus.forEach(sub => {\n                                if (sub) {\n                                    runChildren(sub, level + 1, winRef);\n                                }\n                            });\n                        }\n                    }\n                });\n            } catch (e) {\n                console.warn(e);\n            }\n            if (!customMenu) {\n                Events.$bind(el, 'click', (ev, pos) => {\n                    clearTimeout(debounce);\n                    debounce = setTimeout(() => {\n                        debounce = clearTimeout(debounce);\n                        Menu.clickWrapper(ev, pos, onEntryClick);\n                    }, 1);\n                }, true);\n            }\n            return this;\n        }\n    }\n    class GUIMenuBar extends GUIElement {\n        static register() {\n            return super.register({ tagName: 'gui-menu-bar' }, this);\n        }\n        on(evName, callback, params) {\n            evName = getEventName(evName);\n            this.$element.querySelectorAll('gui-menu-bar-entry').forEach(target => {\n                Events.$bind(target, evName, callback.bind(this), params);\n            });\n            return this;\n        }\n        build() {\n            const el = this.$element;\n            el.setAttribute('role', 'menubar');\n            function updateChildren(sm, level) {\n                if (sm && sm.children) {\n                    const children = sm.children;\n                    let child;\n                    for (let i = 0; i < children.length; i++) {\n                        child = children[i];\n                        if (child.tagName === 'GUI-MENU-ENTRY') {\n                            child.setAttribute('aria-haspopup', String(!!child.firstChild));\n                            updateChildren(child.firstChild, level + 1);\n                        }\n                    }\n                }\n            }\n            function _onClick(ev) {\n                ev.preventDefault();\n                const mel = ev.target;\n                const submenu = mel.querySelector('gui-menu');\n                if (mel.getAttribute('data-disabled') === 'true') {\n                    return;\n                }\n                mel.querySelectorAll('gui-menu-entry').forEach(c => {\n                    DOM.$removeClass(c, 'gui-hover');\n                });\n                if (submenu) {\n                    Menu.setActive(ev => {\n                        if (ev instanceof window.Event) {\n                            ev.stopPropagation();\n                        }\n                        DOM.$removeClass(mel, 'gui-active');\n                    });\n                }\n                if (DOM.$hasClass(mel, 'gui-active')) {\n                    if (submenu) {\n                        DOM.$removeClass(mel, 'gui-active');\n                    }\n                } else {\n                    if (submenu) {\n                        DOM.$addClass(mel, 'gui-active');\n                    }\n                    mel.dispatchEvent(new CustomEvent('_select', { detail: getSelectionEventAttribs(mel) }));\n                }\n            }\n            el.querySelectorAll('gui-menu-bar-entry').forEach((mel, idx) => {\n                const label = GUI.getLabel(mel);\n                const span = document.createElement('span');\n                span.appendChild(document.createTextNode(label));\n                mel.setAttribute('role', 'menuitem');\n                mel.insertBefore(span, mel.firstChild);\n                const submenu = mel.querySelector('gui-menu');\n                Menu.clamp(submenu);\n                mel.setAttribute('aria-haspopup', String(!!submenu));\n                mel.setAttribute('data-index', String(idx));\n                updateChildren(submenu, 2);\n            });\n            Events.$bind(el, 'click', ev => {\n                if (ev.target.tagName === 'GUI-MENU-BAR-ENTRY') {\n                    _onClick(ev);\n                }\n            }, true);\n            return this;\n        }\n    }\n    return {\n        GUIMenuEntry: GUIMenuEntry,\n        GUIMenuBar: GUIMenuBar,\n        GUIMenu: GUIMenu\n    };\n});"]}