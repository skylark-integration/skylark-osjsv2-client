{"version":3,"sources":["gui/elements/misc.js"],"names":["define","DOM","Events","Colors","GUIElement","GUIIframe","[object Object]","super","register","tagName","this","_tagName","isStandalone","window","navigator","standalone","matchMedia","matches","e","key","val","$element","querySelector","src","set","arguments","el","getAttribute","iframe","document","createElement","setAttribute","appendChild","GUIColorBox","evName","callback","params","target","$bind","bind","param","value","firstChild","style","backgroundColor","inner","GUIColorSwatch","cv","width","height","ctx","getContext","gradient","createLinearGradient","canvas","addColorStop","fillStyle","fillRect","ev","c","pos","$position","cx","offsetX","clientX","left","cy","offsetY","clientY","top","isNaN","data","getImageData","r","g","b","hex","convertToHEX","getColor","dispatchEvent","CustomEvent","detail","GUIProgressBar","parseInt","Math","max","min","String","toString","innerHTML","p","percentage","progress","span","createTextNode","GUIStatusBar","getElementsByTagName","$empty","args","win","lbl","node","textNodes","i","childNodes","length","nodeType","Node","TEXT_NODE","nodeValue","replace","push","removeChild","join"],"mappings":"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","file":"../../../gui/elements/misc.js","sourcesContent":["define([\n    '../../utils/dom',\n    '../../utils/events',\n    '../../utils/colors',\n    '../element'\n], function (DOM, Events, Colors, GUIElement) {\n    'use strict';\n    class GUIColorBox extends GUIElement {\n        static register() {\n            return super.register({ tagName: 'gui-color-box' }, this);\n        }\n        on(evName, callback, params) {\n            const el = this.$element;\n            const target = el.querySelector('div');\n            Events.$bind(target, evName, callback.bind(this), params);\n            return this;\n        }\n        set(param, value) {\n            if (param === 'value') {\n                this.$element.firstChild.style.backgroundColor = value;\n                return this;\n            }\n            return super.set(...arguments);\n        }\n        build() {\n            const inner = document.createElement('div');\n            this.$element.appendChild(inner);\n            return this;\n        }\n    }\n    class GUIColorSwatch extends GUIElement {\n        static register() {\n            return super.register({ tagName: 'gui-color-swatch' }, this);\n        }\n        on(evName, callback, params) {\n            const el = this.$element;\n            const target = el.querySelector('canvas');\n            if (evName === 'select' || evName === 'change') {\n                evName = '_change';\n            }\n            Events.$bind(target, evName, callback.bind(this), params);\n            return this;\n        }\n        build() {\n            const el = this.$element;\n            const cv = document.createElement('canvas');\n            cv.width = 100;\n            cv.height = 100;\n            const ctx = cv.getContext('2d');\n            let gradient = ctx.createLinearGradient(0, 0, ctx.canvas.width, 0);\n            function getColor(ev) {\n                const pos = DOM.$position(cv);\n                const cx = typeof ev.offsetX === 'undefined' ? ev.clientX - pos.left : ev.offsetX;\n                const cy = typeof ev.offsetY === 'undefined' ? ev.clientY - pos.top : ev.offsetY;\n                if (isNaN(cx) || isNaN(cy)) {\n                    return null;\n                }\n                const data = ctx.getImageData(cx, cy, 1, 1).data;\n                return {\n                    r: data[0],\n                    g: data[1],\n                    b: data[2],\n                    hex: Colors.convertToHEX(data[0], data[1], data[2])\n                };\n            }\n            gradient.addColorStop(0, 'rgb(255,   0,   0)');\n            gradient.addColorStop(0.15, 'rgb(255,   0, 255)');\n            gradient.addColorStop(0.33, 'rgb(0,     0, 255)');\n            gradient.addColorStop(0.49, 'rgb(0,   255, 255)');\n            gradient.addColorStop(0.67, 'rgb(0,   255,   0)');\n            gradient.addColorStop(0.84, 'rgb(255, 255,   0)');\n            gradient.addColorStop(1, 'rgb(255,   0,   0)');\n            ctx.fillStyle = gradient;\n            ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n            gradient = ctx.createLinearGradient(0, 0, 0, ctx.canvas.height);\n            gradient.addColorStop(0, 'rgba(255, 255, 255, 1)');\n            gradient.addColorStop(0.5, 'rgba(255, 255, 255, 0)');\n            gradient.addColorStop(0.5, 'rgba(0,     0,   0, 0)');\n            gradient.addColorStop(1, 'rgba(0,     0,   0, 1)');\n            ctx.fillStyle = gradient;\n            ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n            Events.$bind(cv, 'pointerdown', ev => {\n                const c = getColor(ev);\n                if (c) {\n                    cv.dispatchEvent(new CustomEvent('_change', { detail: c }));\n                }\n            }, false);\n            el.appendChild(cv);\n            return this;\n        }\n    }\n    class GUIIframe extends GUIElement {\n        static register() {\n            return super.register({ tagName: 'gui-iframe' }, this);\n        }\n        static get _tagName() {\n            let isStandalone = false;\n            try {\n                isStandalone = window.navigator.standalone || window.matchMedia('(display-mode: standalone)').matches;\n            } catch (e) {\n            }\n            return isStandalone ? 'webview' : 'iframe';\n        }\n        set(key, val) {\n            if (key === 'src') {\n                this.$element.querySelector(GUIIframe._tagName).src = val;\n                return this;\n            }\n            return super.set(...arguments);\n        }\n        build() {\n            const el = this.$element;\n            const src = el.getAttribute('data-src') || 'about:blank';\n            const iframe = document.createElement(GUIIframe._tagName);\n            iframe.src = src;\n            iframe.setAttribute('border', 0);\n            el.appendChild(iframe);\n            return this;\n        }\n    }\n    class GUIProgressBar extends GUIElement {\n        static register() {\n            return super.register({ tagName: 'gui-progress-bar' }, this);\n        }\n        set(param, value) {\n            const el = this.$element;\n            el.setAttribute('data-' + param, value);\n            if (param === 'progress' || param === 'value') {\n                value = parseInt(value, 10);\n                value = Math.max(0, Math.min(100, value));\n                el.setAttribute('aria-label', String(value));\n                el.setAttribute('aria-valuenow', String(value));\n                el.querySelector('div').style.width = value.toString() + '%';\n                el.querySelector('span').innerHTML = value + '%';\n                return this;\n            }\n            return super.set(...arguments);\n        }\n        build() {\n            const el = this.$element;\n            let p = el.getAttribute('data-progress') || 0;\n            p = Math.max(0, Math.min(100, p));\n            const percentage = p.toString() + '%';\n            const progress = document.createElement('div');\n            progress.style.width = percentage;\n            const span = document.createElement('span');\n            span.appendChild(document.createTextNode(percentage));\n            el.setAttribute('role', 'progressbar');\n            el.setAttribute('aria-valuemin', 0);\n            el.setAttribute('aria-valuemax', 100);\n            el.setAttribute('aria-label', 0);\n            el.setAttribute('aria-valuenow', 0);\n            el.appendChild(progress);\n            el.appendChild(span);\n            return this;\n        }\n    }\n    class GUIStatusBar extends GUIElement {\n        static register() {\n            return super.register({ tagName: 'gui-statusbar' }, this);\n        }\n        set(param, value) {\n            if (param === 'label' || param === 'value') {\n                const span = this.$element.getElementsByTagName('gui-statusbar-label')[0];\n                if (span) {\n                    DOM.$empty(span);\n                    span.innerHTML = value;\n                }\n                return this;\n            }\n            return super.set(...arguments);\n        }\n        build(args, win) {\n            const el = this.$element;\n            const span = document.createElement('gui-statusbar-label');\n            let lbl = el.getAttribute('data-label') || el.getAttribute('data-value');\n            if (!lbl) {\n                lbl = (() => {\n                    let textNodes = [];\n                    let node, value;\n                    for (let i = 0; i < el.childNodes.length; i++) {\n                        node = el.childNodes[i];\n                        if (node.nodeType === Node.TEXT_NODE) {\n                            value = node.nodeValue.replace(/\\s+/g, '').replace(/^\\s+/g, '');\n                            if (value.length > 0) {\n                                textNodes.push(value);\n                            }\n                            el.removeChild(node);\n                            i++;\n                        }\n                    }\n                    return textNodes.join(' ');\n                })();\n            }\n            span.innerHTML = lbl;\n            el.setAttribute('role', 'log');\n            el.appendChild(span);\n            return this;\n        }\n    }\n    return {\n        GUIColorBox: GUIColorBox,\n        GUIColorSwatch: GUIColorSwatch,\n        GUIIframe: GUIIframe,\n        GUIProgressBar: GUIProgressBar,\n        GUIStatusBar: GUIStatusBar\n    };\n});"]}