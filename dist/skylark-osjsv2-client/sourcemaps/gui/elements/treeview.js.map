{"version":3,"sources":["gui/elements/treeview.js"],"names":["define","DOM","GUI","GUIDataView","createEntry","cls","e","createElement","handleItemExpand","ev","el","root","expanded","$hasClass","$removeClass","$addClass","children","i","length","tagName","toLowerCase","style","display","selected","index","$index","data","getViewNodeValue","setAttribute","String","dispatchEvent","CustomEvent","detail","entries","element","initEntry","sel","$element","_rendered","icon","getAttribute","label","getLabel","next","querySelector","container","document","dspan","onDndEnter","stopPropagation","onDndLeave","backgroundImage","appendChild","createTextNode","expander","insertBefore","createDraggable","JSON","parse","timeout","createDroppable","onEnter","onOver","onLeave","onDrop","onItemDropped","eel","item","preventDefault","clearTimeout","setTimeout","dval","parentNode","src","dest","bindEntryEvents","GUITreeView","[object Object]","super","register","parent","this","getSelected","querySelectorAll","applyArgs","body","found","forEach","idx","build","arguments","param","value","arg","getEntry","get","arg2","setSelected","set","clear","recurse","a","level","add","entry","Array","Object","keys","remove","patch"],"mappings":"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","file":"../../../gui/elements/treeview.js","sourcesContent":["define([\n    '../../utils/dom',\n    '../../utils/gui',\n    '../dataview'\n], function (DOM, GUI, GUIDataView) {\n    'use strict';\n    function createEntry(cls, e) {\n        const entry = GUI.createElement('gui-tree-view-entry', e, ['entries']);\n        return entry;\n    }\n    function handleItemExpand(ev, el, root, expanded) {\n        if (typeof expanded === 'undefined') {\n            expanded = !DOM.$hasClass(root, 'gui-expanded');\n        }\n        DOM.$removeClass(root, 'gui-expanded');\n        if (expanded) {\n            DOM.$addClass(root, 'gui-expanded');\n        }\n        const children = root.children;\n        for (let i = 0; i < children.length; i++) {\n            if (children[i].tagName.toLowerCase() === 'gui-tree-view-entry') {\n                children[i].style.display = expanded ? 'block' : 'none';\n            }\n        }\n        const selected = {\n            index: DOM.$index(root),\n            data: GUI.getViewNodeValue(root)\n        };\n        root.setAttribute('data-expanded', String(expanded));\n        root.setAttribute('aria-expanded', String(expanded));\n        el.dispatchEvent(new CustomEvent('_expand', {\n            detail: {\n                entries: [selected],\n                expanded: expanded,\n                element: root\n            }\n        }));\n    }\n    function initEntry(cls, sel) {\n        const el = cls.$element;\n        if (sel._rendered) {\n            return;\n        }\n        sel._rendered = true;\n        const icon = sel.getAttribute('data-icon');\n        const label = GUI.getLabel(sel);\n        const expanded = el.getAttribute('data-expanded') === 'true';\n        const next = sel.querySelector('gui-tree-view-entry');\n        const container = document.createElement('div');\n        const dspan = document.createElement('span');\n        function onDndEnter(ev) {\n            ev.stopPropagation();\n            DOM.$addClass(sel, 'dnd-over');\n        }\n        function onDndLeave(ev) {\n            DOM.$removeClass(sel, 'dnd-over');\n        }\n        if (icon) {\n            dspan.style.backgroundImage = 'url(' + icon + ')';\n            DOM.$addClass(dspan, 'gui-has-image');\n        }\n        dspan.appendChild(document.createTextNode(label));\n        container.appendChild(dspan);\n        if (next) {\n            DOM.$addClass(sel, 'gui-expandable');\n            const expander = document.createElement('gui-tree-view-expander');\n            sel.insertBefore(container, next);\n            sel.insertBefore(expander, container);\n        } else {\n            sel.appendChild(container);\n        }\n        if (String(sel.getAttribute('data-draggable')) === 'true') {\n            GUI.createDraggable(container, (() => {\n                let data = {};\n                try {\n                    data = JSON.parse(sel.getAttribute('data-value'));\n                } catch (e) {\n                }\n                return { data: data };\n            })());\n        }\n        if (String(sel.getAttribute('data-droppable')) === 'true') {\n            let timeout;\n            GUI.createDroppable(container, {\n                onEnter: onDndEnter,\n                onOver: onDndEnter,\n                onLeave: onDndLeave,\n                onDrop: onDndLeave,\n                onItemDropped: (ev, eel, item) => {\n                    ev.stopPropagation();\n                    ev.preventDefault();\n                    timeout = clearTimeout(timeout);\n                    timeout = setTimeout(() => {\n                        DOM.$removeClass(sel, 'dnd-over');\n                    }, 10);\n                    let dval = {};\n                    try {\n                        dval = JSON.parse(eel.parentNode.getAttribute('data-value'));\n                    } catch (e) {\n                    }\n                    el.dispatchEvent(new CustomEvent('_drop', {\n                        detail: {\n                            src: item.data,\n                            dest: dval\n                        }\n                    }));\n                }\n            });\n        }\n        handleItemExpand(null, el, sel, expanded);\n        cls.bindEntryEvents(sel, 'gui-tree-view-entry');\n    }\n    class GUITreeView extends GUIDataView {\n        static register() {\n            return super.register({\n                parent: GUIDataView,\n                tagName: 'gui-tree-view'\n            }, this);\n        }\n        values() {\n            const el = this.$element;\n            return this.getSelected(el.querySelectorAll('gui-tree-view-entry'));\n        }\n        build(applyArgs) {\n            const el = this.$element;\n            let body = el.querySelector('gui-tree-view-body');\n            let found = !!body;\n            if (!body) {\n                body = document.createElement('gui-tree-view-body');\n                el.appendChild(body);\n            }\n            body.setAttribute('role', 'group');\n            el.setAttribute('role', 'tree');\n            el.setAttribute('aria-multiselectable', body.getAttribute('data-multiselect') || 'false');\n            el.querySelectorAll('gui-tree-view-entry').forEach((sel, idx) => {\n                sel.setAttribute('aria-expanded', 'false');\n                if (!found) {\n                    body.appendChild(sel);\n                }\n                sel.setAttribute('role', 'treeitem');\n                initEntry(this, sel);\n            });\n            return super.build(...arguments);\n        }\n        get(param, value, arg) {\n            if (param === 'entry') {\n                const body = this.$element.querySelector('gui-tree-view-body');\n                return this.getEntry(body.querySelectorAll('gui-tree-view-entry'), value, arg);\n            }\n            return super.get(...arguments);\n        }\n        set(param, value, arg, arg2) {\n            const el = this.$element;\n            const body = el.querySelector('gui-tree-view-body');\n            if (param === 'selected' || param === 'value') {\n                this.setSelected(body, body.querySelectorAll('gui-tree-view-entry'), value, arg, arg2);\n                return this;\n            }\n            return super.set(...arguments);\n        }\n        clear() {\n            const body = this.$element.querySelector('gui-tree-view-body');\n            return super.clear(body);\n        }\n        add(entries) {\n            const body = this.$element.querySelector('gui-tree-view-body');\n            let parentNode = body;\n            const recurse = (a, root, level) => {\n                super.add(a, (cls, e) => {\n                    if (e) {\n                        if (e.parentNode) {\n                            delete e.parentNode;\n                        }\n                        const entry = createEntry(this, e);\n                        root.appendChild(entry);\n                        if (e.entries) {\n                            recurse(e.entries, entry, level + 1);\n                        }\n                        initEntry(this, entry);\n                    }\n                });\n            };\n            if (typeof entries === 'object' && !(entries instanceof Array) && Object.keys(entries).length) {\n                parentNode = entries.parentNode || body;\n                entries = entries.entries || [];\n            }\n            recurse(entries, parentNode, 0);\n            return this;\n        }\n        remove(entries) {\n            return super.remove(entries, 'gui-tree-view-entry');\n        }\n        patch(entries) {\n            const body = this.$element.querySelector('gui-tree-view-body');\n            return super.patch(entries, 'gui-list-view-entry', body, createEntry, initEntry);\n        }\n        expand(entry) {\n            handleItemExpand(entry.ev, this.$element, entry.entry);\n            return this;\n        }\n    }\n    return { GUITreeView: GUITreeView };\n});"]}