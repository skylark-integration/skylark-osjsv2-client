{"version":3,"sources":["gui/elements/iconview.js"],"names":["define","GUI","GUIDataView","createEntry","cls","e","createElement","initEntry","cel","icon","getAttribute","label","getLabel","dicon","document","dimg","src","appendChild","dlabel","dspan","createTextNode","bindEntryEvents","setAttribute","GUIIconView","[object Object]","super","register","parent","tagName","this","getSelected","$element","querySelectorAll","el","body","querySelector","found","forEach","idx","build","arguments","param","value","arg","asValue","rows","getEntry","get","setSelected","set","entries","add","entry","clear","remove","patch"],"mappings":";;;;;;;AAAAA,QACI,kBACA,eACD,SAAUC,EAAKC,GACd,aACA,SAASC,EAAYC,EAAKC,GAEtB,OADcJ,EAAIK,cAAc,sBAAuBD,GAG3D,SAASE,EAAUH,EAAKI,GACpB,MAAMC,EAAOD,EAAIE,aAAa,aACxBC,EAAQV,EAAIW,SAASJ,GACrBK,EAAQC,SAASR,cAAc,OAC/BS,EAAOD,SAASR,cAAc,OACpCS,EAAKC,IAAMP,EACXI,EAAMI,YAAYF,GAClB,MAAMG,EAASJ,SAASR,cAAc,OAChCa,EAAQL,SAASR,cAAc,QACrCa,EAAMF,YAAYH,SAASM,eAAeT,IAC1CO,EAAOD,YAAYE,GACnBf,EAAIiB,gBAAgBb,EAAK,uBACzBA,EAAIc,aAAa,OAAQ,YACzBd,EAAIS,YAAYJ,GAChBL,EAAIS,YAAYC,GAmEpB,OAASK,0BAjEiBrB,EACtBsB,kBACI,OAAOC,MAAMC,UACTC,OAAQzB,EACR0B,QAAS,iBACVC,MAEPL,SACI,OAAOK,KAAKC,YAAYD,KAAKE,SAASC,iBAAiB,wBAE3DR,QACI,MAAMS,EAAKJ,KAAKE,SAChB,IAAIG,EAAOD,EAAGE,cAAc,sBAC5B,MAAMC,IAAUF,EAYhB,OAXKE,IACDF,EAAOpB,SAASR,cAAc,sBAC9B2B,EAAGhB,YAAYiB,IAEnBD,EAAGD,iBAAiB,uBAAuBK,QAAQ,CAAC7B,EAAK8B,KAChDF,GACDF,EAAKjB,YAAYT,GAErBD,EAAUsB,KAAMrB,KAEpByB,EAAGX,aAAa,OAAQ,QACjBG,MAAMc,SAASC,WAE1BhB,IAAIiB,EAAOC,EAAOC,EAAKC,GACnB,GAAc,UAAVH,EAAmB,CACnB,MACMI,EADOhB,KAAKE,SAASI,cAAc,sBACvBH,iBAAiB,uBACnC,OAAOH,KAAKiB,SAASD,EAAMH,EAAOC,EAAKC,GAE3C,OAAOnB,MAAMsB,OAAOP,WAExBhB,IAAIiB,EAAOC,EAAOC,GACd,MAAMT,EAAOL,KAAKE,SAASI,cAAc,sBACzC,MAAc,aAAVM,GAAkC,UAAVA,GACpBP,GACAL,KAAKmB,YAAYd,EAAMA,EAAKF,iBAAiB,uBAAwBU,EAAOC,GAEzEd,MAEJJ,MAAMwB,OAAOT,WAExBhB,IAAI0B,GACA,MAAMhB,EAAOL,KAAKE,SAASI,cAAc,sBACzC,OAAOV,MAAM0B,IAAID,EAAS,CAAC9C,EAAKC,KAC5B,MAAM+C,EAAQjD,EAAY0B,EAAMxB,GAChC6B,EAAKjB,YAAYmC,GACjB7C,EAAUsB,KAAMuB,KAGxB5B,QACI,MAAMU,EAAOL,KAAKE,SAASI,cAAc,sBACzC,OAAOV,MAAM4B,MAAMnB,GAEvBV,OAAO0B,GACH,OAAOzB,MAAM6B,OAAOJ,EAAS,uBAEjC1B,MAAM0B,GACF,MAAMhB,EAAOL,KAAKE,SAASI,cAAc,sBACzC,OAAOV,MAAM8B,MAAML,EAAS,sBAAuBhB,EAAM/B,EAAaI","file":"../../../gui/elements/iconview.js","sourcesContent":["define([\n    '../../utils/gui',\n    '../dataview'\n], function (GUI, GUIDataView) {\n    'use strict';\n    function createEntry(cls, e) {\n        const entry = GUI.createElement('gui-icon-view-entry', e);\n        return entry;\n    }\n    function initEntry(cls, cel) {\n        const icon = cel.getAttribute('data-icon');\n        const label = GUI.getLabel(cel);\n        const dicon = document.createElement('div');\n        const dimg = document.createElement('img');\n        dimg.src = icon;\n        dicon.appendChild(dimg);\n        const dlabel = document.createElement('div');\n        const dspan = document.createElement('span');\n        dspan.appendChild(document.createTextNode(label));\n        dlabel.appendChild(dspan);\n        cls.bindEntryEvents(cel, 'gui-icon-view-entry');\n        cel.setAttribute('role', 'listitem');\n        cel.appendChild(dicon);\n        cel.appendChild(dlabel);\n    }\n    class GUIIconView extends GUIDataView {\n        static register() {\n            return super.register({\n                parent: GUIDataView,\n                tagName: 'gui-icon-view'\n            }, this);\n        }\n        values() {\n            return this.getSelected(this.$element.querySelectorAll('gui-icon-view-entry'));\n        }\n        build() {\n            const el = this.$element;\n            let body = el.querySelector('gui-icon-view-body');\n            const found = !!body;\n            if (!found) {\n                body = document.createElement('gui-icon-view-body');\n                el.appendChild(body);\n            }\n            el.querySelectorAll('gui-icon-view-entry').forEach((cel, idx) => {\n                if (!found) {\n                    body.appendChild(cel);\n                }\n                initEntry(this, cel);\n            });\n            el.setAttribute('role', 'list');\n            return super.build(...arguments);\n        }\n        get(param, value, arg, asValue) {\n            if (param === 'entry') {\n                const body = this.$element.querySelector('gui-icon-view-body');\n                const rows = body.querySelectorAll('gui-icon-view-entry');\n                return this.getEntry(rows, value, arg, asValue);\n            }\n            return super.get(...arguments);\n        }\n        set(param, value, arg) {\n            const body = this.$element.querySelector('gui-icon-view-body');\n            if (param === 'selected' || param === 'value') {\n                if (body) {\n                    this.setSelected(body, body.querySelectorAll('gui-icon-view-entry'), value, arg);\n                }\n                return this;\n            }\n            return super.set(...arguments);\n        }\n        add(entries) {\n            const body = this.$element.querySelector('gui-icon-view-body');\n            return super.add(entries, (cls, e) => {\n                const entry = createEntry(this, e);\n                body.appendChild(entry);\n                initEntry(this, entry);\n            });\n        }\n        clear() {\n            const body = this.$element.querySelector('gui-icon-view-body');\n            return super.clear(body);\n        }\n        remove(entries) {\n            return super.remove(entries, 'gui-icon-view-entry');\n        }\n        patch(entries) {\n            const body = this.$element.querySelector('gui-icon-view-body');\n            return super.patch(entries, 'gui-icon-view-entry', body, createEntry, initEntry);\n        }\n    }\n    return { GUIIconView: GUIIconView };\n});"]}