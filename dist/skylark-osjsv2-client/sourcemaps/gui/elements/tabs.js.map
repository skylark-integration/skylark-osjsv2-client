{"version":3,"sources":["gui/elements/tabs.js"],"names":["define","DOM","GUI","Events","GUIElement","toggleActive","el","eidx","idx","$removeClass","$addClass","selectTab","tabs","ev","tab","querySelectorAll","forEach","tel","dispatchEvent","CustomEvent","detail","index","findTab","found","iter","i","firstChild","textContent","createTab","label","prog","document","createElement","children","length","$bind","setAttribute","appendChild","createTextNode","GUITabs","[object Object]","super","register","tagName","this","evName","callback","params","indexOf","$element","bind","param","value","querySelector","set","arguments","cur","$index","get","newtabs","Array","removetabs","id","remove","removeTab","getLabel","insertBefore","currentTab","parseInt","getAttribute"],"mappings":"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","file":"../../../gui/elements/tabs.js","sourcesContent":["define([\n    '../../utils/dom',\n    '../../utils/gui',\n    '../../utils/events',\n    '../element'\n], function (DOM, GUI, Events, GUIElement) {\n    'use strict';\n    function toggleActive(el, eidx, idx) {\n        DOM.$removeClass(el, 'gui-active');\n        if (eidx === idx) {\n            DOM.$addClass(el, 'gui-active');\n        }\n    }\n    function selectTab(el, tabs, ev, idx, tab) {\n        tabs.querySelectorAll('li').forEach((tel, eidx) => {\n            toggleActive(tel, eidx, idx);\n        });\n        el.querySelectorAll('gui-tab-container').forEach((tel, eidx) => {\n            toggleActive(tel, eidx, idx);\n        });\n        DOM.$addClass(tab, 'gui-active');\n        el.dispatchEvent(new CustomEvent('_change', { detail: { index: idx } }));\n    }\n    function findTab(el, tabs, idx) {\n        let found = null;\n        if (typeof idx === 'number') {\n            found = idx;\n        } else {\n            tabs.querySelectorAll('li').forEach((iter, i) => {\n                if (found === null && iter.firstChild.textContent === idx) {\n                    found = i;\n                }\n            });\n        }\n        return found;\n    }\n    function removeTab(el, tabs, idx) {\n        const found = findTab(el, tabs, idx);\n        if (found !== null) {\n            tabs.children[found].remove();\n            el.querySelectorAll('gui-tab-container')[found].remove();\n        }\n    }\n    function createTab(el, tabs, label, prog) {\n        const tab = document.createElement('li');\n        const idx = tabs.children.length;\n        Events.$bind(tab, 'pointerdown', ev => {\n            selectTab(el, tabs, ev, idx, tab);\n        }, false);\n        tab.setAttribute('role', 'tab');\n        tab.setAttribute('aria-label', label);\n        tab.appendChild(document.createTextNode(label));\n        tabs.appendChild(tab);\n        if (prog) {\n            const tel = document.createElement('gui-tab-container');\n            tel.setAttribute('data-label', label);\n            tel.setAttribute('role', 'tabpanel');\n            el.appendChild(tel);\n        }\n    }\n    class GUITabs extends GUIElement {\n        static register() {\n            return super.register({ tagName: 'gui-tabs' }, this);\n        }\n        on(evName, callback, params) {\n            if ([\n                    'select',\n                    'activate'\n                ].indexOf(evName) !== -1) {\n                evName = 'change';\n            }\n            if (evName === 'change') {\n                evName = '_' + evName;\n            }\n            Events.$bind(this.$element, evName, callback.bind(this), params);\n            return this;\n        }\n        set(param, value) {\n            if ([\n                    'current',\n                    'selected',\n                    'active'\n                ].indexOf(param) !== -1) {\n                const el = this.$element;\n                const tabs = el.querySelector('ul');\n                const found = findTab(el, tabs, value);\n                if (found !== null) {\n                    selectTab(el, tabs, null, found, tabs[found]);\n                }\n                return this;\n            }\n            return super.set(...arguments);\n        }\n        get(param, value) {\n            if ([\n                    'current',\n                    'selected',\n                    'active'\n                ].indexOf(param) !== -1) {\n                const cur = this.$element.querySelector('ul > li[class=\"gui-active\"]');\n                return DOM.$index(cur);\n            }\n            return super.get(...arguments);\n        }\n        add(newtabs) {\n            const el = this.$element;\n            const tabs = el.querySelector('ul');\n            if (!(newtabs instanceof Array)) {\n                newtabs = [newtabs];\n            }\n            newtabs.forEach(label => {\n                createTab(el, tabs, label, true);\n            });\n            return this;\n        }\n        remove(removetabs) {\n            const el = this.$element;\n            const tabs = el.querySelector('ul');\n            if (!(removetabs instanceof Array)) {\n                removetabs = [removetabs];\n            }\n            removetabs.forEach(id => {\n                removeTab(el, tabs, id);\n            });\n            return this;\n        }\n        build() {\n            const el = this.$element;\n            const tabs = document.createElement('ul');\n            el.querySelectorAll('gui-tab-container').forEach((tel, idx) => {\n                createTab(el, tabs, GUI.getLabel(tel));\n                tel.setAttribute('role', 'tabpanel');\n            });\n            tabs.setAttribute('role', 'tablist');\n            el.setAttribute('role', 'navigation');\n            if (el.children.length) {\n                el.insertBefore(tabs, el.children[0]);\n            } else {\n                el.appendChild(tabs);\n            }\n            const currentTab = parseInt(el.getAttribute('data-selected-index'), 10) || 0;\n            selectTab(el, tabs, null, currentTab);\n            return this;\n        }\n    }\n    return { GUITabs: GUITabs };\n});"]}