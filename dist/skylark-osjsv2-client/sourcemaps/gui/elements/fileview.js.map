{"version":3,"sources":["gui/elements/fileview.js"],"names":["define","FS","VFS","DOM","GUI","Utils","Events","Menu","GUIElement","GUIDataView","PackageManager","SettingsManager","FileMetadata","DateExtended","Theme","Locales","Config","_iconSizes","gui-icon-view","getFileIcon","iter","size","icon","application","getPackageResource","filename","getIcon","getFileSize","filesize","type","humanFileSize","removeExtension","mimeConfig","str","opts","getConfig","extensions","ext","filext","substr","length","getDateFromStamp","stamp","date","Date","e","format","getListViewColumns","cls","columnMapping","label","value","mime","mtime","ctime","defColumns","useColumns","defaultcolumns","cloneObject","get","scandir","columns","sortBy","$element","getAttribute","sortDir","forEach","key","idx","map","push","textalign","_","resizable","readdir","dir","done","sopts","childView","getChildView","scandirOptions","el","tagName","toLowerCase","setAttribute","filter","backlink","setOption","s","d","c","cc","hasAttribute","val","showHiddenFiles","showFileExtensions","JSON","parse","cb","oncreate","file","scanopts","showDotFiles","dotfiles","mimeFilter","typeFilter","filetype","sortby","sortdir","then","result","list","summary","directories","files","hidden","catch","error","set","headers","tooltip","toUpperCase","row","id","entries","_createEntry","GUIFileView","[object Object]","super","register","this","evName","callback","params","indexOf","$bind","bind","param","arg","arg2","firstChild","children","buildChildView","chdir","path","setProperty","apply","arguments","prototype","ev","target","detail","element","expanded","entry","data","String","querySelectorAll","$remove","add","parentNode","values","vfsOptions","instance","opt","toggle","create","title","checked","onClick","args","getDefaultPath","child","clearTimeout","_readdirTimeout","setTimeout","OSjs","clear","match","createFromNode","getChildViewType","$empty","nel","draggable","draggable-type","build","on","dispatchEvent","CustomEvent","contextmenu","appendChild"],"mappings":"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","file":"../../../gui/elements/fileview.js","sourcesContent":["define([\n    '../../utils/fs',\n    '../../vfs/fs',\n    '../../utils/dom',\n    '../../utils/gui',\n    '../../utils/misc',\n    '../../utils/events',\n    '../menu',\n    '../element',\n    '../dataview',\n    '../../core/package-manager',\n    '../../core/settings-manager',\n    '../../vfs/file',\n    '../../helpers/date',\n    '../../core/theme',\n    '../../core/locales',\n    '../../core/config'\n], function (\n    FS, \n    VFS, \n    DOM, \n    GUI, \n    Utils, \n    Events, \n    Menu, \n    GUIElement, \n    GUIDataView, \n    PackageManager, \n    SettingsManager, \n    FileMetadata, \n    DateExtended, \n    Theme, \n    Locales, \n    Config\n) {\n    'use strict';\n    let _iconSizes = { 'gui-icon-view': '32x32' };\n    function getFileIcon(iter, size) {\n        if (iter.icon && typeof iter.icon === 'object') {\n            if (iter.icon.application) {\n                return PackageManager.getPackageResource(iter.icon.filename, iter.icon.application);\n            }\n            return Theme.getIcon(iter.icon.filename, size, iter.icon.application);\n        }\n        const icon = 'status/dialog-question.png';\n        return Theme.getFileIcon(iter, size, icon);\n    }\n    function getFileSize(iter) {\n        let filesize = '';\n        if (iter.type !== 'dir' && iter.size >= 0) {\n            filesize = FS.humanFileSize(iter.size);\n        }\n        return filesize;\n    }\n    const removeExtension = (() => {\n        let mimeConfig;\n        return (str, opts) => {\n            if (!mimeConfig) {\n                mimeConfig = Config.getConfig('MIME.mapping');\n            }\n            if (opts.extensions === false) {\n                let ext = FS.filext(str);\n                if (ext) {\n                    ext = '.' + ext;\n                    if (mimeConfig[ext]) {\n                        str = str.substr(0, str.length - ext.length);\n                    }\n                }\n            }\n            return str;\n        };\n    })();\n    function getDateFromStamp(stamp) {\n        if (typeof stamp === 'string') {\n            let date = null;\n            try {\n                date = new Date(stamp);\n            } catch (e) {\n            }\n            if (date) {\n                return DateExtended.format(date);\n            }\n        }\n        return stamp;\n    }\n    function getListViewColumns(cls, iter, opts) {\n        opts = opts || {};\n        const columnMapping = {\n            filename: {\n                label: 'LBL_FILENAME',\n                icon: () => {\n                    return getFileIcon(iter);\n                },\n                value: () => {\n                    return removeExtension(iter.filename, opts);\n                }\n            },\n            mime: {\n                label: 'LBL_MIME',\n                size: '100px',\n                icon: () => {\n                    return null;\n                },\n                value: () => {\n                    return iter.mime;\n                }\n            },\n            mtime: {\n                label: 'LBL_MODIFIED',\n                size: '160px',\n                icon: () => {\n                    return null;\n                },\n                value: () => {\n                    return getDateFromStamp(iter.mtime);\n                }\n            },\n            ctime: {\n                label: 'LBL_CREATED',\n                size: '160px',\n                icon: () => {\n                    return null;\n                },\n                value: () => {\n                    return getDateFromStamp(iter.ctime);\n                }\n            },\n            size: {\n                label: 'LBL_SIZE',\n                size: '120px',\n                icon: () => {\n                    return null;\n                },\n                value: () => {\n                    return getFileSize(iter);\n                }\n            }\n        };\n        let defColumns = [\n            'filename',\n            'mime',\n            'size'\n        ];\n        let useColumns = defColumns;\n        if (!opts.defaultcolumns) {\n            const vfsOptions = Utils.cloneObject(SettingsManager.get('VFS') || {});\n            const scandirOptions = vfsOptions.scandir || {};\n            useColumns = scandirOptions.columns || defColumns;\n        }\n        const columns = [];\n        const sortBy = cls.$element.getAttribute('data-sortby');\n        const sortDir = cls.$element.getAttribute('data-sortdir');\n        useColumns.forEach((key, idx) => {\n            const map = columnMapping[key];\n            if (iter) {\n                columns.push({\n                    sortBy: key,\n                    label: map.value(),\n                    icon: map.icon(),\n                    textalign: idx === 0 ? 'left' : 'right'\n                });\n            } else {\n                columns.push({\n                    sortBy: key,\n                    sortDir: key === sortBy ? sortDir : null,\n                    label: Locales._(map.label),\n                    size: map.size || '',\n                    resizable: idx > 0,\n                    textalign: idx === 0 ? 'left' : 'right'\n                });\n            }\n        });\n        return columns;\n    }\n    function scandir(dir, opts, cb, oncreate) {\n        const file = new FileMetadata(dir);\n        file.type = 'dir';\n        const scanopts = {\n            backlink: opts.backlink,\n            showDotFiles: opts.dotfiles === true,\n            showFileExtensions: opts.extensions === true,\n            mimeFilter: opts.filter || [],\n            typeFilter: opts.filetype || null,\n            sortBy: opts.sortby,\n            sortDir: opts.sortdir\n        };\n        VFS.scandir(file, scanopts).then(result => {\n            const list = [];\n            const summary = {\n                size: 0,\n                directories: 0,\n                files: 0,\n                hidden: 0\n            };\n            function isHidden(iter) {\n                return (iter.filename || '').substr(0) === '.';\n            }\n            (result || []).forEach(iter => {\n                list.push(oncreate(iter));\n                summary.size += iter.size || 0;\n                summary.directories += iter.type === 'dir' ? 1 : 0;\n                summary.files += iter.type !== 'dir' ? 1 : 0;\n                summary.hidden += isHidden(iter) ? 1 : 0;\n            });\n            cb(false, list, summary);\n        }).catch(cb);\n    }\n    function readdir(cls, dir, done, sopts) {\n        const childView = cls.getChildView();\n        if (!childView) {\n            return;\n        }\n        sopts = sopts || {};\n        const vfsOptions = Utils.cloneObject(SettingsManager.get('VFS') || {});\n        const scandirOptions = vfsOptions.scandir || {};\n        const el = cls.$element;\n        const target = childView.$element;\n        const tagName = target.tagName.toLowerCase();\n        el.setAttribute('data-path', dir);\n        const opts = {\n            filter: null,\n            backlink: sopts.backlink\n        };\n        function setOption(s, d, c, cc) {\n            if (el.hasAttribute(s)) {\n                opts[d] = c(el.getAttribute(s));\n            } else {\n                opts[d] = (cc || function () {\n                })();\n            }\n        }\n        setOption('data-sortby', 'sortby', val => {\n            return val;\n        });\n        setOption('data-sortdir', 'sortdir', val => {\n            return val;\n        });\n        setOption('data-dotfiles', 'dotfiles', val => {\n            return val === 'true';\n        }, () => {\n            return scandirOptions.showHiddenFiles === true;\n        });\n        setOption('data-extensions', 'extensions', val => {\n            return val === 'true';\n        }, () => {\n            return scandirOptions.showFileExtensions === true;\n        });\n        setOption('data-filetype', 'filetype', val => {\n            return val;\n        });\n        setOption('data-defaultcolumns', 'defaultcolumns', val => {\n            return val === 'true';\n        });\n        try {\n            opts.filter = JSON.parse(el.getAttribute('data-filter'));\n        } catch (e) {\n        }\n        scandir(dir, opts, (error, result, summary) => {\n            if (tagName === 'gui-list-view') {\n                cls.getChildView().set('zebra', true);\n                if (sopts.headers !== false) {\n                    cls.getChildView().set('columns', getListViewColumns(cls, null, opts));\n                }\n            }\n            done(error, result, summary);\n        }, iter => {\n            const tooltip = Utils.format('{0}\\n{1}\\n{2} {3}', iter.type.toUpperCase(), iter.filename, getFileSize(iter), iter.mime || '');\n            function _createEntry() {\n                const row = {\n                    value: iter,\n                    id: iter.id || removeExtension(iter.filename, opts),\n                    label: iter.filename,\n                    tooltip: tooltip,\n                    icon: getFileIcon(iter, _iconSizes[tagName] || '16x16')\n                };\n                if (tagName === 'gui-tree-view' && iter.type === 'dir') {\n                    if (iter.filename !== '..') {\n                        row.entries = [{ label: 'Loading...' }];\n                    }\n                }\n                return row;\n            }\n            if (tagName !== 'gui-list-view') {\n                return _createEntry();\n            }\n            return {\n                value: iter,\n                id: iter.id || iter.filename,\n                tooltip: tooltip,\n                columns: getListViewColumns(cls, iter, opts)\n            };\n        });\n    }\n    class GUIFileView extends GUIElement {\n        static register() {\n            return super.register({ tagName: 'gui-file-view' }, this);\n        }\n        on(evName, callback, params) {\n            if ([\n                    'activate',\n                    'select',\n                    'contextmenu',\n                    'sort'\n                ].indexOf(evName) !== -1) {\n                evName = '_' + evName;\n            }\n            const el = this.$element;\n            if (evName === '_contextmenu') {\n                el.setAttribute('data-has-contextmenu', 'true');\n            }\n            Events.$bind(el, evName, callback.bind(this), params);\n            return this;\n        }\n        set(param, value, arg, arg2) {\n            const el = this.$element;\n            if (param === 'type') {\n                const firstChild = el.children[0];\n                if (firstChild && firstChild.tagName.toLowerCase() === value) {\n                    return true;\n                }\n                el.setAttribute('data-type', value);\n                this.buildChildView();\n                if (typeof arg === 'undefined' || arg === true) {\n                    this.chdir({ path: el.getAttribute('data-path') });\n                }\n                return this;\n            } else if ([\n                    'filter',\n                    'dotfiles',\n                    'filetype',\n                    'extensions',\n                    'defaultcolumns',\n                    'sortby',\n                    'sortdir'\n                ].indexOf(param) >= 0) {\n                GUI.setProperty(el, param, value);\n                return this;\n            }\n            const childView = this.getChildView();\n            if (childView) {\n                return childView.set.apply(childView, arguments);\n            }\n            return GUIDataView.prototype.set.apply(this, arguments);\n        }\n        build() {\n            if (this.childView) {\n                return this;\n            }\n            this.buildChildView();\n            const el = this.$element;\n            Events.$bind(el, '_expand', ev => {\n                const target = ev.detail.element;\n                if (target.getAttribute('data-was-rendered')) {\n                    return;\n                }\n                if (ev.detail.expanded) {\n                    const entry = ev.detail.entries[0].data;\n                    target.setAttribute('data-was-rendered', String(true));\n                    readdir(this, entry.path, (error, result, summary) => {\n                        if (!error) {\n                            target.querySelectorAll('gui-tree-view-entry').forEach(e => {\n                                DOM.$remove(e);\n                            });\n                            const childView = this.getChildView();\n                            if (childView) {\n                                childView.add({\n                                    entries: result,\n                                    parentNode: target\n                                });\n                            }\n                        }\n                    }, { backlink: false });\n                }\n            });\n            return this;\n        }\n        values() {\n            const childView = this.getChildView();\n            if (childView) {\n                return childView.values();\n            }\n            return null;\n        }\n        contextmenu(ev) {\n            const vfsOptions = SettingsManager.instance('VFS');\n            const scandirOptions = vfsOptions.get('scandir') || {};\n            function setOption(opt, toggle) {\n                const opts = { scandir: {} };\n                opts.scandir[opt] = toggle;\n                vfsOptions.set(null, opts, true);\n            }\n            Menu.create([\n                {\n                    title: Locales._('LBL_SHOW_HIDDENFILES'),\n                    type: 'checkbox',\n                    checked: scandirOptions.showHiddenFiles === true,\n                    onClick: () => {\n                        setOption('showHiddenFiles', !scandirOptions.showHiddenFiles);\n                    }\n                },\n                {\n                    title: Locales._('LBL_SHOW_FILEEXTENSIONS'),\n                    type: 'checkbox',\n                    checked: scandirOptions.showFileExtensions === true,\n                    onClick: () => {\n                        setOption('showFileExtensions', !scandirOptions.showFileExtensions);\n                    }\n                }\n            ], ev);\n        }\n        chdir(args) {\n            let childView = this.getChildView();\n            if (!childView) {\n                childView = this.buildChildView();\n            }\n            const cb = args.done || function () {\n            };\n            const dir = args.path || Config.getDefaultPath();\n            const child = childView;\n            const el = this.$element;\n            clearTimeout(el._readdirTimeout);\n            el._readdirTimeout = setTimeout(() => {\n                readdir(this, dir, (error, result, summary) => {\n                    if (error) {\n                        OSjs.error(Locales._('ERR_VFSMODULE_XHR_ERROR'), Locales._('ERR_VFSMODULE_SCANDIR_FMT', dir), error);\n                    } else {\n                        child.clear();\n                        child.add(result);\n                    }\n                    cb(error, summary);\n                }, args.opts);\n            }, 50);\n        }\n        getChildViewType() {\n            let type = this.$element.getAttribute('data-type') || 'list-view';\n            if (!type.match(/^gui\\-/)) {\n                type = 'gui-' + type;\n            }\n            return type;\n        }\n        getChildView() {\n            return GUIElement.createFromNode(this.$element.children[0]);\n        }\n        buildChildView() {\n            const el = this.$element;\n            const type = this.getChildViewType();\n            const childView = this.getChildView();\n            if (childView) {\n                if (childView.$element && childView.$element.tagName.toLowerCase() === type) {\n                    return null;\n                }\n            }\n            DOM.$empty(el);\n            const nel = GUIElement.create(type, {\n                'draggable': true,\n                'draggable-type': 'file'\n            });\n            nel.build();\n            nel.on('select', ev => {\n                el.dispatchEvent(new CustomEvent('_select', { detail: ev.detail }));\n            });\n            nel.on('activate', ev => {\n                el.dispatchEvent(new CustomEvent('_activate', { detail: ev.detail }));\n            });\n            nel.on('sort', ev => {\n                el.setAttribute('data-sortby', String(ev.detail.sortBy));\n                el.setAttribute('data-sortdir', String(ev.detail.sortDir));\n                this.chdir({\n                    sopts: { headers: false },\n                    path: el.getAttribute('data-path')\n                });\n                el.dispatchEvent(new CustomEvent('_sort', { detail: ev.detail }));\n            });\n            nel.on('contextmenu', ev => {\n                if (!el.hasAttribute('data-has-contextmenu') || el.hasAttribute('data-has-contextmenu') === 'false') {\n                    this.contextmenu(ev);\n                }\n                el.dispatchEvent(new CustomEvent('_contextmenu', { detail: ev.detail }));\n            });\n            if (type === 'gui-tree-view') {\n                nel.on('expand', ev => {\n                    el.dispatchEvent(new CustomEvent('_expand', { detail: ev.detail }));\n                });\n            }\n            el.setAttribute('role', 'region');\n            el.appendChild(nel.$element);\n            return nel;\n        }\n    }\n    return { GUIFileView: GUIFileView };\n});"]}