{"version":3,"sources":["gui/elements/listview.js"],"names":["define","DOM","GUI","Events","GUIDataView","createFakeHeader","el","fh","querySelector","$empty","row","appendChild","cloneNode","fhead","head","fcols","querySelectorAll","cols","forEach","rel","$remove","col","idx","getAttribute","fcol","resizer","document","createElement","startWidth","maxWidth","widthOffset","minWidth","tmpEl","createDrag","ev","offsetWidth","children","length","diff","newWidth","x","isNaN","style","width","String","createResizers","initRow","cls","$element","cel","icon","$addClass","backgroundImage","text","firstChild","nodeType","span","createTextNode","nodeValue","insertBefore","removeChild","_columns","visible","display","setAttribute","bindEntryEvents","createEntry","v","label","setSize","size","nel","call","createRow","e","columns","se","GUIListView","[object Object]","super","register","parent","tagName","this","body","getSelected","param","value","arg","asValue","rows","getEntry","get","arguments","arg2","push","setSelected","set","entries","add","cbCreated","onCreated","clear","remove","patch","inner","moveIntoInner","parentNode","fakeHead","fakeHeadInner","$bind","top","scrollTop","vis","iter","build"],"mappings":"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","file":"../../../gui/elements/listview.js","sourcesContent":["define([\n    '../../utils/dom',\n    '../../utils/gui',\n    '../../utils/events',\n    '../dataview'\n], function (DOM, GUI, Events, GUIDataView) {\n    'use strict';\n    function createFakeHeader(el) {\n        function createResizers() {\n            const fhead = el.querySelector('gui-list-view-fake-head');\n            const head = el.querySelector('gui-list-view-head');\n            const fcols = fhead.querySelectorAll('gui-list-view-column');\n            const cols = head.querySelectorAll('gui-list-view-column');\n            fhead.querySelectorAll('gui-list-view-column-resizer').forEach(rel => {\n                DOM.$remove(rel);\n            });\n            cols.forEach((col, idx) => {\n                const attr = col.getAttribute('data-resizable');\n                if (attr === 'true') {\n                    const fcol = fcols[idx];\n                    const resizer = document.createElement('gui-list-view-column-resizer');\n                    fcol.appendChild(resizer);\n                    let startWidth = 0;\n                    let maxWidth = 0;\n                    let widthOffset = 16;\n                    let minWidth = widthOffset;\n                    let tmpEl = null;\n                    GUI.createDrag(resizer, ev => {\n                        startWidth = col.offsetWidth;\n                        minWidth = widthOffset;\n                        maxWidth = el.offsetWidth - el.children.length * widthOffset;\n                    }, (ev, diff) => {\n                        const newWidth = startWidth - diff.x;\n                        if (!isNaN(newWidth) && newWidth > minWidth && newWidth < maxWidth) {\n                            col.style.width = String(newWidth) + 'px';\n                            fcol.style.width = String(newWidth) + 'px';\n                        }\n                        tmpEl = DOM.$remove(tmpEl);\n                    });\n                }\n            });\n        }\n        const fh = el.querySelector('gui-list-view-fake-head gui-list-view-head');\n        DOM.$empty(fh);\n        const row = el.querySelector('gui-list-view-head gui-list-view-row');\n        if (row) {\n            fh.appendChild(row.cloneNode(true));\n            createResizers();\n        }\n    }\n    function initRow(cls, row) {\n        const el = cls.$element;\n        row.querySelectorAll('gui-list-view-column').forEach((cel, idx) => {\n            const icon = cel.getAttribute('data-icon');\n            if (icon && icon !== 'null') {\n                DOM.$addClass(cel, 'gui-has-image');\n                cel.style.backgroundImage = 'url(' + icon + ')';\n            }\n            const text = cel.firstChild;\n            if (text && text.nodeType === 3) {\n                const span = document.createElement('span');\n                span.appendChild(document.createTextNode(text.nodeValue));\n                cel.insertBefore(span, text);\n                cel.removeChild(text);\n            }\n            if (el._columns[idx] && !el._columns[idx].visible) {\n                cel.style.display = 'none';\n            }\n            cel.setAttribute('role', 'listitem');\n        });\n        cls.bindEntryEvents(row, 'gui-list-view-row');\n    }\n    function createEntry(cls, v, head) {\n        const label = v.label || '';\n        if (v.label) {\n            delete v.label;\n        }\n        let setSize = null;\n        if (v.size) {\n            setSize = v.size;\n            delete v.size;\n        }\n        const nel = GUI.createElement('gui-list-view-column', v);\n        if (setSize) {\n            nel.style.width = setSize;\n        }\n        if (typeof label === 'function') {\n            nel.appendChild(label.call(nel, nel, v));\n        } else {\n            const span = document.createElement('span');\n            span.appendChild(document.createTextNode(label));\n            nel.appendChild(span);\n        }\n        return nel;\n    }\n    function createRow(cls, e) {\n        e = e || {};\n        if (e.columns) {\n            const row = GUI.createElement('gui-list-view-row', e, ['columns']);\n            e.columns.forEach(se => {\n                row.appendChild(createEntry(cls, se));\n            });\n            return row;\n        }\n        return null;\n    }\n    class GUIListView extends GUIDataView {\n        static register() {\n            return super.register({\n                parent: GUIDataView,\n                tagName: 'gui-list-view'\n            }, this);\n        }\n        values() {\n            const body = this.$element.querySelector('gui-list-view-body');\n            const values = this.getSelected(body.querySelectorAll('gui-list-view-row'));\n            return values;\n        }\n        get(param, value, arg, asValue) {\n            if (param === 'entry') {\n                const body = this.$element.querySelector('gui-list-view-body');\n                const rows = body.querySelectorAll('gui-list-view-row');\n                return this.getEntry(rows, value, arg, asValue);\n            }\n            return super.get(...arguments);\n        }\n        set(param, value, arg, arg2) {\n            const el = this.$element;\n            if (param === 'columns') {\n                const head = el.querySelector('gui-list-view-head');\n                const row = document.createElement('gui-list-view-row');\n                DOM.$empty(head);\n                el._columns = [];\n                value.forEach(v => {\n                    v.visible = typeof v.visible === 'undefined' || v.visible === true;\n                    const nel = createEntry(this, v, true);\n                    el._columns.push(v);\n                    if (!v.visible) {\n                        nel.style.display = 'none';\n                    }\n                    row.appendChild(nel);\n                });\n                head.appendChild(row);\n                createFakeHeader(el);\n                return this;\n            } else if (param === 'selected' || param === 'value') {\n                const body = el.querySelector('gui-list-view-body');\n                this.setSelected(body, body.querySelectorAll('gui-list-view-row'), value, arg, arg2);\n                return this;\n            }\n            return super.set(...arguments);\n        }\n        add(entries) {\n            const body = this.$element.querySelector('gui-list-view-body');\n            return super.add(entries, (cls, e) => {\n                const cbCreated = e.onCreated || function () {\n                };\n                const row = createRow(this, e);\n                if (row) {\n                    body.appendChild(row);\n                    initRow(this, row);\n                }\n                cbCreated(row);\n            });\n        }\n        clear() {\n            const body = this.$element.querySelector('gui-list-view-body');\n            return super.clear(body);\n        }\n        remove(entries) {\n            const body = this.$element.querySelector('gui-list-view-body');\n            return super.remove(entries, 'gui-list-view-row', null, body);\n        }\n        patch(entries) {\n            const body = this.$element.querySelector('gui-list-view-body');\n            return super.patch(entries, 'gui-list-view-row', body, createRow, initRow);\n        }\n        build() {\n            const el = this.$element;\n            el._columns = [];\n            let inner = el.querySelector('gui-list-view-inner');\n            let head = el.querySelector('gui-list-view-head');\n            let body = el.querySelector('gui-list-view-body');\n            function moveIntoInner(cel) {\n                if (cel.parentNode.tagName !== 'GUI-LIST-VIEW-INNER') {\n                    inner.appendChild(cel);\n                }\n            }\n            let fakeHead = el.querySelector('gui-list-view-fake-head');\n            if (!fakeHead) {\n                fakeHead = document.createElement('gui-list-view-fake-head');\n                const fakeHeadInner = document.createElement('gui-list-view-inner');\n                fakeHeadInner.appendChild(document.createElement('gui-list-view-head'));\n                fakeHead.appendChild(fakeHeadInner);\n            }\n            if (!inner) {\n                inner = document.createElement('gui-list-view-inner');\n                el.appendChild(inner);\n            }\n            (function _createBody() {\n                if (body) {\n                    moveIntoInner(body);\n                } else {\n                    body = document.createElement('gui-list-view-body');\n                    inner.appendChild(body);\n                }\n                body.setAttribute('role', 'group');\n            }());\n            (function _createHead() {\n                if (head) {\n                    moveIntoInner(head);\n                } else {\n                    head = document.createElement('gui-list-view-head');\n                    inner.insertBefore(head, body);\n                }\n                head.setAttribute('role', 'group');\n            }());\n            el.setAttribute('role', 'list');\n            el.appendChild(fakeHead);\n            Events.$bind(el, 'scroll', ev => {\n                fakeHead.style.top = el.scrollTop + 'px';\n            }, false);\n            const hcols = el.querySelectorAll('gui-list-view-head gui-list-view-column');\n            hcols.forEach((cel, idx) => {\n                const vis = cel.getAttribute('data-visible');\n                const iter = {\n                    visible: vis === null || vis === 'true',\n                    size: cel.getAttribute('data-size')\n                };\n                if (iter.size) {\n                    cel.style.width = iter.size;\n                }\n                el._columns.push(iter);\n                if (!iter.visible) {\n                    cel.style.display = 'none';\n                }\n            });\n            createFakeHeader(el);\n            el.querySelectorAll('gui-list-view-body gui-list-view-row').forEach(row => {\n                initRow(this, row);\n            });\n            return super.build(...arguments);\n        }\n    }\n    return { GUIListView: GUIListView };\n});"]}