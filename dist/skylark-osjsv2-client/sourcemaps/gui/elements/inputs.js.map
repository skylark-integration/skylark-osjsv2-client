{"version":3,"sources":["gui/elements/inputs.js"],"names":["define","DOM","GUI","Clipboard","Events","Keycodes","GUIElement","locales","_buttonCount","createInputOfType","el","type","group","getAttribute","placeholder","disabled","String","value","childNodes","length","nodeValue","$empty","input","document","createElement","attribs","tabindex","name","forEach","a","indexOf","min","max","step","checked","Object","keys","setAttribute","$bind","ev","keyCode","ENTER","dispatchEvent","CustomEvent","detail","C","ctrlKey","setClipboard","TAB","preventDefault","createInputLabel","rolemap","TEXTAREA","INPUT","i","range","text","password","tagName","_create","setSwitchValue","val","button","removeAttribute","$removeClass","innerHTML","$addClass","_GUIInput","[object Object]","evName","callback","params","target","this","$element","querySelector","bind","_GUISelect","arg","entries","Array","e","opt","appendChild","createTextNode","label","addToSelectBox","what","querySelectorAll","$remove","multiple","selected","select","selectedIndex","sel","option","parentNode","removeChild","createSelectInput","toLowerCase","GUILabel","super","register","param","isHTML","lbl","set","arguments","getValueLabel","GUITextarea","firstChild","scrollHeight","scrollTop","GUIText","GUIPassword","GUIFileUpload","onchange","files","GUIRadio","GUICheckbox","GUISwitch","inner","toggleValue","v","GUIButton","icon","g","tip","_","img","src","alt","title","insertBefore","setImage","root","b","GUISelect","GUISelectList","GUISlider","getProperty","parseInt","GUIInputModal","get","container"],"mappings":";;;;;;;AAAAA,QACI,kBACA,kBACA,wBACA,qBACA,uBACA,aACA,sBACD,SAAUC,EAAKC,EAAKC,EAAWC,EAAQC,EAAUC,EAAYC,GAC5D,aACA,IAAIC,EAAe,EACnB,SAASC,EAAkBC,EAAIC,GAC3B,MAAMC,EAAQF,EAAGG,aAAa,cACxBC,EAAcJ,EAAGG,aAAa,oBAC9BE,EAAwD,SAA7CC,OAAON,EAAGG,aAAa,kBAClCI,EAAQP,EAAGQ,WAAWC,OAAST,EAAGQ,WAAW,GAAGE,UAAY,KAClEnB,EAAIoB,OAAOX,GACX,MAAMY,EAAQC,SAASC,cAAuB,aAATb,EAAsB,WAAa,SAClEc,GACFR,MAAO,KACPN,KAAMA,EACNe,UAAW,EACXZ,YAAaA,EACbC,SAAUA,EAAW,WAAa,KAClCY,KAAMf,EAAQA,EAAQ,KAAO,OAG7B,eACA,cACA,iBACA,cACFgB,QAAQC,IACNJ,EAAQI,GAAKnB,EAAGG,aAAa,QAAUgB,IAAM,UAiDjD,YA7CY,QACA,UACFC,QAAQnB,IAAS,GACnBc,EAAQM,IAAMrB,EAAGG,aAAa,YAC9BY,EAAQO,IAAMtB,EAAGG,aAAa,YAC9BY,EAAQQ,KAAOvB,EAAGG,aAAa,eAE3B,QACA,YACFiB,QAAQnB,IAAS,EACmB,SAAlCD,EAAGG,aAAa,gBAChBY,EAAQS,QAAU,YAGlB,OACA,WACA,YACFJ,QAAQnB,IAAS,IACnBc,EAAQR,MAAQA,GAAS,IAE7BkB,OAAOC,KAAKX,GAASG,QAAQC,IACN,OAAfJ,EAAQI,KACE,UAANA,EACAP,EAAML,MAAQQ,EAAQI,GAEtBP,EAAMe,aAAaR,EAAGJ,EAAQI,OAM7B,SAATlB,GAA4B,aAATA,GAAgC,aAATA,GAC1CP,EAAOkC,MAAMhB,EAAO,UAAWiB,IACvBA,EAAGC,UAAYnC,EAASoC,MACxBnB,EAAMoB,cAAc,IAAIC,YAAY,UAAYC,OAAQtB,EAAML,SACvDsB,EAAGC,UAAYnC,EAASwC,GAAKN,EAAGO,SACvC3C,EAAU4C,aAAazB,EAAML,OAEpB,aAATN,GAAuB4B,EAAGC,UAAYnC,EAAS2C,MAC/CT,EAAGU,iBACH3B,EAAML,OAAS,QAEpB,GAMPf,EAAIgD,iBAAiBxC,EAAIC,EAAMW,GAC/B,MAAM6B,GACFC,SAAY,IACD,UAEXC,MAASC,KAEDC,MAAS,SACTC,KAAQ,UACRC,SAAY,YAEDH,EAAE3C,OAAS2C,EAAE3C,MAGhCwC,EAAQzC,EAAGgD,UACXpC,EAAMe,aAAa,OAAQc,EAAQzC,EAAGgD,SAASpC,IAEnDA,EAAMe,aAAa,aAAc3B,EAAGG,aAAa,UAAY,IAC7DH,EAAG2B,aAAa,OAAQ,UACxB3B,EAAG2B,aAAa,gBAAiBrB,OAAOD,IACxCX,EAAOkC,MAAMhB,EAAO,SAAUiB,IAC1B,IAAItB,EAAQK,EAAML,MACL,UAATN,GAA6B,aAATA,IACpBM,EAAQK,EAAMY,SAElBZ,EAAMoB,cAAc,IAAIC,YAAY,WAAaC,OAAQ3B,OAC1D,GAEP0C,GAgEJ,SAASC,EAAeC,EAAKvC,EAAOwC,IACpB,IAARD,GACAvC,EAAMyC,gBAAgB,WACtB9D,EAAI+D,aAAaF,EAAQ,cACzBA,EAAOG,UAAY,MAEnB3C,EAAMe,aAAa,UAAW,WAC9BpC,EAAIiE,UAAUJ,EAAQ,cACtBA,EAAOG,UAAY,WAGrBE,UAAkB7D,EACpB8D,GAAGC,EAAQC,EAAUC,GACF,UAAXF,EACAA,EAAS,SACS,WAAXA,IACPA,EAAS,WAEb,MAAMG,EAASC,KAAKC,SAASC,cAAc,2BAE3C,OADAvE,EAAOkC,MAAMkC,EAAQH,EAAQC,EAASM,KAAKH,MAAOF,GAC3CE,YA2QTI,UAAmBV,EACrBC,IAAIU,GAEA,OAhWR,SAAwBpE,EAAIqE,GACxB,MAAMP,EAAS9D,EAAGiE,cAAc,UAC1BI,aAAmBC,QACrBD,GAAWA,IAEfA,EAAQnD,QAAQqD,IACZ,MAAMC,EAAM3D,SAASC,cAAc,UACnC0D,EAAI7C,aAAa,OAAQ,UACzB6C,EAAI7C,aAAa,QAAS4C,EAAEhE,OAC5BiE,EAAIC,YAAY5D,SAAS6D,eAAeH,EAAEI,QAC1Cb,EAAOW,YAAYD,KAqVnBI,CAAeb,KAAKC,SAAUI,GACvBL,KAEXL,OAAOU,GArVX,IAA6BpE,EAAI6E,EAuVzB,OAvVqB7E,EAsVD+D,KAAKC,SAtVAa,EAsVUT,EArVxBpE,EAAGiE,cAAc,UACzBa,iBAAiB,UAAU5D,QAAQsD,GAClClE,OAAOkE,EAAIjE,SAAWD,OAAOuE,KAC7BtF,EAAIwF,QAAQP,IACL,IAkVJT,KAEXL,QACI,MAAMI,EAASC,KAAKC,SAASC,cAAc,UAE3C,OADA1E,EAAIoB,OAAOmD,GACJC,KAEXL,QACI,MAAM1D,EAAK+D,KAAKC,SAGhB,OAxVR,SAA2BhE,EAAIgF,GAC3B,MAAM3E,EAAgD,OAArCL,EAAGG,aAAa,iBAC3B8E,EAAWjF,EAAGG,aAAa,iBAC3B+E,EAASrE,SAASC,cAAc,UAClCkE,IACAE,EAAOvD,aAAa,OAAQ3B,EAAGG,aAAa,cAAgB,GAC5D6E,EAAgD,SAArChF,EAAGG,aAAa,kBAE3B6E,GACAE,EAAOvD,aAAa,WAAY,YAEhCtB,GACA6E,EAAOvD,aAAa,WAAY,YAEnB,OAAbsD,IACAC,EAAOC,cAAgBF,GAE3BjF,EAAG8E,iBAAiB,qBAAqB5D,QAAQkE,IAC7C,MAAM7E,EAAQ6E,EAAIjF,aAAa,eAAiB,GAC1CwE,EAAQS,EAAI5E,WAAWC,OAAS2E,EAAI5E,WAAW,GAAGE,UAAY,GAC9D2E,EAASxE,SAASC,cAAc,UACtCuE,EAAO1D,aAAa,OAAQ,UAC5B0D,EAAO1D,aAAa,QAASpB,GAC7B8E,EAAOZ,YAAY5D,SAAS6D,eAAeC,IACvCS,EAAIjF,aAAa,aACjBkF,EAAO1D,aAAa,WAAY,YAEpCuD,EAAOT,YAAYY,GACnBD,EAAIE,WAAWC,YAAYH,KAE/B1F,EAAOkC,MAAMsD,EAAQ,SAAUrD,IAC3BqD,EAAOlD,cAAc,IAAIC,YAAY,WAAaC,OAAQgD,EAAO3E,WAClE,GACH2E,EAAOvD,aAAa,OAAQ,WAC5BuD,EAAOvD,aAAa,aAAc3B,EAAGG,aAAa,UAAY,IAC9DH,EAAG2B,aAAa,gBAAiBrB,OAAOD,IACxCL,EAAG2B,aAAa,OAAQ,UACxB3B,EAAGyE,YAAYS,GAkTXM,CAAkBxF,EAD4B,oBAA7BA,EAAGgD,QAAQyC,eAErB1B,MAuFf,OACI2B,uBAlXmB9F,EACnB8D,kBACI,OAAOiC,MAAMC,UAAW5C,QAAS,aAAee,MAEpDL,IAAImC,EAAOtF,EAAOuF,GACd,MAAM9F,EAAK+D,KAAKC,SAChB,GAAc,UAAV6B,GAA+B,UAAVA,EAAmB,CACxC7F,EAAG2B,aAAa,aAAcrB,OAAOC,IACrC,MAAMwF,EAAM/F,EAAGiE,cAAc,SAO7B,OANA1E,EAAIoB,OAAOoF,GACPD,EACAC,EAAIxC,UAAYhD,EAEhBwF,EAAItB,YAAY5D,SAAS6D,eAAenE,IAErCwD,KAEX,OAAO4B,MAAMK,OAAOC,WAExBvC,QACI,MAAM1D,EAAK+D,KAAKC,SACVW,EAAQnF,EAAI0G,cAAclG,GAAI,GAC9B+F,EAAMlF,SAASC,cAAc,SAKnC,OAJAiF,EAAItB,YAAY5D,SAAS6D,eAAeC,IACxC3E,EAAG2B,aAAa,OAAQ,WACxB3B,EAAG2B,aAAa,aAAcrB,OAAOqE,IACrC3E,EAAGyE,YAAYsB,GACRhC,OAwVXoC,0BArVsB1C,EACtBC,kBACI,OAAOiC,MAAMC,UACT5C,QAAS,eACT/C,KAAM,SACP8D,MAEPL,QAEI,OADA3D,EAAkBgE,KAAKC,SAAU,YAC1BD,KAEXL,IAAImC,EAAOtF,GACP,MAAMP,EAAK+D,KAAKC,SAChB,OAAIhE,GAAgB,cAAV6F,GACe,iBAAVtF,IACPA,EAAQP,EAAGoG,WAAWC,cAE1BrG,EAAGoG,WAAWE,UAAY/F,EACnBwD,MAEJ4B,MAAMK,OAAOC,aAkUxBM,sBA/TkB9C,EAClBC,kBACI,OAAOiC,MAAMC,UACT5C,QAAS,WACT/C,KAAM,SACP8D,MAEPL,QAEI,OADA3D,EAAkBgE,KAAKC,SAAU,QAC1BD,OAuTXyC,0BApTsB/C,EACtBC,kBACI,OAAOiC,MAAMC,UACT5C,QAAS,eACT/C,KAAM,SACP8D,MAEPL,QAEI,OADA3D,EAAkBgE,KAAKC,SAAU,YAC1BD,OA4SX0C,4BAzSwBhD,EACxBC,kBACI,OAAOiC,MAAMC,UACT5C,QAAS,kBACT/C,KAAM,SACP8D,MAEPL,QACI,MAAM9C,EAAQC,SAASC,cAAc,SAOrC,OANAF,EAAMe,aAAa,OAAQ,UAC3Bf,EAAMe,aAAa,OAAQ,QAC3Bf,EAAM8F,SAAW7E,CAAAA,IACbjB,EAAMoB,cAAc,IAAIC,YAAY,WAAaC,OAAQtB,EAAM+F,MAAM,QAEzE5C,KAAKC,SAASS,YAAY7D,GACnBmD,OA2RX6C,uBAxRmBnD,EACnBC,kBACI,OAAOiC,MAAMC,UACT5C,QAAS,YACT/C,KAAM,SACP8D,MAEPL,QAEI,OADA3D,EAAkBgE,KAAKC,SAAU,SAC1BD,OAgRX8C,0BA7QsBpD,EACtBC,kBACI,OAAOiC,MAAMC,UACT5C,QAAS,eACT/C,KAAM,SACP8D,MAEPL,QAEI,OADA3D,EAAkBgE,KAAKC,SAAU,YAC1BD,OAqQX+C,wBAlQoBrD,EACpBC,kBACI,OAAOiC,MAAMC,UACT5C,QAAS,aACT/C,KAAM,SACP8D,MAEPL,IAAImC,EAAOtF,GACP,MAAc,UAAVsF,GAGA3C,EAAe3C,EAFDwD,KAAKC,SAASC,cAAc,SAC3BF,KAAKC,SAASC,cAAc,WAEpCF,MAEJ4B,MAAMK,OAAOC,WAExBvC,QACI,MAAM1D,EAAK+D,KAAKC,SACVpD,EAAQC,SAASC,cAAc,SACrCF,EAAMX,KAAO,WACbD,EAAGyE,YAAY7D,GACf,MAAMmG,EAAQlG,SAASC,cAAc,OAC/BsC,EAASvC,SAASC,cAAc,UAGtC,SAASkG,EAAYC,GACjB,IAAI9D,GAAM,EAOVD,EAJIC,OAFa,IAAN8D,IACP9D,IAAQvC,EAAMY,SAGRyF,EAEUrG,EAAOwC,GAU/B,OApBA2D,EAAMtC,YAAYrB,GAClB5D,EAAIgD,iBAAiBxC,EAAI,SAAU+G,GAWnCrH,EAAOkC,MAAMmF,EAAO,YAAalF,IAC7BA,EAAGU,iBACmD,OAArCvC,EAAGG,aAAa,kBAE7B6G,MAEL,GACHA,GAAY,GACLjD,OAwNXmD,wBArNoBtH,EACpB8D,kBACI,OAAOiC,MAAMC,UACT5C,QAAS,aACT/C,KAAM,SACP8D,MAEPL,IAAImC,EAAOtF,EAAOuF,GACd,GAAc,UAAVD,GAA+B,UAAVA,EAAmB,CACxC,MAAME,EAAMhC,KAAKC,SAASC,cAAc,UAQxC,OAPA1E,EAAIoB,OAAOoF,GACPD,EACAC,EAAIxC,UAAYhD,EAEhBwF,EAAItB,YAAY5D,SAAS6D,eAAenE,IAE5CwF,EAAIpE,aAAa,aAAcpB,GACxBwD,KAEX,OAAO4B,MAAMK,OAAOC,WAExBvC,OAAOG,GACH,MAAMc,EAAQd,EAAOc,MACjBd,EAAOc,cACAd,EAAOc,MAElB,MAAM3E,EAAKR,EAAIsB,cAAc,aAAc+C,GAI3C,OAHIc,GACA3E,EAAGyE,YAAY5D,SAAS6D,eAAeC,IAEpC3E,EAEX0D,GAAGC,EAAQC,EAAUC,GACjB,MAAMC,EAASC,KAAKC,SAASC,cAAc,UAE3C,OADAvE,EAAOkC,MAAMkC,EAAQH,EAAQC,EAASM,KAAKH,MAAOF,GAC3CE,KAEXL,QACI,MAAM1D,EAAK+D,KAAKC,SACVmD,EAAOnH,EAAGG,aAAa,aACvBE,EAAgD,OAArCL,EAAGG,aAAa,iBAC3BD,EAAQF,EAAGG,aAAa,cACxBwE,EAAQnF,EAAI0G,cAAclG,GAC1BY,EAAQC,SAASC,cAAc,UACrC,IAAkBsG,EAoDlB,OATI/G,GACAO,EAAMe,aAAa,WAAY,YAP3BgD,GACApF,EAAIiE,UAAUxD,EAAI,iBAEtBY,EAAM6D,YAAY5D,SAAS6D,eAAeC,IAC1C/D,EAAMe,aAAa,aAAcgD,GApBrC,WACI,GAAIwC,GAAiB,SAATA,EAAiB,CACzB,MAAME,EAAMxH,EAAQyH,EAAEtH,EAAGG,aAAa,iBAAmB,IACnDoH,EAAM1G,SAASC,cAAc,OACnCyG,EAAIC,IAAML,EACVI,EAAIE,IAAMJ,EACVE,EAAIG,MAAQL,EACRzG,EAAMwF,WACNxF,EAAM+G,aAAaJ,EAAK3G,EAAMwF,YAE9BxF,EAAM6D,YAAY8C,GAEtBhI,EAAIiE,UAAUxD,EAAI,kBAc1B4H,IA/CkBR,EAgDTlH,KA9CDU,EAAMe,aAAa,OAAQyF,EAAI,IAAMtH,EAAe,KACpDJ,EAAOkC,MAAMhB,EAAO,YAAa,KAC7B,IAAIiH,EAAO7H,EACX,KAAO6H,EAAKvC,YAC2B,+BAA/BuC,EAAK7E,QAAQyC,eAGjBoC,EAAOA,EAAKvC,WAEhB/F,EAAIiE,UAAU5C,EAAO,cACrBiH,EAAK/C,iBAAiB,0BAA4BsC,EAAI,eAAelG,QAAQ4G,IACrEA,EAAE7G,OAASL,EAAMK,MAGrB1B,EAAI+D,aAAawE,EAAG,mBAiCpChI,IACAE,EAAG2B,aAAa,OAAQ,cACxB3B,EAAGyE,YAAY7D,GACRmD,OAsHXgE,wBA9FoB5D,EACpBT,kBACI,OAAOiC,MAAMC,UACT5C,QAAS,aACT/C,KAAM,SACP8D,QA0FPiE,4BAvFwB7D,EACxBT,kBACI,OAAOiC,MAAMC,UACT5C,QAAS,kBACT/C,KAAM,SACP8D,QAmFPkE,wBAhFoBxE,EACpBC,kBACI,OAAOiC,MAAMC,UACT5C,QAAS,aACT/C,KAAM,SACP8D,MAEPL,IAAImC,GACA,MAAM1C,EAAMvD,EAAWsI,YAAYnE,KAAKC,SAAU6B,GAClD,MAAc,UAAVA,EACOsC,SAAShF,EAAK,IAElBA,EAEXO,QAEI,OADA3D,EAAkBgE,KAAKC,SAAU,SAC1BD,OAiEXqE,4BA9DwBxI,EACxB8D,kBACI,OAAOiC,MAAMC,UACT5C,QAAS,kBACT/C,KAAM,SACP8D,MAEPL,GAAGC,EAAQC,EAAUC,GAKjB,MAJe,SAAXF,IACAA,EAAS,SAEbjE,EAAOkC,MAAMmC,KAAKC,SAAUL,EAAQC,EAASM,KAAKH,MAAOF,GAClDE,KAEXL,IAAImC,GACA,MAAc,UAAVA,EACc9B,KAAKC,SAASC,cAAc,SAC7B1D,MAEVoF,MAAM0C,OAAOpC,WAExBvC,IAAImC,EAAOtF,GACP,GAAc,UAAVsF,EAAmB,CACnB,MAAMjF,EAAQmD,KAAKC,SAASC,cAAc,SAK1C,OAJArD,EAAMyC,gBAAgB,YACtBzC,EAAML,MAAQA,EACdK,EAAMe,aAAa,WAAY,YAC/Bf,EAAMe,aAAa,gBAAiB,QAC7BoC,KAEX,OAAO4B,MAAMK,OAAOC,WAExBvC,QACI,MAAM1D,EAAK+D,KAAKC,SACVsE,EAAYzH,SAASC,cAAc,OACnCF,EAAQC,SAASC,cAAc,SACrCF,EAAMX,KAAO,OACbW,EAAMe,aAAa,WAAY,YAC/B,MAAMyB,EAASvC,SAASC,cAAc,UAQtC,OAPAsC,EAAOG,UAAY,MACnB7D,EAAOkC,MAAMwB,EAAQ,YAAavB,IAC9B7B,EAAGgC,cAAc,IAAIC,YAAY,SAAWC,OAAQtB,EAAML,WAC3D,GACH+H,EAAU7D,YAAY7D,GACtB0H,EAAU7D,YAAYrB,GACtBpD,EAAGyE,YAAY6D,GACRvE","file":"../../../gui/elements/inputs.js","sourcesContent":["define([\n    '../../utils/dom',\n    '../../utils/gui',\n    '../../utils/clipboard',\n    '../../utils/events',\n    '../../utils/keycodes',\n    '../element',\n    '../../core/locales'\n], function (DOM, GUI, Clipboard, Events, Keycodes, GUIElement, locales) {\n    'use strict';\n    let _buttonCount = 0;\n    function createInputOfType(el, type) {\n        const group = el.getAttribute('data-group');\n        const placeholder = el.getAttribute('data-placeholder');\n        const disabled = String(el.getAttribute('data-disabled')) === 'true';\n        const value = el.childNodes.length ? el.childNodes[0].nodeValue : null;\n        DOM.$empty(el);\n        const input = document.createElement(type === 'textarea' ? 'textarea' : 'input');\n        const attribs = {\n            value: null,\n            type: type,\n            tabindex: -1,\n            placeholder: placeholder,\n            disabled: disabled ? 'disabled' : null,\n            name: group ? group + '[]' : null\n        };\n        [\n            'autocomplete',\n            'autocorrect',\n            'autocapitalize',\n            'spellcheck'\n        ].forEach(a => {\n            attribs[a] = el.getAttribute('data-' + a) || 'false';\n        });\n        function _bindDefaults() {\n            if ([\n                    'range',\n                    'slider'\n                ].indexOf(type) >= 0) {\n                attribs.min = el.getAttribute('data-min');\n                attribs.max = el.getAttribute('data-max');\n                attribs.step = el.getAttribute('data-step');\n            } else if ([\n                    'radio',\n                    'checkbox'\n                ].indexOf(type) >= 0) {\n                if (el.getAttribute('data-value') === 'true') {\n                    attribs.checked = 'checked';\n                }\n            } else if ([\n                    'text',\n                    'password',\n                    'textarea'\n                ].indexOf(type) >= 0) {\n                attribs.value = value || '';\n            }\n            Object.keys(attribs).forEach(a => {\n                if (attribs[a] !== null) {\n                    if (a === 'value') {\n                        input.value = attribs[a];\n                    } else {\n                        input.setAttribute(a, attribs[a]);\n                    }\n                }\n            });\n        }\n        function _bindEvents() {\n            if (type === 'text' || type === 'password' || type === 'textarea') {\n                Events.$bind(input, 'keydown', ev => {\n                    if (ev.keyCode === Keycodes.ENTER) {\n                        input.dispatchEvent(new CustomEvent('_enter', { detail: input.value }));\n                    } else if (ev.keyCode === Keycodes.C && ev.ctrlKey) {\n                        Clipboard.setClipboard(input.value);\n                    }\n                    if (type === 'textarea' && ev.keyCode === Keycodes.TAB) {\n                        ev.preventDefault();\n                        input.value += '\\t';\n                    }\n                }, false);\n            }\n        }\n        function _create() {\n            _bindDefaults();\n            _bindEvents();\n            GUI.createInputLabel(el, type, input);\n            const rolemap = {\n                'TEXTAREA': () => {\n                    return 'textbox';\n                },\n                'INPUT': i => {\n                    const typemap = {\n                        'range': 'slider',\n                        'text': 'textbox',\n                        'password': 'textbox'\n                    };\n                    return typemap[i.type] || i.type;\n                }\n            };\n            if (rolemap[el.tagName]) {\n                input.setAttribute('role', rolemap[el.tagName](input));\n            }\n            input.setAttribute('aria-label', el.getAttribute('title') || '');\n            el.setAttribute('role', 'region');\n            el.setAttribute('aria-disabled', String(disabled));\n            Events.$bind(input, 'change', ev => {\n                let value = input.value;\n                if (type === 'radio' || type === 'checkbox') {\n                    value = input.checked;\n                }\n                input.dispatchEvent(new CustomEvent('_change', { detail: value }));\n            }, false);\n        }\n        _create();\n    }\n    function addToSelectBox(el, entries) {\n        const target = el.querySelector('select');\n        if (!(entries instanceof Array)) {\n            entries = [entries];\n        }\n        entries.forEach(e => {\n            const opt = document.createElement('option');\n            opt.setAttribute('role', 'option');\n            opt.setAttribute('value', e.value);\n            opt.appendChild(document.createTextNode(e.label));\n            target.appendChild(opt);\n        });\n    }\n    function removeFromSelectBox(el, what) {\n        const target = el.querySelector('select');\n        target.querySelectorAll('option').forEach(opt => {\n            if (String(opt.value) === String(what)) {\n                DOM.$remove(opt);\n                return false;\n            }\n            return true;\n        });\n    }\n    function createSelectInput(el, multiple) {\n        const disabled = el.getAttribute('data-disabled') !== null;\n        const selected = el.getAttribute('data-selected');\n        const select = document.createElement('select');\n        if (multiple) {\n            select.setAttribute('size', el.getAttribute('data-size') || 2);\n            multiple = el.getAttribute('data-multiple') === 'true';\n        }\n        if (multiple) {\n            select.setAttribute('multiple', 'multiple');\n        }\n        if (disabled) {\n            select.setAttribute('disabled', 'disabled');\n        }\n        if (selected !== null) {\n            select.selectedIndex = selected;\n        }\n        el.querySelectorAll('gui-select-option').forEach(sel => {\n            const value = sel.getAttribute('data-value') || '';\n            const label = sel.childNodes.length ? sel.childNodes[0].nodeValue : '';\n            const option = document.createElement('option');\n            option.setAttribute('role', 'option');\n            option.setAttribute('value', value);\n            option.appendChild(document.createTextNode(label));\n            if (sel.getAttribute('selected')) {\n                option.setAttribute('selected', 'selected');\n            }\n            select.appendChild(option);\n            sel.parentNode.removeChild(sel);\n        });\n        Events.$bind(select, 'change', ev => {\n            select.dispatchEvent(new CustomEvent('_change', { detail: select.value }));\n        }, false);\n        select.setAttribute('role', 'listbox');\n        select.setAttribute('aria-label', el.getAttribute('title') || '');\n        el.setAttribute('aria-disabled', String(disabled));\n        el.setAttribute('role', 'region');\n        el.appendChild(select);\n    }\n    function setSwitchValue(val, input, button) {\n        if (val !== true) {\n            input.removeAttribute('checked');\n            DOM.$removeClass(button, 'gui-active');\n            button.innerHTML = '0';\n        } else {\n            input.setAttribute('checked', 'checked');\n            DOM.$addClass(button, 'gui-active');\n            button.innerHTML = '1';\n        }\n    }\n    class _GUIInput extends GUIElement {\n        on(evName, callback, params) {\n            if (evName === 'enter') {\n                evName = '_enter';\n            } else if (evName === 'change') {\n                evName = '_change';\n            }\n            const target = this.$element.querySelector('textarea, input, select');\n            Events.$bind(target, evName, callback.bind(this), params);\n            return this;\n        }\n    }\n    class GUILabel extends GUIElement {\n        static register() {\n            return super.register({ tagName: 'gui-label' }, this);\n        }\n        set(param, value, isHTML) {\n            const el = this.$element;\n            if (param === 'value' || param === 'label') {\n                el.setAttribute('data-label', String(value));\n                const lbl = el.querySelector('label');\n                DOM.$empty(lbl);\n                if (isHTML) {\n                    lbl.innerHTML = value;\n                } else {\n                    lbl.appendChild(document.createTextNode(value));\n                }\n                return this;\n            }\n            return super.set(...arguments);\n        }\n        build() {\n            const el = this.$element;\n            const label = GUI.getValueLabel(el, true);\n            const lbl = document.createElement('label');\n            lbl.appendChild(document.createTextNode(label));\n            el.setAttribute('role', 'heading');\n            el.setAttribute('data-label', String(label));\n            el.appendChild(lbl);\n            return this;\n        }\n    }\n    class GUITextarea extends _GUIInput {\n        static register() {\n            return super.register({\n                tagName: 'gui-textarea',\n                type: 'input'\n            }, this);\n        }\n        build() {\n            createInputOfType(this.$element, 'textarea');\n            return this;\n        }\n        set(param, value) {\n            const el = this.$element;\n            if (el && param === 'scrollTop') {\n                if (typeof value !== 'number') {\n                    value = el.firstChild.scrollHeight;\n                }\n                el.firstChild.scrollTop = value;\n                return this;\n            }\n            return super.set(...arguments);\n        }\n    }\n    class GUIText extends _GUIInput {\n        static register() {\n            return super.register({\n                tagName: 'gui-text',\n                type: 'input'\n            }, this);\n        }\n        build() {\n            createInputOfType(this.$element, 'text');\n            return this;\n        }\n    }\n    class GUIPassword extends _GUIInput {\n        static register() {\n            return super.register({\n                tagName: 'gui-password',\n                type: 'input'\n            }, this);\n        }\n        build() {\n            createInputOfType(this.$element, 'password');\n            return this;\n        }\n    }\n    class GUIFileUpload extends _GUIInput {\n        static register() {\n            return super.register({\n                tagName: 'gui-file-upload',\n                type: 'input'\n            }, this);\n        }\n        build() {\n            const input = document.createElement('input');\n            input.setAttribute('role', 'button');\n            input.setAttribute('type', 'file');\n            input.onchange = ev => {\n                input.dispatchEvent(new CustomEvent('_change', { detail: input.files[0] }));\n            };\n            this.$element.appendChild(input);\n            return this;\n        }\n    }\n    class GUIRadio extends _GUIInput {\n        static register() {\n            return super.register({\n                tagName: 'gui-radio',\n                type: 'input'\n            }, this);\n        }\n        build() {\n            createInputOfType(this.$element, 'radio');\n            return this;\n        }\n    }\n    class GUICheckbox extends _GUIInput {\n        static register() {\n            return super.register({\n                tagName: 'gui-checkbox',\n                type: 'input'\n            }, this);\n        }\n        build() {\n            createInputOfType(this.$element, 'checkbox');\n            return this;\n        }\n    }\n    class GUISwitch extends _GUIInput {\n        static register() {\n            return super.register({\n                tagName: 'gui-switch',\n                type: 'input'\n            }, this);\n        }\n        set(param, value) {\n            if (param === 'value') {\n                const input = this.$element.querySelector('input');\n                const button = this.$element.querySelector('button');\n                setSwitchValue(value, input, button);\n                return this;\n            }\n            return super.set(...arguments);\n        }\n        build() {\n            const el = this.$element;\n            const input = document.createElement('input');\n            input.type = 'checkbox';\n            el.appendChild(input);\n            const inner = document.createElement('div');\n            const button = document.createElement('button');\n            inner.appendChild(button);\n            GUI.createInputLabel(el, 'switch', inner);\n            function toggleValue(v) {\n                let val = false;\n                if (typeof v === 'undefined') {\n                    val = !!input.checked;\n                    val = !val;\n                } else {\n                    val = v;\n                }\n                setSwitchValue(val, input, button);\n            }\n            Events.$bind(inner, 'pointerup', ev => {\n                ev.preventDefault();\n                const disabled = el.getAttribute('data-disabled') !== null;\n                if (!disabled) {\n                    toggleValue();\n                }\n            }, false);\n            toggleValue(false);\n            return this;\n        }\n    }\n    class GUIButton extends GUIElement {\n        static register() {\n            return super.register({\n                tagName: 'gui-button',\n                type: 'input'\n            }, this);\n        }\n        set(param, value, isHTML) {\n            if (param === 'value' || param === 'label') {\n                const lbl = this.$element.querySelector('button');\n                DOM.$empty(lbl);\n                if (isHTML) {\n                    lbl.innerHTML = value;\n                } else {\n                    lbl.appendChild(document.createTextNode(value));\n                }\n                lbl.setAttribute('aria-label', value);\n                return this;\n            }\n            return super.set(...arguments);\n        }\n        create(params) {\n            const label = params.label;\n            if (params.label) {\n                delete params.label;\n            }\n            const el = GUI.createElement('gui-button', params);\n            if (label) {\n                el.appendChild(document.createTextNode(label));\n            }\n            return el;\n        }\n        on(evName, callback, params) {\n            const target = this.$element.querySelector('button');\n            Events.$bind(target, evName, callback.bind(this), params);\n            return this;\n        }\n        build() {\n            const el = this.$element;\n            const icon = el.getAttribute('data-icon');\n            const disabled = el.getAttribute('data-disabled') !== null;\n            const group = el.getAttribute('data-group');\n            const label = GUI.getValueLabel(el);\n            const input = document.createElement('button');\n            function setGroup(g) {\n                if (g) {\n                    input.setAttribute('name', g + '[' + _buttonCount + ']');\n                    Events.$bind(input, 'pointerup', () => {\n                        let root = el;\n                        while (root.parentNode) {\n                            if (root.tagName.toLowerCase() === 'application-window-content') {\n                                break;\n                            }\n                            root = root.parentNode;\n                        }\n                        DOM.$addClass(input, 'gui-active');\n                        root.querySelectorAll('gui-button[data-group=\"' + g + '\"] > button').forEach(b => {\n                            if (b.name === input.name) {\n                                return;\n                            }\n                            DOM.$removeClass(b, 'gui-active');\n                        });\n                    });\n                }\n            }\n            function setImage() {\n                if (icon && icon !== 'null') {\n                    const tip = locales._(el.getAttribute('data-tooltip') || '');\n                    const img = document.createElement('img');\n                    img.src = icon;\n                    img.alt = tip;\n                    img.title = tip;\n                    if (input.firstChild) {\n                        input.insertBefore(img, input.firstChild);\n                    } else {\n                        input.appendChild(img);\n                    }\n                    DOM.$addClass(el, 'gui-has-image');\n                }\n            }\n            function setLabel() {\n                if (label) {\n                    DOM.$addClass(el, 'gui-has-label');\n                }\n                input.appendChild(document.createTextNode(label));\n                input.setAttribute('aria-label', label);\n            }\n            if (disabled) {\n                input.setAttribute('disabled', 'disabled');\n            }\n            setLabel();\n            setImage();\n            setGroup(group);\n            _buttonCount++;\n            el.setAttribute('role', 'navigation');\n            el.appendChild(input);\n            return this;\n        }\n    }\n    class _GUISelect extends _GUIInput {\n        add(arg) {\n            addToSelectBox(this.$element, arg);\n            return this;\n        }\n        remove(arg) {\n            removeFromSelectBox(this.$element, arg);\n            return this;\n        }\n        clear() {\n            const target = this.$element.querySelector('select');\n            DOM.$empty(target);\n            return this;\n        }\n        build() {\n            const el = this.$element;\n            const multiple = el.tagName.toLowerCase() === 'gui-select-list';\n            createSelectInput(el, multiple);\n            return this;\n        }\n    }\n    class GUISelect extends _GUISelect {\n        static register() {\n            return super.register({\n                tagName: 'gui-select',\n                type: 'input'\n            }, this);\n        }\n    }\n    class GUISelectList extends _GUISelect {\n        static register() {\n            return super.register({\n                tagName: 'gui-select-list',\n                type: 'input'\n            }, this);\n        }\n    }\n    class GUISlider extends _GUIInput {\n        static register() {\n            return super.register({\n                tagName: 'gui-slider',\n                type: 'input'\n            }, this);\n        }\n        get(param) {\n            const val = GUIElement.getProperty(this.$element, param); // modified by lwf\n            if (param === 'value') {\n                return parseInt(val, 10);\n            }\n            return val;\n        }\n        build() {\n            createInputOfType(this.$element, 'range');\n            return this;\n        }\n    }\n    class GUIInputModal extends GUIElement {\n        static register() {\n            return super.register({\n                tagName: 'gui-input-modal',\n                type: 'input'\n            }, this);\n        }\n        on(evName, callback, params) {\n            if (evName === 'open') {\n                evName = '_open';\n            }\n            Events.$bind(this.$element, evName, callback.bind(this), params);\n            return this;\n        }\n        get(param) {\n            if (param === 'value') {\n                const input = this.$element.querySelector('input');\n                return input.value;\n            }\n            return super.get(...arguments);\n        }\n        set(param, value) {\n            if (param === 'value') {\n                const input = this.$element.querySelector('input');\n                input.removeAttribute('disabled');\n                input.value = value;\n                input.setAttribute('disabled', 'disabled');\n                input.setAttribute('aria-disabled', 'true');\n                return this;\n            }\n            return super.set(...arguments);\n        }\n        build() {\n            const el = this.$element;\n            const container = document.createElement('div');\n            const input = document.createElement('input');\n            input.type = 'text';\n            input.setAttribute('disabled', 'disabled');\n            const button = document.createElement('button');\n            button.innerHTML = '...';\n            Events.$bind(button, 'pointerup', ev => {\n                el.dispatchEvent(new CustomEvent('_open', { detail: input.value }));\n            }, false);\n            container.appendChild(input);\n            container.appendChild(button);\n            el.appendChild(container);\n            return this;\n        }\n    }\n    return {\n        GUILabel: GUILabel,\n        GUITextarea: GUITextarea,\n        GUIText: GUIText,\n        GUIPassword: GUIPassword,\n        GUIFileUpload: GUIFileUpload,\n        GUIRadio: GUIRadio,\n        GUICheckbox: GUICheckbox,\n        GUISwitch: GUISwitch,\n        GUIButton: GUIButton,\n        GUISelect: GUISelect,\n        GUISelectList: GUISelectList,\n        GUISlider: GUISlider,\n        GUIInputModal: GUIInputModal\n    };\n});"]}