{"version":3,"sources":["gui/menu.js"],"names":["define","GUI","DOM","Events","GUIElement","WindowManager","Hooks","lastMenu","clickWrapper","ev","pos","onclick","original","stopPropagation","t","target","tagName","parentNode","isExpander","querySelector","isTrusted","querySelectorAll","forEach","pn","$removeClass","$addClass","e","console","warn","clamp","r","$position","window","innerWidth","right","offsetWidth","_clamp","rm","srm","sm","style","left","String","parseInt","blur","triggerHook","create","items","customInstance","root","callbackMap","createElement","resolveItems","arr","par","iter","props","label","title","icon","disabled","labelHTML","titleHTML","type","checked","entry","menu","nroot","appendChild","onClick","index","push","setAttribute","createFromNode","build","$bind","setTimeout","space","instance","getWindowSpace","diff","height","bottom","marginTop","clampSubMenu","orig","getAttribute","$element","mousePosition","x","top","y","document","body","width","newLeft","Math","round","max","newTop","el","$unbind","$remove","setActive"],"mappings":"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","file":"../../gui/menu.js","sourcesContent":["define([\n    '../utils/gui',\n    '../utils/dom',\n    '../utils/events',\n    './element',\n    '../core/window-manager',\n    '../helpers/hooks'\n], function (GUI, DOM, Events, GUIElement, WindowManager, Hooks) {\n    'use strict';\n    let lastMenu;\n    function clickWrapper(ev, pos, onclick, original) {\n        ev.stopPropagation();\n        let t = ev.target;\n        if (t && t.tagName === 'LABEL') {\n            t = t.parentNode;\n        }\n        let isExpander = false;\n        if (t && t.tagName === 'GUI-MENU-ENTRY') {\n            let subMenu = t.querySelector('gui-menu');\n            isExpander = !!subMenu;\n            try {\n                if (isExpander && !ev.isTrusted) {\n                    t.parentNode.querySelectorAll('gui-menu-entry').forEach(pn => {\n                        DOM.$removeClass(pn, 'active');\n                    });\n                    DOM.$addClass(t, 'active');\n                }\n            } catch (e) {\n                console.warn(e);\n            }\n            onclick(ev, pos, t, original, isExpander);\n        }\n    }\n    function clamp(r) {\n        function _clamp(rm) {\n            rm.querySelectorAll('gui-menu-entry').forEach(function (srm) {\n                const sm = srm.querySelector('gui-menu');\n                if (sm) {\n                    sm.style.left = String(-parseInt(sm.offsetWidth, 10)) + 'px';\n                    _clamp(sm);\n                }\n            });\n        }\n        const pos = DOM.$position(r);\n        if (pos && window.innerWidth - pos.right < r.offsetWidth) {\n            DOM.$addClass(r, 'gui-overflowing');\n            _clamp(r);\n        }\n        DOM.$addClass(r, 'gui-showing');\n    }\n    function clampSubMenu(sm) {\n        if (sm) {\n            const pos = DOM.$position(sm);\n            const wm = WindowManager.instance;\n            const space = wm.getWindowSpace(true);\n            if (pos) {\n                const diff = space.height - pos.bottom;\n                if (diff < 0) {\n                    sm.style.marginTop = String(diff) + 'px';\n                }\n            }\n        }\n    }\n    function blur(ev) {\n        if (lastMenu) {\n            lastMenu(ev);\n        }\n        lastMenu = null;\n        Hooks.triggerHook('menuBlur');\n    }\n    function create(items, ev, customInstance) {\n        items = items || [];\n        blur(ev);\n        let root = customInstance;\n        let callbackMap = [];\n        function resolveItems(arr, par) {\n            arr.forEach(function (iter) {\n                const props = {\n                    label: iter.title,\n                    icon: iter.icon,\n                    disabled: iter.disabled,\n                    labelHTML: iter.titleHTML,\n                    type: iter.type,\n                    checked: iter.checked\n                };\n                const entry = GUI.createElement('gui-menu-entry', props);\n                if (iter.menu) {\n                    const nroot = GUI.createElement('gui-menu', {});\n                    resolveItems(iter.menu, nroot);\n                    entry.appendChild(nroot);\n                }\n                if (iter.onClick) {\n                    const index = callbackMap.push(iter.onClick);\n                    entry.setAttribute('data-callback-id', String(index - 1));\n                }\n                par.appendChild(entry);\n            });\n        }\n        if (!root) {\n            root = GUI.createElement('gui-menu', {});\n            resolveItems(items || [], root);\n            GUIElement.createFromNode(root, null, 'gui-menu').build(true);\n            Events.$bind(root, 'mouseover', function (ev, pos) {\n                if (ev.target && ev.target.tagName === 'GUI-MENU-ENTRY') {\n                    setTimeout(() => {\n                        clampSubMenu(ev.target.querySelector('gui-menu'));\n                    }, 1);\n                }\n            }, true);\n            Events.$bind(root, 'click', function (ev, pos) {\n                clickWrapper(ev, pos, function (ev, pos, t, orig, isExpander) {\n                    const index = parseInt(t.getAttribute('data-callback-id'), 10);\n                    if (callbackMap[index]) {\n                        callbackMap[index](ev, pos);\n                    }\n                    if (!isExpander) {\n                        blur(ev);\n                    }\n                });\n            }, true);\n        }\n        if (root.$element) {\n            root = root.$element;\n        }\n        const wm = WindowManager.instance;\n        const space = wm.getWindowSpace(true);\n        const pos = Events.mousePosition(ev);\n        DOM.$addClass(root, 'gui-root-menu');\n        root.style.left = pos.x + 'px';\n        root.style.top = pos.y + 'px';\n        document.body.appendChild(root);\n        setTimeout(function () {\n            const pos = DOM.$position(root);\n            if (pos) {\n                if (pos.right > space.width) {\n                    const newLeft = Math.round(space.width - pos.width);\n                    root.style.left = Math.max(0, newLeft) + 'px';\n                }\n                if (pos.bottom > space.height) {\n                    const newTop = Math.round(space.height - pos.height);\n                    root.style.top = Math.max(0, newTop) + 'px';\n                }\n            }\n            clamp(root);\n            lastMenu = function () {\n                callbackMap = [];\n                if (root) {\n                    root.querySelectorAll('gui-menu-entry').forEach(function (el) {\n                        Events.$unbind(el);\n                    });\n                    Events.$unbind(root);\n                }\n                root = DOM.$remove(root);\n            };\n        }, 1);\n    }\n    function setActive(menu) {\n        blur();\n        lastMenu = menu;\n    }\n    return {\n        clickWrapper: clickWrapper,\n        clamp: clamp,\n        blur: blur,\n        create: create,\n        setActive: setActive\n    };\n});"]}