{"version":3,"sources":["gui/element.js"],"names":["define","DOM","GUI","Locales","PackageManager","REGISTRY","getFocusElement","inst","tagMap","gui-switch","gui-list-view","gui-tree-view","gui-icon-view","gui-input-modal","tagName","$element","querySelector","firstChild","createElementInstance","el","q","buildArgs","instance","toLowerCase","component","build","apply","GUIElement","[object Object]","this","oldDisplay","console","warn","$remove","$empty","blur","focus","offsetParent","style","display","evName","callback","args","thisArg","on","Array","prototype","slice","call","arguments","unshift","param","value","arg","arg2","setProperty","getProperty","document","createTextNode","String","outer","createElement","appendChild","_append","html","win","innerHTML","Element","parseNode","childNodes","length","rui","createFromNode","querySelectorAll","map","i","k","v","$css","$position","method","_call","e","stack","name","fn","params","parentNode","applyArgs","gel","create","isDataView","match","values","node","type","onparse","id","forEach","lcase","$addClass","translator","undefined","_","label","getAttribute","setAttribute","children","lbl","getValueLabel","image","getIcon","isNative","hasAttribute","src","_app","source","getPackageResource","parseDynamic","Object","keys","key","pel","_wasParsed","$hasClass","data","classRef","Error","metadata","assign","allowedChildren","allowedParents","parent"],"mappings":"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","file":"../../gui/element.js","sourcesContent":["define([\n    '../utils/dom',\n    '../utils/gui',\n    '../core/locales',\n    '../core/package-manager'\n], function (DOM, GUI, Locales, PackageManager) {\n    'use strict';\n    let REGISTRY = {};\n    function getFocusElement(inst) {\n        const tagMap = {\n            'gui-switch': 'button',\n            'gui-list-view': 'textarea',\n            'gui-tree-view': 'textarea',\n            'gui-icon-view': 'textarea',\n            'gui-input-modal': 'button'\n        };\n        if (tagMap[inst.tagName]) {\n            return inst.$element.querySelector(tagMap[inst.tagName]);\n        }\n        return inst.$element.firstChild || inst.$element;\n    }\n    function parseDynamic(node, win, args) {\n        args = args || {};\n        const translator = args.undefined || Locales._;\n        node.querySelectorAll('*[data-label]').forEach(function (el) {\n            const label = translator(el.getAttribute('data-label'));\n            el.setAttribute('data-label', label);\n        });\n        node.querySelectorAll('gui-label, gui-button, gui-list-view-column, gui-select-option, gui-select-list-option').forEach(function (el) {\n            if (!el.children.length && !el.getAttribute('data-no-translate')) {\n                const lbl = GUI.getValueLabel(el);\n                el.appendChild(document.createTextNode(translator(lbl)));\n            }\n        });\n        node.querySelectorAll('gui-button').forEach(function (el) {\n            const label = GUI.getValueLabel(el);\n            if (label) {\n                el.appendChild(document.createTextNode(Locales._(label)));\n            }\n        });\n        node.querySelectorAll('*[data-icon], *[data-stock-icon]').forEach(function (el) {\n            const image = GUI.getIcon(el, win);\n            el.setAttribute('data-icon', image);\n        });\n        node.querySelectorAll('*[data-src],*[src]').forEach(function (el) {\n            const isNative = el.hasAttribute('src');\n            const src = isNative ? el.getAttribute('src') : el.getAttribute('data-src') || '';\n            if (win && win._app && !src.match(/^(https?:)?\\//)) {\n                const source = PackageManager.getPackageResource(win._app, src);\n                el.setAttribute(isNative ? 'src' : 'data-src', source);\n            }\n        });\n    }\n    function createElementInstance(tagName, el, q, buildArgs) {\n        tagName = tagName || el.tagName.toLowerCase();\n        let instance;\n        if (REGISTRY[tagName]) {\n            instance = new REGISTRY[tagName].component(el, q);\n            if (buildArgs) {\n                instance.build.apply(instance, buildArgs);\n            }\n        }\n        return instance;\n    }\n    return class GUIElement {\n        constructor(el, q) {\n            this.$element = el || null;\n            this.tagName = el ? el.tagName.toLowerCase() : null;\n            this.oldDisplay = null;\n            if (!el) {\n                console.warn('GUIElement() was constructed without a DOM element', q);\n            }\n        }\n        build() {\n            return this;\n        }\n        remove() {\n            this.$element = DOM.$remove(this.$element);\n            return this;\n        }\n        empty() {\n            DOM.$empty(this.$element);\n            return this;\n        }\n        blur() {\n            if (this.$element) {\n                const firstChild = getFocusElement(this);\n                if (firstChild) {\n                    firstChild.blur();\n                }\n            }\n            return this;\n        }\n        focus() {\n            if (this.$element) {\n                const firstChild = getFocusElement(this);\n                if (firstChild) {\n                    firstChild.focus();\n                }\n            }\n            return this;\n        }\n        show() {\n            if (this.$element && !this.$element.offsetParent) {\n                if (this.$element) {\n                    this.$element.style.display = this.oldDisplay || '';\n                }\n            }\n            return this;\n        }\n        hide() {\n            if (this.$element && this.$element.offsetParent) {\n                if (!this.oldDisplay) {\n                    this.oldDisplay = this.$element.style.display;\n                }\n                this.$element.style.display = 'none';\n            }\n            return this;\n        }\n        on(evName, callback, args) {\n            return this;\n        }\n        son(evName, thisArg, callback, args) {\n            return this.on(evName, function () {\n                const args = Array.prototype.slice.call(arguments);\n                args.unshift(this);\n                callback.apply(thisArg, args);\n            }, args);\n        }\n        set(param, value, arg, arg2) {\n            if (this.$element) {\n                GUI.setProperty(this.$element, param, value, arg, arg2);\n            }\n            return this;\n        }\n        get(param) {\n            if (this.$element) {\n                return GUIElement.getProperty(this.$element, param); // modified by lwf\n            }\n            return null;\n        }\n        append(el) {\n            if (el instanceof GUIElement) {\n                el = el.$element;\n            } else if (typeof el === 'string' || typeof el === 'number') {\n                el = document.createTextNode(String(el));\n            }\n            let outer = document.createElement('div');\n            outer.appendChild(el);\n            this._append(outer);\n            outer = null;\n            return this;\n        }\n        appendHTML(html, win, args) {\n            const el = document.createElement('div');\n            el.innerHTML = html;\n            return this._append(el, win, args);\n        }\n        _append(el, win, args) {\n            if (el instanceof Element) {\n                GUIElement.parseNode(win, el, null, args);\n            }\n            while (el.childNodes.length) {\n                this.$element.appendChild(el.childNodes[0]);\n            }\n            el = null;\n            return this;\n        }\n        querySelector(q, rui) {\n            const el = this.$element.querySelector(q);\n            if (rui) {\n                return GUIElement.createFromNode(el, q);\n            }\n            return el;\n        }\n        querySelectorAll(q, rui) {\n            let el = this.$element.querySelectorAll(q);\n            if (rui) {\n                el = el.map(i => {\n                    return GUIElement.createFromNode(i, q);\n                });\n            }\n            return el;\n        }\n        css(k, v) {\n            DOM.$css(this.$element, k, v);\n            return this;\n        }\n        position() {\n            return DOM.$position(this.$element);\n        }\n        _call(method, args, thisArg) {\n            if (arguments.length < 3) {\n                console.warn('Element::_call(\"methodName\") is DEPRECATED, use \"instance.methodName()\" instead');\n            }\n            try {\n                if (typeof this._call === 'function') {\n                    return this._call(method, args);\n                }\n                return this[method](args);\n            } catch (e) {\n                console.warn(e.stack, e);\n            }\n            return null;\n        }\n        fn(name, args, thisArg) {\n            console.warn('Element::fn(\"methodName\") is DEPRECATED, use \"instance.methodName()\" instead');\n            args = args || [];\n            thisArg = thisArg || this;\n            return this.fn(name, args, thisArg);\n        }\n        static createInto(tagName, params, parentNode, applyArgs, win) {\n            if (parentNode instanceof GUIElement) {\n                parentNode = parentNode.$element;\n            }\n            const gel = GUIElement.create(tagName, params, applyArgs, win);\n            parentNode.appendChild(gel.$element);\n            return gel;\n        }\n        static createFromNode(el, q, tagName) {\n            if (el) {\n                const instance = createElementInstance(null, el, q);\n                if (instance) {\n                    return instance;\n                }\n            }\n            return new GUIElement(el, q);\n        }\n\n        static getProperty(el, param, tagName) { // added by lwf\n            tagName = tagName || el.tagName.toLowerCase();\n            const isDataView = tagName.match(/^gui\\-(tree|icon|list|file)\\-view$/);\n            if ((param === 'value' || param === 'selected') && isDataView) {\n                return GUIElement.createFromNode(el).values();\n            }\n\n            return GUI.getProperty(el,param,tagName);\n        }\n\n        static create(tagName, params, applyArgs, win) {\n            tagName = tagName || '';\n            applyArgs = applyArgs || {};\n            params = params || {};\n            const el = GUI.createElement(tagName, params);\n            return createElementInstance(null, el, null, [\n                applyArgs,\n                win\n            ]);\n        }\n        static createInstance(el, q, tagName) {\n            console.warn('Element::createInstance() is DEPRECATED, use Element::createFromNode() instead');\n            return this.createFromNode(el, q, tagName);\n        }\n        static parseNode(win, node, type, args, onparse, id) {\n            onparse = onparse || function () {\n            };\n            args = args || {};\n            type = type || 'snipplet';\n            node.querySelectorAll('*').forEach(el => {\n                const lcase = el.tagName.toLowerCase();\n                if (lcase.match(/^gui\\-/) && !lcase.match(/(\\-container|\\-(h|v)box|\\-columns?|\\-rows?|(status|tool)bar|(button|menu)\\-bar|bar\\-entry)$/)) {\n                    DOM.$addClass(el, 'gui-element');\n                }\n            });\n            parseDynamic(node, win, args);\n            onparse(node);\n            Object.keys(REGISTRY).forEach(key => {\n                node.querySelectorAll(key).forEach(pel => {\n                    if (pel._wasParsed || DOM.$hasClass(pel, 'gui-data-view')) {\n                        return;\n                    }\n                    try {\n                        createElementInstance(key, pel, null, []);\n                    } catch (e) {\n                        console.warn('parseNode()', id, type, win, 'exception');\n                        console.warn(e, e.stack);\n                    }\n                    pel._wasParsed = true;\n                });\n            });\n        }\n        static register(data, classRef) {\n            const name = data.tagName;\n            if (REGISTRY[name]) {\n                throw new Error('GUI Element \"' + name + '\" already exists');\n            }\n            REGISTRY[name] = (() => {\n                const metadata = Object.assign({}, {\n                    type: 'element',\n                    allowedChildren: [],\n                    allowedParents: []\n                }, data);\n                if (metadata.parent) {\n                    delete metadata.parent;\n                }\n                if (metadata.type === 'input') {\n                    metadata.allowedChildren = true;\n                } else if (metadata.type !== 'container') {\n                    metadata.allowedChildren = false;\n                }\n                return {\n                    metadata: metadata,\n                    component: classRef\n                };\n            })();\n        }\n        static getRegisteredElement(tagName) {\n            return REGISTRY[tagName];\n        }\n    };\n});"]}