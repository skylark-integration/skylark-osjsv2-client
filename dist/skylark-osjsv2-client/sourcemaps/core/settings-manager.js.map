{"version":3,"sources":["core/settings-manager.js"],"names":["define","Storage","SettingsFragment","[object Object]","this","storage","defaultSettings","watches","settings","Promise","resolve","pool","key","Object","keys","length","e","console","warn","stack","value","save","triggerWatch","promise","indexOf","then","res","catch","err","changed","debug","saveableStorage","filter","n","match","forEach","instance","saveSettings","defaults","Array","arguments","mergeDefaults","index","callback","push","watch","set"],"mappings":";;;;;;;AAAAA,QACI,YACA,gCACD,SAAUC,EAASC,GAClB,aA4GA,OAAO,UA1GHC,cACIC,KAAKC,WACLD,KAAKE,mBACLF,KAAKG,WAETJ,KAAKK,GAED,OADAJ,KAAKC,QAAUG,MACRC,QAAQC,UAEnBP,IAAIQ,EAAMC,GACN,IACI,OAAIR,KAAKC,QAAQM,IAASE,OAAOC,KAAKV,KAAKC,QAAQM,IAAOI,OAC/CH,EAAMR,KAAKC,QAAQM,GAAMC,GAAOR,KAAKC,QAAQM,GAEjDC,EAAMR,KAAKE,gBAAgBK,GAAMC,GAAOR,KAAKE,gBAAgBK,GACtE,MAAOK,GACLC,QAAQC,KAAK,yBAA0B,YAAaF,EAAGA,EAAEG,OAE7D,OAAO,EAEXhB,IAAIQ,EAAMC,EAAKQ,EAAOC,EAAMC,GACxB,IAAIC,EAAUd,QAAQC,SAAQ,GAC9B,IACQE,QACkC,IAAvBR,KAAKC,QAAQM,KACpBP,KAAKC,QAAQM,QAGT,SACA,UACFa,eAAeZ,IAAQ,EACzBR,KAAKC,QAAQM,GAAMC,GAAOQ,EAE1BH,QAAQC,KAAK,yBAA0B,sCAAuCN,IAGlFR,KAAKC,QAAQM,GAAQS,EAE3B,MAAOJ,GACLC,QAAQC,KAAK,yBAA0B,YAAaF,EAAGA,EAAEG,OAY7D,OAVIE,IACAE,EAAUnB,KAAKiB,KAAKV,GACA,mBAATU,IACPJ,QAAQC,KAAK,uEACbK,EAAQE,KAAKC,GAAOL,GAAK,EAAOK,IAAMC,MAAMC,GAAOP,EAAKO,GAAK,WAGzC,IAAjBN,IAAiD,IAAjBA,GACvClB,KAAKyB,QAAQlB,GAEVY,EAEXpB,KAAKQ,GACDM,QAAQa,MAAM,0BAA2BnB,EAAMP,KAAKC,SACpD,MAAM0B,KAMN,OALAlB,OAAOC,KAAKV,KAAKC,SAAS2B,OAAOC,IACrBA,EAAEC,MAAM,QACjBC,QAAQF,IACPF,EAAgBE,GAAK7B,KAAKC,QAAQ4B,KAE/BhC,EAAQmC,SAASC,aAAa1B,EAAMoB,GAE/C5B,SAASQ,EAAM2B,GACXlC,KAAKE,gBAAgBK,GAAQ2B,EAEjCnC,SAASQ,EAAM2B,KACNlC,KAAKC,QAAQM,IAASP,KAAKC,QAAQM,aAAiB4B,SACrDnC,KAAKC,QAAQM,OAEjB,MAAMyB,EAAW,IAAIlC,EAAiBE,KAAKC,QAAQM,GAAOA,EAAMP,MAKhE,OAJIoC,UAAUzB,OAAS,IACnBX,KAAKkC,SAAS3B,EAAM2B,GACpBF,EAASK,cAAcH,IAEpBF,EAEXjC,QAAQuC,QAC+B,IAAxBtC,KAAKG,QAAQmC,WACbtC,KAAKG,QAAQmC,GAG5BvC,MAAMQ,EAAMgC,GACR,QAAKvC,KAAKC,QAAQM,IAGJP,KAAKG,QAAQqC,MACvBjC,KAAMA,EACNgC,SAAUA,IAEC,EAEnBxC,QAAQQ,GAMJ,OALAP,KAAKG,QAAQ4B,QAAQU,IACbA,GAASA,EAAMlC,OAASA,GACxBkC,EAAMF,SAASvC,KAAKC,QAAQM,MAG7BP,KAEXD,MAAMQ,EAAMU,GAGR,OAFAA,OAAuB,IAATA,IAAiC,IAATA,EACtCjB,KAAK0C,IAAInC,EAAM,QAAUU,GAClBjB","file":"../../core/settings-manager.js","sourcesContent":["define([\n    './storage',\n    '../helpers/settings-fragment'\n], function (Storage, SettingsFragment) {\n    'use strict';\n    class SettingsManager {\n        constructor() {\n            this.storage = {};\n            this.defaultSettings = {};\n            this.watches = [];\n        }\n        init(settings) {\n            this.storage = settings || {};\n            return Promise.resolve();\n        }\n        get(pool, key) {\n            try {\n                if (this.storage[pool] && Object.keys(this.storage[pool]).length) {\n                    return key ? this.storage[pool][key] : this.storage[pool];\n                }\n                return key ? this.defaultSettings[pool][key] : this.defaultSettings[pool];\n            } catch (e) {\n                console.warn('SettingsManager::get()', 'exception', e, e.stack);\n            }\n            return false;\n        }\n        set(pool, key, value, save, triggerWatch) {\n            let promise = Promise.resolve(true);\n            try {\n                if (key) {\n                    if (typeof this.storage[pool] === 'undefined') {\n                        this.storage[pool] = {};\n                    }\n                    if ([\n                            'number',\n                            'string'\n                        ].indexOf(typeof key) >= 0) {\n                        this.storage[pool][key] = value;\n                    } else {\n                        console.warn('SettingsManager::set()', 'expects key to be a valid iter, not', key);\n                    }\n                } else {\n                    this.storage[pool] = value;\n                }\n            } catch (e) {\n                console.warn('SettingsManager::set()', 'exception', e, e.stack);\n            }\n            if (save) {\n                promise = this.save(pool);\n                if (typeof save === 'function') {\n                    console.warn('Using a callback is deprecated, you should use the returned promise');\n                    promise.then(res => save(false, res)).catch(err => save(err, false));\n                }\n            }\n            if (typeof triggerWatch === 'undefined' || triggerWatch === true) {\n                this.changed(pool);\n            }\n            return promise;\n        }\n        save(pool) {\n            console.debug('SettingsManager::save()', pool, this.storage);\n            const saveableStorage = {};\n            Object.keys(this.storage).filter(n => {\n                return !n.match(/^__/);\n            }).forEach(n => {\n                saveableStorage[n] = this.storage[n];\n            });\n            return Storage.instance.saveSettings(pool, saveableStorage);\n        }\n        defaults(pool, defaults) {\n            this.defaultSettings[pool] = defaults;\n        }\n        instance(pool, defaults) {\n            if (!this.storage[pool] || this.storage[pool] instanceof Array) {\n                this.storage[pool] = {};\n            }\n            const instance = new SettingsFragment(this.storage[pool], pool, this);\n            if (arguments.length > 1) {\n                this.defaults(pool, defaults);\n                instance.mergeDefaults(defaults);\n            }\n            return instance;\n        }\n        unwatch(index) {\n            if (typeof this.watches[index] !== 'undefined') {\n                delete this.watches[index];\n            }\n        }\n        watch(pool, callback) {\n            if (!this.storage[pool]) {\n                return false;\n            }\n            const index = this.watches.push({\n                pool: pool,\n                callback: callback\n            });\n            return index - 1;\n        }\n        changed(pool) {\n            this.watches.forEach(watch => {\n                if (watch && watch.pool === pool) {\n                    watch.callback(this.storage[pool]);\n                }\n            });\n            return this;\n        }\n        clear(pool, save) {\n            save = typeof save === 'undefined' || save === true;\n            this.set(pool, null, {}, save);\n            return this;\n        }\n    }\n    return new SettingsManager();\n});"]}