{"version":3,"sources":["core/storage.js"],"names":["define","Connection","_instance","instance","[object Object]","this","saveTimeout","Promise","resolve","pool","storage","clearTimeout","reject","setTimeout","request","settings","Object","assign","then","catch","Process","SettingsManager","data","getProcesses","filter","proc","_getSessionData","map","set","err","res","list","get","iter","args","__resume__","__windows__","windows","name"],"mappings":";;;;;;;AAAAA,QACI,gBACD,SAAUC,GACT,aACA,IAAIC,EACJ,aACIC,sBACI,OAAOD,EAEXE,cACIF,EAAYG,KACZA,KAAKC,YAAc,KAEvBF,OACI,OAAOG,QAAQC,UAEnBJ,UACIF,EAAY,KAEhBE,aAAaK,EAAMC,GAEf,OADAC,aAAaN,KAAKC,aACX,IAAIC,QAAQ,CAACC,EAASI,KACzBP,KAAKC,YAAcO,WAAW,KAC1BZ,EAAWa,QAAQ,YACfL,KAAMA,EACNM,SAAUC,OAAOC,UAAWP,KAC7BQ,KAAKV,GAASW,MAAMP,GACvBD,aAAaN,KAAKC,cACnB,OAGXF,YAAYgB,EAAQC,GAChB,OAAO,IAAId,QAAQ,CAACC,EAASI,KACzB,MAAMU,EAAOF,EAAQG,eAAeC,OAAOC,GAAwC,mBAAzBA,EAAKC,iBAAgCC,IAAIF,GAAQA,EAAKC,mBAChHL,EAAgBO,IAAI,cAAe,KAAMN,EAAM,CAACO,EAAKC,IAC1CD,EAAMjB,EAAOiB,GAAOrB,EAAQsB,MAI/C1B,eAAeiB,GACX,MACMU,GADMV,EAAgBW,IAAI,oBACPL,IAAIM,IACzB,MAAMC,EAAOD,EAAKC,KAGlB,OAFAA,EAAKC,YAAa,EAClBD,EAAKE,YAAcH,EAAKI,aAEpBC,KAAML,EAAKK,KACXJ,KAAAA,KAGR,OAAO3B,QAAQC,QAAQuB","file":"../../core/storage.js","sourcesContent":["define([\n    './connection',\n], function (Connection) {\n    'use strict';\n    let _instance;\n    return class Storage {\n        static get instance() {\n            return _instance;\n        }\n        constructor() {\n            _instance = this;\n            this.saveTimeout = null;\n        }\n        init() {\n            return Promise.resolve();\n        }\n        destroy() {\n            _instance = null;\n        }\n        saveSettings(pool, storage) {\n            clearTimeout(this.saveTimeout);\n            return new Promise((resolve, reject) => {\n                this.saveTimeout = setTimeout(() => {\n                    Connection.request('settings', {\n                        pool: pool,\n                        settings: Object.assign({}, storage)\n                    }).then(resolve).catch(reject);\n                    clearTimeout(this.saveTimeout);\n                }, 250);\n            });\n        }\n        saveSession(Process,SettingsManager) { // modified by lwf\n            return new Promise((resolve, reject) => {\n                const data = Process.getProcesses().filter(proc => typeof proc._getSessionData === 'function').map(proc => proc._getSessionData());\n                SettingsManager.set('UserSession', null, data, (err, res) => {\n                    return err ? reject(err) : resolve(res);\n                });\n            });\n        }\n        getLastSession(SettingsManager) { // modified by lwf\n            const res = SettingsManager.get('UserSession');\n            const list = (res || []).map(iter => {\n                const args = iter.args;\n                args.__resume__ = true;\n                args.__windows__ = iter.windows || [];\n                return {\n                    name: iter.name,\n                    args\n                };\n            });\n            return Promise.resolve(list);\n        }\n    };\n});"]}