{"version":3,"sources":["core/theme.js"],"names":["define","SettingsManager","Config","FileMetadata","PackageManager","FS","Compability","DOM","[object Object]","compability","getCompability","this","settings","$themeScript","audioAvailable","audio","oggAvailable","audioTypes","ogg","VFS","instance","enableSounds","styleTheme","soundTheme","iconTheme","sounds","settheme","set","setTheme","$remove","action","args","theme","getStyleTheme","OSjs","Themes","apply","e","console","warn","isFirefox","navigator","userAgent","toLowerCase","indexOf","typeMap","image","image-center","image-fill","image-strech","className","back","wallpaper","background","match","url","then","result","document","body","style","backgroundImage","backgroundColor","fontFamily","backgroundAttachment","setAttribute","name","root","getConfig","themeAction","setThemeScript","getThemeResource","String","animations","_setBackground","src","$createJS","returnMetadata","convert","get","found","getStyleThemes","forEach","t","tmpEl","createElement","visibility","position","top","left","width","height","appendChild","wd","offsetWidth","parentNode","removeChild","window","margin","marginf","parseFloat","border","borderf","type","str","getSoundTheme","volume","filename","getSoundFilename","debug","f","getSound","Audio","play","error","size","getIconTheme","file","icon","Error","map","appname","path","meta","getPackage","getPackageResource","getIcon","mime","every","iter","k"],"mappings":"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","file":"../../core/theme.js","sourcesContent":["define([\n    './settings-manager',\n    './config',\n    '../vfs/file',\n    './package-manager',\n    '../utils/fs',\n    '../utils/compability',\n    '../utils/dom'\n], function (SettingsManager, Config, FileMetadata, PackageManager, FS, Compability, DOM) {\n    'use strict';\n    class Theme {\n        constructor() {\n            const compability = Compability.getCompability();\n            this.settings = null;\n            this.$themeScript = null;\n            this.audioAvailable = !!compability.audio;\n            this.oggAvailable = !!compability.audioTypes.ogg;\n        }\n        init(VFS) { // modified by lwf\n            this.VFS = VFS;\n\n            this.settings = SettingsManager.instance('__theme__', {\n                enableSounds: true,\n                styleTheme: 'default',\n                soundTheme: 'default',\n                iconTheme: 'default',\n                sounds: {}\n            });\n        }\n        update(settings, settheme) {\n            this.settings.set(null, settings);\n            if (settheme) {\n                this.setTheme(settings);\n            }\n        }\n        destroy() {\n            this.$themeScript = DOM.$remove(this.$themeScript);\n        }\n        themeAction(action, args) {\n            const theme = this.getStyleTheme();\n            args = args || [];\n            try {\n                if (OSjs.Themes[theme]) {\n                    return OSjs.Themes[theme][action].apply(null, args);\n                }\n            } catch (e) {\n                console.warn(e);\n            }\n            return null;\n        }\n        _setBackground(settings) {\n            const isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\n            const typeMap = {\n                'image': 'normal',\n                'image-center': 'center',\n                'image-fill': 'fill',\n                'image-strech': 'strech'\n            };\n            let className = 'color';\n            let back = 'none';\n            if (settings.wallpaper && settings.background.match(/^image/)) {\n                back = settings.wallpaper;\n                className = typeMap[settings.background] || 'default';\n            }\n            if (back !== 'none') {\n                try {\n                    this.VFS.url(back).then(result => {\n                        back = \"url('\" + result + \"')\";\n                        document.body.style.backgroundImage = back;\n                        return true;\n                    });\n                } catch (e) {\n                    console.warn(e);\n                }\n            } else {\n                document.body.style.backgroundImage = back;\n            }\n            if (settings.backgroundColor) {\n                document.body.style.backgroundColor = settings.backgroundColor;\n            }\n            if (settings.fontFamily) {\n                document.body.style.fontFamily = settings.fontFamily;\n            }\n            if (isFirefox) {\n                document.body.style.backgroundAttachment = 'fixed';\n            } else {\n                document.body.style.backgroundAttachment = 'scroll';\n            }\n            document.body.setAttribute('data-background-style', className);\n        }\n        getThemeCSS(name) {\n            let root = Config.getConfig('Connection.RootURI', '/');\n            if (name === null) {\n                return root + 'blank.css';\n            }\n            root = Config.getConfig('Connection.ThemeURI');\n            return root + '/' + name + '.css';\n        }\n        setTheme(settings) {\n            this.themeAction('destroy');\n            this.setThemeScript(this.getThemeResource('theme.js'));\n            document.body.setAttribute('data-style-theme', settings.styleTheme);\n            document.body.setAttribute('data-icon-theme', settings.iconTheme);\n            document.body.setAttribute('data-sound-theme', settings.soundTheme);\n            document.body.setAttribute('data-animations', String(settings.animations));\n            this._setBackground(settings);\n            this.settings.set(null, settings);\n        }\n        setThemeScript(src) {\n            if (this.$themeScript) {\n                this.$themeScript = DOM.$remove(this.$themeScript);\n            }\n            if (src) {\n                this.$themeScript = DOM.$createJS(src, null, () => {\n                    this.themeAction('init');\n                });\n            }\n        }\n        getStyleTheme(returnMetadata, convert) {\n            const name = this.settings.get('styleTheme') || null;\n            if (returnMetadata) {\n                let found = null;\n                if (name) {\n                    this.getStyleThemes().forEach(function (t) {\n                        if (t && t.name === name) {\n                            found = t;\n                        }\n                    });\n                }\n                if (found && convert === true) {\n                    const tmpEl = document.createElement('div');\n                    tmpEl.style.visibility = 'hidden';\n                    tmpEl.style.position = 'fixed';\n                    tmpEl.style.top = '-10000px';\n                    tmpEl.style.left = '-10000px';\n                    tmpEl.style.width = '1em';\n                    tmpEl.style.height = '1em';\n                    document.body.appendChild(tmpEl);\n                    const wd = tmpEl.offsetWidth;\n                    tmpEl.parentNode.removeChild(tmpEl);\n                    if (typeof found.style.window.margin === 'string' && found.style.window.margin.match(/em$/)) {\n                        const marginf = parseFloat(found.style.window.margin);\n                        found.style.window.margin = marginf * wd;\n                    }\n                    if (typeof found.style.window.border === 'string' && found.style.window.border.match(/em$/)) {\n                        const borderf = parseFloat(found.style.window.border);\n                        found.style.window.border = borderf * wd;\n                    }\n                }\n                return found;\n            }\n            return name;\n        }\n        getThemeResource(name, type) {\n            name = name || null;\n            type = type || null;\n            const root = Config.getConfig('Connection.ThemeURI');\n            function getName(str, theme) {\n                if (!str.match(/^\\//)) {\n                    if (type === 'base' || type === null) {\n                        str = `${ root }/${ theme }/${ str }`;\n                    } else {\n                        str = `${ root }/${ theme }/${ type }/${ str }`;\n                    }\n                }\n                return str;\n            }\n            if (name) {\n                const theme = this.getStyleTheme();\n                name = getName(name, theme);\n            }\n            return name;\n        }\n        getSound(name) {\n            name = name || null;\n            if (name && !name.match(/^(https?:)?\\//)) {\n                const theme = this.getSoundTheme();\n                const root = Config.getConfig('Connection.SoundURI');\n                const ext = this.oggAvailable ? 'oga' : 'mp3';\n                name = `${ root }/${ theme }/${ name }.${ ext }`;\n            }\n            return name;\n        }\n        playSound(name, volume) {\n            const filename = this.getSoundFilename(name);\n            if (!filename) {\n                console.debug('playSound()', 'Cannot play sound, no compability or not enabled!');\n                return null;\n            }\n            if (typeof volume === 'undefined') {\n                volume = 1;\n            }\n            const f = this.getSound(filename);\n            console.debug('playSound()', name, filename, f, volume);\n            const audio = new Audio(f);\n            audio.volume = volume;\n            try {\n                audio.play();\n            } catch (e) {\n                console.error(e);\n            }\n            return audio;\n        }\n        getIcon(name, size) {\n            name = name || '';\n            size = size || '16x16';\n            if (!name.match(/^(https:?)?\\//)) {\n                const root = Config.getConfig('Connection.IconURI');\n                const theme = this.getIconTheme();\n                name = `${ root }/${ theme }/${ size }/${ name }`;\n            }\n            return name;\n        }\n        getFileIcon(file, size, icon) {\n            icon = icon || 'mimetypes/text-x-preview.png';\n            if (typeof file === 'object' && !(file instanceof FileMetadata)) {\n                file = new FileMetadata(file);\n            }\n            if (!file.filename) {\n                throw new Error('Filename is required for getFileIcon()');\n            }\n            const map = [\n                {\n                    match: 'application/pdf',\n                    icon: 'mimetypes/x-office-document.png'\n                },\n                {\n                    match: 'application/zip',\n                    icon: 'mimetypes/package-x-generic.png'\n                },\n                {\n                    match: 'application/x-python',\n                    icon: 'mimetypes/text-x-script.png'\n                },\n                {\n                    match: 'application/x-lua',\n                    icon: 'mimetypes/text-x-script.png'\n                },\n                {\n                    match: 'application/javascript',\n                    icon: 'mimetypes/text-x-script.png'\n                },\n                {\n                    match: 'text/html',\n                    icon: 'mimetypes/text-html.png'\n                },\n                {\n                    match: 'text/xml',\n                    icon: 'mimetypes/text-html.png'\n                },\n                {\n                    match: 'text/css',\n                    icon: 'mimetypes/text-x-script.png'\n                },\n                {\n                    match: 'osjs/document',\n                    icon: 'mimetypes/x-office-document.png'\n                },\n                {\n                    match: 'osjs/draw',\n                    icon: 'mimetypes/image-x-generic.png'\n                },\n                {\n                    match: /^text\\//,\n                    icon: 'mimetypes/text-x-generic.png'\n                },\n                {\n                    match: /^audio\\//,\n                    icon: 'mimetypes/audio-x-generic.png'\n                },\n                {\n                    match: /^video\\//,\n                    icon: 'mimetypes/video-x-generic.png'\n                },\n                {\n                    match: /^image\\//,\n                    icon: 'mimetypes/image-x-generic.png'\n                },\n                {\n                    match: /^application\\//,\n                    icon: 'mimetypes/application-x-executable.png'\n                }\n            ];\n            if (file.type === 'dir') {\n                icon = 'places/folder.png';\n            } else if (file.type === 'trash') {\n                icon = 'places/user-trash.png';\n            } else if (file.type === 'application') {\n                const appname = FS.filename(file.path);\n                const meta = PackageManager.getPackage(appname);\n                if (meta) {\n                    if (!meta.icon.match(/^((https?:)|\\.)?\\//)) {\n                        return this.getIcon(meta.icon, size);\n                    }\n                    return PackageManager.getPackageResource(appname, meta.icon);\n                }\n            } else {\n                const mime = file.mime || 'application/octet-stream';\n                map.every(iter => {\n                    let match = false;\n                    if (typeof iter.match === 'string') {\n                        match = mime === iter.match;\n                    } else {\n                        match = mime.match(iter.match);\n                    }\n                    if (match) {\n                        icon = iter.icon;\n                        return false;\n                    }\n                    return true;\n                });\n            }\n            return this.getIcon(icon, size);\n        }\n        getIconTheme() {\n            return this.settings.get('iconTheme', 'default');\n        }\n        getSoundTheme() {\n            return this.settings.get('soundTheme', 'default');\n        }\n        getSoundFilename(k) {\n            if (!this.audioAvailable || !this.settings.get('enableSounds') || !k) {\n                return false;\n            }\n            const sounds = this.settings.get('sounds', {});\n            return sounds[k] || null;\n        }\n        getStyleThemes() {\n            return Config.getConfig('Styles', []);\n        }\n        getSoundThemes() {\n            return Config.getConfig('Sounds', []);\n        }\n        getIconThemes() {\n            return Config.getConfig('Icons', []);\n        }\n    }\n    return new Theme();\n});"]}