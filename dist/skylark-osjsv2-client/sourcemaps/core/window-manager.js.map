{"version":3,"sources":["core/window-manager.js"],"names":["define","DOM","Events","Utils","Keycodes","Theme","Process","Connection","SettingsManager","Locales","Config","WindowBehaviour","triggerFullscreen","el","state","requestFullscreen","mozRequestFullScreen","webkitRequestFullScreen","Element","ALLOW_KEYBOARD_INPUT","webkitCancelFullScreen","mozCancelFullScreen","exitFullscreen","_instance","instance","[object Object]","name","args","metadata","settings","console","group","debug","super","this","_windows","_settings","_currentWin","_lastWin","_mouselock","_stylesheet","_sessionLoaded","_fullyLoaded","_isResponsive","_responsiveRes","_dcTimeout","_resizeTimeout","_$fullscreen","_$lastDomInput","__name","__path","path","__iter","iter","groupEnd","destroyStylesheet","$unbind","document","window","body","onerror","onbeforeunload","forEach","win","i","destroy","Notification","OSjs","require","subscribe","create","title","_","message","reconnecting","addEventListener","ev","target","preventDefault","$bind","_onMouseLeave","_onOrientationChange","_onHashChange","_onResize","_onScroll","_onFullscreen","_onContextMenu","_onMouseDown","_onClick","_onKeyUp","_onKeyDown","_onKeyPress","_onError","bind","_onBeforeUnload","queries","getDefaultSetting","maxWidth","Object","keys","q","Math","max","resize","cb","getWindows","find","w","focus","init","_app","e","error","stack","createWindowBehaviour","push","_inited","_focus","foundIndex","findIndex","_wid","force","save","triggerWatch","result","mergeObject","get","set","styles","rawStyles","innerHTML","key","rules","r","format","join","style","createElement","type","id","getElementsByTagName","appendChild","$remove","rect","innerWidth","onResize","t","prev","orientation","info","setAttribute","_onDisplayChange","_emit","from","relatedTarget","toElement","nodeName","clearTimeout","setTimeout","String","screen","indexOf","onOrientationChange","hash","location","substr","spl","split","length","root","a","b","k","decodeURIComponent","getArgs","getProcess","p","_onMessage","source","space","getWindowSpace","stopPropagation","scrollTop","scrollLeft","notif","getIcon","fullScreen","mozFullScreen","webkitIsFullScreen","msFullscreenElement","opts","_isFullscreen","setImage","warn","onContextMenu","$isFormElement","blur","hitWindow","hitMenu","parentNode","tagName","match","getAttribute","$hasClass","getCurrentWindow","_blur","themeAction","onKeyUp","_onKeyEvent","reacted","combination","onKeyDown","accept","doPrevent","srcElement","keyCode","BACKSPACE","TAB","_properties","key_capture","checkPrevent","getConfig","url","linenumber","column","exception","fileName","lineNumber","arguments","v","top","left","width","offsetWidth","height","offsetHeight","winCount","reduce","count","x","y","filter"],"mappings":";;;;;;;AAAAA,QACI,eAEA,kBACA,gBACA,oBACA,UACA,YAGA,eACA,qBAEA,YACA,WACA,+BACD,SAAUC,EAAKC,EAAQC,EAAOC,EAAUC,EAAOC,EAAWC,EAAYC,EAAkBC,EAASC,EAAQC,GACxG,aA2BA,SAASC,EAAkBC,EAAIC,GAmBvBD,IACIC,EAlBAD,EAAGE,kBACHF,EAAGE,oBACIF,EAAGG,qBACVH,EAAGG,uBACIH,EAAGI,yBACVJ,EAAGI,wBAAwBC,QAAQC,sBAInCN,EAAGO,uBACHP,EAAGO,yBACIP,EAAGQ,oBACVR,EAAGQ,sBACIR,EAAGS,gBACVT,EAAGS,kBAWf,IAAIC,EACJ,qBAAmCjB,EAC/BkB,sBACI,OAAOD,EAEXE,YAAYC,EAAMC,EAAMC,EAAUC,GAC9BC,QAAQC,MAAM,gCACdD,QAAQE,MAAM,OAAQN,GACtBI,QAAQE,MAAM,YAAaL,GAC3BM,MAAMP,EAAMC,EAAMC,GAClBL,EAAYW,KACZA,KAAKC,YACLD,KAAKE,UAAY5B,EAAgBgB,SAASE,EAAMG,GAChDK,KAAKG,YAAc,KACnBH,KAAKI,SAAW,KAChBJ,KAAKK,YAAa,EAClBL,KAAKM,YAAc,KACnBN,KAAKO,gBAAiB,EACtBP,KAAKQ,cAAe,EACpBR,KAAKS,eAAgB,EACrBT,KAAKU,eAAiB,IACtBV,KAAKW,WAAa,KAClBX,KAAKY,eAAiB,KACtBZ,KAAKa,aAAe,KACpBb,KAAKc,eAAiB,KACtBd,KAAKe,OAASvB,GAAQ,gBACtBQ,KAAKgB,OAAStB,EAASuB,KACvBjB,KAAKkB,OAASxB,EAASyB,KAEvBvB,QAAQwB,WAEZ7B,UAkCI,OAjCAK,QAAQE,MAAM,4BACdE,KAAKqB,oBACLrD,EAAOsD,QAAQC,SAAU,4BACzBvD,EAAOsD,QAAQC,SAAU,8BACzBvD,EAAOsD,QAAQE,OAAQ,mCACvBxD,EAAOsD,QAAQE,OAAQ,4BACvBxD,EAAOsD,QAAQE,OAAQ,wBACvBxD,EAAOsD,QAAQE,OAAQ,wBACvBxD,EAAOsD,QAAQE,OAAQ,kCACvBxD,EAAOsD,QAAQE,OAAQ,qCACvBxD,EAAOsD,QAAQE,OAAQ,wCACvBxD,EAAOsD,QAAQE,OAAQ,oCACvBxD,EAAOsD,QAAQC,SAASE,KAAM,6BAC9BzD,EAAOsD,QAAQC,SAASE,KAAM,sDAC9BzD,EAAOsD,QAAQC,SAASE,KAAM,uBAC9BzD,EAAOsD,QAAQC,SAAU,uBACzBvD,EAAOsD,QAAQC,SAAU,yBACzBvD,EAAOsD,QAAQC,SAAU,0BACzBC,OAAOE,QAAU,KACjBF,OAAOG,eAAiB,KACxB3B,KAAKC,SAAS2B,QAAQ,CAACC,EAAKC,KACpBD,IACAA,EAAIE,SAAQ,GACZ/B,KAAKC,SAAS6B,GAAK,QAG3B9B,KAAKC,YACLD,KAAKG,YAAc,KACnBH,KAAKI,SAAW,KAChBJ,KAAKa,aAAe,KACpBxB,EAAY,KAEZW,KAAKgC,aAAeC,KAAKC,QAAQ,oBAC1BnC,MAAMgC,UAEjBxC,KAAKG,EAAUC,GACX,IAAIqC,EAAehC,KAAKgC,aAExB3D,EAAWiB,SAAS6C,UAAU,SAAU,KACpCH,EAAaI,QACTC,MAAO9D,EAAQ+D,EAAE,YACjBC,QAAShE,EAAQ+D,EAAE,2BAG3BjE,EAAWiB,SAAS6C,UAAU,UAAWK,IACrCR,EAAaI,QACTC,MAAO9D,EAAQ+D,EAAE,eACjBC,QAAShE,EAAQ+D,EAAEE,EAAe,4BAA8B,uBAIxE5C,QAAQE,MAAM,yBACdyB,SAASE,KAAKgB,iBAAiB,WAAYC,IACnCA,EAAGC,SAAWpB,SAASE,MACvBiB,EAAGE,mBAGX5E,EAAO6E,MAAMtB,SAAU,2BAA4BmB,GAAM1C,KAAK8C,cAAcJ,IAC5E1E,EAAO6E,MAAMtB,SAAU,6BAA8BmB,GAAM1C,KAAK8C,cAAcJ,IAC9E1E,EAAO6E,MAAMrB,OAAQ,kCAAmCkB,GAAM1C,KAAK+C,qBAAqBL,IACxF1E,EAAO6E,MAAMrB,OAAQ,2BAA4BkB,GAAM1C,KAAKgD,cAAcN,IAC1E1E,EAAO6E,MAAMrB,OAAQ,uBAAwBkB,GAAM1C,KAAKiD,UAAUP,IAClE1E,EAAO6E,MAAMrB,OAAQ,uBAAwBkB,GAAM1C,KAAKkD,UAAUR,IAClE1E,EAAO6E,MAAMrB,OAAQ,iCAAkCkB,GAAM1C,KAAKmD,cAAcT,IAChF1E,EAAO6E,MAAMrB,OAAQ,oCAAqCkB,GAAM1C,KAAKmD,cAAcT,IACnF1E,EAAO6E,MAAMrB,OAAQ,uCAAwCkB,GAAM1C,KAAKmD,cAAcT,IACtF1E,EAAO6E,MAAMrB,OAAQ,mCAAoCkB,GAAM1C,KAAKmD,cAAcT,IAClF1E,EAAO6E,MAAMtB,SAASE,KAAM,4BAA6BiB,GAAM1C,KAAKoD,eAAeV,IACnF1E,EAAO6E,MAAMtB,SAASE,KAAM,qDAAsDiB,GAAM1C,KAAKqD,aAAaX,IAC1G1E,EAAO6E,MAAMtB,SAASE,KAAM,sBAAuBiB,GAAM1C,KAAKsD,SAASZ,IACvE1E,EAAO6E,MAAMtB,SAAU,sBAAuBmB,GAAM1C,KAAKuD,SAASb,IAClE1E,EAAO6E,MAAMtB,SAAU,wBAAyBmB,GAAM1C,KAAKwD,WAAWd,IACtE1E,EAAO6E,MAAMtB,SAAU,yBAA0BmB,GAAM1C,KAAKyD,YAAYf,IACxElB,OAAOE,QAAU1B,KAAK0D,SAASC,KAAK3D,MACpCwB,OAAOG,eAAiB3B,KAAK4D,gBAAgB5D,MAC7C,MAAM6D,EAAU7D,KAAK8D,kBAAkB,oBACvC,IAAIC,EAAW,EACfC,OAAOC,KAAKJ,GAASjC,QAAQsC,IACzBH,EAAWI,KAAKC,IAAIL,EAAUF,EAAQK,MAE1ClE,KAAKU,eAAiBqD,GAAY,IAClC/D,KAAK+C,uBACL/C,KAAKqE,SAET9E,MAAM+E,GACFA,IAEJ/E,UAAUC,GACN,OAAOQ,KAAKuE,aAAaC,KAAKC,GACnBA,EAAE1D,SAAWvB,GAG5BD,UAAUkF,EAAGC,GAKT9E,QAAQE,MAAM,8BACd,IACI2E,EAAEE,KAAK3E,KAAMyE,EAAEG,MACjB,MAAOC,GACLjF,QAAQkF,MAAM,6BAA8B,KAAM,iBAAkBD,EAAGA,EAAEE,OAS7E,OAPAtG,EAAgBuG,sBAAsBP,EAAGzE,MACzCA,KAAKC,SAASgF,KAAKR,GACnBA,EAAES,WAEY,IAAVR,GACAD,EAAEU,SAECV,EAEXlF,aAAakF,GAKT,MAAMW,EAAapF,KAAKC,SAASoF,UAAUxD,GAAOA,GAAOA,EAAIyD,OAASb,EAAEa,MAExE,OADA1F,QAAQE,MAAM,gCAAiC2E,EAAEa,KAAMF,IACnC,IAAhBA,IACApF,KAAKC,SAASmF,GAAc,MACrB,GAIf7F,cAAcI,EAAU4F,EAAOC,EAAMC,GACjC9F,EAAWA,MACXC,QAAQE,MAAM,iCAAkC,UAAWyF,GAC3D,MAAMG,EAASH,EAAQ5F,EAAW1B,EAAM0H,YAAY3F,KAAKE,UAAU0F,MAAOjG,GAE1E,OADAK,KAAKE,UAAU2F,IAAI,KAAMH,EAAQF,EAAMC,IAChC,EAEXlG,iBAAiBuG,EAAQC,GACrB/F,KAAKqB,oBACL,IAAI2E,KACJhC,OAAOC,KAAK6B,GAAQlE,QAAQqE,IACxB,IAAIC,KACJlC,OAAOC,KAAK6B,EAAOG,IAAMrE,QAAQuE,IAC7BD,EAAMjB,KAAKhH,EAAMmI,OAAO,gBAAiBD,EAAGL,EAAOG,GAAKE,OAE5DD,EAAQA,EAAMG,KAAK,MACnBL,EAAUf,KAAKhH,EAAMmI,OAAO,gBAAiBH,EAAKC,MAEtDF,EAAYA,EAAUK,KAAK,MACvBN,IACAC,GAAa,KAAOD,GAExB,MAAMO,EAAQ/E,SAASgF,cAAc,SACrCD,EAAME,KAAO,WACbF,EAAMG,GAAK,oBACXH,EAAMN,UAAYA,EAClBzE,SAASmF,qBAAqB,QAAQ,GAAGC,YAAYL,GACrDtG,KAAKM,YAAcgG,EAEvB/G,oBACQS,KAAKM,aACLvC,EAAI6I,QAAQ5G,KAAKM,aAErBN,KAAKM,YAAc,KAEvBf,OAAOmD,EAAImE,GACP7G,KAAKS,cAAgBe,OAAOsF,YAAc,KAC1C9G,KAAK+G,SAASrE,GAElBnD,YAAYmD,EAAIb,GACZ,OAAO,EAEXtC,gBAEAA,iBAAiBZ,EAAIqI,GACjB,GAAiB,kBAANA,EACPtI,EAAkBC,EAAIqI,OACnB,CACH,MAAMC,EAAOjH,KAAKa,aACdoG,GAAQA,IAAStI,GACjBD,EAAkBuI,GAAM,GAE5BvI,EAAkBC,EAAIsI,IAAStI,GAEnCqB,KAAKa,aAAelC,EAExBY,UAAUmD,EAAIb,IAEdtC,oBAAoBmD,EAAIwE,GACpBtH,QAAQuH,KAAK,sBAAuBzE,EAAIwE,GACxC3F,SAASE,KAAK2F,aAAa,mBAAoBF,GAC/ClH,KAAKqH,mBAET9H,SAASmD,GACL1C,KAAKqH,mBACLrH,KAAKsH,MAAM,WAEf/H,kBACI,OAAIS,KAAKO,iBAGTP,KAAKO,gBAAiB,GACf,GAEXhB,cAAcmD,GACV1C,KAAKK,YAAa,EAEtBd,cAAcmD,GACV,MAAM6E,EAAO7E,EAAG8E,eAAiB9E,EAAG+E,UAC/BF,GAA0B,SAAlBA,EAAKG,SAGd1H,KAAKK,YAAa,EAFlBL,KAAKK,YAAa,EAK1Bd,mBACIS,KAAKW,WAAagH,aAAa3H,KAAKW,YACpCX,KAAKW,WAAaiH,WAAW,KACpB5H,KAAKC,UAGVD,KAAKuE,aAAa3C,QAAQ6C,IACtBA,EAAExB,YACFwB,EAAE6C,MAAM,aAEb,KACH/F,SAASE,KAAK2F,aAAa,kBAAmBS,OAAO7H,KAAKS,gBAE9DlB,qBAAqBmD,GACjB,IAAIwE,EAAc,YACd1F,OAAOsG,QAAUtG,OAAOsG,OAAOZ,cAC6B,IAAxD1F,OAAOsG,OAAOZ,YAAYV,KAAKuB,QAAQ,cACvCb,EAAc,YAGtBlH,KAAKgI,oBAAoBtF,EAAIwE,GAEjC3H,cAAcmD,GACV,MAAMuF,EAAOzG,OAAO0G,SAASD,KAAKE,OAAO,GACnCC,EAAMH,EAAKI,MAAM,uBAUvB,GAAmB,IAAfD,EAAIE,OAAc,CAClB,MAAMC,EAAOH,EAAI,GACX3I,EAXV,SAAiByE,GACb,MAAMzE,KAMN,OALAyE,EAAEmE,MAAM,KAAKzG,QAAQ,SAAU4G,GAC3B,MAAMC,EAAID,EAAEH,MAAM,KACZK,EAAIC,mBAAmBF,EAAE,IAC/BhJ,EAAKiJ,GAAKC,mBAAmBF,EAAE,IAAM,MAElChJ,EAIMmJ,CAAQR,EAAI,IACrBG,GACAnK,EAAQyK,WAAWN,GAAM3G,QAAQ,SAAUkH,GACvCA,EAAEC,WAAW,cACTd,KAAMA,EACNxI,KAAMA,IACLuJ,OAAQ,UAK7BzJ,UAAUmD,GACNiF,aAAa3H,KAAKY,gBAClBZ,KAAKY,eAAiBgH,WAAW,KAC7B,MAAMqB,EAAQjJ,KAAKkJ,iBACnBlJ,KAAKqE,OAAO3B,EAAIuG,IACjB,KAEP1J,UAAUmD,GACN,OAAIA,EAAGC,SAAWpB,UAAYmB,EAAGC,SAAWpB,SAASE,MACjDiB,EAAGE,iBACHF,EAAGyG,mBACI,IAEX5H,SAASE,KAAK2H,UAAY,EAC1B7H,SAASE,KAAK4H,WAAa,GACpB,GAEX9J,cAAcmD,GACV,IACI,MAAM4G,EAAQtJ,KAAKgC,aAAauH,QAAQ,2BACpCD,IACK/H,SAASiI,YAAejI,SAASkI,eAAkBlI,SAASmI,oBAAuBnI,SAASoI,qBAI7FL,EAAMM,KAAKC,eAAgB,EAC3BP,EAAMQ,SAAS3L,EAAMoL,QAAQ,2BAA4B,YAJzDD,EAAMM,KAAKC,eAAgB,EAC3BP,EAAMQ,SAAS3L,EAAMoL,QAAQ,8BAA+B,YAMtE,MAAO1E,GACLjF,QAAQmK,KAAKlF,EAAEE,MAAOF,IAG9BtF,eAAemD,GAEX,OADA1C,KAAKgK,cAActH,GACf3E,EAAIkM,eAAevH,IACnBT,KAAKC,QAAQ,YAAYgI,QAKtB,IAHHxH,EAAGE,kBACI,GAIfrD,aAAamD,GACT,GAAI3E,EAAIkM,eAAevH,GACnB1C,KAAKc,eAAiB4B,EAAGC,YAEzB,GAAI3C,KAAKc,eAAgB,CACrB,IACId,KAAKc,eAAeoJ,OACtB,MAAOrF,IAET7E,KAAKc,eAAiB,MAIlCvB,SAASmD,GACL,IAAIyH,EAAWC,EACXzL,EAAK+D,EAAGC,OACZ,KAAOhE,EAAG0L,aACF1L,EAAG2L,QAAQC,MAAM,cACjBH,EAAUzL,EACHA,EAAG2L,QAAQC,MAAM,0BACxBJ,GAAY,IAEZA,IAAaC,IAGjBzL,EAAKA,EAAG0L,WAgBZ,GAdID,IACwB,mBAApBA,EAAQE,QACsC,SAA1CF,EAAQI,aAAa,mBAChBzM,EAAI0M,UAAUL,EAAS,qBACxBA,EAAU,OAGS,iBAApBA,EAAQE,UACfF,EAAU,OAGbA,GACDnI,KAAKC,QAAQ,YAAYgI,OAEH,SAAtBxH,EAAGC,OAAO2H,QAAoB,CAC9B,MAAMzI,EAAM7B,KAAK0K,mBACb7I,GACAA,EAAI8I,QAGZxM,EAAMyM,YAAY,SAAUlI,IAEhCnD,SAASmD,GACL,MAAMb,EAAM7B,KAAK0K,mBAEjB,OADA1K,KAAK6K,QAAQnI,EAAIb,IACbA,GACOA,EAAIiJ,YAAYpI,EAAI,SAInCnD,WAAWmD,GACP,MAAMb,EAAM7B,KAAK0K,mBACXK,EAAU,MACZ,MAAMC,EAAchL,KAAKiL,UAAUvI,EAAIb,GAIvC,OAHIA,IAAQmJ,GACRnJ,EAAIiJ,YAAYpI,EAAI,WAEjBsI,GALK,GAUhB,OAncR,SAAsBtI,EAAIb,GACtB,MACMqJ,GACF,IACA,KAEJ,IAAIC,EAA0B,UALpBzI,EAAG0I,YAAc1I,EAAGC,QAKZ2H,QAYlB,OAXI5H,EAAG2I,UAAYnN,EAASoN,WAAcvN,EAAIkM,eAAevH,GAElDA,EAAG2I,UAAYnN,EAASqN,KAAOxN,EAAIkM,eAAevH,GACzDyI,GAAY,GAEwB,IAAhCD,EAAOnD,QAAQrF,EAAG2I,WAClBF,GAAY,GALhBA,GAAY,KAUZA,GAAetJ,GAAQA,EAAI2J,YAAYC,aA8anCC,CAAahJ,EAAIb,IAAQkJ,IACzBrI,EAAGE,kBAEA,EAEXrD,YAAYmD,GAIR,MAAMb,EAAM7B,KAAK0K,mBACjB,OAAI7I,GACOA,EAAIiJ,YAAYpI,EAAI,YAInCnD,gBAAgBmD,GACZ,OAAIlE,EAAOmN,UAAU,mBACVpN,EAAQ+D,EAAE,uBAEd,KAEX/C,SAASgD,EAASqJ,EAAKC,EAAYC,EAAQC,GAYvC,MAXyB,iBAAdA,IACPA,EAAY,MAEhBA,EAAYA,IACRvM,KAAM,oBACNwM,SAAUJ,EACVK,WAAYJ,EAAa,IAAMC,EAC/BvJ,QAASA,GAEb3C,QAAQmK,KAAK,oBAAqBmC,WAClCjK,KAAK6C,MAAMvG,EAAQ+D,EAAE,4BAA6B/D,EAAQ+D,EAAE,iCAAkC/D,EAAQ+D,EAAE,iBAAkByJ,GAAW,IAC9H,EAEXxM,oBACI,OAAO,KAEXA,WACI,OAAO,KAEXA,YACI,SAEJA,WAAWmJ,EAAGyD,GACV,OAAOnM,KAAKE,UAAU2F,IAAI6C,EAAGyD,GAEjC5M,iBACI,OACI6M,IAAK,EACLC,KAAM,EACNC,MAAO/K,SAASE,KAAK8K,YACrBC,OAAQjL,SAASE,KAAKgL,cAG9BlN,oBACI,MAAMmN,EAAW1M,KAAKC,SAAS0M,OAAO,SAAUC,EAAO/K,GACnD,OAAe,OAARA,EAAe+K,EAAQA,EAAQ,GACvC,GACH,OACIC,EAAG,GAAKH,EACRI,EAAG,GAAKJ,GAGhBnN,WAAWmJ,GACP,OAAO1I,KAAKE,UAAU0F,IAAI8C,GAE9BnJ,cACI,OAAOS,KAAKE,UAAU0F,MAE1BrG,aACI,OAAOS,KAAKC,SAAS8M,OAAOtI,KAAOA,GAEvClF,mBACI,OAAOS,KAAKG,YAEhBZ,iBAAiBkF,GACbzE,KAAKG,YAAcsE,GAAK,KAE5BlF,gBACI,OAAOS,KAAKI,SAEhBb,cAAckF,GACVzE,KAAKI,SAAWqE,GAAK,KAEzBlF,iBACI,OAAOS,KAAKK","file":"../../core/window-manager.js","sourcesContent":["define([\n    '../utils/dom',\n //   '../gui/menu',\n    '../utils/events',\n    '../utils/misc',\n    '../utils/keycodes',\n    './theme',\n    './process',\n//    './window',\n//    './dialog',\n    './connection',\n    './settings-manager',\n//    '../gui/notification',\n    './locales',\n    './config',\n    '../helpers/window-behaviour'\n], function (DOM, Events, Utils, Keycodes, Theme, Process,   Connection, SettingsManager,  Locales, Config, WindowBehaviour) {\n    'use strict';\n    function checkForbiddenKeyCombo(ev) {\n        return false;\n    }\n    function checkPrevent(ev, win) {\n        const d = ev.srcElement || ev.target;\n        const accept = [\n            122,\n            123\n        ];\n        let doPrevent = d.tagName === 'BODY' ? true : false;\n        if (ev.keyCode === Keycodes.BACKSPACE && !DOM.$isFormElement(ev)) {\n            doPrevent = true;\n        } else if (ev.keyCode === Keycodes.TAB && DOM.$isFormElement(ev)) {\n            doPrevent = true;\n        } else {\n            if (accept.indexOf(ev.keyCode) !== -1) {\n                doPrevent = false;\n            } else if (checkForbiddenKeyCombo(ev)) {\n                doPrevent = true;\n            }\n        }\n        if (doPrevent && (!win || !win._properties.key_capture)) {\n            return true;\n        }\n        return false;\n    }\n    function triggerFullscreen(el, state) {\n        function _request() {\n            if (el.requestFullscreen) {\n                el.requestFullscreen();\n            } else if (el.mozRequestFullScreen) {\n                el.mozRequestFullScreen();\n            } else if (el.webkitRequestFullScreen) {\n                el.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);\n            }\n        }\n        function _restore() {\n            if (el.webkitCancelFullScreen) {\n                el.webkitCancelFullScreen();\n            } else if (el.mozCancelFullScreen) {\n                el.mozCancelFullScreen();\n            } else if (el.exitFullscreen) {\n                el.exitFullscreen();\n            }\n        }\n        if (el) {\n            if (state) {\n                _request();\n            } else {\n                _restore();\n            }\n        }\n    }\n    let _instance;\n    return class WindowManager extends Process {\n        static get instance() {\n            return _instance;\n        }\n        constructor(name, args, metadata, settings) {\n            console.group('WindowManager::constructor()');\n            console.debug('Name', name);\n            console.debug('Arguments', args);\n            super(name, args, metadata);\n            _instance = this;\n            this._windows = [];\n            this._settings = SettingsManager.instance(name, settings);\n            this._currentWin = null;\n            this._lastWin = null;\n            this._mouselock = true;\n            this._stylesheet = null;\n            this._sessionLoaded = false;\n            this._fullyLoaded = false;\n            this._isResponsive = false;\n            this._responsiveRes = 800;\n            this._dcTimeout = null;\n            this._resizeTimeout = null;\n            this._$fullscreen = null;\n            this._$lastDomInput = null;\n            this.__name = name || 'WindowManager';\n            this.__path = metadata.path;\n            this.__iter = metadata.iter;\n\n            console.groupEnd();\n        }\n        destroy() {\n            console.debug('WindowManager::destroy()');\n            this.destroyStylesheet();\n            Events.$unbind(document, 'pointerout:windowmanager');\n            Events.$unbind(document, 'pointerenter:windowmanager');\n            Events.$unbind(window, 'orientationchange:windowmanager');\n            Events.$unbind(window, 'hashchange:windowmanager');\n            Events.$unbind(window, 'resize:windowmanager');\n            Events.$unbind(window, 'scroll:windowmanager');\n            Events.$unbind(window, 'fullscreenchange:windowmanager');\n            Events.$unbind(window, 'mozfullscreenchange:windowmanager');\n            Events.$unbind(window, 'webkitfullscreenchange:windowmanager');\n            Events.$unbind(window, 'msfullscreenchange:windowmanager');\n            Events.$unbind(document.body, 'contextmenu:windowmanager');\n            Events.$unbind(document.body, 'pointerdown:windowmanager,touchstart:windowmanager');\n            Events.$unbind(document.body, 'click:windowmanager');\n            Events.$unbind(document, 'keyup:windowmanager');\n            Events.$unbind(document, 'keydown:windowmanager');\n            Events.$unbind(document, 'keypress:windowmanager');\n            window.onerror = null;\n            window.onbeforeunload = null;\n            this._windows.forEach((win, i) => {\n                if (win) {\n                    win.destroy(true);\n                    this._windows[i] = null;\n                }\n            });\n            this._windows = [];\n            this._currentWin = null;\n            this._lastWin = null;\n            this._$fullscreen = null;\n            _instance = null;\n\n            this.Notification = OSjs.require(\"gui/notification\");// added by lwf\n            return super.destroy();\n        }\n        init(metadata, settings) {\n            var Notification = this.Notification;\n\n            Connection.instance.subscribe('online', () => {\n                Notification.create({\n                    title: Locales._('LBL_INFO'),\n                    message: Locales._('CONNECTION_RESTORED')\n                });\n            });\n            Connection.instance.subscribe('offline', reconnecting => {\n                Notification.create({\n                    title: Locales._('LBL_WARNING'),\n                    message: Locales._(reconnecting ? 'CONNECTION_RESTORE_FAILED' : 'CONNECTION_LOST')\n                });\n            });\n\n            console.debug('WindowManager::init()');\n            document.body.addEventListener('touchend', ev => {\n                if (ev.target === document.body) {\n                    ev.preventDefault();\n                }\n            });\n            Events.$bind(document, 'pointerout:windowmanager', ev => this._onMouseLeave(ev));\n            Events.$bind(document, 'pointerenter:windowmanager', ev => this._onMouseLeave(ev));\n            Events.$bind(window, 'orientationchange:windowmanager', ev => this._onOrientationChange(ev));\n            Events.$bind(window, 'hashchange:windowmanager', ev => this._onHashChange(ev));\n            Events.$bind(window, 'resize:windowmanager', ev => this._onResize(ev));\n            Events.$bind(window, 'scroll:windowmanager', ev => this._onScroll(ev));\n            Events.$bind(window, 'fullscreenchange:windowmanager', ev => this._onFullscreen(ev));\n            Events.$bind(window, 'mozfullscreenchange:windowmanager', ev => this._onFullscreen(ev));\n            Events.$bind(window, 'webkitfullscreenchange:windowmanager', ev => this._onFullscreen(ev));\n            Events.$bind(window, 'msfullscreenchange:windowmanager', ev => this._onFullscreen(ev));\n            Events.$bind(document.body, 'contextmenu:windowmanager', ev => this._onContextMenu(ev));\n            Events.$bind(document.body, 'pointerdown:windowmanager,touchstart:windowmanager', ev => this._onMouseDown(ev));\n            Events.$bind(document.body, 'click:windowmanager', ev => this._onClick(ev));\n            Events.$bind(document, 'keyup:windowmanager', ev => this._onKeyUp(ev));\n            Events.$bind(document, 'keydown:windowmanager', ev => this._onKeyDown(ev));\n            Events.$bind(document, 'keypress:windowmanager', ev => this._onKeyPress(ev));\n            window.onerror = this._onError.bind(this);\n            window.onbeforeunload = this._onBeforeUnload(this);\n            const queries = this.getDefaultSetting('mediaQueries') || {};\n            let maxWidth = 0;\n            Object.keys(queries).forEach(q => {\n                maxWidth = Math.max(maxWidth, queries[q]);\n            });\n            this._responsiveRes = maxWidth || 800;\n            this._onOrientationChange();\n            this.resize();\n        }\n        setup(cb) {\n            cb();\n        }\n        getWindow(name) {\n            return this.getWindows().find(w => {\n                return w.__name === name;\n            });\n        }\n        addWindow(w, focus) {\n            //if (!(w instanceof Window)) { // modified by lwf\n            //    console.warn('WindowManager::addWindow()', 'Got', w);\n            //    throw new TypeError('given argument was not instance of Core.Window');\n            //}\n            console.debug('WindowManager::addWindow()');\n            try {\n                w.init(this, w._app);\n            } catch (e) {\n                console.error('WindowManager::addWindow()', '=>', 'Window::init()', e, e.stack);\n            }\n            WindowBehaviour.createWindowBehaviour(w, this);\n            this._windows.push(w);\n            w._inited();\n            //if (focus === true || w instanceof DialogWindow) {\n            if (focus === true) { // modified by lwf\n                w._focus();\n            }\n            return w;\n        }\n        removeWindow(w) {\n            //if (!(w instanceof Window)) { // modified by lwf\n            //    console.warn('WindowManager::removeWindow()', 'Got', w);\n            //    throw new TypeError('given argument was not instance of Core.Window');\n            //}\n            const foundIndex = this._windows.findIndex(win => win && win._wid === w._wid);\n            console.debug('WindowManager::removeWindow()', w._wid, foundIndex);\n            if (foundIndex !== -1) {\n                this._windows[foundIndex] = null;\n                return true;\n            }\n            return false;\n        }\n        applySettings(settings, force, save, triggerWatch) {\n            settings = settings || {};\n            console.debug('WindowManager::applySettings()', 'forced?', force);\n            const result = force ? settings : Utils.mergeObject(this._settings.get(), settings);\n            this._settings.set(null, result, save, triggerWatch);\n            return true;\n        }\n        createStylesheet(styles, rawStyles) {\n            this.destroyStylesheet();\n            let innerHTML = [];\n            Object.keys(styles).forEach(key => {\n                let rules = [];\n                Object.keys(styles[key]).forEach(r => {\n                    rules.push(Utils.format('    {0}: {1};', r, styles[key][r]));\n                });\n                rules = rules.join('\\n');\n                innerHTML.push(Utils.format('{0} {\\n{1}\\n}', key, rules));\n            });\n            innerHTML = innerHTML.join('\\n');\n            if (rawStyles) {\n                innerHTML += '\\n' + rawStyles;\n            }\n            const style = document.createElement('style');\n            style.type = 'text/css';\n            style.id = 'WMGeneratedStyles';\n            style.innerHTML = innerHTML;\n            document.getElementsByTagName('head')[0].appendChild(style);\n            this._stylesheet = style;\n        }\n        destroyStylesheet() {\n            if (this._stylesheet) {\n                DOM.$remove(this._stylesheet);\n            }\n            this._stylesheet = null;\n        }\n        resize(ev, rect) {\n            this._isResponsive = window.innerWidth <= 1024;\n            this.onResize(ev);\n        }\n        eventWindow(ev, win) {\n            return false;\n        }\n        showSettings() {\n        }\n        toggleFullscreen(el, t) {\n            if (typeof t === 'boolean') {\n                triggerFullscreen(el, t);\n            } else {\n                const prev = this._$fullscreen;\n                if (prev && prev !== el) {\n                    triggerFullscreen(prev, false);\n                }\n                triggerFullscreen(el, prev !== el);\n            }\n            this._$fullscreen = el;\n        }\n        onKeyDown(ev, win) {\n        }\n        onOrientationChange(ev, orientation) {\n            console.info('ORIENTATION CHANGED', ev, orientation);\n            document.body.setAttribute('data-orientation', orientation);\n            this._onDisplayChange();\n        }\n        onResize(ev) {\n            this._onDisplayChange();\n            this._emit('resized');\n        }\n        onSessionLoaded() {\n            if (this._sessionLoaded) {\n                return false;\n            }\n            this._sessionLoaded = true;\n            return true;\n        }\n        _onMouseEnter(ev) {\n            this._mouselock = true;\n        }\n        _onMouseLeave(ev) {\n            const from = ev.relatedTarget || ev.toElement;\n            if (!from || from.nodeName === 'HTML') {\n                this._mouselock = false;\n            } else {\n                this._mouselock = true;\n            }\n        }\n        _onDisplayChange() {\n            this._dcTimeout = clearTimeout(this._dcTimeout);\n            this._dcTimeout = setTimeout(() => {\n                if (!this._windows) {\n                    return;\n                }\n                this.getWindows().forEach(w => {\n                    w._onResize();\n                    w._emit('resize');\n                });\n            }, 100);\n            document.body.setAttribute('data-responsive', String(this._isResponsive));\n        }\n        _onOrientationChange(ev) {\n            let orientation = 'landscape';\n            if (window.screen && window.screen.orientation) {\n                if (window.screen.orientation.type.indexOf('portrait') !== -1) {\n                    orientation = 'portrait';\n                }\n            }\n            this.onOrientationChange(ev, orientation);\n        }\n        _onHashChange(ev) {\n            const hash = window.location.hash.substr(1);\n            const spl = hash.split(/^([\\w\\.\\-_]+)\\:(.*)/);\n            function getArgs(q) {\n                const args = {};\n                q.split('&').forEach(function (a) {\n                    const b = a.split('=');\n                    const k = decodeURIComponent(b[0]);\n                    args[k] = decodeURIComponent(b[1] || '');\n                });\n                return args;\n            }\n            if (spl.length === 4) {\n                const root = spl[1];\n                const args = getArgs(spl[2]);\n                if (root) {\n                    Process.getProcess(root).forEach(function (p) {\n                        p._onMessage('hashchange', {\n                            hash: hash,\n                            args: args\n                        }, { source: null });\n                    });\n                }\n            }\n        }\n        _onResize(ev) {\n            clearTimeout(this._resizeTimeout);\n            this._resizeTimeout = setTimeout(() => {\n                const space = this.getWindowSpace();\n                this.resize(ev, space);\n            }, 100);\n        }\n        _onScroll(ev) {\n            if (ev.target === document || ev.target === document.body) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                return false;\n            }\n            document.body.scrollTop = 0;\n            document.body.scrollLeft = 0;\n            return true;\n        }\n        _onFullscreen(ev) {\n            try {\n                const notif = this.Notification.getIcon('_FullscreenNotification'); // modified by lwf\n                if (notif) {\n                    if (!document.fullScreen && !document.mozFullScreen && !document.webkitIsFullScreen && !document.msFullscreenElement) {\n                        notif.opts._isFullscreen = false;\n                        notif.setImage(Theme.getIcon('actions/view-fullscreen.png', '16x16'));\n                    } else {\n                        notif.opts._isFullscreen = true;\n                        notif.setImage(Theme.getIcon('actions/view-restore.png', '16x16'));\n                    }\n                }\n            } catch (e) {\n                console.warn(e.stack, e);\n            }\n        }\n        _onContextMenu(ev) {\n            this.onContextMenu(ev);\n            if (DOM.$isFormElement(ev)) {\n                OSjs.require(\"gui/menu\").blur();\n            } else {\n                ev.preventDefault();\n                return false;\n            }\n            return true;\n        }\n        _onMouseDown(ev) {\n            if (DOM.$isFormElement(ev)) {\n                this._$lastDomInput = ev.target;\n            } else {\n                if (this._$lastDomInput) {\n                    try {\n                        this._$lastDomInput.blur();\n                    } catch (e) {\n                    }\n                    this._$lastDomInput = null;\n                }\n            }\n        }\n        _onClick(ev) {\n            let hitWindow, hitMenu;\n            let el = ev.target;\n            while (el.parentNode) {\n                if (el.tagName.match(/^GUI\\-MENU/)) {\n                    hitMenu = el;\n                } else if (el.tagName.match(/^APPLICATION\\-WINDOW/)) {\n                    hitWindow = true;\n                }\n                if (hitWindow || hitMenu) {\n                    break;\n                }\n                el = el.parentNode;\n            }\n            if (hitMenu) {\n                if (hitMenu.tagName === 'GUI-MENU-ENTRY') {\n                    if (hitMenu.getAttribute('data-disabled') !== 'true') {\n                        if (!DOM.$hasClass(hitMenu, 'gui-menu-expand')) {\n                            hitMenu = null;\n                        }\n                    }\n                } else if (hitMenu.tagName === 'GUI-MENU-BAR') {\n                    hitMenu = null;\n                }\n            }\n            if (!hitMenu) {\n                OSjs.require(\"gui/menu\").blur();\n            }\n            if (ev.target.tagName === 'BODY') {\n                const win = this.getCurrentWindow();\n                if (win) {\n                    win._blur();\n                }\n            }\n            Theme.themeAction('event', [ev]);\n        }\n        _onKeyUp(ev) {\n            const win = this.getCurrentWindow();\n            this.onKeyUp(ev, win);\n            if (win) {\n                return win._onKeyEvent(ev, 'keyup');\n            }\n            return true;\n        }\n        _onKeyDown(ev) {\n            const win = this.getCurrentWindow();\n            const reacted = (() => {\n                const combination = this.onKeyDown(ev, win);\n                if (win && !combination) {\n                    win._onKeyEvent(ev, 'keydown');\n                }\n                return combination;\n            })();\n            if (checkPrevent(ev, win) || reacted) {\n                ev.preventDefault();\n            }\n            return true;\n        }\n        _onKeyPress(ev) {\n            if (checkForbiddenKeyCombo(ev)) {\n                ev.preventDefault();\n            }\n            const win = this.getCurrentWindow();\n            if (win) {\n                return win._onKeyEvent(ev, 'keypress');\n            }\n            return true;\n        }\n        _onBeforeUnload(ev) {\n            if (Config.getConfig('ShowQuitWarning')) {\n                return Locales._('MSG_SESSION_WARNING');\n            }\n            return null;\n        }\n        _onError(message, url, linenumber, column, exception) {\n            if (typeof exception === 'string') {\n                exception = null;\n            }\n            exception = exception || {\n                name: 'window::onerror()',\n                fileName: url,\n                lineNumber: linenumber + ':' + column,\n                message: message\n            };\n            console.warn('window::onerror()', arguments);\n            OSjs.error(Locales._('ERR_JAVASCRIPT_EXCEPTION'), Locales._('ERR_JAVACSRIPT_EXCEPTION_DESC'), Locales._('BUGREPORT_MSG'), exception, true);\n            return false;\n        }\n        getDefaultSetting() {\n            return null;\n        }\n        getPanel() {\n            return null;\n        }\n        getPanels() {\n            return [];\n        }\n        setSetting(k, v) {\n            return this._settings.set(k, v);\n        }\n        getWindowSpace() {\n            return {\n                top: 0,\n                left: 0,\n                width: document.body.offsetWidth,\n                height: document.body.offsetHeight\n            };\n        }\n        getWindowPosition() {\n            const winCount = this._windows.reduce(function (count, win) {\n                return win === null ? count : count + 1;\n            }, 0);\n            return {\n                x: 10 * winCount,\n                y: 10 * winCount\n            };\n        }\n        getSetting(k) {\n            return this._settings.get(k);\n        }\n        getSettings() {\n            return this._settings.get();\n        }\n        getWindows() {\n            return this._windows.filter(w => !!w);\n        }\n        getCurrentWindow() {\n            return this._currentWin;\n        }\n        setCurrentWindow(w) {\n            this._currentWin = w || null;\n        }\n        getLastWindow() {\n            return this._lastWin;\n        }\n        setLastWindow(w) {\n            this._lastWin = w || null;\n        }\n        getMouseLocked() {\n            return this._mouselock;\n        }\n    };\n});"]}