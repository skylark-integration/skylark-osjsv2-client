{"version":3,"sources":["core/application.js"],"names":["define","Process","SettingsManager","WindowManager","Window","[object Object]","name","args","metadata","settings","options","console","group","arguments","Object","assign","closeWithMain","closeOnEmpty","super","this","__inited","__mainwindow","__windows","__settings","__destroying","__options","instance","e","warn","stack","groupEnd","wm","focusLastWindow","last","forEach","win","i","addWindow","_focus","debug","__pname","set","__evHandler","emit","__destroyed","w","destroy","__scheme","result","msg","obj","_removeWindow","length","info","_name","_onMessage","cb","setmain","TypeError","push","_properties","start_focused","setTimeout","found","findIndex","_wid","splice","value","key","every","_getWindow","tag","k","get","__args","wins","data","windows","allow_session","dimension","_dimension","position","_position","state","_state","v","save"],"mappings":"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","file":"../../core/application.js","sourcesContent":["define([\n    './process',\n    './settings-manager',\n    './window-manager',\n    './window'\n], function (Process, SettingsManager, WindowManager, Window) {\n    'use strict';\n    return class Application extends Process {\n        constructor(name, args, metadata, settings, options) {\n            console.group('Application::constructor()', arguments);\n            options = Object.assign({\n                closeWithMain: true,\n                closeOnEmpty: true\n            }, options || {});\n            super(...arguments);\n            this.__inited = false;\n            this.__mainwindow = null;\n            this.__windows = [];\n            this.__settings = null;\n            this.__destroying = false;\n            this.__options = options;\n            try {\n                this.__settings = SettingsManager.instance(name, settings || {});\n            } catch (e) {\n                console.warn('Application::construct()', 'An error occured while loading application settings', e);\n                console.warn(e.stack);\n                this.__settings = SettingsManager.instance(name, {});\n            }\n            console.groupEnd();\n        }\n        init(settings, metadata) {\n            const wm = WindowManager.instance;\n            const focusLastWindow = () => {\n                let last;\n                if (wm) {\n                    this.__windows.forEach((win, i) => {\n                        if (win) {\n                            wm.addWindow(win);\n                            last = win;\n                        }\n                    });\n                }\n                if (last) {\n                    last._focus();\n                }\n            };\n            if (!this.__inited) {\n                console.debug('Application::init()', this.__pname);\n                if (this.__settings) {\n                    this.__settings.set(null, settings);\n                }\n                this.__inited = true;\n                this.__evHandler.emit('init', [\n                    settings,\n                    metadata\n                ]);\n                focusLastWindow();\n            }\n        }\n        destroy() {\n            if (this.__destroying || this.__destroyed) {\n                return true;\n            }\n            this.__destroying = true;\n            console.group('Application::destroy()', this.__pname);\n            this.__windows.forEach(w => w && w.destroy());\n            if (this.__scheme && typeof this.__scheme.destroy === 'function') {\n                this.__scheme.destroy();\n            }\n            this.__mainwindow = null;\n            this.__settings = {};\n            this.__windows = [];\n            this.__scheme = null;\n            const result = super.destroy(...arguments);\n            console.groupEnd();\n            return result;\n        }\n        _onMessage(msg, obj, args) {\n            if (this.__destroying || this.__destroyed) {\n                return false;\n            }\n            if (msg === 'destroyWindow') {\n                if (!this.__destroying) {\n                    this._removeWindow(obj);\n                    if (this.__options.closeOnEmpty && !this.__windows.length) {\n                        console.info('All windows removed, destroying application');\n                        this.destroy();\n                    } else if (obj._name === this.__mainwindow) {\n                        if (this.__options.closeWithMain) {\n                            console.info('Main window was closed, destroying application');\n                            this.destroy();\n                        }\n                    }\n                }\n            } else if (msg === 'attention') {\n                if (this.__windows.length && this.__windows[0]) {\n                    this.__windows[0]._focus();\n                }\n            }\n            return super._onMessage(...arguments);\n        }\n        _addWindow(w, cb, setmain) {\n            if (!(w instanceof Window)) {\n                throw new TypeError('Application::_addWindow() expects Core.Window');\n            }\n            console.debug('Application::_addWindow()');\n            this.__windows.push(w);\n            if (setmain || this.__windows.length === 1) {\n                this.__mainwindow = w._name;\n            }\n            const wm = WindowManager.instance;\n            if (this.__inited) {\n                if (wm) {\n                    wm.addWindow(w);\n                }\n                if (w._properties.start_focused) {\n                    setTimeout(() => {\n                        w._focus();\n                    }, 5);\n                }\n            }\n            (cb || function () {\n            })(w, wm);\n            return w;\n        }\n        _removeWindow(w) {\n            if (!(w instanceof Window)) {\n                throw new TypeError('Application::_removeWindow() expects Core.Window');\n            }\n            const found = this.__windows.findIndex(win => win && win._wid === w._wid);\n            if (found !== -1) {\n                const win = this.__windows[found];\n                console.debug('Application::_removeWindow()', win._wid);\n                try {\n                    win.destroy();\n                } catch (e) {\n                    console.warn(e);\n                }\n                this.__windows.splice(found, 1);\n            }\n            return found !== -1;\n        }\n        _getWindow(value, key) {\n            key = key || 'name';\n            if (value === null) {\n                value = this.__mainwindow;\n            }\n            let result = key === 'tag' ? [] : null;\n            this.__windows.every((win, i) => {\n                if (win) {\n                    if (win['_' + key] === value) {\n                        if (key === 'tag') {\n                            result.push(win);\n                        } else {\n                            result = win;\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            });\n            return result;\n        }\n        _getWindowByName(name) {\n            return this._getWindow(name);\n        }\n        _getWindowsByTag(tag) {\n            return this._getWindow(tag, 'tag');\n        }\n        _getWindows() {\n            return this.__windows;\n        }\n        _getMainWindow() {\n            return this._getWindow(this.__mainwindow, 'name');\n        }\n        _getSetting(k) {\n            return this.__settings ? this.__settings.get(k) : null;\n        }\n        _getSessionData() {\n            const args = this.__args;\n            const wins = this.__windows;\n            const data = {\n                name: this.__pname,\n                args: args,\n                windows: []\n            };\n            wins.forEach((win, i) => {\n                if (win && win._properties.allow_session) {\n                    data.windows.push({\n                        name: win._name,\n                        dimension: win._dimension,\n                        position: win._position,\n                        state: win._state\n                    });\n                }\n            });\n            return data;\n        }\n        _setSetting(k, v, save) {\n            if (typeof save === 'undefined') {\n                save = true;\n            }\n            if (arguments.length === 4 && typeof arguments[3] === 'function') {\n                save = arguments[3];\n            }\n            if (this.__settings) {\n                this.__settings.set(k, v, save);\n            }\n        }\n    };\n});"]}