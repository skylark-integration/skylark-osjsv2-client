{"version":3,"sources":["core/search-engine.js"],"names":["define","PackageManager","SettingsManager","FileMetadata","Theme","VFS","ApplicationModule","query","packages","getPackages","Object","keys","map","pn","p","obj","forEach","k","this","value","title","name","description","icon","getFileIcon","className","launch","application","args","fields","search","q","settings","applications","results","list","result","found","s","qry","String","toLowerCase","indexOf","push","limit","length","dlimit","splice","Promise","resolve","reindex","destroy","FilesystemModule","cb","files","paths","reject","each","e","n","find","recursive","then","concat","iter","filename","path","file","catch","error","console","warn","[object Object]","inited","modules","debug","get","m","errors","assign","module","next","res","err","Error","toString","opts","save"],"mappings":"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","file":"../../core/search-engine.js","sourcesContent":["define([\n    './package-manager',\n    './settings-manager',\n    '../vfs/file',\n    './theme',\n    '../vfs/fs'\n], function (PackageManager, SettingsManager, FileMetadata, Theme, VFS) {\n    'use strict';\n    function search(list, query) {\n        const result = [];\n        list.forEach(obj => {\n            let found = false;\n            obj.fields.forEach(s => {\n                if (found) {\n                    return;\n                }\n                const qry = String(query).toLowerCase();\n                const str = String(s).toLowerCase();\n                if (str.indexOf(qry) !== -1) {\n                    result.push(obj.value);\n                    found = true;\n                }\n            });\n        });\n        return result;\n    }\n    function SearchObject(obj) {\n        Object.keys(obj).forEach(k => {\n            this[k] = obj[k];\n        });\n    }\n    const ApplicationModule = function () {\n        function query() {\n            const packages = PackageManager.getPackages(); \n            return Object.keys(packages).map(pn => {\n                const p = packages[pn];\n                return new SearchObject({\n                    value: {\n                        title: p.name,\n                        description: p.description,\n                        icon: Theme.getFileIcon(new FileMetadata('applications:///' + p.className, 'application'), '16x16'),\n                        launch: {\n                            application: pn,\n                            args: {}\n                        }\n                    },\n                    fields: [\n                        p.className,\n                        p.name,\n                        p.description\n                    ]\n                });\n            });\n        }\n        return {\n            search: function (q, args, settings) {\n                if (settings.applications) {\n                    let results = search(query(), q);\n                    if (args.limit && results.length > args.dlimit) {\n                        results = results.splice(0, args.dlimit);\n                    }\n                    return Promise.resolve(results);\n                }\n                return Promise.resolve([]);\n            },\n            reindex: function (args) {\n                return Promise.resolve(true);\n            },\n            destroy: function () {\n            }\n        };\n    }();\n    const FilesystemModule = {\n        search: function (q, args, settings, cb) {\n            if (!settings.files || !settings.paths) {\n                return Promise.resolve([]);\n            }\n            let found = [];\n            const append = result => {\n                if (result) {\n                    found = found.concat(result.map(iter => {\n                        return {\n                            title: iter.filename,\n                            description: iter.path,\n                            icon: Theme.getFileIcon(new FileMetadata(iter)),\n                            launch: {\n                                application: '',\n                                args: '',\n                                file: iter\n                            }\n                        };\n                    }));\n                }\n            };\n            return new Promise((resolve, reject) => {\n                Promise.each(settings.paths, e => {\n                    return new Promise(n => {\n                        VFS.find(e, {\n                            query: q,\n                            limit: args.limit ? args.dlimit : 0,\n                            recursive: args.recursive\n                        }).then(result => {\n                            return n(append(result));\n                        }).catch(error => {\n                            console.warn(error);\n                            n();\n                        });\n                    });\n                }).then(() => {\n                    return resolve(found);\n                }).catch(reject);\n            });\n        },\n        reindex: function (args) {\n            return Promise.resolve();\n        },\n        destroy: function () {\n        }\n    };\n    class SearchEngine {\n        constructor() {\n            this.settings = {};\n            this.inited = false;\n            this.modules = [\n                ApplicationModule,\n                FilesystemModule\n            ];\n        }\n        init() {\n            console.debug('SearchEngine::init()');\n            if (!this.inited) {\n                this.settings = SettingsManager.get('SearchEngine') || {};\n                this.inited = true;\n            }\n            return Promise.resolve();\n        }\n        destroy() {\n            console.debug('SearchEngine::destroy()');\n            this.modules.forEach(m => {\n                m.destroy();\n            });\n            this.modules = [];\n            this.settings = {};\n            this.inited = false;\n        }\n        search(q, args) {\n            let result = [];\n            let errors = [];\n            args = Object.assign({}, {\n                recursive: false,\n                limit: 0,\n                dlimit: 0\n            }, args);\n            if (args.limit) {\n                args.dlimit = args.limit;\n            }\n            return new Promise((resolve, reject) => {\n                Promise.each(this.modules, module => {\n                    return new Promise((next, reject) => {\n                        console.debug('SearchEngine::search()', '=>', module);\n                        if (!args.limit || args.dlimit > 0) {\n                            module.search(q, args, this.settings).then(res => {\n                                args.dlimit -= res.length;\n                                result = result.concat(res);\n                                next();\n                            }).catch(err => {\n                                console.warn(err);\n                                errors.push(err instanceof Error ? err.toString() : err);\n                                next();\n                            });\n                        } else {\n                            next();\n                        }\n                    });\n                }).then(() => resolve(result)).catch(reject);\n            });\n        }\n        reindex(args) {\n            const errors = [];\n            return Promise.each(this.modules, module => {\n                return new Promise(next => {\n                    console.debug('SearchEngine::reindex()', '=>', module);\n                    module.reindex(args).then(next).catch(err => {\n                        if (err) {\n                            errors.push(err);\n                        }\n                        next();\n                    });\n                });\n            });\n        }\n        configure(opts, save) {\n        }\n    }\n    return new SearchEngine();\n});"]}