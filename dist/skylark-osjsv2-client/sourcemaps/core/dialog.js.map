{"version":3,"sources":["core/dialog.js"],"names":["define","a","Keycodes","Window","Application","WindowManager","GUIScheme","b","dialogsHtml","[object Object]","className","opts","args","callback","TypeError","console","info","super","this","_properties","gravity","allow_resize","allow_minimize","allow_maximize","allow_windowlist","allow_session","_state","ontop","_tag","scheme","buttonClicked","closeCallback","ev","button","result","_destroyed","call","_close","destroy","arguments","root","init","setAttribute","windowName","replace","focusButtons","buttonMap","ButtonOK","ButtonCancel","ButtonYes","ButtonNo","render","node","querySelectorAll","forEach","el","childNodes","length","nodeType","nodeValue","label","$empty","appendChild","document","createTextNode","_","_render","Object","keys","filter","id","_findDOM","btn","_find","on","onClose","indexOf","focus","$addClass","_onKeyEvent","keyCode","ESC","msg","$escape","tmp","createElement","innerHTML","frag","createDocumentFragment","i","cloneNode","options","parentObj","parentIsWindow","parentIsProcess","cb","warn","__destroyed","modal","_toggleDisabled","apply","parent","win","OSjs","Dialogs","_on","_focus","_addChild","_addWindow","instance","addWindow"],"mappings":"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","file":"../../core/dialog.js","sourcesContent":["define([\n    '../utils/dom',\n    '../utils/keycodes',\n    './window',\n    './application',\n    './window-manager',\n    '../gui/scheme',\n    './locales',\n    \"../dialogs.html\"\n], function (a, Keycodes, Window, Application, WindowManager, GUIScheme, b,dialogsHtml) {\n    'use strict';\n    return class DialogWindow extends Window {\n        constructor(className, opts, args, callback) {\n            opts = opts || {};\n            args = args || {};\n            callback = callback || function () {\n            };\n            if (typeof callback !== 'function') {\n                throw new TypeError('DialogWindow expects a callback Function, gave: ' + typeof callback);\n            }\n            console.info('DialogWindow::construct()', className, opts, args);\n            super(className, opts);\n            this._properties.gravity = 'center';\n            this._properties.allow_resize = false;\n            this._properties.allow_minimize = false;\n            this._properties.allow_maximize = false;\n            this._properties.allow_windowlist = false;\n            this._properties.allow_session = false;\n            this._state.ontop = true;\n            this._tag = 'DialogWindow';\n            if (args.scheme && args.scheme instanceof GUIScheme) {\n                this.scheme = args.scheme;\n                delete args.scheme;\n            }\n            this.args = args;\n            this.className = className;\n            this.buttonClicked = false;\n            this.closeCallback = (ev, button, result) => {\n                if (this._destroyed) {\n                    return;\n                }\n                this.buttonClicked = true;\n                callback.call(this, ev, button, result);\n                this._close();\n            };\n        }\n        destroy() {\n            if (this.scheme) {\n                this.scheme = this.scheme.destroy();\n            }\n            return super.destroy(...arguments);\n        }\n        init() {\n            const root = super.init(...arguments);\n            root.setAttribute('role', 'dialog');\n            const windowName = this.className.replace(/Dialog$/, '');\n            const focusButtons = [\n                'ButtonCancel',\n                'ButtonNo'\n            ];\n            const buttonMap = {\n                ButtonOK: 'ok',\n                ButtonCancel: 'cancel',\n                ButtonYes: 'yes',\n                ButtonNo: 'no'\n            };\n            if (this.scheme) {\n                this.scheme.render(this, windowName, root, 'application-dialog', node => {\n                    node.querySelectorAll('gui-label').forEach(el => {\n                        if (el.childNodes.length && el.childNodes[0].nodeType === 3 && el.childNodes[0].nodeValue) {\n                            const label = el.childNodes[0].nodeValue;\n                            a.$empty(el);\n                            el.appendChild(document.createTextNode(b._(label)));\n                        }\n                    });\n                });\n            } else {\n                //this._render(windowName, require('osjs-scheme-loader!dialogs.html'));\n                this._render(windowName, dialogsHtml);\n            }\n            Object.keys(buttonMap).filter(id => this._findDOM(id)).forEach(id => {\n                const btn = this._find(id);\n                btn.on('click', ev => {\n                    this.onClose(ev, buttonMap[id]);\n                });\n                if (focusButtons.indexOf(id) >= 0) {\n                    btn.focus();\n                }\n            });\n            a.$addClass(root, 'DialogWindow');\n            return root;\n        }\n        onClose(ev, button) {\n            this.closeCallback(ev, button, null);\n        }\n        _close() {\n            if (!this.buttonClicked) {\n                this.onClose(null, 'cancel', null);\n            }\n            return super._close(...arguments);\n        }\n        _onKeyEvent(ev) {\n            super._onKeyEvent(...arguments);\n            if (ev.keyCode === Keycodes.ESC) {\n                this.onClose(ev, 'cancel');\n            }\n        }\n        static parseMessage(msg) {\n            msg = a.$escape(msg || '').replace(/\\*\\*(.*)\\*\\*/g, '<span>$1</span>');\n            let tmp = document.createElement('div');\n            tmp.innerHTML = msg;\n            const frag = document.createDocumentFragment();\n            for (let i = 0; i < tmp.childNodes.length; i++) {\n                frag.appendChild(tmp.childNodes[i].cloneNode(true));\n            }\n            tmp = null;\n            return frag;\n        }\n        static create(className, args, callback, options) {\n            callback = callback || function () {\n            };\n            options = options || {};\n            let parentObj = options;\n            let parentIsWindow = parentObj instanceof Window;\n            let parentIsProcess = parentObj instanceof Application;\n            if (parentObj && !(parentIsWindow && parentIsProcess)) {\n                parentObj = options.parent;\n                parentIsWindow = parentObj instanceof Window;\n                parentIsProcess = parentObj instanceof Application;\n            }\n            function cb() {\n                if (parentObj) {\n                    if (parentIsWindow && parentObj._destroyed) {\n                        console.warn('DialogWindow::create()', 'INGORED EVENT: Window was destroyed');\n                        return;\n                    }\n                    if (parentIsProcess && parentObj.__destroyed) {\n                        console.warn('DialogWindow::create()', 'INGORED EVENT: Process was destroyed');\n                        return;\n                    }\n                }\n                if (options.modal && parentIsWindow) {\n                    parentObj._toggleDisabled(false);\n                }\n                callback.apply(null, arguments);\n            }\n            const win = typeof className === 'string' ? new OSjs.Dialogs[className](args, cb) : className(args, cb);\n            if (!parentObj) {\n                const wm = WindowManager.instance;\n                wm.addWindow(win, true);\n            } else if (parentObj instanceof Window) {\n                win._on('destroy', () => {\n                    if (parentObj) {\n                        parentObj._focus();\n                    }\n                });\n                parentObj._addChild(win, true);\n            } else if (parentObj instanceof Application) {\n                parentObj._addWindow(win);\n            }\n            if (options.modal && parentIsWindow) {\n                parentObj._toggleDisabled(true);\n            }\n            win._focus();\n            return win;\n        }\n    };\n});"]}