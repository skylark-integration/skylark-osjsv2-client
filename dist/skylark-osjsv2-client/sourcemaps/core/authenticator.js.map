{"version":3,"sources":["core/authenticator.js"],"names":["define","a","b","Connection","SettingsManager","PackageManager","_instance","instance","[object Object]","this","userData","id","username","name","groups","loggedIn","isStandalone","createUI","Object","assign","isLoggedIn","data","Promise","resolve","reject","request","then","result","_","catch","error","Error","err","group","userGroups","getUser","Array","indexOf","every","g","login","res","onLogin","userSettings","document","getElementById","style","display","setLocale","curLocale","getConfig","detectedLocale","getUserLocale","console","info","get","CoreWM","e","language","getLocale","init","blacklistedPackages","setBlacklist","_renderUI","_createUI","html","require","tempNode","createElement","innerHTML","childNodes","forEach","n","nn","cloneNode","tagName","body","appendChild","querySelector","container","u","p","s","_restore","removeAttribute","onsubmit","ev","setAttribute","preventDefault","requestLogin","value","password","parentNode","removeChild","alert"],"mappings":"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","file":"../../core/authenticator.js","sourcesContent":["define([\n    './locales',\n    './config',\n    './connection',\n    './settings-manager',\n    './package-manager'\n], function ( a, b, Connection, SettingsManager, PackageManager) {\n    'use strict';\n    let _instance;\n    return class Authenticator {\n        static get instance() {\n            return _instance;\n        }\n        constructor() {\n            _instance = this;\n            this.userData = {\n                id: 0,\n                username: 'root',\n                name: 'root user',\n                groups: ['admin']\n            };\n            this.loggedIn = false;\n            this.isStandalone = false;\n        }\n        init() {\n            return this.createUI();\n        }\n        destroy() {\n            _instance = null;\n        }\n        getUser() {\n            return Object.assign({}, this.userData);\n        }\n        isLoggedIn() {\n            return this.isLoggedIn;\n        }\n        login(data) {\n            return new Promise((resolve, reject) => {\n                Connection.request('login', data).then(result => {\n                    return resolve(result ? result : a._('ERR_LOGIN_INVALID'));\n                }).catch(error => {\n                    reject(new Error(a._('ERR_LOGIN_FMT', error)));\n                });\n            });\n        }\n        logout() {\n            return new Promise((resolve, reject) => {\n                Connection.request('logout', {}).then(result => {\n                    return resolve(!!result);\n                }).catch(err => {\n                    reject(new Error('An error occured: ' + err));\n                });\n            });\n        }\n        checkPermission(group) {\n            const user = this.getUser();\n            const userGroups = user.groups || [];\n            if (!(group instanceof Array)) {\n                group = [group];\n            }\n            if (userGroups.indexOf('admin') === -1) {\n                return !!group.every(g => userGroups.indexOf(g) >= 0);\n            }\n            return true;\n        }\n        requestLogin(data) {\n            return new Promise((resolve, reject) => {\n                this.login(data).then(res => {\n                    return this.onLogin(res).then(resolve).catch(reject);\n                }).catch(reject);\n            });\n        }\n        onLogin(data) {\n            let userSettings = data.userSettings;\n            if (!userSettings || userSettings instanceof Array) {\n                userSettings = {};\n            }\n            this.userData = data.userData;\n            function getLocale() {\n                let curLocale = b.getConfig('Locale');\n                let detectedLocale = b.getUserLocale();\n                if (b.getConfig('LocaleOptions.AutoDetect', true) && detectedLocale) {\n                    console.info('Auto-detected user locale via browser', detectedLocale);\n                    curLocale = detectedLocale;\n                }\n                let result = SettingsManager.get('CoreWM');\n                if (!result) {\n                    try {\n                        result = userSettings.CoreWM;\n                    } catch (e) {\n                    }\n                }\n                return result ? result.language || curLocale : curLocale;\n            }\n            document.getElementById('LoadingScreen').style.display = 'block';\n            a.setLocale(getLocale());\n            SettingsManager.init(userSettings);\n            if (data.blacklistedPackages) {\n                PackageManager.setBlacklist(data.blacklistedPackages);\n            }\n            this.loggedIn = true;\n            return Promise.resolve(true);\n        }\n        createUI() {\n            this._renderUI();\n            return this._createUI();\n        }\n        _renderUI(html) {\n            if (!html) {\n                html = require('osjs-scheme-loader!login.html');\n            }\n            const tempNode = document.createElement('div');\n            tempNode.innerHTML = html;\n            tempNode.childNodes.forEach(n => {\n                const nn = n.cloneNode(true);\n                if ([\n                        'STYLE',\n                        'SCRIPT'\n                    ].indexOf(n.tagName) === -1) {\n                    document.body.appendChild(nn);\n                } else {\n                    document.querySelector('head').appendChild(nn);\n                }\n            });\n        }\n        _createUI() {\n            const container = document.getElementById('Login');\n            const login = document.getElementById('LoginForm');\n            const u = document.getElementById('LoginUsername');\n            const p = document.getElementById('LoginPassword');\n            const s = document.getElementById('LoginSubmit');\n            function _restore() {\n                s.removeAttribute('disabled');\n                u.removeAttribute('disabled');\n                p.removeAttribute('disabled');\n            }\n            function _lock() {\n                s.setAttribute('disabled', 'disabled');\n                u.setAttribute('disabled', 'disabled');\n                p.setAttribute('disabled', 'disabled');\n            }\n            container.style.display = 'block';\n            _restore();\n            return new Promise((resolve, reject) => {\n                login.onsubmit = ev => {\n                    _lock();\n                    if (ev) {\n                        ev.preventDefault();\n                    }\n                    this.requestLogin({\n                        username: u.value,\n                        password: p.value\n                    }).then(() => {\n                        container.parentNode.removeChild(container);\n                        return resolve();\n                    }).catch(err => {\n                        alert(err);\n                        _restore();\n                    });\n                };\n            });\n        }\n    };\n});"]}