{"version":3,"sources":["utils/compability.js"],"names":["define","compability","getCanvasSupported","document","createElement","getContext","getVideoSupported","canPlayType","canPlayCodec","support","check","enabled","isSupported","supported","Object","keys","forEach","key","chk","value","Array","c","_checkSupport","codec","e","getAudioSupported","getCanvasContexts","cache","length","canvas","tst","i","push","eee","detectCSSFeature","featurename","feature","domPrefixes","split","elm","featurenameCapital","toLowerCase","style","charAt","toUpperCase","substr","checkWindow","indexedDB","localStorage","sessionStorage","globalStorage","openDatabase","socket","worker","file","blob","orientation","touch","navigator","userAgent","match","getTouch","upload","xhr","XMLHttpRequest","getUpload","getUserMedia","getMedia","window","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","fileSystem","dnd","css","transition","animation","canvasContext","webgl","result","contexts","getWebGL","audioContext","hasOwnProperty","svg","createElementNS","createSVGRect","video","videoTypes","webm","ogg","h264","mpeg","mkv","audio","audioTypes","mp3","wav","richtext","contentEditable","getRichText","console","warn","getCompability","isIE","parseInt","documentMode"],"mappings":"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","file":"../../utils/compability.js","sourcesContent":["define(function () {\n    'use strict';\n    const compability = function () {\n        function _checkSupport(enabled, check, isSupported) {\n            const supported = {};\n            Object.keys(check).forEach(key => {\n                let chk = check[key];\n                let value = false;\n                if (chk instanceof Array) {\n                    chk.forEach(c => {\n                        value = isSupported(c);\n                        return !value;\n                    });\n                } else {\n                    value = isSupported(chk);\n                }\n                supported[key] = value;\n            });\n            return supported;\n        }\n        function getUpload() {\n            try {\n                const xhr = new XMLHttpRequest();\n                return !!(xhr && 'upload' in xhr && 'onprogress' in xhr.upload);\n            } catch (e) {\n            }\n            return false;\n        }\n        function getCanvasSupported() {\n            return document.createElement('canvas').getContext ? document.createElement('canvas') : null;\n        }\n        function getVideoSupported() {\n            return document.createElement('video').canPlayType ? document.createElement('video') : null;\n        }\n        function canPlayCodec(support, check) {\n            return _checkSupport(support, check, codec => {\n                try {\n                    return !!support.canPlayType(codec);\n                } catch (e) {\n                }\n                return false;\n            });\n        }\n        function getVideoTypesSupported() {\n            return canPlayCodec(getVideoSupported(), {\n                webm: 'video/webm; codecs=\"vp8.0, vorbis\"',\n                ogg: 'video/ogg; codecs=\"theora\"',\n                h264: [\n                    'video/mp4; codecs=\"avc1.42E01E\"',\n                    'video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"'\n                ],\n                mpeg: 'video/mp4; codecs=\"mp4v.20.8\"',\n                mkv: 'video/x-matroska; codecs=\"theora, vorbis\"'\n            });\n        }\n        function getAudioSupported() {\n            return document.createElement('audio').canPlayType ? document.createElement('audio') : null;\n        }\n        function getAudioTypesSupported() {\n            return canPlayCodec(getAudioSupported(), {\n                ogg: 'audio/ogg; codecs=\"vorbis',\n                mp3: 'audio/mpeg',\n                wav: 'audio/wav; codecs=\"1\"'\n            });\n        }\n        function getAudioContext() {\n            if (window.hasOwnProperty('AudioContext') || window.hasOwnProperty('webkitAudioContext')) {\n                return true;\n            }\n            return false;\n        }\n        const getCanvasContexts = (() => {\n            const cache = [];\n            return () => {\n                if (!cache.length) {\n                    const canvas = getCanvasSupported();\n                    if (canvas) {\n                        const test = [\n                            '2d',\n                            'webgl',\n                            'experimental-webgl',\n                            'webkit-3d',\n                            'moz-webgl'\n                        ];\n                        test.forEach((tst, i) => {\n                            try {\n                                if (!!canvas.getContext(tst)) {\n                                    cache.push(tst);\n                                }\n                            } catch (eee) {\n                            }\n                        });\n                    }\n                }\n                return cache;\n            };\n        })();\n        function getWebGL() {\n            let result = false;\n            let contexts = getCanvasContexts();\n            try {\n                result = contexts.length > 1;\n                if (!result) {\n                    if ('WebGLRenderingContext' in window) {\n                        result = true;\n                    }\n                }\n            } catch (e) {\n            }\n            return result;\n        }\n        function detectCSSFeature(featurename) {\n            let feature = false;\n            let domPrefixes = 'Webkit Moz ms O'.split(' ');\n            let elm = document.createElement('div');\n            let featurenameCapital = null;\n            featurename = featurename.toLowerCase();\n            if (elm.style[featurename]) {\n                feature = true;\n            }\n            if (feature === false) {\n                featurenameCapital = featurename.charAt(0).toUpperCase() + featurename.substr(1);\n                for (let i = 0; i < domPrefixes.length; i++) {\n                    if (typeof elm.style[domPrefixes[i] + featurenameCapital] !== 'undefined') {\n                        feature = true;\n                        break;\n                    }\n                }\n            }\n            return feature;\n        }\n        function getUserMedia() {\n            let getMedia = false;\n            if (window.navigator) {\n                getMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;\n            }\n            return !!getMedia;\n        }\n        function getRichText() {\n            try {\n                return !!document.createElement('textarea').contentEditable;\n            } catch (e) {\n            }\n            return false;\n        }\n        function getTouch() {\n            try {\n                if (navigator.userAgent.match(/Windows NT 6\\.(2|3)/)) {\n                    return false;\n                }\n            } catch (e) {\n            }\n            try {\n                if (navigator.userAgent.match(/iOS|Android|BlackBerry|IEMobile|iPad|iPhone|iPad/i)) {\n                    return true;\n                }\n            } catch (e) {\n            }\n            return false;\n        }\n        function getDnD() {\n            return !!('draggable' in document.createElement('span'));\n        }\n        function getSVG() {\n            return !!document.createElementNS && !!document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGRect;\n        }\n        function getFileSystem() {\n            return 'requestFileSystem' in window || 'webkitRequestFileSystem' in window;\n        }\n        const checkWindow = {\n            indexedDB: 'indexedDB',\n            localStorage: 'localStorage',\n            sessionStorage: 'sessionStorage',\n            globalStorage: 'globalStorage',\n            openDatabase: 'openDatabase',\n            socket: 'WebSocket',\n            worker: 'Worker',\n            file: 'File',\n            blob: 'Blob',\n            orientation: 'onorientationchange'\n        };\n        const compability = {\n            touch: getTouch(),\n            upload: getUpload(),\n            getUserMedia: getUserMedia(),\n            fileSystem: getFileSystem(),\n            localStorage: false,\n            sessionStorage: false,\n            globalStorage: false,\n            openDatabase: false,\n            socket: false,\n            worker: false,\n            file: false,\n            blob: false,\n            orientation: false,\n            dnd: getDnD(),\n            css: {\n                transition: detectCSSFeature('transition'),\n                animation: detectCSSFeature('animation')\n            },\n            canvas: !!getCanvasSupported(),\n            canvasContext: getCanvasContexts(),\n            webgl: getWebGL(),\n            audioContext: getAudioContext(),\n            svg: getSVG(),\n            video: !!getVideoSupported(),\n            videoTypes: getVideoTypesSupported(),\n            audio: !!getAudioSupported(),\n            audioTypes: getAudioTypesSupported(),\n            richtext: getRichText()\n        };\n        Object.keys(checkWindow).forEach(key => {\n            try {\n                compability[key] = checkWindow[key] in window && window[checkWindow[key]] !== null;\n            } catch (e) {\n                console.warn(e);\n            }\n        });\n        return () => {\n            return compability;\n        };\n    }();\n    function getCompability() {\n        return compability();\n    }\n    function isIE() {\n        const dm = parseInt(document.documentMode, 10);\n        return dm <= 11 || !!navigator.userAgent.match(/(MSIE|Edge)/);\n    }\n    return {\n        getCompability: getCompability,\n        isIE: isIE\n    };\n});"]}