{"version":3,"sources":["utils/preloader.js"],"names":["define","promiseLimit","a","axios","getFileType","src","match","getSource","getBrowserPath","handlers","javascript","Promise","resolve","reject","el","document","createElement","onreadystatechange","this","readyState","onerror","err","error","Error","name","message","onload","getElementsByTagName","appendChild","stylesheet","timeout","str","clearTimeout","link","setAttribute","setTimeout","path","result","styleSheet","forEach","iter","i","href","indexOf","checkCss","html","get","then","data","catch","[object Object]","cache","preloads","args","map","p","force","type","filter","console","group","limit","max","total","length","failed","loaded","done","item","preloadData","yes","push","job","index","progress","no","e","warn","all","groupEnd","success"],"mappings":"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","file":"../../utils/preloader.js","sourcesContent":["define([\n    '../helpers/promise-limit',\n    '../core/config',\n    'skylark-axios'\n], function (promiseLimit, a, axios) {\n    'use strict';\n    const getFileType = src => {\n        if (src.match(/\\.js$/i)) {\n            return 'javascript';\n        } else if (src.match(/\\.css$/i)) {\n            return 'stylesheet';\n        }\n        return 'unknown';\n    };\n    const getSource = src => {\n        if (src && !src.match(/^(\\/|file|https?)/)) {\n            return a.getBrowserPath(src);\n        }\n        return src;\n    };\n    const checkCss = path => {\n        let result = false;\n        (document.styleSheet || []).forEach((iter, i) => {\n            if (iter.href.indexOf(path) !== -1) {\n                result = true;\n                return false;\n            }\n            return true;\n        });\n        return result;\n    };\n    const handlers = {\n        javascript: src => new Promise((resolve, reject) => {\n            const el = document.createElement('script');\n            el.onreadystatechange = function () {\n                if (this.readyState === 'complete' || this.readyState === 'loaded') {\n                    resolve();\n                }\n            };\n            el.onerror = err => {\n                let error = new Error();\n                error.name = '<script> error';\n                error.message = 'Failed to load script';\n                reject(error);\n            };\n            el.onload = () => resolve();\n            el.src = src;\n            document.getElementsByTagName('head')[0].appendChild(el);\n        }),\n        stylesheet: src => new Promise((resolve, reject) => {\n            let timeout;\n            const onerror = str => {\n                clearTimeout(timeout);\n                let error = new Error();\n                error.name = '<link> error';\n                error.message = str;\n                reject(error);\n            };\n            const link = document.createElement('link');\n            link.setAttribute('rel', 'stylesheet');\n            link.setAttribute('type', 'text/css');\n            link.onload = () => resolve();\n            link.onerror = err => onerror('Failed to load link');\n            link.setAttribute('href', src);\n            document.getElementsByTagName('head')[0].appendChild(link);\n            timeout = setTimeout(() => {\n                onerror('Loading stylesheet timed out');\n            }, 30000);\n            setTimeout(() => {\n                if (checkCss(src)) {\n                    clearTimeout(timeout);\n                    resolve();\n                }\n            }, 10);\n        }),\n        html: src => new Promise((resolve, reject) => {\n            axios.get(src).then(result => {\n                return resolve(result.data);\n            }).catch(err => reject(err.message));\n        })\n    };\n    class Preloader {\n        constructor() {\n            this.cache = {};\n        }\n        clear() {\n            this.cache = {};\n        }\n        preload(preloads, args) {\n            args = args || {};\n            preloads = preloads.map(p => {\n                if (typeof p === 'string') {\n                    return {\n                        src: getSource(p),\n                        force: false,\n                        type: getFileType(p)\n                    };\n                } else {\n                    p.src = getSource(p.src);\n                    if (!p.type) {\n                        p.type = getFileType(p.src);\n                    }\n                }\n                return p;\n            }).filter(p => !!p.src);\n            console.group('Preloader.load()', preloads);\n            const limit = promiseLimit(args.max || 1);\n            const total = preloads.length;\n            const failed = [];\n            const loaded = [];\n            const data = [];\n            const done = (item, preloadData, yes) => {\n                if (typeof preloadData !== 'undefined') {\n                    data.push({\n                        item,\n                        data: preloadData\n                    });\n                }\n                if (args.cache !== false && typeof this.cache[item.src] === 'undefined') {\n                    this.cache[item.src] = preloadData;\n                }\n                loaded.push(item.src);\n                return yes();\n            };\n            const job = (item, index) => {\n                if (typeof args.progress === 'function') {\n                    args.progress(index, total);\n                }\n                if (handlers[item.type]) {\n                    return new Promise((yes, no) => {\n                        if (!args.force && this.cache[item.src]) {\n                            done(item, this.cache[item.src], yes);\n                            return;\n                        }\n                        handlers[item.type](item.src).then(preloadData => {\n                            return done(item, preloadData, yes);\n                        }).catch(e => {\n                            console.warn('Failed loading', item.src, e);\n                            failed.push(item.src);\n                            return yes();\n                        });\n                    });\n                }\n                return Promise.resolve();\n            };\n            return new Promise((resolve, reject) => {\n                Promise.all(preloads.map((iter, index) => {\n                    return limit(() => job(iter, index));\n                })).then(() => {\n                    console.groupEnd();\n                    return resolve({\n                        success: false,\n                        data: data,\n                        failed: failed,\n                        loaded: loaded\n                    });\n                }).catch(reject);\n            });\n        }\n    }\n    return new Preloader();\n});"]}