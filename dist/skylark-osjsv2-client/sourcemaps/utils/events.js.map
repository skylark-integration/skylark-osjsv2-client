{"version":3,"sources":["utils/events.js"],"names":["define","Keycodes","getEventList","str","replace","split","mousePosition","ev","detail","x","y","touch","touches","changedTouches","length","clientX","clientY","mouseButton","button","which","keyCombination","modifiers","CTRL","ctrlKey","SHIFT","shiftKey","ALT","altKey","META","metaKey","checkFor","checkMods","checkKeys","toUpperCase","forEach","f","push","hasmod","Object","keys","every","fk","haskey","keyCode","result","k","getKeyName","$bind","makeFakeEvent","name","pos","nev","assign","MouseEvent","addEventHandler","el","n","t","callback","handler","useCapture","realType","args","addEventListener","apply","_boundEvents","customEvents","mousewheel","_wheel","direction","wheelDelta","z","click","timeout","firstTarget","firstEvent","cancelled","tempMove","clearTimeout","window","removeEventListener","target","setTimeout","newEvent","defineProperty","value","enumerable","dispatchEvent","dblclick","debounce","count","cancel","preventDefault","stopPropagation","contextmenu","evName","noBind","arguments","Error","addEvent","nsType","type","realName","match","PointerEvent","MSPointerEvent","tmpName","charAt","slice","toLowerCase","getRealEventName","OSjs","call","tagName","ns","filter","iter","console","warn","$unbind","unbindNamed","list","i","splice"],"mappings":"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","file":"../../utils/events.js","sourcesContent":["define([\n    './keycodes'\n], function (Keycodes) {\n    'use strict';\n    function getRealEventName(evName) {\n        let realName = evName;\n        if (evName !== 'mousewheel' && evName.match(/^mouse/)) {\n            if (window.PointerEvent) {\n                realName = evName.replace(/^mouse/, 'pointer');\n            } else if (window.MSPointerEvent) {\n                const tmpName = evName.replace(/^mouse/, '');\n                realName = 'MSPointer' + tmpName.charAt(0).toUpperCase() + tmpName.slice(1).toLowerCase();\n            }\n        }\n        return realName;\n    }\n    function getEventList(str) {\n        return str.replace(/\\s/g, '').split(',');\n    }\n    function mousePosition(ev) {\n        if (ev.detail && typeof ev.detail.x !== 'undefined' && typeof ev.detail.y !== 'undefined') {\n            return {\n                x: ev.detail.x,\n                y: ev.detail.y\n            };\n        }\n        const touch = ev.touches || ev.changedTouches || [];\n        if (touch.length) {\n            return {\n                x: touch[0].clientX,\n                y: touch[0].clientY\n            };\n        }\n        return {\n            x: ev.clientX,\n            y: ev.clientY\n        };\n    }\n    function mouseButton(ev) {\n        if (typeof ev.button !== 'undefined') {\n            if (ev.button === 0) {\n                return 'left';\n            } else if (ev.button === 1) {\n                return 'middle';\n            }\n            return 'right';\n        }\n        if (ev.which === 2 || ev.which === 4) {\n            return 'middle';\n        } else if (ev.which === 1) {\n            return 'left';\n        }\n        return 'right';\n    }\n    const keyCombination = function () {\n        const modifiers = {\n            CTRL: ev => {\n                return ev.ctrlKey;\n            },\n            SHIFT: ev => {\n                return ev.shiftKey;\n            },\n            ALT: ev => {\n                return ev.altKey;\n            },\n            META: ev => {\n                return ev.metaKey;\n            }\n        };\n        function getKeyName(keyCode) {\n            let result = false;\n            Object.keys(Keycodes).forEach(k => {\n                if (!result && keyCode === Keycodes[k]) {\n                    result = k;\n                }\n            });\n            return result;\n        }\n        return function (ev, checkFor) {\n            const checks = checkFor.toUpperCase().split('+');\n            const checkMods = {\n                CTRL: false,\n                SHIFT: false,\n                ALT: false\n            };\n            const checkKeys = [];\n            checks.forEach(f => {\n                if (modifiers[f]) {\n                    checkMods[f] = true;\n                } else {\n                    checkKeys.push(f);\n                }\n            });\n            const hasmod = Object.keys(checkMods).every(f => {\n                const fk = !!modifiers[f](ev);\n                return checkMods[f] === fk;\n            });\n            const haskey = checkKeys.every(f => {\n                return getKeyName(ev.keyCode) === f;\n            });\n            return hasmod && haskey;\n        };\n    }();\n    const $bind = function () {\n        function makeFakeEvent(name, ev) {\n            const pos = mousePosition(ev);\n            const nev = Object.assign({\n                clientX: pos.x,\n                clientY: pos.y,\n                x: pos.x,\n                y: pos.y\n            }, ev);\n            return new MouseEvent(name, nev);\n        }\n        function addEventHandler(el, n, t, callback, handler, useCapture, realType) {\n            const args = [\n                t,\n                handler,\n                useCapture\n            ];\n            el.addEventListener.apply(el, args);\n            el._boundEvents[n].push({\n                realType: realType,\n                args: args,\n                callback: callback\n            });\n        }\n        function createWheelHandler(el, n, t, callback, useCapture) {\n            function _wheel(ev) {\n                const pos = mousePosition(ev);\n                const direction = ev.detail < 0 || ev.wheelDelta > 0 ? 1 : -1;\n                pos.z = direction;\n                return callback(ev, pos);\n            }\n            addEventHandler(el, n, 'mousewheel', callback, _wheel, useCapture, 'mousewheel');\n            addEventHandler(el, n, 'DOMMouseScroll', callback, _wheel, useCapture, 'DOMMouseScroll');\n        }\n        function createClick(el, n, t, callback, useCapture) {\n            let cancelled = false;\n            let timeout;\n            let firstTarget;\n            let firstEvent;\n            const tempMove = () => cancelled = true;\n            function cancel() {\n                clearTimeout(timeout);\n                firstTarget = null;\n                cancelled = true;\n                window.removeEventListener('touchmove', tempMove);\n            }\n            function tempEnd(ev) {\n                clearTimeout(timeout);\n                window.removeEventListener('touchmove', tempMove);\n                if (!cancelled && ev.target === firstTarget) {\n                    const newEvent = makeFakeEvent('click', firstEvent);\n                    Object.defineProperty(newEvent, 'target', {\n                        value: firstEvent.target,\n                        enumerable: false\n                    });\n                    el.dispatchEvent(newEvent);\n                }\n            }\n            function tempStart(ev) {\n                firstEvent = ev;\n                firstTarget = ev.target;\n                timeout = setTimeout(() => {\n                    cancelled = true;\n                }, 300);\n                window.addEventListener('touchmove', tempMove);\n            }\n            addEventHandler(el, n, 'touchcancel', callback, cancel, useCapture, 'dblclick');\n            addEventHandler(el, n, 'touchstart', callback, tempStart, useCapture, 'click');\n            addEventHandler(el, n, 'touchend', callback, tempEnd, useCapture, 'click');\n        }\n        function createDoubleClick(el, n, t, callback, useCapture) {\n            let count = 0;\n            let cancelled = false;\n            let firstTarget;\n            let firstEvent;\n            let debounce;\n            const tempMove = () => cancelled = true;\n            function cancel() {\n                firstTarget = null;\n                cancelled = true;\n                count = 0;\n                window.removeEventListener('toucmove', tempMove);\n            }\n            function tempEnd() {\n                window.removeEventListener('touchmove', tempMove);\n                debounce = setTimeout(cancel, 680);\n            }\n            function tempStart(ev) {\n                window.addEventListener('touchmove', tempMove);\n                clearTimeout(debounce);\n                if (count === 0) {\n                    firstEvent = ev;\n                    firstTarget = ev.target;\n                } else if (count > 0) {\n                    if (ev.target !== firstTarget) {\n                        cancel();\n                        return;\n                    }\n                    if (!cancelled) {\n                        ev.preventDefault();\n                        ev.stopPropagation();\n                        ev.target.dispatchEvent(makeFakeEvent('dblclick', firstEvent));\n                    }\n                }\n                cancelled = false;\n                count++;\n            }\n            addEventHandler(el, n, 'touchcancel', callback, cancel, useCapture, 'dblclick');\n            addEventHandler(el, n, 'touchstart', callback, tempStart, useCapture, 'dblclick');\n            addEventHandler(el, n, 'touchend', callback, tempEnd, useCapture, 'dblclick');\n        }\n        function createContextMenu(el, n, t, callback, useCapture) {\n            let cancelled = false;\n            let timeout;\n            const tempMove = () => cancelled = true;\n            function cancel() {\n                clearTimeout(timeout);\n                cancelled = true;\n                window.removeEventListener('toucmove', tempMove);\n            }\n            function tempEnd(ev) {\n                cancelled = true;\n                clearTimeout(timeout);\n                window.removeEventListener('touchmove', tempMove);\n            }\n            function tempStart(ev) {\n                timeout = setTimeout(() => {\n                    if (!cancelled) {\n                        ev.preventDefault();\n                        ev.target.dispatchEvent(makeFakeEvent('contextmenu', ev));\n                    }\n                }, 300);\n                window.addEventListener('touchmove', tempMove);\n            }\n            addEventHandler(el, n, 'touchcancel', callback, cancel, useCapture, 'contextmenu');\n            addEventHandler(el, n, 'touchstart', callback, tempStart, useCapture, 'contextmenu');\n            addEventHandler(el, n, 'touchend', callback, tempEnd, useCapture, 'contextmenu');\n        }\n        const customEvents = {\n            mousewheel: createWheelHandler,\n            click: createClick,\n            dblclick: createDoubleClick,\n            contextmenu: createContextMenu\n        };\n        return function Utils_$bind(el, evName, callback, useCapture, noBind) {\n            useCapture = useCapture === true;\n            if (arguments.length < 3) {\n                throw new Error('$bind expects 3 or more arguments');\n            }\n            if (typeof evName !== 'string') {\n                throw new Error('Given event type was not a string');\n            }\n            if (typeof callback !== 'function') {\n                throw new Error('Given callback was not a function');\n            }\n            function addEvent(nsType, type) {\n                type = getRealEventName(type);\n                addEventHandler(el, nsType, type, callback, function mouseEventHandler(ev) {\n                    if (!window.OSjs) {\n                        return;\n                    }\n                    if (noBind) {\n                        callback(ev, mousePosition(ev));\n                    }\n                    callback.call(el, ev, mousePosition(ev));\n                }, useCapture);\n                if (type === 'click' && el.tagName === 'BUTTON') {\n                    return;\n                }\n                if (customEvents[type]) {\n                    customEvents[type](el, nsType, type, function fakeEventHandler(ev) {\n                        if (noBind) {\n                            callback(ev, mousePosition(ev));\n                        }\n                        callback.call(el, ev, mousePosition(ev));\n                    }, useCapture);\n                }\n            }\n            function initNamespace(ns) {\n                if (!el._boundEvents) {\n                    el._boundEvents = {};\n                }\n                if (!el._boundEvents[ns]) {\n                    el._boundEvents[ns] = [];\n                }\n                const found = el._boundEvents[ns].filter(iter => {\n                    return iter.callback === callback;\n                });\n                return found.length === 0;\n            }\n            getEventList(evName).forEach(ns => {\n                const type = ns.split(':')[0];\n                if (!initNamespace(ns)) {\n                    console.warn('Utils::$bind()', 'This event was already bound, skipping');\n                    return;\n                }\n                addEvent(ns, type);\n            });\n        };\n    }();\n    function $unbind(el, evName, callback, useCapture) {\n        function unbindNamed(type) {\n            if (el._boundEvents) {\n                const list = el._boundEvents || {};\n                if (list[type]) {\n                    for (let i = 0; i < list[type].length; i++) {\n                        let iter = list[type][i];\n                        if (callback && iter.callback !== callback) {\n                            continue;\n                        }\n                        el.removeEventListener.apply(el, iter.args);\n                        list[type].splice(i, 1);\n                        i--;\n                    }\n                }\n            }\n        }\n        function unbindAll() {\n            if (el._boundEvents) {\n                Object.keys(el._boundEvents).forEach(type => {\n                    unbindNamed(type);\n                });\n                delete el._boundEvents;\n            }\n        }\n        if (el) {\n            if (evName) {\n                getEventList(evName).forEach(type => {\n                    unbindNamed(type);\n                });\n            } else {\n                unbindAll();\n            }\n        }\n    }\n    return {\n        mousePosition: mousePosition,\n        mouseButton: mouseButton,\n        keyCombination: keyCombination,\n        $bind: $bind,\n        $unbind: $unbind\n    };\n});"]}