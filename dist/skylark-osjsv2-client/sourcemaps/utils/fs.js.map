{"version":3,"sources":["utils/fs.js"],"names":["define","Utils","filename","p","replace","split","pop","_abToSomething","m","arrayBuffer","mime","callback","blob","Blob","type","r","FileReader","onerror","e","onloadend","result","console","warn","stack","getPathFromVirtual","str","getPathProtocol","orig","tmp","document","createElement","href","protocol","filext","d","ext","toLowerCase","dirname","f","match","pstr","filter","n","args","prot","length","join","_parentDir","humanFileSize","bytes","si","units","thresh","u","toFixed","escapeFilename","trim","replaceFileExtension","rep","spl","push","replaceFilename","newname","pathJoin","parts","prefix","getPart","s","i","indexOf","arguments","String","getFilenameRange","val","range","min","max","btoaUrlsafe","btoa","atobUrlsafe","slice","atob","btoaUtf","window","unescape","x","fromCharCode","parseInt","encodeURIComponent","atobUtf","trans","escape","c","charCodeAt","toString","toUpperCase","decodeURIComponent","checkAcceptMime","list","re","RegExp","test","filterScandir","options","defaultOptions","cloneObject","ioptions","ooptions","Object","assign","scandir","sortBy","sortDir","typeFilter","mimeFilter","showHiddenFiles","iter","filterFile","some","miter","validMime","map","sb","types","mtime","ctime","sort","a","b","Date","prototype","localeCompare","reverse","concat","addFormFile","fd","key","data","file","File","append","ArrayBuffer","dataSourceToAb","byteString","ab","ia","Uint8Array","textToAb","abToDataSource","abToText","abToBinaryString","abToBlob","blobToAb","readAsArrayBuffer"],"mappings":"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","file":"../../utils/fs.js","sourcesContent":["define(['utils/misc'], function (Utils) {\n    'use strict';\n    function getPathFromVirtual(str) {\n        str = str || '';\n        const res = str.split(/([A-z0-9\\-_]+)\\:\\/\\/(.*)/)[2] || '';\n        return res.replace(/^\\/?/, '/');\n    }\n    function getPathProtocol(orig) {\n        const tmp = document.createElement('a');\n        tmp.href = orig;\n        return tmp.protocol.replace(/:$/, '');\n    }\n    function filename(p) {\n        return (p || '').replace(/\\/$/, '').split('/').pop();\n    }\n    function filext(d) {\n        const ext = filename(d).split('.').pop();\n        return ext ? ext.toLowerCase() : null;\n    }\n    function dirname(f) {\n        function _parentDir(p) {\n            const pstr = p.split(/^(.*)\\:\\/\\/(.*)/).filter(function (n) {\n                return n !== '';\n            });\n            const args = pstr.pop();\n            const prot = pstr.pop();\n            let result = '';\n            const tmp = args.split('/').filter(function (n) {\n                return n !== '';\n            });\n            if (tmp.length) {\n                tmp.pop();\n            }\n            result = tmp.join('/');\n            if (!result.match(/^\\//)) {\n                result = '/' + result;\n            }\n            if (prot) {\n                result = prot + '://' + result;\n            }\n            return result;\n        }\n        return f.match(/^((.*)\\:\\/\\/)?\\/$/) ? f : _parentDir(f.replace(/\\/$/, ''));\n    }\n    function humanFileSize(bytes, si) {\n        const units = si ? [\n            'kB',\n            'MB',\n            'GB',\n            'TB',\n            'PB',\n            'EB',\n            'ZB',\n            'YB'\n        ] : [\n            'KiB',\n            'MiB',\n            'GiB',\n            'TiB',\n            'PiB',\n            'EiB',\n            'ZiB',\n            'YiB'\n        ];\n        const thresh = si ? 1000 : 1024;\n        if (bytes < thresh) {\n            return bytes + ' B';\n        }\n        let u = -1;\n        do {\n            bytes /= thresh;\n            ++u;\n        } while (bytes >= thresh);\n        return bytes.toFixed(1) + ' ' + units[u];\n    }\n    function escapeFilename(n) {\n        return (n || '').replace(/[\\|&;\\$%@\"<>\\(\\)\\+,\\*\\/]/g, '').trim();\n    }\n    function replaceFileExtension(filename, rep) {\n        const spl = filename.split('.');\n        spl.pop();\n        spl.push(rep);\n        return spl.join('.');\n    }\n    function replaceFilename(orig, newname) {\n        const spl = orig.split('/');\n        spl.pop();\n        spl.push(newname);\n        return spl.join('/');\n    }\n    function pathJoin() {\n        let parts = [];\n        let prefix = '';\n        function getPart(s) {\n            if (s.match(/^([A-z0-9\\-_]+)\\:\\//)) {\n                const spl = s.split(/^([A-z0-9\\-_]+)\\:\\//);\n                if (!prefix) {\n                    prefix = spl[1] + '://';\n                }\n                s = spl[2] || '';\n            }\n            s = s.replace(/^\\/+/, '').replace(/\\/+$/, '');\n            return s.split('/').filter(function (i) {\n                return [\n                    '',\n                    '.',\n                    '..'\n                ].indexOf(i) === -1;\n            }).join('/');\n        }\n        for (let i = 0; i < arguments.length; i++) {\n            const str = getPart(String(arguments[i]));\n            if (str) {\n                parts.push(str);\n            }\n        }\n        return prefix + parts.join('/').replace(/^\\/?/, '/');\n    }\n    function getFilenameRange(val) {\n        val = val || '';\n        const range = {\n            min: 0,\n            max: val.length\n        };\n        if (val.match(/^\\./)) {\n            if (val.length >= 2) {\n                range.min = 1;\n            }\n        } else {\n            if (val.match(/\\.(\\w+)$/)) {\n                const m = val.split(/\\.(\\w+)$/);\n                for (let i = m.length - 1; i >= 0; i--) {\n                    if (m[i].length) {\n                        range.max = val.length - m[i].length - 1;\n                        break;\n                    }\n                }\n            }\n        }\n        return range;\n    }\n    function btoaUrlsafe(str) {\n        return !str || !str.length ? '' : btoa(str).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\n    }\n    function atobUrlsafe(str) {\n        if (str && str.length) {\n            str = (str + '===').slice(0, str.length + str.length % 4);\n            return atob(str.replace(/-/g, '+').replace(/_/g, '/'));\n        }\n        return '';\n    }\n    function btoaUtf(str) {\n        const _unescape = window.unescape || function (s) {\n            function d(x, n) {\n                return String.fromCharCode(parseInt(n, 16));\n            }\n            return s.replace(/%([0-9A-F]{2})/i, d);\n        };\n        str = _unescape(encodeURIComponent(str));\n        return btoa(str);\n    }\n    function atobUtf(str) {\n        const _escape = window.escape || function (s) {\n            function q(c) {\n                c = c.charCodeAt();\n                return '%' + (c < 16 ? '0' : '') + c.toString(16).toUpperCase();\n            }\n            return s.replace(/[\\x00-),:-?[-^`{-\\xFF]/g, q);\n        };\n        const trans = _escape(atob(str));\n        return decodeURIComponent(trans);\n    }\n    function checkAcceptMime(mime, list) {\n        if (mime && list.length) {\n            let re;\n            for (let i = 0; i < list.length; i++) {\n                re = new RegExp(list[i]);\n                if (re.test(mime) === true) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    function filterScandir(list, options, defaultOptions) {\n        defaultOptions = Utils.cloneObject(defaultOptions || {});\n        const ioptions = Utils.cloneObject(options, true);\n        let ooptions = Object.assign({}, defaultOptions.scandir || {}, ioptions);\n        ooptions = Object.assign({}, {\n            sortBy: null,\n            sortDir: 'asc',\n            typeFilter: null,\n            mimeFilter: [],\n            showHiddenFiles: true\n        }, ooptions);\n        function filterFile(iter) {\n            if (ooptions.typeFilter && iter.type !== ooptions.typeFilter || !ooptions.showHiddenFiles && iter.filename.match(/^\\.\\w/)) {\n                return false;\n            }\n            return true;\n        }\n        function validMime(iter) {\n            if (ooptions.mimeFilter && ooptions.mimeFilter.length && iter.mime) {\n                return ooptions.mimeFilter.some(function (miter) {\n                    if (iter.mime.match(miter)) {\n                        return true;\n                    }\n                    return false;\n                });\n            }\n            return true;\n        }\n        const result = list.filter(function (iter) {\n            if (iter.filename === '..' || !filterFile(iter)) {\n                return false;\n            }\n            if (iter.type === 'file' && !validMime(iter)) {\n                return false;\n            }\n            return true;\n        }).map(function (iter) {\n            if (iter.mime === 'application/vnd.google-apps.folder') {\n                iter.type = 'dir';\n            }\n            return iter;\n        });\n        const sb = ooptions.sortBy;\n        const types = {\n            mtime: 'date',\n            ctime: 'date'\n        };\n        if ([\n                'filename',\n                'size',\n                'mime',\n                'ctime',\n                'mtime'\n            ].indexOf(sb) !== -1) {\n            if (types[sb] === 'date') {\n                result.sort(function (a, b) {\n                    a = new Date(a[sb]);\n                    b = new Date(b[sb]);\n                    return a > b ? 1 : b > a ? -1 : 0;\n                });\n            } else {\n                if (sb === 'size' || !String.prototype.localeCompare) {\n                    result.sort(function (a, b) {\n                        return a[sb] > b[sb] ? 1 : b[sb] > a[sb] ? -1 : 0;\n                    });\n                } else {\n                    result.sort(function (a, b) {\n                        return String(a[sb]).localeCompare(String(b[sb]));\n                    });\n                }\n            }\n            if (ooptions.sortDir === 'desc') {\n                result.reverse();\n            }\n        }\n        return result.filter(function (iter) {\n            return iter.type === 'dir';\n        }).concat(result.filter(function (iter) {\n            return iter.type !== 'dir';\n        }));\n    }\n    function _abToSomething(m, arrayBuffer, mime, callback) {\n        mime = mime || 'application/octet-stream';\n        try {\n            const blob = new Blob([arrayBuffer], { type: mime });\n            const r = new FileReader();\n            r.onerror = function (e) {\n                callback(e);\n            };\n            r.onloadend = function () {\n                callback(false, r.result);\n            };\n            r[m](blob);\n        } catch (e) {\n            console.warn(e, e.stack);\n            callback(e);\n        }\n    }\n    function addFormFile(fd, key, data, file) {\n        file = file || {\n            mime: 'application/octet-stream',\n            filename: 'filename'\n        };\n        if (data instanceof window.File) {\n            fd.append(key, data);\n        } else if (data instanceof window.ArrayBuffer) {\n            try {\n                data = new Blob([data], { type: file.mime });\n            } catch (e) {\n                data = null;\n                console.warn(e, e.stack);\n            }\n            fd.append(key, data, file.filename);\n        } else {\n            if (data.data && data.filename) {\n                fd.append(key, data.data, data.filename);\n            }\n        }\n    }\n    function dataSourceToAb(data, mime, callback) {\n        const byteString = atob(data.split(',')[1]);\n        const ab = new ArrayBuffer(byteString.length);\n        const ia = new Uint8Array(ab);\n        for (let i = 0; i < byteString.length; i++) {\n            ia[i] = byteString.charCodeAt(i);\n        }\n        callback(false, ab);\n    }\n    function textToAb(data, mime, callback) {\n        _abToSomething('readAsArrayBuffer', data, mime, callback);\n    }\n    function abToDataSource(arrayBuffer, mime, callback) {\n        _abToSomething('readAsDataURL', arrayBuffer, mime, callback);\n    }\n    function abToText(arrayBuffer, mime, callback) {\n        _abToSomething('readAsText', arrayBuffer, mime, callback);\n    }\n    function abToBinaryString(arrayBuffer, mime, callback) {\n        _abToSomething('readAsBinaryString', arrayBuffer, mime, callback);\n    }\n    function abToBlob(arrayBuffer, mime, callback) {\n        mime = mime || 'application/octet-stream';\n        try {\n            const blob = new Blob([arrayBuffer], { type: mime });\n            callback(false, blob);\n        } catch (e) {\n            console.warn(e, e.stack);\n            callback(e);\n        }\n    }\n    function blobToAb(data, callback) {\n        try {\n            const r = new FileReader();\n            r.onerror = function (e) {\n                callback(e);\n            };\n            r.onloadend = function () {\n                callback(false, r.result);\n            };\n            r.readAsArrayBuffer(data);\n        } catch (e) {\n            console.warn(e, e.stack);\n            callback(e);\n        }\n    }\n    return {\n        getPathFromVirtual: getPathFromVirtual,\n        getPathProtocol: getPathProtocol,\n        filename: filename,\n        filext: filext,\n        dirname: dirname,\n        humanFileSize: humanFileSize,\n        escapeFilename: escapeFilename,\n        replaceFileExtension: replaceFileExtension,\n        replaceFilename: replaceFilename,\n        pathJoin: pathJoin,\n        getFilenameRange: getFilenameRange,\n        btoaUrlsafe: btoaUrlsafe,\n        atobUrlsafe: atobUrlsafe,\n        btoaUtf: btoaUtf,\n        atobUtf: atobUtf,\n        checkAcceptMime: checkAcceptMime,\n        filterScandir: filterScandir,\n        addFormFile: addFormFile,\n        dataSourceToAb: dataSourceToAb,\n        textToAb: textToAb,\n        abToDataSource: abToDataSource,\n        abToText: abToText,\n        abToBinaryString: abToBinaryString,\n        abToBlob: abToBlob,\n        blobToAb: blobToAb\n    };\n});"]}