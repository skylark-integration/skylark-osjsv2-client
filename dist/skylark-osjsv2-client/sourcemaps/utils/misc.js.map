{"version":3,"sources":["utils/misc.js"],"names":["define","format","args","Array","prototype","slice","call","arguments","replace","match","number","parseurl","url","modify","protocol","split","splitted","tmp","proto","window","location","host","shift","path","join","parts","username","authstr","String","password","push","_parts","urlparams","search","hash","indexOf","reduce","params","key","val","Object","assign","[object Object]","decodeURIComponent","argumentDefaults","defaults","undef","keys","forEach","mergeObject","obj1","obj2","opts","p","hasOwnProperty","overwrite","constructor","e","cloneObject","o","alternative","_clone","i","map","iter","k","JSON","parse","stringify","value","tagName","undefined"],"mappings":";;;;;;;AAAAA,OAAO,WACH,aA2GA,OACIC,OA3GJ,SAAgBA,GACZ,MAAMC,EAAOC,MAAMC,UAAUC,MAAMC,KAAKC,UAAW,GAKnD,OAAON,EAAOO,QAJO,aACrB,SAAiBC,EAAOC,GACpB,OAAOA,KAAUR,EAAOA,EAAKQ,GAAUD,KAwG3CE,SApGJ,SAAkBC,EAAKC,GACnBA,EAASA,MACJD,EAAIH,MAAM,kBACXG,EAAM,KAAOA,GAEjB,MAAME,EAAWF,EAAIG,MAAM,iBACrBC,EAAW,MACb,MAAMC,EAAMH,EAAS,GAAGN,QAAQ,QAAS,IAAIO,MAAM,KACnD,OACIG,OAAQL,EAAOC,UAAYA,EAAS,IAAMK,OAAOC,SAASN,UAAY,IAAIN,QAAQ,MAAO,IACzFa,KAAMR,EAAOQ,MAAQJ,EAAIK,QACzBC,KAAMV,EAAOU,MAAQ,IAAMN,EAAIO,KAAK,OAL3B,GAsBjB,OACIV,SAAUE,EAASE,MACnBG,KAAML,EAASK,KACfE,KAAMP,EAASO,KACfX,IAlBJ,WACI,MAAMa,GACFT,EAASE,MACT,OAEJ,GAAIL,EAAOa,SAAU,CACjB,MAAMC,EAAUC,OAAOf,EAAOa,UAAY,IAAME,OAAOf,EAAOgB,UAC9DJ,EAAMK,KAAKH,GACXF,EAAMK,KAAK,KAIf,OAFAL,EAAMK,KAAKd,EAASK,MACpBI,EAAMK,KAAKd,EAASO,MACbE,EAAMD,KAAK,IAMbO,KAqETC,UAlEJ,SAAmBC,EAAQC,GAEvB,OADaD,EAAO5B,MAAM4B,EAAOE,QAAQD,EAAO,IAAM,KAAO,GAAGnB,MAAM,KACxDqB,OAAO,CAACC,EAAQH,KAC1B,IAAKI,EAAKC,GAAOL,EAAKnB,MAAM,KAC5B,OAAOyB,OAAOC,OAAOJ,GAAUK,CAACJ,GAAMK,mBAAmBJ,WA+D7DK,iBA5DJ,SAA0B1C,EAAM2C,EAAUC,GAWtC,OAVA5C,EAAOA,MACPsC,OAAOO,KAAKF,GAAUG,QAAQV,IACG,kBAAlBO,EAASP,IAA+C,iBAAlBO,EAASP,QAC7B,IAAdpC,EAAKoC,IAAsC,OAAdpC,EAAKoC,KACzCpC,EAAKoC,GAAOO,EAASP,IAGzBpC,EAAKoC,GAAOpC,EAAKoC,IAAQO,EAASP,KAGnCpC,GAkDP+C,YAhDJ,SAASA,EAAYC,EAAMC,EAAMC,GAC7BA,EAAOA,MACP,IAAK,IAAIC,KAAKF,EACV,GAAIA,EAAKG,eAAeD,GACpB,IACI,IAAuB,IAAnBD,EAAKG,WAAuBL,EAAKI,eAAeD,GAChD,SAEAF,EAAKE,GAAGG,cAAgBhB,OACxBU,EAAKG,GAAKJ,EAAYC,EAAKG,GAAIF,EAAKE,IAEpCH,EAAKG,GAAKF,EAAKE,GAErB,MAAOI,GACLP,EAAKG,GAAKF,EAAKE,GAI3B,OAAOH,GA+BPQ,YA7BJ,SAAqBC,EAAGC,GAapB,OAAIA,EAZJ,SAASC,EAAOC,GACZ,GAAiB,iBAANA,GAAwB,OAANA,EACzB,OAAOA,EACJ,GAAIA,aAAa3D,MACpB,OAAO2D,EAAEC,IAAIF,GAEjB,MAAMG,KAIN,OAHAxB,OAAOO,KAAKe,GAAGd,QAAQiB,IACnBD,EAAKC,GAAKJ,EAAOC,EAAEG,MAEhBD,EAGAH,CAAOF,GAEXO,KAAKC,MAAMD,KAAKE,UAAUT,EAAG,CAACrB,EAAK+B,IAClCA,GAA0B,iBAAVA,GAAsBA,EAAMC,QACrCnD,OAAOoD,UAEXF","file":"../../utils/misc.js","sourcesContent":["define(function () {\n    'use strict';\n    function format(format) {\n        const args = Array.prototype.slice.call(arguments, 1);\n        const sprintfRegex = /\\{(\\d+)\\}/g;\n        function sprintf(match, number) {\n            return number in args ? args[number] : match;\n        }\n        return format.replace(sprintfRegex, sprintf);\n    }\n    function parseurl(url, modify) {\n        modify = modify || {};\n        if (!url.match(/^(\\w+\\:)\\/\\//)) {\n            url = '//' + url;\n        }\n        const protocol = url.split(/^(\\w+\\:)?\\/\\//);\n        const splitted = (() => {\n            const tmp = protocol[2].replace(/^\\/\\//, '').split('/');\n            return {\n                proto: (modify.protocol || protocol[1] || window.location.protocol || '').replace(/\\:$/, ''),\n                host: modify.host || tmp.shift(),\n                path: modify.path || '/' + tmp.join('/')\n            };\n        })();\n        function _parts() {\n            const parts = [\n                splitted.proto,\n                '://'\n            ];\n            if (modify.username) {\n                const authstr = String(modify.username) + ':' + String(modify.password);\n                parts.push(authstr);\n                parts.push('@');\n            }\n            parts.push(splitted.host);\n            parts.push(splitted.path);\n            return parts.join('');\n        }\n        return {\n            protocol: splitted.proto,\n            host: splitted.host,\n            path: splitted.path,\n            url: _parts()\n        };\n    }\n    function urlparams(search, hash) {\n        let hashes = search.slice(search.indexOf(hash ? '#' : '?') + 1).split('&');\n        return hashes.reduce((params, hash) => {\n            let [key, val] = hash.split('=');\n            return Object.assign(params, { [key]: decodeURIComponent(val) });\n        }, {});\n    }\n    function argumentDefaults(args, defaults, undef) {\n        args = args || {};\n        Object.keys(defaults).forEach(key => {\n            if (typeof defaults[key] === 'boolean' || typeof defaults[key] === 'number') {\n                if (typeof args[key] === 'undefined' || args[key] === null) {\n                    args[key] = defaults[key];\n                }\n            } else {\n                args[key] = args[key] || defaults[key];\n            }\n        });\n        return args;\n    }\n    function mergeObject(obj1, obj2, opts) {\n        opts = opts || {};\n        for (let p in obj2) {\n            if (obj2.hasOwnProperty(p)) {\n                try {\n                    if (opts.overwrite === false && obj1.hasOwnProperty(p)) {\n                        continue;\n                    }\n                    if (obj2[p].constructor === Object) {\n                        obj1[p] = mergeObject(obj1[p], obj2[p]);\n                    } else {\n                        obj1[p] = obj2[p];\n                    }\n                } catch (e) {\n                    obj1[p] = obj2[p];\n                }\n            }\n        }\n        return obj1;\n    }\n    function cloneObject(o, alternative) {\n        function _clone(i) {\n            if (typeof i !== 'object' || i === null) {\n                return i;\n            } else if (i instanceof Array) {\n                return i.map(_clone);\n            }\n            const iter = {};\n            Object.keys(i).forEach(k => {\n                iter[k] = _clone(i[k]);\n            });\n            return iter;\n        }\n        if (alternative) {\n            return _clone(o);\n        }\n        return JSON.parse(JSON.stringify(o, (key, value) => {\n            if (value && typeof value === 'object' && value.tagName) {\n                return window.undefined;\n            }\n            return value;\n        }));\n    }\n    return {\n        format: format,\n        parseurl: parseurl,\n        urlparams: urlparams,\n        argumentDefaults: argumentDefaults,\n        mergeObject: mergeObject,\n        cloneObject: cloneObject\n    };\n});"]}