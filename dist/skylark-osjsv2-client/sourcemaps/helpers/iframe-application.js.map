{"version":3,"sources":["helpers/iframe-application.js"],"names":["define","IFrameApplicationWindow","Application","[object Object]","name","args","metadata","opts","super","arguments","this","options","Object","assign","icon","title","src","_getResource","settings","init","__pname","_addWindow","message","ev","console","debug","_response","err","res","postMessage","id","method","error","result","win","_getMainWindow"],"mappings":";;;;;;;AAAAA,QACI,8BACA,uBACD,SAAUC,EAAyBC,GAClC,aACA,qBAAuCA,EACnCC,YAAYC,EAAMC,EAAMC,EAAUC,GAC9BC,SAASC,WACTC,KAAKC,QAAUC,OAAOC,WAClBC,KAAM,GACNC,MAAO,2BACRR,GACHG,KAAKC,QAAQK,IAAMN,KAAKO,aAAaP,KAAKC,QAAQK,KAEtDb,KAAKe,EAAUZ,GACXE,MAAMW,QAAQV,WACd,MAAML,EAAOM,KAAKU,QAAU,SAC5BV,KAAKW,WAAW,IAAIpB,EAAwBG,EAAMM,KAAKC,QAASD,OAEpEP,cAAcmB,EAASC,GACnBC,QAAQC,MAAM,qCAAsCH,GACpD,MAAMI,EAAY,CAACC,EAAKC,KACpBlB,KAAKmB,aACDC,GAAIR,EAAQQ,GACZC,OAAQT,EAAQS,OAChBC,MAAOL,EACPM,OAAQrB,OAAOC,UAAWe,MAGR,iBAAfN,EAAQQ,IAAmBR,EAAQS,SACtCrB,KAAKY,EAAQS,QACbrB,KAAKY,EAAQS,QAAQT,EAAQjB,SAAYqB,GAEzCA,EAAU,mBAItBvB,YAAYmB,GACR,MAAMY,EAAMxB,KAAKyB,iBACbD,GACAA,EAAIL,YAAYP","file":"../../helpers/iframe-application.js","sourcesContent":["define([\n    './iframe-application-window',\n    '../core/application'\n], function (IFrameApplicationWindow, Application) {\n    'use strict';\n    return class IFrameApplication extends Application {\n        constructor(name, args, metadata, opts) {\n            super(...arguments);\n            this.options = Object.assign({}, {\n                icon: '',\n                title: 'IframeApplicationWindow'\n            }, opts);\n            this.options.src = this._getResource(this.options.src);\n        }\n        init(settings, metadata) {\n            super.init(...arguments);\n            const name = this.__pname + 'Window';\n            this._addWindow(new IFrameApplicationWindow(name, this.options, this));\n        }\n        onPostMessage(message, ev) {\n            console.debug('IFrameApplication::onPostMessage()', message);\n            const _response = (err, res) => {\n                this.postMessage({\n                    id: message.id,\n                    method: message.method,\n                    error: err,\n                    result: Object.assign({}, res)\n                });\n            };\n            if (typeof message.id === 'number' && message.method) {\n                if (this[message.method]) {\n                    this[message.method](message.args || {}, _response);\n                } else {\n                    _response('No such method');\n                }\n            }\n        }\n        postMessage(message) {\n            const win = this._getMainWindow();\n            if (win) {\n                win.postMessage(message);\n            }\n        }\n    };\n});"]}