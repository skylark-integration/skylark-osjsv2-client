{"version":3,"sources":["helpers/event-handler.js"],"names":["define","[object Object]","name","names","this","events","forEach","n","console","debug","cb","thisArg","Function","TypeError","added","_register","Array","push","args","apply","RegExp","Object","keys","test","replace","split","length","index","arguments","splice","applyArgs","fn","call","e","warn","stack"],"mappings":";;;;;;;AAAAA,OAAO,WACH,aACA,aACIC,YAAYC,EAAMC,GACdC,KAAKF,KAAOA,EACZE,KAAKC,WACJF,OAAaG,QAAQ,SAAUC,GAC5BH,KAAKC,OAAOE,OACbH,MACHI,QAAQC,MAAM,8BAA+BL,KAAKC,QAEtDJ,UACIG,KAAKC,UAETJ,GAAGC,EAAMQ,EAAIC,GAET,GADAA,EAAUA,GAAWP,OACfM,aAAcE,UAChB,MAAM,IAAIC,UAAU,kDAExB,MAAMC,KACAC,EAAYR,IACRH,KAAKC,OAAOE,aAAcS,QAC5BZ,KAAKC,OAAOE,OAEhBO,EAAMG,KAAKb,KAAKC,OAAOE,GAAGU,KAAKC,GACpBR,EAAGS,MAAMR,EAASO,MAcjC,OAXIhB,aAAgBkB,OAChBC,OAAOC,KAAKlB,KAAKC,QAAQC,QAAQ,SAAUC,GACnCL,EAAKqB,KAAKhB,IACVQ,EAAUR,KAIlBL,EAAKsB,QAAQ,MAAO,IAAIC,MAAM,KAAKnB,QAAQ,SAAUC,GACjDQ,EAAUR,KAGM,IAAjBO,EAAMY,OAAeZ,EAAM,GAAKA,EAE3Cb,IAAIC,EAAMyB,GACN,KAAMvB,KAAKC,OAAOH,aAAiBc,OAC/B,MAAM,IAAIH,UAAU,sBAEpBe,UAAUF,OAAS,GAAsB,iBAAVC,EAC/BvB,KAAKC,OAAOH,GAAM2B,OAAOF,EAAO,GAEhCvB,KAAKC,OAAOH,MAGpBD,KAAKC,EAAMgB,EAAMP,EAASmB,GACtBZ,EAAOA,MACPP,EAAUA,GAAWP,KACfA,KAAKC,OAAOH,aAAiBc,OAGnCZ,KAAKC,OAAOH,GAAMI,QAAQyB,IACtB,IACQD,EACAC,EAAGZ,MAAMR,EAASO,GAElBa,EAAGC,KAAKrB,EAASO,GAEvB,MAAOe,GACLzB,QAAQ0B,KAAK,iCAAkChC,EAAM+B,GACrDzB,QAAQ0B,KAAKD,EAAEE","file":"../../helpers/event-handler.js","sourcesContent":["define(function () {\n    'use strict';\n    return class EventHandler {\n        constructor(name, names) {\n            this.name = name;\n            this.events = {};\n            (names || []).forEach(function (n) {\n                this.events[n] = [];\n            }, this);\n            console.debug('EventHandler::constructor()', this.events);\n        }\n        destroy() {\n            this.events = {};\n        }\n        on(name, cb, thisArg) {\n            thisArg = thisArg || this;\n            if (!(cb instanceof Function)) {\n                throw new TypeError('EventHandler::on() expects cb to be a Function');\n            }\n            const added = [];\n            const _register = n => {\n                if (!(this.events[n] instanceof Array)) {\n                    this.events[n] = [];\n                }\n                added.push(this.events[n].push(args => {\n                    return cb.apply(thisArg, args);\n                }));\n            };\n            if (name instanceof RegExp) {\n                Object.keys(this.events).forEach(function (n) {\n                    if (name.test(n)) {\n                        _register(n);\n                    }\n                });\n            } else {\n                name.replace(/\\s/g, '').split(',').forEach(function (n) {\n                    _register(n);\n                });\n            }\n            return added.length === 1 ? added[0] : added;\n        }\n        off(name, index) {\n            if (!(this.events[name] instanceof Array)) {\n                throw new TypeError('Invalid event name');\n            }\n            if (arguments.length > 1 && typeof index === 'number') {\n                this.events[name].splice(index, 1);\n            } else {\n                this.events[name] = [];\n            }\n        }\n        emit(name, args, thisArg, applyArgs) {\n            args = args || [];\n            thisArg = thisArg || this;\n            if (!(this.events[name] instanceof Array)) {\n                return;\n            }\n            this.events[name].forEach(fn => {\n                try {\n                    if (applyArgs) {\n                        fn.apply(thisArg, args);\n                    } else {\n                        fn.call(thisArg, args);\n                    }\n                } catch (e) {\n                    console.warn('EventHandler::emit() exception', name, e);\n                    console.warn(e.stack);\n                }\n            });\n        }\n    };\n});"]}