{"version":3,"sources":["helpers/google-api.js"],"names":["define","MountManager","ServiceNotificationIcon","Preloader","a","b","jsonp","gapi","window","SingletonInstance","GoogleAPI","[object Object]","clientId","this","accessToken","userId","preloaded","authenticated","loaded","preloads","type","src","callback","preload","then","result","failed","length","join","catch","load","scope","client","auth","cb","authenticate","error","_","loadAll","finished","lload","forEach","i","indexOf","push","current","total","console","debug","_load","iter","args","name","Array","concat","c","d","call","apply","_next","init","info","signOut","e","warn","stack","remove","url","login","immediate","authorize","client_id","user_id","createRingNotification","add","title","onClick","revoke","handleAuthResult","authResult","error_subtype","id","access_token","oauth2","userinfo","get","execute","resp","res","msg","instance","create","_run","getConfig"],"mappings":"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","file":"../../helpers/google-api.js","sourcesContent":["define([\n    '../core/mount-manager',\n    './service-notification-icon',\n    '../utils/preloader',\n    '../core/locales',\n    '../core/config',\n    './then-jsonp'\n], function (MountManager, ServiceNotificationIcon, Preloader, a, b, jsonp) {\n    'use strict';\n    const gapi = window.gapi = window.gapi || {};\n    let SingletonInstance = null;\n    class GoogleAPI {\n        constructor(clientId) {\n            this.clientId = clientId;\n            this.accessToken = null;\n            this.userId = null;\n            this.preloaded = false;\n            this.authenticated = false;\n            this.loaded = [];\n            this.preloads = [{\n                    type: 'javascript',\n                    src: 'https://apis.google.com/js/api.js'\n                }];\n        }\n        destroy() {\n        }\n        init(callback) {\n            callback = callback || function () {\n            };\n            if (this.preloaded) {\n                callback(false, true);\n            } else {\n                Preloader.preload(this.preloads).then(result => {\n                    if (result.failed.length) {\n                        this.preloaded = true;\n                    }\n                    callback(result.failed.join('\\n'));\n                }).catch(callback);\n            }\n        }\n        load(load, scope, client, callback) {\n            const auth = cb => {\n                this.authenticate(scope, (error, result) => {\n                    if (error) {\n                        cb(error);\n                    } else {\n                        if (!this.authenticated) {\n                            cb(a._('GAPI_AUTH_FAILURE'));\n                            return;\n                        }\n                        cb(false, result);\n                    }\n                });\n            };\n            const loadAll = finished => {\n                const lload = [];\n                load.forEach(i => {\n                    if (this.loaded.indexOf(i) === -1) {\n                        lload.push(i);\n                    }\n                });\n                let current = 0;\n                let total = lload.length;\n                console.debug('GoogleAPI::load()', load, '=>', lload, scope);\n                const _load = (iter, cb) => {\n                    let args = [];\n                    let name = null;\n                    if (iter instanceof Array) {\n                        if (iter.length > 0 && iter.length < 3) {\n                            args = args.concat(iter);\n                            name = iter[0];\n                        }\n                    } else {\n                        args.push(iter);\n                        name = iter;\n                    }\n                    args.push((a, b, c, d) => {\n                        this.loaded.push(name);\n                        cb.call(this, a, b, c, d);\n                    });\n                    if (client) {\n                        gapi.client.load.apply(gapi, args);\n                    } else {\n                        gapi.load.apply(gapi, args);\n                    }\n                };\n                function _next() {\n                    if (current >= total) {\n                        finished();\n                    } else {\n                        _load(lload[current], () => {\n                            _next();\n                        });\n                        current++;\n                    }\n                }\n                _next();\n            };\n            this.init(error => {\n                if (error) {\n                    callback(error);\n                    return;\n                }\n                if (!window.gapi || !gapi.load) {\n                    callback(a._('GAPI_LOAD_FAILURE'));\n                    return;\n                }\n                auth(error => {\n                    if (error) {\n                        callback(error);\n                        return;\n                    }\n                    loadAll((error, result) => {\n                        callback(error, result, SingletonInstance);\n                    });\n                });\n            });\n        }\n        signOut(cb) {\n            cb = cb || function () {\n            };\n            console.info('GoogleAPI::signOut()');\n            if (this.authenticated) {\n                try {\n                    gapi.auth.signOut();\n                } catch (e) {\n                    console.warn('GoogleAPI::signOut()', 'failed', e);\n                    console.warn(e.stack);\n                }\n                this.authenticated = false;\n                ServiceNotificationIcon.remove('Google API');\n            }\n            MountManager.remove('GoogleDrive');\n            cb(false, true);\n        }\n        revoke(callback) {\n            console.info('GoogleAPI::revoke()');\n            if (!this.accessToken) {\n                callback(false);\n                return;\n            }\n            const url = 'https://accounts.google.com/o/oauth2/revoke?token=' + this.accessToken;\n            jsonp('GET', url).then(() => callback(true)).catch(() => callback(false));\n        }\n        authenticate(scope, callback) {\n            console.info('GoogleAPI::authenticate()');\n            callback = callback || function () {\n            };\n            const getUserId = cb => {\n                cb = cb || function () {\n                };\n                gapi.client.load('oauth2', 'v2', () => {\n                    gapi.client.oauth2.userinfo.get().execute(resp => {\n                        console.info('GoogleAPI::authenticate() => getUserId()', resp);\n                        cb(resp.id);\n                    });\n                });\n            };\n            const login = (immediate, cb) => {\n                console.info('GoogleAPI::authenticate() => login()', immediate);\n                cb = cb || function () {\n                };\n                gapi.auth.authorize({\n                    client_id: this.clientId,\n                    scope: scope,\n                    user_id: this.userId,\n                    immediate: immediate\n                }, cb);\n            };\n            const createRingNotification = () => {\n                ServiceNotificationIcon.remove('Google API');\n                ServiceNotificationIcon.add('Google API', [\n                    {\n                        title: a._('GAPI_SIGN_OUT'),\n                        onClick: () => {\n                            this.signOut();\n                        }\n                    },\n                    {\n                        title: a._('GAPI_REVOKE'),\n                        onClick: () => {\n                            this.revoke(() => {\n                                this.signOut();\n                            });\n                        }\n                    }\n                ]);\n            };\n            const handleAuthResult = (authResult, immediate) => {\n                console.info('GoogleAPI::authenticate() => handleAuthResult()', authResult);\n                if (authResult.error) {\n                    if (authResult.error_subtype === 'origin_mismatch' || authResult.error_subtype === 'access_denied' && !immediate) {\n                        const msg = a._('GAPI_AUTH_FAILURE_FMT', authResult.error, authResult.error_subtype);\n                        callback(msg);\n                        return;\n                    }\n                }\n                if (authResult && !authResult.error) {\n                    getUserId(id => {\n                        this.userId = id;\n                        if (id) {\n                            createRingNotification();\n                            this.authenticated = true;\n                            this.accessToken = authResult.access_token || null;\n                            callback(false, true);\n                        } else {\n                            callback(false, false);\n                        }\n                    });\n                } else {\n                    login(false, res => {\n                        handleAuthResult(res, false);\n                    });\n                }\n            };\n            gapi.load('auth:client', result => {\n                if (result && result.error) {\n                    const msg = a._('GAPI_AUTH_FAILURE_FMT', result.error, result.error_subtype);\n                    callback(msg);\n                    return;\n                }\n                login(true, res => {\n                    handleAuthResult(res, true);\n                });\n            });\n        }\n    }\n    function instance() {\n        return SingletonInstance;\n    }\n    function create(args, callback) {\n        const load = args.load || [];\n        const scope = args.scope || [];\n        const client = args.client === true;\n        function _run() {\n            SingletonInstance.load(load, scope, client, callback);\n        }\n        if (SingletonInstance) {\n            _run();\n            return;\n        }\n        let clientId = null;\n        try {\n            clientId = b.getConfig('GoogleAPI.ClientId');\n        } catch (e) {\n            console.warn('getGoogleAPI()', e, e.stack);\n        }\n        if (!clientId) {\n            callback(a._('GAPI_DISABLED'));\n            return;\n        }\n        SingletonInstance = new GoogleAPI(clientId);\n        _run();\n    }\n    return {\n        instance: instance,\n        create: create\n    };\n});"]}