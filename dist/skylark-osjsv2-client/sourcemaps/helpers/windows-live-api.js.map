{"version":3,"sources":["helpers/windows-live-api.js"],"names":["define","MountManager","ServiceNotificationIcon","Preloader","a","b","redirectURI","window","location","href","replace","SingletonInstance","WindowsLiveAPI","[object Object]","clientId","this","hasSession","loaded","inited","accessToken","lastScope","preloads","type","src","callback","preload","then","result","failed","length","join","catch","scope","console","debug","WL","_login","sort","currScope","toString","login","error","response","setTimeout","init","Event","subscribe","c","d","onLogin","onLogout","onLog","onSessionChange","client_id","display","redirect_uri","session","access_token","status","_","error_description","remove","unsubscribe","_removeRing","logout","warn","arguments","getSession","add","title","onClick","instance","create","args","_run","load","getConfig","e","stack"],"mappings":";;;;;;;AAAAA,QACI,wBACA,8BACA,qBACA,kBACA,kBACD,SAAUC,EAAcC,EAAyBC,EAAWC,EAAGC,GAC9D,aACA,MAAMC,EAAcC,OAAOC,SAASC,KAAKC,QAAQ,MAAO,IAAM,2BAC9D,IAAIC,EAAoB,WAClBC,EACFC,YAAYC,GACRC,KAAKC,YAAa,EAClBD,KAAKD,SAAWA,EAChBC,KAAKE,QAAS,EACdF,KAAKG,QAAS,EACdH,KAAKI,YAAc,KACnBJ,KAAKK,UAAY,KACjBL,KAAKM,WACGC,KAAM,aACNC,IAAK,6BAGjBV,WAEAA,KAAKW,GACDA,EAAWA,GAAY,aAEnBT,KAAKE,OACLO,GAAS,GAAO,GAEhBrB,EAAUsB,QAAQV,KAAKM,UAAUK,KAAKC,IAC7BA,EAAOC,OAAOC,SACfd,KAAKE,QAAS,GAElBO,EAASG,EAAOC,OAAOE,KAAK,SAC7BC,MAAM,IAAMP,KAGvBX,KAAKmB,EAAOR,GACRS,QAAQC,MAAM,yBAA0BF,GACxC,IAAIG,EAAK5B,OAAO4B,OAChB,MAAMC,EAAS,KACX,MAAMhB,GAAaL,KAAKK,eAAiBiB,OACnCC,GAAaN,OAAaK,OAC5BtB,KAAKC,YAAcI,EAAUmB,aAAeD,EAAUC,WACtDf,GAAS,GAAO,GAGpBT,KAAKyB,MAAMR,EAAO,CAACS,EAAOC,KAClBD,EACAjB,EAASiB,GAGbE,WAAW,KACPnB,GAAS,GAAO,IACjB,OAGXT,KAAK6B,KAAKH,IACFA,EACAjB,EAASiB,GAGRlC,OAAO4B,IAIZA,EAAK5B,OAAO4B,OACRpB,KAAKG,OACLkB,KAEArB,KAAKG,QAAS,EACdiB,EAAGU,MAAMC,UAAU,aAAc,CAAC1C,EAAGC,EAAG0C,EAAGC,KACvCjC,KAAKkC,QAAQ7C,EAAGC,EAAG0C,EAAGC,KAE1Bb,EAAGU,MAAMC,UAAU,cAAe,CAAC1C,EAAGC,EAAG0C,EAAGC,KACxCjC,KAAKmC,SAAS9C,EAAGC,EAAG0C,EAAGC,KAE3Bb,EAAGU,MAAMC,UAAU,SAAU,CAAC1C,EAAGC,EAAG0C,EAAGC,KACnCjC,KAAKoC,MAAM/C,EAAGC,EAAG0C,EAAGC,KAExBb,EAAGU,MAAMC,UAAU,qBAAsB,CAAC1C,EAAGC,EAAG0C,EAAGC,KAC/CjC,KAAKqC,gBAAgBhD,EAAGC,EAAG0C,EAAGC,KAElCb,EAAGS,MACCS,UAAWtC,KAAKD,SAChBwC,QAAS,QACTC,aAAcjD,IACfoB,KAAKC,IACJM,QAAQC,MAAM,yBAA0B,KAAMP,GAC1CA,EAAO6B,UACPzC,KAAKI,YAAcQ,EAAO6B,QAAQC,cAAgB,MAEhC,cAAlB9B,EAAO+B,OACPlC,GAAS,GAAO,GACS,YAAlBG,EAAO+B,OACdtB,IAEAZ,EAASpB,EAAEuD,EAAE,wBAAyBhC,EAAO+B,OAAOnB,cAEzDZ,IACCM,QAAQQ,MAAM,yBAA0B,eAAgBd,GACxDH,EAASG,EAAOiC,uBAtCpBpC,EAASpB,EAAEuD,EAAE,yBA2CzB9C,cACIX,EAAwB2D,OAAO,oBAEnChD,OAAOW,GACHA,EAAWA,GAAY,aAEvB,MAAMW,EAAK5B,OAAO4B,OACdpB,KAAKC,YACLQ,GAAS,GAAO,GAEpBW,EAAGU,MAAMiB,YAAY,eACrB3B,EAAGU,MAAMC,UAAU,cAAe,KAC9B/B,KAAKgD,cACL5B,EAAGU,MAAMiB,YAAY,eACrBtC,GAAS,GAAO,KAEpBW,EAAG6B,SACH/D,EAAa4D,OAAO,YAExBhD,MAAMmB,EAAOR,GACT,MAAMW,EAAK5B,OAAO4B,OACdpB,KAAKC,WACLQ,GAAS,GAAO,GAGpBW,EAAGK,OACCR,MAAOA,EACPuB,aAAcjD,IACfoB,KAAKC,IACkB,cAAlBA,EAAO+B,OACPlC,GAAS,GAAO,GAEhBA,EAASpB,EAAEuD,EAAE,wBAElBhC,IACCH,EAASpB,EAAEuD,EAAE,yBAA0BhC,EAAOiC,sBAGtD/C,kBACIoB,QAAQgC,KAAK,oCAAqCC,WAClD,MACMV,GADKjD,OAAO4B,QACCgC,aAEfpD,KAAKC,aADLwC,EAMR3C,UACIoB,QAAQgC,KAAK,4BAA6BC,WAC1CnD,KAAKC,YAAa,EAClBd,EAAwBkE,IAAI,qBACpBC,MAAOjE,EAAEuD,EAAE,kBACXW,QAAS,KACLvD,KAAKiD,aAIrBnD,WACIoB,QAAQgC,KAAK,6BAA8BC,WAC3CnD,KAAKC,YAAa,EAClBD,KAAKgD,cAETlD,QACIoB,QAAQC,MAAM,0BAA2BgC,YA+BjD,OACIK,SA7BJ,WACI,OAAO5D,GA6BP6D,OA3BJ,SAAgBC,EAAMjD,GAElB,SAASkD,IACL,MAAM1C,EAAQyC,EAAKzC,MACnBrB,EAAkBgE,KAAK3C,EAAOS,IAC1BjB,EAASiB,IAAgB,EAAO9B,KAGxC,GAPA8D,EAAOA,MAOH9D,EAEA,YADA+D,IAGJ,IAAI5D,EAAW,KACf,IACIA,EAAWT,EAAEuE,UAAU,2BACzB,MAAOC,GACL5C,QAAQgC,KAAK,sBAAuBY,EAAGA,EAAEC,OAExChE,GAILH,EAAoB,IAAIC,EAAeE,GACvC4D,KAJIlD,EAASpB,EAAEuD,EAAE","file":"../../helpers/windows-live-api.js","sourcesContent":["define([\n    '../core/mount-manager',\n    './service-notification-icon',\n    '../utils/preloader',\n    '../core/locales',\n    '../core/config'\n], function (MountManager, ServiceNotificationIcon, Preloader, a, b) {\n    'use strict';\n    const redirectURI = window.location.href.replace(/\\/$/, '') + '/windows-live-oauth.html';\n    let SingletonInstance = null;\n    class WindowsLiveAPI {\n        constructor(clientId) {\n            this.hasSession = false;\n            this.clientId = clientId;\n            this.loaded = false;\n            this.inited = false;\n            this.accessToken = null;\n            this.lastScope = null;\n            this.preloads = [{\n                    type: 'javascript',\n                    src: '//js.live.net/v5.0/wl.js'\n                }];\n        }\n        destroy() {\n        }\n        init(callback) {\n            callback = callback || function () {\n            };\n            if (this.loaded) {\n                callback(false, true);\n            } else {\n                Preloader.preload(this.preloads).then(result => {\n                    if (!result.failed.length) {\n                        this.loaded = true;\n                    }\n                    callback(result.failed.join('\\n'));\n                }).catch(() => callback());\n            }\n        }\n        load(scope, callback) {\n            console.debug('WindowsLiveAPI::load()', scope);\n            let WL = window.WL || {};\n            const _login = () => {\n                const lastScope = (this.lastScope || []).sort();\n                const currScope = (scope || []).sort();\n                if (this.hasSession && lastScope.toString() === currScope.toString()) {\n                    callback(false, true);\n                    return;\n                }\n                this.login(scope, (error, response) => {\n                    if (error) {\n                        callback(error);\n                        return;\n                    }\n                    setTimeout(() => {\n                        callback(false, true);\n                    }, 10);\n                });\n            };\n            this.init(error => {\n                if (error) {\n                    callback(error);\n                    return;\n                }\n                if (!window.WL) {\n                    callback(a._('WLAPI_LOAD_FAILURE'));\n                    return;\n                }\n                WL = window.WL || {};\n                if (this.inited) {\n                    _login();\n                } else {\n                    this.inited = true;\n                    WL.Event.subscribe('auth.login', (a, b, c, d) => {\n                        this.onLogin(a, b, c, d);\n                    });\n                    WL.Event.subscribe('auth.logout', (a, b, c, d) => {\n                        this.onLogout(a, b, c, d);\n                    });\n                    WL.Event.subscribe('wl.log', (a, b, c, d) => {\n                        this.onLog(a, b, c, d);\n                    });\n                    WL.Event.subscribe('auth.sessionChange', (a, b, c, d) => {\n                        this.onSessionChange(a, b, c, d);\n                    });\n                    WL.init({\n                        client_id: this.clientId,\n                        display: 'popup',\n                        redirect_uri: redirectURI\n                    }).then(result => {\n                        console.debug('WindowsLiveAPI::load()', '=>', result);\n                        if (result.session) {\n                            this.accessToken = result.session.access_token || null;\n                        }\n                        if (result.status === 'connected') {\n                            callback(false, true);\n                        } else if (result.status === 'success') {\n                            _login();\n                        } else {\n                            callback(a._('WLAPI_INIT_FAILED_FMT', result.status.toString()));\n                        }\n                    }, result => {\n                        console.error('WindowsLiveAPI::load()', 'init() error', result);\n                        callback(result.error_description);\n                    });\n                }\n            });\n        }\n        _removeRing() {\n            ServiceNotificationIcon.remove('Windows Live API');\n        }\n        logout(callback) {\n            callback = callback || function () {\n            };\n            const WL = window.WL || {};\n            if (this.hasSession) {\n                callback(false, false);\n            }\n            WL.Event.unsubscribe('auth.logout');\n            WL.Event.subscribe('auth.logout', () => {\n                this._removeRing();\n                WL.Event.unsubscribe('auth.logout');\n                callback(false, true);\n            });\n            WL.logout();\n            MountManager.remove('OneDrive');\n        }\n        login(scope, callback) {\n            const WL = window.WL || {};\n            if (this.hasSession) {\n                callback(false, true);\n                return;\n            }\n            WL.login({\n                scope: scope,\n                redirect_uri: redirectURI\n            }).then(result => {\n                if (result.status === 'connected') {\n                    callback(false, true);\n                } else {\n                    callback(a._('WLAPI_LOGIN_FAILED'));\n                }\n            }, result => {\n                callback(a._('WLAPI_LOGIN_FAILED_FMT', result.error_description));\n            });\n        }\n        onSessionChange() {\n            console.warn('WindowsLiveAPI::onSessionChange()', arguments);\n            const WL = window.WL || {};\n            const session = WL.getSession();\n            if (session) {\n                this.hasSession = true;\n            } else {\n                this.hasSession = false;\n            }\n        }\n        onLogin() {\n            console.warn('WindowsLiveAPI::onLogin()', arguments);\n            this.hasSession = true;\n            ServiceNotificationIcon.add('Windows Live API', [{\n                    title: a._('WLAPI_SIGN_OUT'),\n                    onClick: () => {\n                        this.logout();\n                    }\n                }]);\n        }\n        onLogout() {\n            console.warn('WindowsLiveAPI::onLogout()', arguments);\n            this.hasSession = false;\n            this._removeRing();\n        }\n        onLog() {\n            console.debug('WindowsLiveAPI::onLog()', arguments);\n        }\n    }\n    function instance() {\n        return SingletonInstance;\n    }\n    function create(args, callback) {\n        args = args || {};\n        function _run() {\n            const scope = args.scope;\n            SingletonInstance.load(scope, error => {\n                callback(error ? error : false, SingletonInstance);\n            });\n        }\n        if (SingletonInstance) {\n            _run();\n            return;\n        }\n        let clientId = null;\n        try {\n            clientId = b.getConfig('WindowsLiveAPI.ClientId');\n        } catch (e) {\n            console.warn('getWindowsLiveAPI()', e, e.stack);\n        }\n        if (!clientId) {\n            callback(a._('WLAPI_DISABLED'));\n            return;\n        }\n        SingletonInstance = new WindowsLiveAPI(clientId);\n        _run();\n    }\n    return {\n        instance: instance,\n        create: create\n    };\n});"]}