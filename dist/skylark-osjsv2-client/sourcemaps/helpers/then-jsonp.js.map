{"version":3,"sources":["helpers/then-jsonp.js"],"names":["define","handleQs","jsonpID","queues","method","url","options","callback","result","Promise","resolve","reject","TypeError","undefined","body","headers","followRedirects","qs","json","Object","keys","forEach","key","callbackName","run","abortTimeout","script","document","createElement","head","getElementsByTagName","documentElement","done","onComplete","success","onload","onreadystatechange","onerror","clearTimeout","window","parentNode","removeChild","length","shift","this","readyState","setTimeout","Error","timeout","src","async","appendChild","callbackParameter","toLowerCase","methodParameter","push","getBody","then","res","nodeify"],"mappings":";;;;;;;AAAAA,QAAQ,eAAe,SAASC,GAC9B,aAEA,IAAIC,EAAU,EAEVC,KAwHJ,OAtHA,SAAgBC,EAAQC,EAAKC,EAASC,GACpC,IAAIC,EAAS,IAAIC,QAAQ,SAAUC,EAASC,GAI1C,GAAsB,iBAAXP,EACT,MAAM,IAAIQ,UAAU,gCAEtB,GAAmB,iBAARP,EACT,MAAM,IAAIO,UAAU,kCAStB,GAPuB,mBAAZN,IACTC,EAAWD,EACXA,MAEc,OAAZA,QAAgCO,IAAZP,IACtBA,MAEqB,iBAAZA,EACT,MAAM,IAAIM,UAAU,wCAMtB,GAJwB,mBAAbL,IACTA,OAAWM,GAGTP,EAAQQ,KACV,MAAM,IAAIF,UAAU,oDAEtB,GAAIN,EAAQS,QACV,MAAM,IAAIH,UAAU,wDAEtB,IAAgC,IAA5BN,EAAQU,gBACV,MAAM,IAAIJ,UAAU,gEAGtBN,EAAQW,GAAKX,EAAQW,OACjBX,EAAQY,OACVC,OAAOC,KAAKd,EAAQY,MAAMG,QAAQ,SAAUC,GAC1ChB,EAAQW,GAAGK,GAAOhB,EAAQY,KAAKI,YAE1BhB,EAAQY,MAGjB,IAAIK,EAAejB,EAAQiB,cAAgB,iBAAmBrB,EAgB9D,SAASsB,IAEHlB,EAAQW,KACVZ,EAAMJ,EAASI,EAAKC,EAAQW,KAG9B,IAEIQ,EAFAC,EAASC,SAASC,cAAc,UAChCC,EAAOF,SAASG,qBAAqB,QAAQ,IAAMH,SAASI,gBAE5DC,GAAO,EACX,SAASC,EAAWC,GACbF,IACHA,GAAO,EACPN,EAAOS,OAAST,EAAOU,mBAAqBV,EAAOW,QAAU,KAC7DC,aAAab,GACTF,KAAgBgB,SACdL,SAAgBK,OAAOhB,GACtBgB,OAAOhB,GAAgB,cAE1BG,GAAUA,EAAOc,YACnBd,EAAOc,WAAWC,YAAYf,GAE5BvB,EAAOoB,GAAcmB,OAAQvC,EAAOoB,GAAcoB,OAArBxC,UACrBA,EAAOoB,IAGvBG,EAAOS,OAAST,EAAOU,mBAAqB,WACrCQ,KAAKC,YAAkC,WAApBD,KAAKC,YAA+C,aAApBD,KAAKC,aAC3DZ,IACAa,WAAW,WACTnC,EAAO,IAAIoC,MAAM,oDAChB,OAGPrB,EAAOW,QAAU,WACfJ,IACAtB,EAAO,IAAIoC,MAAM,0BAEnBR,OAAOhB,GAAgB,SAAUf,GAC/ByB,GAAW,GACXvB,EAAQF,IAEViB,EAAeqB,WAAW,WACxBb,IACAtB,EAAO,IAAIoC,MAAM,qBAChBzC,EAAQ0C,SAAW,KAEtBtB,EAAOuB,IAAM5C,EACbqB,EAAOwB,OAAQ,EAEfrB,EAAKsB,YAAYzB,IAhEe,IAA9BpB,EAAQ8C,oBACV9C,EAAQW,GAAGX,EAAQ8C,mBAAqB,YAAc7B,GAE3B,QAAzBnB,EAAOiD,gBACT/C,EAAQW,GAAGX,EAAQgD,iBAAmB,UAAYlD,GAGhDD,EAAOoB,GACTpB,EAAOoB,GAAcgC,KAAK/B,IAE1BrB,EAAOoB,MACPC,OA2DJ,OAHAhB,EAAOgD,QAAU,WACf,OAAOhD,EAAOiD,KAAK,SAAUC,GAAO,OAAOA,EAAIF,aAE1ChD,EAAOmD,QAAQpD","file":"../../helpers/then-jsonp.js","sourcesContent":["define(['./handle-qs'],function(handleQs){\r\n  'use strict';\r\n\r\n  var jsonpID = 0;\r\n\r\n  var queues = {};\r\n\r\n  function pquest(method, url, options, callback) {\r\n    var result = new Promise(function (resolve, reject) {\r\n\r\n      // check types of arguments\r\n\r\n      if (typeof method !== 'string') {\r\n        throw new TypeError('The method must be a string.');\r\n      }\r\n      if (typeof url !== 'string') {\r\n        throw new TypeError('The URL/path must be a string.');\r\n      }\r\n      if (typeof options === 'function') {\r\n        callback = options;\r\n        options = {};\r\n      }\r\n      if (options === null || options === undefined) {\r\n        options = {};\r\n      }\r\n      if (typeof options !== 'object') {\r\n        throw new TypeError('Options must be an object (or null).');\r\n      }\r\n      if (typeof callback !== 'function') {\r\n        callback = undefined;\r\n      }\r\n\r\n      if (options.body) {\r\n        throw new TypeError('JSONP does not support requests that have bodies');\r\n      }\r\n      if (options.headers) {\r\n        throw new TypeError('JSONP does not support requests that specify headers');\r\n      }\r\n      if (options.followRedirects === false) {\r\n        throw new TypeError('JSONP does not support requests that do not follow redirects');\r\n      }\r\n\r\n      options.qs = options.qs || {};\r\n      if (options.json) {\r\n        Object.keys(options.json).forEach(function (key) {\r\n          options.qs[key] = options.json[key];\r\n        });\r\n        delete options.json;\r\n      }\r\n\r\n      var callbackName = options.callbackName || 'then_jsonp_' + (++jsonpID);\r\n\r\n      if (options.callbackParameter !== false) {\r\n        options.qs[options.callbackParameter || 'callback'] = callbackName;\r\n      }\r\n      if (method.toLowerCase() !== 'get') {\r\n        options.qs[options.methodParameter || 'method'] = method;\r\n      }\r\n\r\n      if (queues[callbackName]) {\r\n        queues[callbackName].push(run);\r\n      } else {\r\n        queues[callbackName] = [];\r\n        run();\r\n      }\r\n\r\n      function run() {\r\n        // handle query string\r\n        if (options.qs) {\r\n          url = handleQs(url, options.qs);\r\n        }\r\n\r\n        var script = document.createElement('script');\r\n        var head = document.getElementsByTagName('head')[0] || document.documentElement;\r\n        var abortTimeout;\r\n        var done = false;\r\n        function onComplete(success) {\r\n          if (!done) {\r\n            done = true;\r\n            script.onload = script.onreadystatechange = script.onerror = null;\r\n            clearTimeout(abortTimeout);\r\n            if (callbackName in window) {\r\n              if (success) delete window[callbackName];\r\n              else window[callbackName] = function () {};\r\n            }\r\n            if (script && script.parentNode) {\r\n              script.parentNode.removeChild(script);\r\n            }\r\n            if (queues[callbackName].length) queues[callbackName].shift()();\r\n            else delete queues[callbackName];\r\n          }\r\n        }\r\n        script.onload = script.onreadystatechange = function () {\r\n          if (!this.readyState || this.readyState === \"loaded\" || this.readyState === \"complete\") {\r\n            onComplete();\r\n            setTimeout(function () {\r\n              reject(new Error('JSONP callback should already have been called'));\r\n            }, 100);\r\n          }\r\n        };\r\n        script.onerror = function () {\r\n          onComplete();\r\n          reject(new Error('JSONP request failed'));\r\n        };\r\n        window[callbackName] = function (result) {\r\n          onComplete(true);\r\n          resolve(result);\r\n        };\r\n        abortTimeout = setTimeout(function(){\r\n          onComplete();\r\n          reject(new Error('JSONP timed out'));\r\n        }, options.timeout || 10000);\r\n\r\n        script.src = url;\r\n        script.async = true;\r\n\r\n        head.appendChild(script);\r\n      }\r\n    });\r\n    result.getBody = function () {\r\n      return result.then(function (res) { return res.getBody(); });\r\n    };\r\n    return result.nodeify(callback);\r\n  }\r\n\r\n  return pquest;\r\n});"]}