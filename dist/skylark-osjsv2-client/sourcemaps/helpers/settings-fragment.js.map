{"version":3,"sources":["helpers/settings-fragment.js"],"names":["define","Misc","SettingsFragment","[object Object]","obj","poolName","sm","this","_sm","_pool","constructor","Array","Error","_settings","key","defaultValue","ret","value","save","triggerWatch","mergeObject","indexOf","console","warn","changed","callback","nestedSetting","arguments","every","defaults","overwrite"],"mappings":";;;;;;;AAAAA,QAAQ,iBAAkB,SAAUC,GAChC,aACA,aAAaC,EACTC,YAAYC,EAAKC,EAAUC,GAGvB,GAFAC,KAAKC,IAAMF,EACXC,KAAKE,MAAQJ,EACTD,EAAIM,iBAAmBA,eACjBN,aAAeO,OACjB,MAAM,IAAIC,MAAM,yEAGxBL,KAAKM,UAAYT,EAErBD,IAAIW,EAAKC,GACL,MAAMC,EAAMF,EAAMP,KAAKM,UAAUC,GAAOP,KAAKM,UAC7C,YAAsB,IAARG,EAAsBD,EAAeC,EAEvDb,IAAIW,EAAKG,EAAOC,EAAMC,GAmBlB,OAlBY,OAARL,EACAb,EAAKmB,YAAYb,KAAKM,UAAWI,IAGzB,SACA,UACFI,eAAeP,IAAQ,EACzBP,KAAKM,UAAUC,GAAOG,EAEtBK,QAAQC,KAAK,0BAA2B,sCAAuCT,GAGnFI,GACAX,KAAKC,IAAIU,KAAKX,KAAKE,MAAOS,QAEF,IAAjBC,IAAiD,IAAjBA,GACvCZ,KAAKC,IAAIgB,QAAQjB,KAAKE,OAEnBF,KAEXJ,KAAKsB,GACD,OAAOlB,KAAKC,IAAIU,KAAKX,KAAKE,MAAOgB,GAErCtB,aACI,IAAIuB,EAAgBnB,KAAKM,UAQzB,OAPAc,UAAUC,MAAM,SAAUd,GACtB,QAAIY,EAAcZ,KACdY,EAAgBA,EAAcZ,IACvB,KAIRY,EAEXvB,cAAc0B,GAEV,OADA5B,EAAKmB,YAAYb,KAAKM,UAAWgB,GAAYC,WAAW,IACjDvB,KAEXJ,SAASW,GACL,QAAmC,IAAxBP,KAAKM,UAAUC,GACtB,MAAM,IAAIF,MAAM,wEAEpB,OAAO,IAAIV,EAAiBK,KAAKM,UAAUC,GAAMP,KAAKE,MAAOF,KAAKC","file":"../../helpers/settings-fragment.js","sourcesContent":["define(['../utils/misc'], function (Misc) {\n    'use strict';\n    return class SettingsFragment {\n        constructor(obj, poolName, sm) {\n            this._sm = sm;\n            this._pool = poolName;\n            if (obj.constructor !== {}.constructor) {\n                if (!(obj instanceof Array)) {\n                    throw new Error('SettingsFragment will not work unless you give it a object to manage.');\n                }\n            }\n            this._settings = obj;\n        }\n        get(key, defaultValue) {\n            const ret = key ? this._settings[key] : this._settings;\n            return typeof ret === 'undefined' ? defaultValue : ret;\n        }\n        set(key, value, save, triggerWatch) {\n            if (key === null) {\n                Misc.mergeObject(this._settings, value);\n            } else {\n                if ([\n                        'number',\n                        'string'\n                    ].indexOf(typeof key) >= 0) {\n                    this._settings[key] = value;\n                } else {\n                    console.warn('SettingsFragment::set()', 'expects key to be a valid iter, not', key);\n                }\n            }\n            if (save) {\n                this._sm.save(this._pool, save);\n            }\n            if (typeof triggerWatch === 'undefined' || triggerWatch === true) {\n                this._sm.changed(this._pool);\n            }\n            return this;\n        }\n        save(callback) {\n            return this._sm.save(this._pool, callback);\n        }\n        getChained() {\n            let nestedSetting = this._settings;\n            arguments.every(function (key) {\n                if (nestedSetting[key]) {\n                    nestedSetting = nestedSetting[key];\n                    return true;\n                }\n                return false;\n            });\n            return nestedSetting;\n        }\n        mergeDefaults(defaults) {\n            Misc.mergeObject(this._settings, defaults, { overwrite: false });\n            return this;\n        }\n        instance(key) {\n            if (typeof this._settings[key] === 'undefined') {\n                throw new Error(\"The object doesn't contain that key. SettingsFragment will not work.\");\n            }\n            return new SettingsFragment(this._settings[key], this._pool, this._sm);\n        }\n    };\n});"]}