{"version":3,"sources":["helpers/window-behaviour.js"],"names":["define","DOM","Events","Theme","BehaviourState","[object Object]","wm","win","action","mousePosition","this","$element","_$element","$top","_$top","$handle","_$resize","rectWorkspace","getWindowSpace","rectWindow","x","_position","y","w","_dimension","h","r","b","theme","Object","assign","getStyleTheme","style","window","margin","border","topMargin","borderSize","snapping","cornerSize","getSetting","windowSize","moved","direction","startX","startY","minWidth","_properties","min_width","minHeight","min_height","windowRects","getWindows","forEach","_wid","pos","dim","rect","left","top","width","height","right","bottom","push","snapRects","dir","$position","dirX","dirY","checks","nw","n","ne","e","se","sw","keys","k","createWindowBehaviour","current","newRect","onMouseMove","ev","getMouseLocked","result","preventDefault","dx","dy","newLeft","newTop","cornerSnapSize","windowSnapSize","newRight","newBottom","every","onWindowMove","nh","nl","nt","indexOf","Math","max","onWindowResize","_move","_emit","_resize","onMouseDown","_state","maximized","_focus","setAttribute","document","body","calculateDirection","getRect","$bind","_mouselock","_onChange","onMouseUp","$unbind","allow_move","_destroyed","allow_resize"],"mappings":"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","file":"../../helpers/window-behaviour.js","sourcesContent":["define([\n    '../utils/dom',\n    '../utils/events',\n    '../core/theme'\n], function (DOM, Events, Theme) {\n    'use strict';\n    class BehaviourState {\n        constructor(wm, win, action, mousePosition) {\n            this.win = win;\n            this.$element = win._$element;\n            this.$top = win._$top;\n            this.$handle = win._$resize;\n            this.rectWorkspace = wm.getWindowSpace(true);\n            this.rectWindow = {\n                x: win._position.x,\n                y: win._position.y,\n                w: win._dimension.w,\n                h: win._dimension.h,\n                r: win._dimension.w + win._position.x,\n                b: win._dimension.h + win._position.y\n            };\n            const theme = Object.assign({}, Theme.getStyleTheme(true, true));\n            if (!theme.style) {\n                theme.style = {\n                    'window': {\n                        margin: 0,\n                        border: 0\n                    }\n                };\n            }\n            this.theme = {\n                topMargin: theme.style.window.margin || 0,\n                borderSize: theme.style.window.border || 0\n            };\n            this.snapping = {\n                cornerSize: wm.getSetting('windowCornerSnap') || 0,\n                windowSize: wm.getSetting('windowSnap') || 0\n            };\n            this.action = action;\n            this.moved = false;\n            this.direction = null;\n            this.startX = mousePosition.x;\n            this.startY = mousePosition.y;\n            this.minWidth = win._properties.min_width;\n            this.minHeight = win._properties.min_height;\n            const windowRects = [];\n            wm.getWindows().forEach(w => {\n                if (w && w._wid !== win._wid) {\n                    const pos = w._position;\n                    const dim = w._dimension;\n                    const rect = {\n                        left: pos.x - this.theme.borderSize,\n                        top: pos.y - this.theme.borderSize,\n                        width: dim.w + this.theme.borderSize * 2,\n                        height: dim.h + this.theme.borderSize * 2 + this.theme.topMargin\n                    };\n                    rect.right = rect.left + rect.width;\n                    rect.bottom = pos.y + dim.h + this.theme.topMargin + this.theme.borderSize;\n                    windowRects.push(rect);\n                }\n            });\n            this.snapRects = windowRects;\n        }\n        getRect() {\n            const win = this.win;\n            return {\n                left: win._position.x,\n                top: win._position.y,\n                width: win._dimension.w,\n                height: win._dimension.h\n            };\n        }\n        calculateDirection() {\n            const dir = DOM.$position(this.$handle);\n            const dirX = this.startX - dir.left;\n            const dirY = this.startY - dir.top;\n            const dirD = 20;\n            const checks = {\n                nw: dirX <= dirD && dirY <= dirD,\n                n: dirX > dirD && dirY <= dirD,\n                w: dirX <= dirD && dirY >= dirD,\n                ne: dirX >= dir.width - dirD && dirY <= dirD,\n                e: dirX >= dir.width - dirD && dirY > dirD,\n                se: dirX >= dir.width - dirD && dirY >= dir.height - dirD,\n                sw: dirX <= dirD && dirY >= dir.height - dirD\n            };\n            let direction = 's';\n            Object.keys(checks).forEach(function (k) {\n                if (checks[k]) {\n                    direction = k;\n                }\n            });\n            this.direction = direction;\n        }\n    }\n    function createWindowBehaviour(win, wm) {\n        let current = null;\n        let newRect = {};\n        function onWindowResize(ev, mousePosition, dx, dy) {\n            if (!current || !current.direction) {\n                return false;\n            }\n            let nw, nh, nl, nt;\n            (function () {\n                if (current.direction.indexOf('s') !== -1) {\n                    nh = current.rectWindow.h + dy;\n                    newRect.height = Math.max(current.minHeight, nh);\n                } else if (current.direction.indexOf('n') !== -1) {\n                    nh = current.rectWindow.h - dy;\n                    nt = current.rectWindow.y + dy;\n                    if (nt < current.rectWorkspace.top) {\n                        nt = current.rectWorkspace.top;\n                        nh = newRect.height;\n                    } else {\n                        if (nh < current.minHeight) {\n                            nt = current.rectWindow.b - current.minHeight;\n                        }\n                    }\n                    newRect.height = Math.max(current.minHeight, nh);\n                    newRect.top = nt;\n                }\n            }());\n            (function () {\n                if (current.direction.indexOf('e') !== -1) {\n                    nw = current.rectWindow.w + dx;\n                    newRect.width = Math.max(current.minWidth, nw);\n                } else if (current.direction.indexOf('w') !== -1) {\n                    nw = current.rectWindow.w - dx;\n                    nl = current.rectWindow.x + dx;\n                    if (nw < current.minWidth) {\n                        nl = current.rectWindow.r - current.minWidth;\n                    }\n                    newRect.width = Math.max(current.minWidth, nw);\n                    newRect.left = nl;\n                }\n            }());\n            return newRect;\n        }\n        function onWindowMove(ev, mousePosition, dx, dy) {\n            let newWidth = null;\n            let newHeight = null;\n            let newLeft = current.rectWindow.x + dx;\n            let newTop = current.rectWindow.y + dy;\n            const borderSize = current.theme.borderSize;\n            const topMargin = current.theme.topMargin;\n            const cornerSnapSize = current.snapping.cornerSize;\n            const windowSnapSize = current.snapping.windowSize;\n            if (newTop < current.rectWorkspace.top) {\n                newTop = current.rectWorkspace.top;\n            }\n            let newRight = newLeft + current.rectWindow.w + borderSize * 2;\n            let newBottom = newTop + current.rectWindow.h + topMargin + borderSize;\n            if (cornerSnapSize > 0) {\n                if (newLeft - borderSize <= cornerSnapSize && newLeft - borderSize >= -cornerSnapSize) {\n                    newLeft = borderSize;\n                } else if (newRight >= current.rectWorkspace.width - cornerSnapSize && newRight <= current.rectWorkspace.width + cornerSnapSize) {\n                    newLeft = current.rectWorkspace.width - current.rectWindow.w - borderSize;\n                }\n                if (newTop <= current.rectWorkspace.top + cornerSnapSize && newTop >= current.rectWorkspace.top - cornerSnapSize) {\n                    newTop = current.rectWorkspace.top + borderSize;\n                } else if (newBottom >= current.rectWorkspace.height + current.rectWorkspace.top - cornerSnapSize && newBottom <= current.rectWorkspace.height + current.rectWorkspace.top + cornerSnapSize) {\n                    newTop = current.rectWorkspace.height + current.rectWorkspace.top - current.rectWindow.h - topMargin - borderSize;\n                }\n            }\n            if (windowSnapSize > 0) {\n                current.snapRects.every(function (rect) {\n                    if (newRight >= rect.left - windowSnapSize && newRight <= rect.left + windowSnapSize) {\n                        newLeft = rect.left - (current.rectWindow.w + borderSize * 2);\n                        return false;\n                    }\n                    if (newLeft - borderSize <= rect.right + windowSnapSize && newLeft - borderSize >= rect.right - windowSnapSize) {\n                        newLeft = rect.right + borderSize * 2;\n                        return false;\n                    }\n                    if (newBottom >= rect.top - windowSnapSize && newBottom <= rect.top + windowSnapSize) {\n                        newTop = rect.top - (current.rectWindow.h + borderSize * 2 + topMargin);\n                        return false;\n                    }\n                    if (newTop <= rect.bottom + windowSnapSize && newTop >= rect.bottom - windowSnapSize) {\n                        newTop = rect.bottom + borderSize * 2;\n                        return false;\n                    }\n                    return true;\n                });\n            }\n            return {\n                left: newLeft,\n                top: newTop,\n                width: newWidth,\n                height: newHeight\n            };\n        }\n        function onMouseUp(ev, action, win, mousePosition) {\n            if (!current) {\n                return;\n            }\n            if (current.moved) {\n                if (action === 'move') {\n                    win._onChange('move', true);\n                    win._emit('moved', [\n                        win._position.x,\n                        win._position.y\n                    ]);\n                } else if (action === 'resize') {\n                    win._onChange('resize', true);\n                    win._emit('resized', [\n                        win._dimension.w,\n                        win._dimension.h\n                    ]);\n                }\n            }\n            current.$element.setAttribute('data-hint', '');\n            document.body.setAttribute('data-window-hint', '');\n            win._emit('postop');\n            current = null;\n        }\n        function onMouseMove(ev, action, win, mousePosition) {\n            if (!wm.getMouseLocked() || !action || !current) {\n                return;\n            }\n            ev.preventDefault();\n            let result;\n            const dx = mousePosition.x - current.startX;\n            const dy = mousePosition.y - current.startY;\n            if (action === 'move') {\n                result = onWindowMove(ev, mousePosition, dx, dy);\n            } else {\n                result = onWindowResize(ev, mousePosition, dx, dy);\n            }\n            if (result) {\n                if (result.left !== null && result.top !== null) {\n                    win._move(result.left, result.top);\n                    win._emit('move', [\n                        result.left,\n                        result.top\n                    ]);\n                }\n                if (result.width !== null && result.height !== null) {\n                    win._resize(result.width, result.height, true);\n                    win._emit('resize', [\n                        result.width,\n                        result.height\n                    ]);\n                }\n            }\n            current.moved = true;\n        }\n        function onMouseDown(ev, action, win, mousePosition) {\n            ev.preventDefault();\n            if (win._state.maximized) {\n                return;\n            }\n            current = new BehaviourState(wm, win, action, mousePosition);\n            newRect = {};\n            win._focus();\n            if (action === 'move') {\n                current.$element.setAttribute('data-hint', 'moving');\n                document.body.setAttribute('data-window-hint', 'moving');\n            } else {\n                current.calculateDirection();\n                current.$element.setAttribute('data-hint', 'resizing');\n                document.body.setAttribute('data-window-hint', 'resizing');\n                newRect = current.getRect();\n            }\n            win._emit('preop');\n            function _onMouseMove(ev, pos) {\n                ev.preventDefault();\n                if (wm._mouselock) {\n                    onMouseMove(ev, action, win, pos);\n                }\n            }\n            function _onMouseUp(ev, pos) {\n                onMouseUp(ev, action, win, pos);\n                Events.$unbind(document, 'pointermove:movewindow,touchmove:movewindowTouch');\n                Events.$unbind(document, 'pointerup:movewindowstop,touchend:movewindowstopTouch');\n            }\n            Events.$bind(document, 'pointermove:movewindow,touchmove:movewindowTouch', _onMouseMove, false);\n            Events.$bind(document, 'pointerup:movewindowstop,touchend:movewindowstopTouch', _onMouseUp, false);\n        }\n        if (win._properties.allow_move) {\n            Events.$bind(win._$top, 'pointerdown,touchstart', (ev, pos) => {\n                ev.preventDefault();\n                if (!win._destroyed) {\n                    onMouseDown(ev, 'move', win, pos);\n                }\n            }, true);\n        }\n        if (win._properties.allow_resize) {\n            Events.$bind(win._$resize, 'pointerdown,touchstart', (ev, pos) => {\n                ev.preventDefault();\n                if (!win._destroyed) {\n                    onMouseDown(ev, 'resize', win, pos);\n                }\n            });\n        }\n    }\n    return { createWindowBehaviour: createWindowBehaviour };\n});"]}