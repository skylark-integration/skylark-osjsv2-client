{"version":3,"sources":["helpers/promise-limit.js"],"names":["define","limiter","count","outstanding","jobs","remove","job","shift","semaphore","queue","length","run","fn","then","resolve","catch","reject","Promise","result","error","err","push","map","items","mapper","failed","limit","this","all","args","arguments","apply","undefined","e","addExtras"],"mappings":";;;;;;;AAAAA,UAAU,WACR,SAASC,EAASC,GAChB,IAAIC,EAAc,EACdC,KAEJ,SAASC,IAQT,IACMC,IARJH,EAEkBD,IAMdI,EAAMF,EAAKG,QACfC,EAAUC,MAAQL,EAAKM,OAEnBJ,GACFK,EAAIL,EAAIM,IAAIC,KAAKP,EAAIQ,SAASC,MAAMT,EAAIU,SAW5C,SAASL,EAAKC,GACZT,IACA,IACE,OAAOc,QAAQH,QAAQF,KAAMC,KAAK,SAAUK,GAE1C,OADAb,IACOa,GACN,SAAUC,GAEX,MADAd,IACMc,IAER,MAAOC,GAEP,OADAf,IACOY,QAAQD,OAAOI,IAI1B,IAAIZ,EAAY,SAAUI,GACxB,OAAIT,GAAeD,EAxBrB,SAAgBU,GACd,OAAO,IAAIK,QAAQ,SAAUH,EAASE,GACpCZ,EAAKiB,MAAMT,GAAIA,EAAIE,QAASA,EAASE,OAAQA,IAC7CR,EAAUC,MAAQL,EAAKM,SAsBhBD,CAAMG,GAEND,EAAIC,IAIf,OAAOJ,EAGT,SAASc,EAAKC,EAAOC,GACnB,IAAIC,GAAS,EAETC,EAAQC,KAEZ,OAAOV,QAAQW,IAAIL,EAAMD,IAAI,WAC3B,IAAIO,EAAOC,UACX,OAAOJ,EAAM,WACX,IAAKD,EACH,OAAOD,EAAOO,WAAMC,EAAWH,GAAMd,MAAM,SAAUkB,GAEnD,MADAR,GAAS,EACHQ,SAOhB,SAASC,EAAWtB,GAGlB,OAFAA,EAAGH,MAAQ,EACXG,EAAGU,IAAMA,EACFV,EAGT,OAAO,SAAUV,GACf,OACSgC,EADLhC,EACeD,EAAQC,GAER,SAAUU,GACzB,OAAOA","file":"../../helpers/promise-limit.js","sourcesContent":["define([],function() {\r\n  function limiter (count) {\r\n    var outstanding = 0\r\n    var jobs = []\r\n\r\n    function remove () {\r\n      outstanding--\r\n\r\n      if (outstanding < count) {\r\n        dequeue()\r\n      }\r\n    }\r\n\r\n    function dequeue () {\r\n      var job = jobs.shift()\r\n      semaphore.queue = jobs.length\r\n\r\n      if (job) {\r\n        run(job.fn).then(job.resolve).catch(job.reject)\r\n      }\r\n    }\r\n\r\n    function queue (fn) {\r\n      return new Promise(function (resolve, reject) {\r\n        jobs.push({fn: fn, resolve: resolve, reject: reject})\r\n        semaphore.queue = jobs.length\r\n      })\r\n    }\r\n\r\n    function run (fn) {\r\n      outstanding++\r\n      try {\r\n        return Promise.resolve(fn()).then(function (result) {\r\n          remove()\r\n          return result\r\n        }, function (error) {\r\n          remove()\r\n          throw error\r\n        })\r\n      } catch (err) {\r\n        remove()\r\n        return Promise.reject(err)\r\n      }\r\n    }\r\n\r\n    var semaphore = function (fn) {\r\n      if (outstanding >= count) {\r\n        return queue(fn)\r\n      } else {\r\n        return run(fn)\r\n      }\r\n    }\r\n\r\n    return semaphore\r\n  }\r\n\r\n  function map (items, mapper) {\r\n    var failed = false\r\n\r\n    var limit = this\r\n\r\n    return Promise.all(items.map(function () {\r\n      var args = arguments\r\n      return limit(function () {\r\n        if (!failed) {\r\n          return mapper.apply(undefined, args).catch(function (e) {\r\n            failed = true\r\n            throw e\r\n          })\r\n        }\r\n      })\r\n    }))\r\n  }\r\n\r\n  function addExtras (fn) {\r\n    fn.queue = 0\r\n    fn.map = map\r\n    return fn\r\n  }\r\n\r\n  return function (count) {\r\n    if (count) {\r\n      return addExtras(limiter(count))\r\n    } else {\r\n      return addExtras(function (fn) {\r\n        return fn()\r\n      })\r\n    }\r\n  }\r\n});\r\n"]}