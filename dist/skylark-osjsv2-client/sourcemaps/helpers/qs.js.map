{"version":3,"sources":["helpers/qs.js"],"names":["define","Response","statusCode","headers","body","url","TypeError","key","this","toLowerCase","prototype","getBody","encoding","err","Error","toString"],"mappings":";;;;;;;AAAAA,UAAU,WACR,aAYA,SAASC,EAASC,EAAYC,EAASC,EAAMC,GAC3C,GAA0B,iBAAfH,EACT,MAAM,IAAII,UAAU,8CAAiDJ,GAEvE,GAAgB,OAAZC,EACF,MAAM,IAAIG,UAAU,0BAEtB,GAAuB,iBAAZH,EACT,MAAM,IAAIG,UAAU,4CAA+CH,GAIrE,IAAK,IAAII,KAFTC,KAAKN,WAAaA,EAClBM,KAAKL,WACWA,EACdK,KAAKL,QAAQI,EAAIE,eAAiBN,EAAQI,GAE5CC,KAAKJ,KAAOA,EACZI,KAAKH,IAAMA,EAgBb,OAbAJ,EAASS,UAAUC,QAAU,SAAUC,GACrC,GAAIJ,KAAKN,YAAc,IAAK,CAC1B,IAAIW,EAAM,IAAIC,MAAM,qCACFN,KAAKN,WAAa,MAAQM,KAAKJ,KAAKW,YAKtD,MAJAF,EAAIX,WAAaM,KAAKN,WACtBW,EAAIV,QAAUK,KAAKL,QACnBU,EAAIT,KAAOI,KAAKJ,KAChBS,EAAIR,IAAMG,KAAKH,IACTQ,EAER,OAAOD,EAAWJ,KAAKJ,KAAKW,SAASH,GAAYJ,KAAKJ,MAGjDH","file":"../../helpers/qs.js","sourcesContent":["define([],function(){\r\n  'use strict';\r\n\r\n\r\n\r\n  /**\r\n   * A response from a web request\r\n   *\r\n   * @param {Number} statusCode\r\n   * @param {Object} headers\r\n   * @param {Buffer} body\r\n   * @param {String} url\r\n   */\r\n  function Response(statusCode, headers, body, url) {\r\n    if (typeof statusCode !== 'number') {\r\n      throw new TypeError('statusCode must be a number but was ' + (typeof statusCode));\r\n    }\r\n    if (headers === null) {\r\n      throw new TypeError('headers cannot be null');\r\n    }\r\n    if (typeof headers !== 'object') {\r\n      throw new TypeError('headers must be an object but was ' + (typeof headers));\r\n    }\r\n    this.statusCode = statusCode;\r\n    this.headers = {};\r\n    for (var key in headers) {\r\n      this.headers[key.toLowerCase()] = headers[key];\r\n    }\r\n    this.body = body;\r\n    this.url = url;\r\n  }\r\n\r\n  Response.prototype.getBody = function (encoding) {\r\n    if (this.statusCode >= 300) {\r\n      var err = new Error('Server responded with status code '\r\n                      + this.statusCode + ':\\n' + this.body.toString());\r\n      err.statusCode = this.statusCode;\r\n      err.headers = this.headers;\r\n      err.body = this.body;\r\n      err.url = this.url;\r\n      throw err;\r\n    }\r\n    return encoding ? this.body.toString(encoding) : this.body;\r\n  };\r\n\r\n  return Response;\r\n});"]}