{"version":3,"sources":["helpers/default-application.js"],"names":["define","Application","DialogWindow","FileMetadata","VFS","FS","Locales","[object Object]","name","args","metadata","opts","super","arguments","this","defaultOptions","Object","assign","readData","rawData","extension","mime","filetypes","filename","destroy","msg","obj","_onMessage","current","_getArgument","win","_getWindow","__mainwindow","source","__pid","file","path","create","buttons","message","_","ev","button","openFile","parent","modal","onError","error","OSjs","__label","onDone","result","_setArgument","showFile","check","__metadata","checkAcceptMime","callbackVFS","_toggleLoading","read","type","then","res","catch","err","url","value","write","updateFile","finally","saveAs","cb","getFileData","filter","saveFile","openDialog","checkHasChanged","discard"],"mappings":";;;;;;;AAAAA,QACI,sBACA,iBACA,cACA,YACA,cACA,mBACD,SAAUC,EAAaC,EAAcC,EAAcC,EAAKC,EAAIC,GAC3D,aACA,qBAAwCL,EACpCM,YAAYC,EAAMC,EAAMC,EAAUC,GAC9BC,SAASC,WACTC,KAAKC,eAAiBC,OAAOC,WACzBC,UAAU,EACVC,SAAS,EACTC,UAAW,GACXC,KAAM,2BACNC,aACAC,SAAU,YACXZ,GAEPJ,UACIK,MAAMY,WAAWX,WAErBN,WAAWkB,EAAKC,EAAKjB,GACjBG,MAAMe,cAAcd,WACpB,MAAMe,EAAUd,KAAKe,aAAa,QAC5BC,EAAMhB,KAAKiB,WAAWjB,KAAKkB,cACrB,QAARP,GAAiC,OAAhBhB,EAAKwB,QAAmBxB,EAAKwB,SAAWnB,KAAKoB,OAASzB,EAAK0B,MACxEL,GAAOF,GAAWA,EAAQQ,OAAS3B,EAAK0B,KAAKC,MAC7ClC,EAAamC,OAAO,WAChBC,SACI,MACA,MAEJC,QAASjC,EAAQkC,EAAE,qBACpB,CAACC,EAAIC,KACW,OAAXA,GAA8B,QAAXA,GACnB5B,KAAK6B,SAAS,IAAIxC,EAAaM,EAAK0B,MAAOL,KAG/Cc,OAAQd,EACRe,OAAO,IAKvBtC,SAAS4B,EAAML,GACX,IAAKK,EACD,OAAO,EAEX,MAAMW,EAAUC,KACRA,IACAC,KAAKD,MAAMjC,KAAKmC,QAAS3C,EAAQkC,EAAE,qBAAsBlC,EAAQkC,EAAE,4BAA6BL,EAAKC,KAAMW,KACpG,GAITG,EAASC,IACXrC,KAAKsC,aAAa,OAAQjB,GAC1BL,EAAIuB,SAASlB,EAAMgB,IAEjBG,EAAQxC,KAAKyC,WAAWlC,SAC9B,IAAKhB,EAAGmD,gBAAgBrB,EAAKd,KAAMiC,GAE/B,OADAN,KAAKD,MAAMjC,KAAKmC,QAAS3C,EAAQkC,EAAE,qBAAsBlC,EAAQkC,EAAE,wBAAyBL,EAAKC,KAAMD,EAAKd,QACrG,EAGX,SAASoC,EAAYV,EAAOI,GACxBrB,EAAI4B,gBAAe,GACfZ,EAAQC,IAGZG,EAAOC,GAOX,OAbArB,EAAI4B,gBAAe,GAQf5C,KAAKC,eAAeG,SACpBd,EAAIuD,KAAKxB,GAAQyB,KAAM9C,KAAKC,eAAeI,QAAU,SAAW,QAAUL,MAAM+C,KAAKC,GAAOL,GAAY,EAAOK,IAAMC,MAAMC,GAAOP,EAAYO,IAE9I5D,EAAI6D,IAAI9B,GAAM0B,KAAKC,GAAOL,GAAY,EAAOK,IAAMC,MAAMC,GAAOP,EAAYO,KAEzE,EAEXzD,SAAS4B,EAAM+B,EAAOpC,GACbK,IAGLL,EAAI4B,gBAAe,GACnBtD,EAAI+D,MAAMhC,EAAM+B,GAAS,GAAI,KAAMpD,MAAM+C,KAAK,KAC1C/C,KAAKsC,aAAa,OAAQjB,GAC1BL,EAAIsC,WAAWjC,IACR,IACR4B,MAAMhB,IACLC,KAAKD,MAAMjC,KAAKmC,QAAS3C,EAAQkC,EAAE,qBAAsBlC,EAAQkC,EAAE,4BAA6BL,EAAKC,KAAMW,MAC5GsB,QAAQ,KACPvC,EAAI4B,gBAAe,MAG3BnD,WAAW4B,EAAML,EAAKwC,EAAQC,GAC1B,MAAML,EAAQpC,EAAI0C,cACbF,EAILpE,EAAamC,OAAO,QAChBF,KAAMA,EACNZ,SAAUY,EAAOA,EAAKZ,SAAWT,KAAKC,eAAeQ,SACrDD,UAAWR,KAAKC,eAAeO,UAC/BmD,OAAQ3D,KAAKyC,WAAWlC,KACxBD,UAAWN,KAAKC,eAAeK,UAC/BC,KAAMP,KAAKC,eAAeM,KAC1BuC,KAAM,QACP,CAACnB,EAAIC,EAAQS,KACG,OAAXT,GACA5B,KAAK4D,SAASvB,EAAQe,EAAOpC,GAEf,mBAAPyC,GACPA,EAAG9B,EAAIC,EAAQS,KAGnBP,OAAQd,EACRe,OAAO,IApBP/B,KAAK4D,SAASvC,EAAM+B,EAAOpC,GAuBnCvB,WAAW4B,EAAML,GACb,MAAM6C,EAAa,KACfzE,EAAamC,OAAO,QAChBF,KAAMA,EACNsC,OAAQ3D,KAAKyC,WAAWlC,MACzB,CAACoB,EAAIC,EAAQS,KACG,OAAXT,GAAmBS,GACnBrC,KAAK6B,SAAS,IAAIxC,EAAagD,GAASrB,KAG5Cc,OAAQd,EACRe,OAAO,KAGff,EAAI8C,gBAAgBC,IACZA,GACAF,MAIZpE,UAAU6B,EAAMN,GACZA,EAAI8C,gBAAgBC,IACZA,IACA/D,KAAKsC,aAAa,OAAQ,MAC1BtB,EAAIuB,SAAS,KAAM","file":"../../helpers/default-application.js","sourcesContent":["define([\n    '../core/application',\n    '../core/dialog',\n    '../vfs/file',\n    '../vfs/fs',\n    '../utils/fs',\n    '../core/locales'\n], function (Application, DialogWindow, FileMetadata, VFS, FS, Locales) {\n    'use strict';\n    return class DefaultApplication extends Application {\n        constructor(name, args, metadata, opts) {\n            super(...arguments);\n            this.defaultOptions = Object.assign({}, {\n                readData: true,\n                rawData: false,\n                extension: '',\n                mime: 'application/octet-stream',\n                filetypes: [],\n                filename: 'New file'\n            }, opts);\n        }\n        destroy() {\n            super.destroy(...arguments);\n        }\n        _onMessage(msg, obj, args) {\n            super._onMessage(...arguments);\n            const current = this._getArgument('file');\n            const win = this._getWindow(this.__mainwindow);\n            if (msg === 'vfs' && args.source !== null && args.source !== this.__pid && args.file) {\n                if (win && current && current.path === args.file.path) {\n                    DialogWindow.create('Confirm', {\n                        buttons: [\n                            'yes',\n                            'no'\n                        ],\n                        message: Locales._('MSG_FILE_CHANGED')\n                    }, (ev, button) => {\n                        if (button === 'ok' || button === 'yes') {\n                            this.openFile(new FileMetadata(args.file), win);\n                        }\n                    }, {\n                        parent: win,\n                        modal: true\n                    });\n                }\n            }\n        }\n        openFile(file, win) {\n            if (!file) {\n                return false;\n            }\n            const onError = error => {\n                if (error) {\n                    OSjs.error(this.__label, Locales._('ERR_FILE_APP_OPEN'), Locales._('ERR_FILE_APP_OPEN_ALT_FMT', file.path, error));\n                    return true;\n                }\n                return false;\n            };\n            const onDone = result => {\n                this._setArgument('file', file);\n                win.showFile(file, result);\n            };\n            const check = this.__metadata.mime || [];\n            if (!FS.checkAcceptMime(file.mime, check)) {\n                OSjs.error(this.__label, Locales._('ERR_FILE_APP_OPEN'), Locales._('ERR_FILE_APP_OPEN_FMT', file.path, file.mime));\n                return false;\n            }\n            win._toggleLoading(true);\n            function callbackVFS(error, result) {\n                win._toggleLoading(false);\n                if (onError(error)) {\n                    return;\n                }\n                onDone(result);\n            }\n            if (this.defaultOptions.readData) {\n                VFS.read(file, { type: this.defaultOptions.rawData ? 'binary' : 'text' }, this).then(res => callbackVFS(false, res)).catch(err => callbackVFS(err));\n            } else {\n                VFS.url(file).then(res => callbackVFS(false, res)).catch(err => callbackVFS(err));\n            }\n            return true;\n        }\n        saveFile(file, value, win) {\n            if (!file) {\n                return;\n            }\n            win._toggleLoading(true);\n            VFS.write(file, value || '', null, this).then(() => {\n                this._setArgument('file', file);\n                win.updateFile(file);\n                return true;\n            }).catch(error => {\n                OSjs.error(this.__label, Locales._('ERR_FILE_APP_SAVE'), Locales._('ERR_FILE_APP_SAVE_ALT_FMT', file.path, error));\n            }).finally(() => {\n                win._toggleLoading(false);\n            });\n        }\n        saveDialog(file, win, saveAs, cb) {\n            const value = win.getFileData();\n            if (!saveAs) {\n                this.saveFile(file, value, win);\n                return;\n            }\n            DialogWindow.create('File', {\n                file: file,\n                filename: file ? file.filename : this.defaultOptions.filename,\n                filetypes: this.defaultOptions.filetypes,\n                filter: this.__metadata.mime,\n                extension: this.defaultOptions.extension,\n                mime: this.defaultOptions.mime,\n                type: 'save'\n            }, (ev, button, result) => {\n                if (button === 'ok') {\n                    this.saveFile(result, value, win);\n                }\n                if (typeof cb === 'function') {\n                    cb(ev, button, result);\n                }\n            }, {\n                parent: win,\n                modal: true\n            });\n        }\n        openDialog(file, win) {\n            const openDialog = () => {\n                DialogWindow.create('File', {\n                    file: file,\n                    filter: this.__metadata.mime\n                }, (ev, button, result) => {\n                    if (button === 'ok' && result) {\n                        this.openFile(new FileMetadata(result), win);\n                    }\n                }, {\n                    parent: win,\n                    modal: true\n                });\n            };\n            win.checkHasChanged(discard => {\n                if (discard) {\n                    openDialog();\n                }\n            });\n        }\n        newDialog(path, win) {\n            win.checkHasChanged(discard => {\n                if (discard) {\n                    this._setArgument('file', null);\n                    win.showFile(null, null);\n                }\n            });\n        }\n    };\n});"]}