{"version":3,"sources":["dialogs/file.js"],"names":["define","DialogWindow","GUIElement","FileMetadata","SettingsManager","MountManager","FS","Utils","VFS","Locales","Config","[object Object]","args","callback","Object","assign","file","type","path","getDefaultPath","filename","filetypes","extension","mime","filter","mfilter","select","multiple","dirname","length","setTo","replaceFileExtension","super","title","_","icon","width","height","this","selected","settingsWatch","watch","changePath","unwatch","e","destroy","arguments","root","init","view","_find","set","home","mlist","checkEmptyInput","disable","get","_toggleLoading","on","create","message","value","ev","btn","pathJoin","mkdir","then","catch","err","OSjs","error","dpath","detail","entries","activated","data","checkSelection","forEach","f","push","label","format","ft","add","newinput","$element","parentNode","hide","rootPath","getModuleFromPath","option","modules","getModules","m","every","fn","map","isReadOnly","clear","dir","fromDropdown","lastDir","resetLastSelected","console","warn","chdir","done","input","split","pop","found","wasActivated","check","checkFileExtension","replace","_toggleDisabled","exists","result","_destroyed","buttons","button","closeCallback","res"],"mappings":"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","file":"../../dialogs/file.js","sourcesContent":["define([\n    '../core/dialog',\n    '../gui/element',\n    '../vfs/file',\n    '../core/settings-manager',\n    '../core/mount-manager',\n    '../utils/fs',\n    '../utils/misc',\n    '../vfs/fs',\n    '../core/locales',\n    '../core/config'\n], function (DialogWindow, GUIElement, FileMetadata, SettingsManager, MountManager, FS, Utils, VFS, Locales, Config) {\n    'use strict';\n    return class FileDialog extends DialogWindow {\n        constructor(args, callback) {\n            args = Object.assign({}, {\n                file: null,\n                type: 'open',\n                path: Config.getDefaultPath(),\n                filename: '',\n                filetypes: [],\n                extension: '',\n                mime: 'application/octet-stream',\n                filter: [],\n                mfilter: [],\n                select: null,\n                multiple: false\n            }, args);\n            args.multiple = args.type === 'save' ? false : args.multiple === true;\n            if (args.path && args.path instanceof FileMetadata) {\n                args.path = FS.dirname(args.path.path);\n            }\n            if (args.file && args.file.path) {\n                args.path = FS.dirname(args.file.path);\n                args.filename = args.file.filename;\n                args.mime = args.file.mime;\n                if (args.filetypes.length) {\n                    const setTo = args.filetypes[0];\n                    args.filename = FS.replaceFileExtension(args.filename, setTo.extension);\n                    args.mime = setTo.mime;\n                }\n            }\n            const title = args.title || Locales._(args.type === 'save' ? 'DIALOG_FILE_SAVE' : 'DIALOG_FILE_OPEN');\n            const icon = args.type === 'open' ? 'actions/document-open.png' : 'actions/documentsave-as.png';\n            super('FileDialog', {\n                title: title,\n                icon: icon,\n                width: 600,\n                height: 400\n            }, args, callback);\n            this.selected = null;\n            this.path = args.path;\n            this.settingsWatch = SettingsManager.watch('VFS', () => {\n                this.changePath();\n            });\n        }\n        destroy() {\n            try {\n                SettingsManager.unwatch(this.settingsWatch);\n            } catch (e) {\n            }\n            return super.destroy(...arguments);\n        }\n        init() {\n            const root = super.init(...arguments);\n            const view = this._find('FileView');\n            view.set('filter', this.args.filter);\n            view.set('filetype', this.args.select || '');\n            view.set('defaultcolumns', 'true');\n            const filename = this._find('Filename');\n            const home = this._find('HomeButton');\n            const mlist = this._find('ModuleSelect');\n            const checkEmptyInput = () => {\n                let disable = false;\n                if (this.args.select !== 'dir') {\n                    disable = !filename.get('value').length;\n                }\n                this._find('ButtonOK').set('disabled', disable);\n            };\n            this._toggleLoading(true);\n            view.set('multiple', this.args.multiple);\n            filename.set('value', this.args.filename || '');\n            this._find('ButtonMkdir').on('click', () => {\n                DialogWindow.create('Input', {\n                    message: Locales._('DIALOG_FILE_MKDIR_MSG', this.path),\n                    value: 'New folder'\n                }, (ev, btn, value) => {\n                    if (btn === 'ok' && value) {\n                        const path = FS.pathJoin(this.path, value);\n                        VFS.mkdir(new FileMetadata(path, 'dir')).then(() => {\n                            return this.changePath(path);\n                        }).catch(err => {\n                            OSjs.error(Locales._('DIALOG_FILE_ERROR'), Locales._('ERR_VFSMODULE_MKDIR'), err);\n                        });\n                    }\n                }, this);\n            });\n            home.on('click', () => {\n                const dpath = Config.getDefaultPath();\n                this.changePath(dpath);\n            });\n            view.on('activate', ev => {\n                this.selected = null;\n                if (this.args.type !== 'save') {\n                    filename.set('value', '');\n                }\n                if (ev && ev.detail && ev.detail.entries) {\n                    const activated = ev.detail.entries[0];\n                    if (activated) {\n                        this.selected = new FileMetadata(activated.data);\n                        if (this.selected.type !== 'dir') {\n                            filename.set('value', this.selected.filename);\n                        }\n                        this.checkSelection(ev, true);\n                    }\n                }\n            });\n            view.on('select', ev => {\n                this.selected = null;\n                if (ev && ev.detail && ev.detail.entries) {\n                    const activated = ev.detail.entries[0];\n                    if (activated) {\n                        this.selected = new FileMetadata(activated.data);\n                        if (this.selected.type !== 'dir') {\n                            filename.set('value', this.selected.filename);\n                        }\n                    }\n                }\n                checkEmptyInput();\n            });\n            if (this.args.type === 'save') {\n                const filetypes = [];\n                this.args.filetypes.forEach(f => {\n                    filetypes.push({\n                        label: Utils.format('{0} (.{1} {2})', f.label, f.extension, f.mime),\n                        value: f.extension\n                    });\n                });\n                const ft = this._find('Filetype').add(filetypes).on('change', ev => {\n                    const newinput = FS.replaceFileExtension(filename.get('value'), ev.detail);\n                    filename.set('value', newinput);\n                });\n                if (filetypes.length <= 1) {\n                    new GUIElement(ft.$element.parentNode).hide();\n                }\n                filename.on('enter', ev => {\n                    this.selected = null;\n                    this.checkSelection(ev);\n                });\n                filename.on('change', ev => {\n                    checkEmptyInput();\n                });\n                filename.on('keyup', ev => {\n                    checkEmptyInput();\n                });\n            } else {\n                if (this.args.select !== 'dir') {\n                    this._find('ButtonMkdir').hide();\n                }\n                this._find('FileInput').hide();\n            }\n            const rootPath = MountManager.getModuleFromPath(this.path).option('root');\n            const modules = MountManager.getModules().filter(m => {\n                if (!this.args.mfilter.length) {\n                    return true;\n                }\n                return this.args.mfilter.every(fn => fn(m));\n            }).map(m => {\n                return {\n                    label: m.option('title') + (m.isReadOnly() ? Utils.format(' ({0})', Locales._('LBL_READONLY')) : ''),\n                    value: m.option('root')\n                };\n            });\n            mlist.clear().add(modules).set('value', rootPath);\n            mlist.on('change', ev => {\n                this.changePath(ev.detail, true);\n            });\n            this.changePath();\n            checkEmptyInput();\n            return root;\n        }\n        changePath(dir, fromDropdown) {\n            const view = this._find('FileView');\n            const lastDir = this.path;\n            const resetLastSelected = () => {\n                try {\n                    const rootPath = MountManager.getModuleFromPath(lastDir).option('root');\n                    this._find('ModuleSelect').set('value', rootPath);\n                } catch (e) {\n                    console.warn('FileDialog::changePath()', 'resetLastSelection()', e);\n                }\n            };\n            this._toggleLoading(true);\n            view.chdir({\n                path: dir || this.path,\n                done: error => {\n                    if (error) {\n                        if (fromDropdown) {\n                            resetLastSelected();\n                        }\n                    } else {\n                        if (dir) {\n                            this.path = dir;\n                        }\n                    }\n                    this.selected = null;\n                    this._toggleLoading(false);\n                }\n            });\n        }\n        checkFileExtension() {\n            const filename = this._find('Filename');\n            let mime = this.args.mime;\n            let input = filename.get('value');\n            if (this.args.filetypes.length) {\n                if (!input && this.args.filename) {\n                    input = this.args.filename;\n                }\n                if (input.length) {\n                    const extension = input.split('.').pop();\n                    let found = false;\n                    this.args.filetypes.forEach(f => {\n                        if (f.extension === extension) {\n                            found = f;\n                        }\n                        return !!found;\n                    });\n                    found = found || this.args.filetypes[0];\n                    input = FS.replaceFileExtension(input, found.extension);\n                    mime = found.mime;\n                }\n            }\n            return {\n                filename: input,\n                mime: mime\n            };\n        }\n        checkSelection(ev, wasActivated) {\n            if (this.selected && this.selected.type === 'dir') {\n                if (wasActivated) {\n                    this.changePath(this.selected.path);\n                    return false;\n                }\n            }\n            if (this.args.type === 'save') {\n                let check = this.checkFileExtension();\n                if (!this.path || !check.filename) {\n                    OSjs.error(Locales._('DIALOG_FILE_ERROR'), Locales._('DIALOG_FILE_MISSING_FILENAME'));\n                    return false;\n                }\n                this.selected = new FileMetadata(this.path.replace(/^\\//, '') + '/' + check.filename, check.mime);\n                this._toggleDisabled(true);\n                VFS.exists(this.selected).then(result => {\n                    this._toggleDisabled(false);\n                    if (this._destroyed) {\n                        return false;\n                    }\n                    if (result) {\n                        this._toggleDisabled(true);\n                        if (this.selected) {\n                            DialogWindow.create('Confirm', {\n                                buttons: [\n                                    'yes',\n                                    'no'\n                                ],\n                                message: Locales._('DIALOG_FILE_OVERWRITE', this.selected.filename)\n                            }, (ev, button) => {\n                                this._toggleDisabled(false);\n                                if (button === 'yes' || button === 'ok') {\n                                    this.closeCallback(ev, 'ok', this.selected);\n                                }\n                            }, this);\n                        }\n                    } else {\n                        this.closeCallback(ev, 'ok', this.selected);\n                    }\n                    return true;\n                }).catch(error => {\n                    this._toggleDisabled(false);\n                    if (this._destroyed) {\n                        return;\n                    }\n                    OSjs.error(Locales._('DIALOG_FILE_ERROR'), Locales._('DIALOG_FILE_MISSING_FILENAME'));\n                });\n                return false;\n            } else {\n                if (!this.selected && this.args.select !== 'dir') {\n                    OSjs.error(Locales._('DIALOG_FILE_ERROR'), Locales._('DIALOG_FILE_MISSING_SELECTION'));\n                    return false;\n                }\n                let res = this.selected;\n                if (!res && this.args.select === 'dir') {\n                    res = new FileMetadata({\n                        filename: FS.filename(this.path),\n                        path: this.path,\n                        type: 'dir'\n                    });\n                }\n                this.closeCallback(ev, 'ok', res);\n            }\n            return true;\n        }\n        onClose(ev, button) {\n            if (button === 'ok' && !this.checkSelection(ev)) {\n                return;\n            }\n            this.closeCallback(ev, button, this.selected);\n        }\n    };\n});"]}