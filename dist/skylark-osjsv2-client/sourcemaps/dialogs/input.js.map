{"version":3,"sources":["dialogs/input.js"],"names":["define","DialogWindow","Locales","[object Object]","args","callback","super","title","Object","assign","_","icon","width","height","root","init","arguments","this","message","msg","parseMessage","_find","empty","append","input","set","placeholder","value","on","ev","onClose","_focus","focus","button","result","get","closeCallback","range","$element","querySelector","select"],"mappings":";;;;;;;AAAAA,QACI,iBACA,mBACD,SAAUC,EAAcC,GACvB,aACA,qBAAiCD,EAC7BE,YAAYC,EAAMC,GAEdC,MAAM,eACFC,OAFJH,EAAOI,OAAOC,aAAeL,IAEbG,OAASL,EAAQQ,EAAE,sBAC/BC,KAAM,gCACNC,MAAO,IACPC,OAAQ,KACTT,EAAMC,GAEbF,OACI,MAAMW,EAAOR,MAAMS,QAAQC,WAC3B,GAAIC,KAAKb,KAAKc,QAAS,CACnB,MAAMC,EAAMlB,EAAamB,aAAaH,KAAKb,KAAKc,SAChDD,KAAKI,MAAM,WAAWC,QAAQC,OAAOJ,GAEzC,MAAMK,EAAQP,KAAKI,MAAM,SAMzB,OALAG,EAAMC,IAAI,cAAeR,KAAKb,KAAKsB,aAAe,IAClDF,EAAMC,IAAI,QAASR,KAAKb,KAAKuB,OAAS,IACtCH,EAAMI,GAAG,QAASC,IACdZ,KAAKa,QAAQD,EAAI,QAEdf,EAEXX,SACI,QAAIG,MAAMyB,UAAUf,aAChBC,KAAKI,MAAM,SAASW,SACb,GAIf7B,QAAQ0B,EAAII,GACR,MAAMC,EAASjB,KAAKI,MAAM,SAASc,IAAI,SACvClB,KAAKmB,cAAcP,EAAII,EAAmB,OAAXA,EAAkBC,EAAS,MAE9D/B,SAASkC,GACL,MAAMb,EAAQP,KAAKI,MAAM,SACrBG,EAAMc,UACNd,EAAMc,SAASC,cAAc,SAASC,OAAOH","file":"../../dialogs/input.js","sourcesContent":["define([\n    '../core/dialog',\n    '../core/locales'\n], function (DialogWindow, Locales) {\n    'use strict';\n    return class InputDialog extends DialogWindow {\n        constructor(args, callback) {\n            args = Object.assign({}, {}, args);\n            super('InputDialog', {\n                title: args.title || Locales._('DIALOG_INPUT_TITLE'),\n                icon: 'status/dialog-information.png',\n                width: 400,\n                height: 120\n            }, args, callback);\n        }\n        init() {\n            const root = super.init(...arguments);\n            if (this.args.message) {\n                const msg = DialogWindow.parseMessage(this.args.message);\n                this._find('Message').empty().append(msg);\n            }\n            const input = this._find('Input');\n            input.set('placeholder', this.args.placeholder || '');\n            input.set('value', this.args.value || '');\n            input.on('enter', ev => {\n                this.onClose(ev, 'ok');\n            });\n            return root;\n        }\n        _focus() {\n            if (super._focus(...arguments)) {\n                this._find('Input').focus();\n                return true;\n            }\n            return false;\n        }\n        onClose(ev, button) {\n            const result = this._find('Input').get('value');\n            this.closeCallback(ev, button, button === 'ok' ? result : null);\n        }\n        setRange(range) {\n            const input = this._find('Input');\n            if (input.$element) {\n                input.$element.querySelector('input').select(range);\n            }\n        }\n    };\n});"]}