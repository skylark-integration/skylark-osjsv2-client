{"version":3,"sources":["dialogs/font.js"],"names":["define","DialogWindow","a","b","[object Object]","args","callback","Object","assign","fontName","getConfig","fontSize","fontColor","backgroundColor","fonts","minSize","maxSize","text","unit","super","title","_","width","height","this","selection","root","init","arguments","preview","_find","sizes","i","push","value","label","j","length","updatePreview","querySelector","style","fontFamily","listFonts","add","set","on","ev","detail","listSizes","$element","color","hide","button","result","closeCallback"],"mappings":";;;;;;;AAAAA,QACI,iBACA,kBACA,kBACD,SAAUC,EAAcC,EAAGC,GAC1B,aACA,qBAAgCF,EAC5BG,YAAYC,EAAMC,GAYI,UAXlBD,EAAOE,OAAOC,WACVC,SAAUN,EAAEO,UAAU,iBACtBC,SAAU,GACVC,UAAW,UACXC,gBAAiB,UACjBC,MAAOX,EAAEO,UAAU,cACnBK,QAAS,EACTC,QAAS,GACTC,KAAM,8CACNC,KAAM,MACPb,IACMa,MAAiC,SAAdb,EAAKa,OAC7Bb,EAAKa,KAAO,IAEhBC,MAAM,cACFC,MAAOf,EAAKe,OAASlB,EAAEmB,EAAE,qBACzBC,MAAO,IACPC,OAAQ,KACTlB,EAAMC,GACTkB,KAAKC,WACDhB,SAAUJ,EAAKI,SACfE,SAAUN,EAAKM,SAAWN,EAAKa,MAGvCd,OACI,MAAMsB,EAAOP,MAAMQ,QAAQC,WACrBC,EAAUL,KAAKM,MAAM,eACrBC,KACAjB,KACN,IAAK,IAAIkB,EAAIR,KAAKnB,KAAKU,QAASiB,EAAIR,KAAKnB,KAAKW,QAASgB,IACnDD,EAAME,MACFC,MAAOF,EACPG,MAAOH,IAGf,IAAK,IAAII,EAAI,EAAGA,EAAIZ,KAAKnB,KAAKS,MAAMuB,OAAQD,IACxCtB,EAAMmB,MACFC,MAAOV,KAAKnB,KAAKS,MAAMsB,GACvBD,MAAOX,KAAKnB,KAAKS,MAAMsB,KAG/B,MAAME,EAAgB,KAClBT,EAAQU,cAAc,YAAYC,MAAMC,WAAajB,KAAKC,UAAUhB,SACpEoB,EAAQU,cAAc,YAAYC,MAAM7B,SAAWa,KAAKC,UAAUd,UAEhE+B,EAAYlB,KAAKM,MAAM,YAC7BY,EAAUC,IAAI7B,GAAO8B,IAAI,QAASpB,KAAKnB,KAAKI,UAC5CiC,EAAUG,GAAG,SAAUC,IACnBtB,KAAKC,UAAUhB,SAAWqC,EAAGC,OAC7BT,MAEJ,MAAMU,EAAYxB,KAAKM,MAAM,YAa7B,OAZAkB,EAAUL,IAAIZ,GAAOa,IAAI,QAASpB,KAAKnB,KAAKM,UAC5CqC,EAAUH,GAAG,SAAUC,IACnBtB,KAAKC,UAAUd,SAAWmC,EAAGC,OAASvB,KAAKnB,KAAKa,KAChDoB,MAEJT,EAAQoB,SAAST,MAAMU,MAAQ1B,KAAKnB,KAAKO,UACzCiB,EAAQoB,SAAST,MAAM3B,gBAAkBW,KAAKnB,KAAKQ,gBACnDgB,EAAQe,IAAI,QAASpB,KAAKnB,KAAKY,MAC3BO,KAAKnB,KAAKM,SAAW,GACrBa,KAAKM,MAAM,qBAAqBqB,OAEpCb,IACOZ,EAEXtB,QAAQ0C,EAAIM,GACR,MAAMC,EAAoB,OAAXD,EAAkB5B,KAAKC,UAAY,KAClDD,KAAK8B,cAAcR,EAAIM,EAAQC","file":"../../dialogs/font.js","sourcesContent":["define([\n    '../core/dialog',\n    '../core/locales',\n    '../core/config'\n], function (DialogWindow, a, b) {\n    'use strict';\n    return class FontDialog extends DialogWindow {\n        constructor(args, callback) {\n            args = Object.assign({}, {\n                fontName: b.getConfig('Fonts.default'),\n                fontSize: 12,\n                fontColor: '#000000',\n                backgroundColor: '#ffffff',\n                fonts: b.getConfig('Fonts.list'),\n                minSize: 6,\n                maxSize: 30,\n                text: 'The quick brown fox jumps over the lazy dog',\n                unit: 'px'\n            }, args);\n            if (args.unit === 'null' || args.unit === 'unit') {\n                args.unit = '';\n            }\n            super('FontDialog', {\n                title: args.title || a._('DIALOG_FONT_TITLE'),\n                width: 400,\n                height: 300\n            }, args, callback);\n            this.selection = {\n                fontName: args.fontName,\n                fontSize: args.fontSize + args.unit\n            };\n        }\n        init() {\n            const root = super.init(...arguments);\n            const preview = this._find('FontPreview');\n            const sizes = [];\n            const fonts = [];\n            for (let i = this.args.minSize; i < this.args.maxSize; i++) {\n                sizes.push({\n                    value: i,\n                    label: i\n                });\n            }\n            for (let j = 0; j < this.args.fonts.length; j++) {\n                fonts.push({\n                    value: this.args.fonts[j],\n                    label: this.args.fonts[j]\n                });\n            }\n            const updatePreview = () => {\n                preview.querySelector('textarea').style.fontFamily = this.selection.fontName;\n                preview.querySelector('textarea').style.fontSize = this.selection.fontSize;\n            };\n            const listFonts = this._find('FontName');\n            listFonts.add(fonts).set('value', this.args.fontName);\n            listFonts.on('change', ev => {\n                this.selection.fontName = ev.detail;\n                updatePreview();\n            });\n            const listSizes = this._find('FontSize');\n            listSizes.add(sizes).set('value', this.args.fontSize);\n            listSizes.on('change', ev => {\n                this.selection.fontSize = ev.detail + this.args.unit;\n                updatePreview();\n            });\n            preview.$element.style.color = this.args.fontColor;\n            preview.$element.style.backgroundColor = this.args.backgroundColor;\n            preview.set('value', this.args.text);\n            if (this.args.fontSize < 0) {\n                this._find('FontSizeContainer').hide();\n            }\n            updatePreview();\n            return root;\n        }\n        onClose(ev, button) {\n            const result = button === 'ok' ? this.selection : null;\n            this.closeCallback(ev, button, result);\n        }\n    };\n});"]}