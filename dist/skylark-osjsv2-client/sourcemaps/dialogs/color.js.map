{"version":3,"sources":["dialogs/color.js"],"names":["define","DialogWindow","Utils","Colors","a","[object Object]","args","callback","Object","assign","rgb","hex","convertToRGB","r","g","b","convertToHEX","getColor","color","super","title","_","icon","width","height","this","root","init","arguments","updateHex","update","_find","set","value","isNaN","format","on","ev","detail","parseInt","hide","button","closeCallback"],"mappings":"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","file":"../../dialogs/color.js","sourcesContent":["define([\n    '../core/dialog',\n    '../utils/misc',\n    '../utils/colors',\n    '../core/locales'\n], function (DialogWindow, Utils, Colors, a) {\n    'use strict';\n    function getColor(rgb) {\n        let hex = rgb;\n        if (typeof rgb === 'string') {\n            hex = rgb;\n            rgb = Colors.convertToRGB(rgb);\n            rgb.a = null;\n        } else {\n            if (typeof rgb.a === 'undefined') {\n                rgb.a = null;\n            } else {\n                if (rgb.a > 1) {\n                    rgb.a /= 100;\n                }\n            }\n            rgb = rgb || {\n                r: 0,\n                g: 0,\n                b: 0,\n                a: 100\n            };\n            hex = Colors.convertToHEX(rgb.r, rgb.g, rgb.b);\n        }\n        return [\n            rgb,\n            hex\n        ];\n    }\n    return class ColorDialog extends DialogWindow {\n        constructor(args, callback) {\n            args = Object.assign({}, {}, args);\n            const [rgb, hex] = getColor(args.color);\n            super('ColorDialog', {\n                title: args.title || a._('DIALOG_COLOR_TITLE'),\n                icon: 'apps/preferences-desktop-theme.png',\n                width: 400,\n                height: rgb.a !== null ? 300 : 220\n            }, args, callback);\n            this.color = {\n                r: rgb.r,\n                g: rgb.g,\n                b: rgb.b,\n                a: rgb.a,\n                hex: hex\n            };\n        }\n        init() {\n            const root = super.init(...arguments);\n            const updateHex = update => {\n                this._find('LabelRed').set('value', a._('DIALOG_COLOR_R', this.color.r));\n                this._find('LabelGreen').set('value', a._('DIALOG_COLOR_G', this.color.g));\n                this._find('LabelBlue').set('value', a._('DIALOG_COLOR_B', this.color.b));\n                this._find('LabelAlpha').set('value', a._('DIALOG_COLOR_A', this.color.a));\n                if (update) {\n                    this.color.hex = Colors.convertToHEX(this.color.r, this.color.g, this.color.b);\n                }\n                let value = this.color.hex;\n                if (this.color.a !== null && !isNaN(this.color.a)) {\n                    value = Utils.format('rgba({0}, {1}, {2}, {3})', this.color.r, this.color.g, this.color.b, this.color.a);\n                }\n                this._find('ColorPreview').set('value', value);\n            };\n            this._find('ColorSelect').on('change', ev => {\n                this.color = ev.detail;\n                this._find('Red').set('value', this.color.r);\n                this._find('Green').set('value', this.color.g);\n                this._find('Blue').set('value', this.color.b);\n                updateHex(true);\n            });\n            this._find('Red').on('change', ev => {\n                this.color.r = parseInt(ev.detail, 10);\n                updateHex(true);\n            }).set('value', this.color.r);\n            this._find('Green').on('change', ev => {\n                this.color.g = parseInt(ev.detail, 10);\n                updateHex(true);\n            }).set('value', this.color.g);\n            this._find('Blue').on('change', ev => {\n                this.color.b = parseInt(ev.detail, 10);\n                updateHex(true);\n            }).set('value', this.color.b);\n            this._find('Alpha').on('change', ev => {\n                this.color.a = parseInt(ev.detail, 10) / 100;\n                updateHex(true);\n            }).set('value', this.color.a * 100);\n            if (this.color.a === null) {\n                this._find('AlphaContainer').hide();\n                this._find('AlphaLabelContainer').hide();\n            }\n            updateHex(false, this.color.a !== null);\n            return root;\n        }\n        onClose(ev, button) {\n            this.closeCallback(ev, button, button === 'ok' ? this.color : null);\n        }\n    };\n});"]}