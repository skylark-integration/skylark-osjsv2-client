{"version":3,"sources":["dialogs/error.js"],"names":["define","DialogWindow","Locales","Config","[object Object]","args","callback","exception","Object","assign","error","stack","keys","length","name","fileName","lineNumber","message","extMessage","super","title","_","icon","width","height","this","_sound","_soundVolume","traceMessage","root","init","arguments","setAttribute","msg","parseMessage","_find","empty","append","set","hide","bugreport","on","body","getConfig","obj","forEach","k","navigator","replace","JSON","stringify","push","url","encodeURIComponent","join","window","open"],"mappings":";;;;;;;AAAAA,QACI,iBACA,kBACA,kBACD,SAAUC,EAAcC,EAASC,GAChC,aACA,qBAAiCF,EAC7BG,YAAYC,EAAMC,GAEd,MAAMC,GADNF,EAAOG,OAAOC,aAAeJ,IACNE,cACvB,IAAIG,EAAQ,GACRH,EAAUI,MACVD,EAAQH,EAAUI,MAEdH,OAAOI,KAAKL,GAAWM,SACvBH,EAAQH,EAAUO,KAClBJ,GAAS,eAAiBH,EAAUQ,UAAY,YAChDL,GAAS,WAAaH,EAAUS,WAChCN,GAAS,cAAgBH,EAAUU,QAC/BV,EAAUW,aACVR,GAAS,KAAOH,EAAUW,aAItCC,MAAM,eACFC,MAAOf,EAAKe,OAASlB,EAAQmB,EAAE,sBAC/BC,KAAM,0BACNC,MAAO,IACPC,OAAQd,EAAQ,IAAM,KACvBL,EAAMC,GACTmB,KAAKC,OAAS,QACdD,KAAKE,aAAe,EACpBF,KAAKG,aAAelB,EAExBN,OACI,MAAMyB,EAAOV,MAAMW,QAAQC,WAC3BF,EAAKG,aAAa,OAAQ,eAC1B,MAAMC,EAAMhC,EAAaiC,aAAaT,KAAKpB,KAAKY,SAmDhD,OAlDAQ,KAAKU,MAAM,WAAWC,QAAQC,OAAOJ,GACrCR,KAAKU,MAAM,WAAWG,IAAI,QAASb,KAAKpB,KAAKK,OAC7Ce,KAAKU,MAAM,SAASG,IAAI,QAASb,KAAKG,cACjCH,KAAKG,eACNH,KAAKU,MAAM,SAASI,OACpBd,KAAKU,MAAM,cAAcI,QAEzBd,KAAKpB,KAAKmC,UACVf,KAAKU,MAAM,mBAAmBM,GAAG,QAAS,KACtC,IAAIrB,EAAQ,GACRsB,KACJ,GAAIvC,EAAOwC,UAAU,8BAA+B,CAChD,MAAMC,MAEF,YACA,WACA,WACA,cAECC,QAAQC,IACTF,EAAIE,GAAKC,UAAUD,KAEvB1B,EAAQjB,EAAOwC,UAAU,8BACzBD,GACI,KAAOvC,EAAOwC,UAAU,gCAAgCK,QAAQ,YAAa7C,EAAOwC,UAAU,YAAc,MAC5G,KACA,KAAOlB,KAAKpB,KAAKY,QACjB,KACA,MAAQQ,KAAKpB,KAAKK,OAAS,iBAC3B,KACA,wBACA,KACA,sBACA,KACA,kCACA,KACA,0CACA,KACA,QAAUuC,KAAKC,UAAUN,GAAO,SAEhCnB,KAAKG,cACLc,EAAKS,KAAK,2BAA6B1B,KAAKG,aAAe,WAGnE,MAAMwB,EAAMjD,EAAOwC,UAAU,oBAAoBK,QAAQ,UAAWK,mBAAmBjC,IAAQ4B,QAAQ,SAAUK,mBAAmBX,EAAKY,KAAK,QAC9IC,OAAOC,KAAKJ,KAGhB3B,KAAKU,MAAM,mBAAmBI,OAE3BV","file":"../../dialogs/error.js","sourcesContent":["define([\n    '../core/dialog',\n    '../core/locales',\n    '../core/config'\n], function (DialogWindow, Locales, Config) {\n    'use strict';\n    return class ErrorDialog extends DialogWindow {\n        constructor(args, callback) {\n            args = Object.assign({}, {}, args);\n            const exception = args.exception || {};\n            let error = '';\n            if (exception.stack) {\n                error = exception.stack;\n            } else {\n                if (Object.keys(exception).length) {\n                    error = exception.name;\n                    error += '\\nFilename: ' + exception.fileName || '<unknown>';\n                    error += '\\nLine: ' + exception.lineNumber;\n                    error += '\\nMessage: ' + exception.message;\n                    if (exception.extMessage) {\n                        error += '\\n' + exception.extMessage;\n                    }\n                }\n            }\n            super('ErrorDialog', {\n                title: args.title || Locales._('DIALOG_ERROR_TITLE'),\n                icon: 'status/dialog-error.png',\n                width: 400,\n                height: error ? 400 : 200\n            }, args, callback);\n            this._sound = 'ERROR';\n            this._soundVolume = 1;\n            this.traceMessage = error;\n        }\n        init() {\n            const root = super.init(...arguments);\n            root.setAttribute('role', 'alertdialog');\n            const msg = DialogWindow.parseMessage(this.args.message);\n            this._find('Message').empty().append(msg);\n            this._find('Summary').set('value', this.args.error);\n            this._find('Trace').set('value', this.traceMessage);\n            if (!this.traceMessage) {\n                this._find('Trace').hide();\n                this._find('TraceLabel').hide();\n            }\n            if (this.args.bugreport) {\n                this._find('ButtonBugReport').on('click', () => {\n                    let title = '';\n                    let body = [];\n                    if (Config.getConfig('BugReporting.options.issue')) {\n                        const obj = {};\n                        const keys = [\n                            'userAgent',\n                            'platform',\n                            'language',\n                            'appVersion'\n                        ];\n                        keys.forEach(k => {\n                            obj[k] = navigator[k];\n                        });\n                        title = Config.getConfig('BugReporting.options.title');\n                        body = [\n                            '**' + Config.getConfig('BugReporting.options.message').replace('%VERSION%', Config.getConfig('Version')) + ':**',\n                            '\\n',\n                            '> ' + this.args.message,\n                            '\\n',\n                            '> ' + (this.args.error || 'Unknown error'),\n                            '\\n',\n                            '## Expected behaviour',\n                            '\\n',\n                            '## Actual behaviour',\n                            '\\n',\n                            '## Steps to reproduce the error',\n                            '\\n',\n                            '## (Optinal) Browser and OS information',\n                            '\\n',\n                            '```\\n' + JSON.stringify(obj) + '\\n```'\n                        ];\n                        if (this.traceMessage) {\n                            body.push('\\n## Stack Trace \\n```\\n' + this.traceMessage + '\\n```\\n');\n                        }\n                    }\n                    const url = Config.getConfig('BugReporting.url').replace('%TITLE%', encodeURIComponent(title)).replace('%BODY%', encodeURIComponent(body.join('\\n')));\n                    window.open(url);\n                });\n            } else {\n                this._find('ButtonBugReport').hide();\n            }\n            return root;\n        }\n    };\n});"]}