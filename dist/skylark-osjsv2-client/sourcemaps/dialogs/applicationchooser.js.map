{"version":3,"sources":["dialogs/applicationchooser.js"],"names":["define","DialogWindow","PackageManager","Theme","Utils","a","[object Object]","args","callback","super","title","Object","assign","_","width","height","root","init","arguments","cols","label","rows","metadata","getPackages","this","list","forEach","name","iter","type","description","push","value","columns","join","icon","getIcon","JSON","stringify","_find","set","add","on","ev","onClose","file","format","filename","mime","button","result","useDefault","get","selected","length","data","className","create","message","closeCallback"],"mappings":";;;;;;;AAAAA,QACI,iBACA,0BACA,gBACA,gBACA,mBACD,SAAUC,EAAcC,EAAgBC,EAAOC,EAAOC,GACrD,aACA,qBAA8CJ,EAC1CK,YAAYC,EAAMC,GAEdC,MAAM,4BACFC,OAFJH,EAAOI,OAAOC,aAAeL,IAEbG,OAASL,EAAEQ,EAAE,2BACzBC,MAAO,IACPC,OAAQ,KACTR,EAAMC,GAEbF,OACI,MAAMU,EAAOP,MAAMQ,QAAQC,WACrBC,IAAUC,MAAOf,EAAEQ,EAAE,cACrBQ,KACAC,EAAWpB,EAAeqB,eAC/BC,KAAKjB,KAAKkB,UAAYC,QAAQC,IAC3B,MAAMC,EAAON,EAASK,GACtB,GAAIC,GAAsB,gBAAdA,EAAKC,KAAwB,CACrC,MAAMT,GAASQ,EAAKD,MAChBC,EAAKE,aACLV,EAAMW,KAAKH,EAAKE,aAEpBT,EAAKU,MACDC,MAAOJ,EACPK,UACQb,MAAOA,EAAMc,KAAK,OAClBC,KAAMhC,EAAMiC,QAAQR,EAAKO,KAAM,KAAMR,GACrCK,MAAOK,KAAKC,UAAUV,UAK1CJ,KAAKe,MAAM,mBAAmBC,IAAI,UAAWrB,GAAMsB,IAAIpB,GAAMqB,GAAG,WAAYC,IACxEnB,KAAKoB,QAAQD,EAAI,QAErB,IAAIE,EAAO,iBACPzB,EAAQ,iBAOZ,OANII,KAAKjB,KAAKsC,OACVA,EAAOzC,EAAM0C,OAAO,YAAatB,KAAKjB,KAAKsC,KAAKE,SAAUvB,KAAKjB,KAAKsC,KAAKG,MACzE5B,EAAQf,EAAEQ,EAAE,gCAAiCW,KAAKjB,KAAKsC,KAAKG,OAEhExB,KAAKe,MAAM,YAAYC,IAAI,QAASK,GACpCrB,KAAKe,MAAM,cAAcC,IAAI,QAASpB,GAC/BJ,EAEXV,QAAQqC,EAAIM,GACR,IAAIC,EAAS,KACb,GAAe,OAAXD,EAAiB,CACjB,MAAME,EAAa3B,KAAKe,MAAM,cAAca,IAAI,SAC1CC,EAAW7B,KAAKe,MAAM,mBAAmBa,IAAI,SAInD,GAHIC,GAAYA,EAASC,SACrBJ,EAASG,EAAS,GAAGE,KAAKC,YAEzBN,EAED,YADAjD,EAAawD,OAAO,SAAWC,QAASrD,EAAEQ,EAAE,mCAAqC,KAAMW,MAG3F0B,GACIvB,KAAMuB,EACNC,WAAYA,GAGpB3B,KAAKmC,cAAchB,EAAIM,EAAQC","file":"../../dialogs/applicationchooser.js","sourcesContent":["define([\n    '../core/dialog',\n    '../core/package-manager',\n    '../core/theme',\n    '../utils/misc',\n    '../core/locales'\n], function (DialogWindow, PackageManager, Theme, Utils, a) {\n    'use strict';\n    return class ApplicationChooserDialog extends DialogWindow {\n        constructor(args, callback) {\n            args = Object.assign({}, {}, args);\n            super('ApplicationChooserDialog', {\n                title: args.title || a._('DIALOG_APPCHOOSER_TITLE'),\n                width: 400,\n                height: 400\n            }, args, callback);\n        }\n        init() {\n            const root = super.init(...arguments);\n            const cols = [{ label: a._('LBL_NAME') }];\n            const rows = [];\n            const metadata = PackageManager.getPackages();\n            (this.args.list || []).forEach(name => {\n                const iter = metadata[name];\n                if (iter && iter.type === 'application') {\n                    const label = [iter.name];\n                    if (iter.description) {\n                        label.push(iter.description);\n                    }\n                    rows.push({\n                        value: iter,\n                        columns: [{\n                                label: label.join(' - '),\n                                icon: Theme.getIcon(iter.icon, null, name),\n                                value: JSON.stringify(iter)\n                            }]\n                    });\n                }\n            });\n            this._find('ApplicationList').set('columns', cols).add(rows).on('activate', ev => {\n                this.onClose(ev, 'ok');\n            });\n            let file = '<unknown file>';\n            let label = '<unknown mime>';\n            if (this.args.file) {\n                file = Utils.format('{0} ({1})', this.args.file.filename, this.args.file.mime);\n                label = a._('DIALOG_APPCHOOSER_SET_DEFAULT', this.args.file.mime);\n            }\n            this._find('FileName').set('value', file);\n            this._find('SetDefault').set('label', label);\n            return root;\n        }\n        onClose(ev, button) {\n            let result = null;\n            if (button === 'ok') {\n                const useDefault = this._find('SetDefault').get('value');\n                const selected = this._find('ApplicationList').get('value');\n                if (selected && selected.length) {\n                    result = selected[0].data.className;\n                }\n                if (!result) {\n                    DialogWindow.create('Alert', { message: a._('DIALOG_APPCHOOSER_NO_SELECTION') }, null, this);\n                    return;\n                }\n                result = {\n                    name: result,\n                    useDefault: useDefault\n                };\n            }\n            this.closeCallback(ev, button, result);\n        }\n    };\n});"]}