/**
 * skylark-osjsv2-client - A version of osjs-client that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-osjsv2-client/
 * @license MIT
 */
define(["../core/mount-manager","./service-notification-icon","../utils/preloader","../core/locales","../core/config","./then-jsonp"],function(e,t,o,n,i,s){"use strict";const c=window.gapi=window.gapi||{};let l=null;class a{constructor(e){this.clientId=e,this.accessToken=null,this.userId=null,this.preloaded=!1,this.authenticated=!1,this.loaded=[],this.preloads=[{type:"javascript",src:"https://apis.google.com/js/api.js"}]}destroy(){}init(e){e=e||function(){},this.preloaded?e(!1,!0):o.preload(this.preloads).then(t=>{t.failed.length&&(this.preloaded=!0),e(t.failed.join("\n"))}).catch(e)}load(e,t,o,i){const s=e=>{this.authenticate(t,(t,o)=>{if(t)e(t);else{if(!this.authenticated)return void e(n._("GAPI_AUTH_FAILURE"));e(!1,o)}})},a=n=>{const i=[];e.forEach(e=>{-1===this.loaded.indexOf(e)&&i.push(e)});let s=0,l=i.length;console.debug("GoogleAPI::load()",e,"=>",i,t);const a=(e,t)=>{let n=[],i=null;e instanceof Array?e.length>0&&e.length<3&&(n=n.concat(e),i=e[0]):(n.push(e),i=e),n.push((e,o,n,s)=>{this.loaded.push(i),t.call(this,e,o,n,s)}),o?c.client.load.apply(c,n):c.load.apply(c,n)};!function e(){s>=l?n():(a(i[s],()=>{e()}),s++)}()};this.init(e=>{e?i(e):window.gapi&&c.load?s(e=>{e?i(e):a((e,t)=>{i(e,t,l)})}):i(n._("GAPI_LOAD_FAILURE"))})}signOut(o){if(o=o||function(){},console.info("GoogleAPI::signOut()"),this.authenticated){try{c.auth.signOut()}catch(e){console.warn("GoogleAPI::signOut()","failed",e),console.warn(e.stack)}this.authenticated=!1,t.remove("Google API")}e.remove("GoogleDrive"),o(!1,!0)}revoke(e){if(console.info("GoogleAPI::revoke()"),!this.accessToken)return void e(!1);const t="https://accounts.google.com/o/oauth2/revoke?token="+this.accessToken;s("GET",t).then(()=>e(!0)).catch(()=>e(!1))}authenticate(e,o){console.info("GoogleAPI::authenticate()"),o=o||function(){};const i=(t,o)=>{console.info("GoogleAPI::authenticate() => login()",t),o=o||function(){},c.auth.authorize({client_id:this.clientId,scope:e,user_id:this.userId,immediate:t},o)},s=()=>{t.remove("Google API"),t.add("Google API",[{title:n._("GAPI_SIGN_OUT"),onClick:()=>{this.signOut()}},{title:n._("GAPI_REVOKE"),onClick:()=>{this.revoke(()=>{this.signOut()})}}])},l=(e,t)=>{if(console.info("GoogleAPI::authenticate() => handleAuthResult()",e),!e.error||"origin_mismatch"!==e.error_subtype&&("access_denied"!==e.error_subtype||t))e&&!e.error?(a=(a=(t=>{this.userId=t,t?(s(),this.authenticated=!0,this.accessToken=e.access_token||null,o(!1,!0)):o(!1,!1)}))||function(){},c.client.load("oauth2","v2",()=>{c.client.oauth2.userinfo.get().execute(e=>{console.info("GoogleAPI::authenticate() => getUserId()",e),a(e.id)})})):i(!1,e=>{l(e,!1)});else{const t=n._("GAPI_AUTH_FAILURE_FMT",e.error,e.error_subtype);o(t)}};var a;c.load("auth:client",e=>{if(e&&e.error){const t=n._("GAPI_AUTH_FAILURE_FMT",e.error,e.error_subtype);o(t)}else i(!0,e=>{l(e,!0)})})}}return{instance:function(){return l},create:function(e,t){const o=e.load||[],s=e.scope||[],c=!0===e.client;function r(){l.load(o,s,c,t)}if(l)return void r();let h=null;try{h=i.getConfig("GoogleAPI.ClientId")}catch(e){console.warn("getGoogleAPI()",e,e.stack)}h?(l=new a(h),r()):t(n._("GAPI_DISABLED"))}}});
//# sourceMappingURL=../sourcemaps/helpers/google-api.js.map
