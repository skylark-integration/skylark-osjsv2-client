{"version":3,"sources":["osjs-apps-settings.js"],"names":[],"mappingsfile":"../osjs-apps-settings.js","sourcesContent":["define('osjs-apps-settings/locales',[],function () {\n    'use strict';\n    return {\n        bg_BG: {\n            'Background Type': 'Тип на фон',\n            'Image (Repeat)': 'Изображение (повтарящо се)',\n            'Image (Centered)': 'Изображение (Центрирано)',\n            'Image (Fill)': 'Изображение (Запълващо)',\n            'Image (Streched)': 'Изображение (Разтеглено)',\n            'Desktop Margin ({0}px)': 'Размер на работен плот ({0}px)',\n            'Enable Animations': 'Разреши анимации',\n            'Language (requires restart)': 'Език (нуждае се от рестарт)',\n            'Enable Sounds': 'Включи звуци',\n            'Enable Window Switcher': 'Включи превключване на прозорци',\n            'Enable Hotkeys': 'Включи горещи клавиши',\n            'Enable Icon View': 'Включи иконен-изглед'\n        },\n        de_DE: {\n            'Background Type': 'Hintergrundtyp',\n            'Image (Repeat)': 'Bild (Wiederholend)',\n            'Image (Centered)': 'Bild (Zentriert)',\n            'Image (Fill)': 'Bild (Ausgefüllt)',\n            'Image (Streched)': 'Bild (Gestreckt)',\n            'Desktop Margin ({0}px)': 'Arbeitsoberflächen Margin ({0}px)',\n            'Enable Animations': 'Animationen verwenden',\n            'Language (requires restart)': 'Sprache (benötigt Neustart)',\n            'Enable Sounds': 'Aktiviere Sounds',\n            'Enable Window Switcher': 'Aktiviere Fensterwechsler',\n            'Enable Hotkeys': 'Aktiviere Hotkeys',\n            'Enable Icon View': 'Aktiviere Icon-Ansicht'\n        },\n        es_ES: {\n            'Background Type': 'Tipo de fondo',\n            'Image (Repeat)': 'Imagen (Repetir)',\n            'Image (Centered)': 'Imagen (Centrada)',\n            'Image (Fill)': 'Imagen (Estirar)',\n            'Image (Streched)': 'Imagen (Ajustar)',\n            'Desktop Margin ({0}px)': 'Margen del escritorio ({0}px)',\n            'Enable Animations': 'Habilitar animaciones',\n            'Language (requires restart)': 'Idioma (requiere reiniciar)',\n            'Enable Sounds': 'Activar sonidos',\n            'Enable Window Switcher': 'Activar el alternador de ventanas',\n            'Enable Hotkeys': 'Activar Hotkeys',\n            'Enable Icon View': 'Activar la vista de icono'\n        },\n        ar_DZ: {\n            'Background Type': 'نوع الخلفية',\n            'Image (Repeat)': 'صورة (إعادة)',\n            'Image (Centered)': 'صورة (وسط)',\n            'Image (Fill)': 'صورة (ملئ)',\n            'Image (Streched)': 'صورة (تمدد)',\n            'Desktop Margin ({0}px)': 'هوامش المكتب ({0}px)',\n            'Enable Animations': 'تفعيل الحركة',\n            'Language (requires restart)': 'اللغة (تتطب إعادة التشغيل)',\n            'Enable Sounds': 'تفعيل الأصوات',\n            'Enable Window Switcher': 'تفعيل محول النوافذ',\n            'Enable Hotkeys': 'تفعيل إختصارات لوحة المفاتيح',\n            'Enable Icon View': 'تفعيل مظهر الأيقونات',\n            'Remove shortcut': 'حذف الإختصار',\n            'File View': 'خصائص الملفات',\n            'Show Hidden Files': 'إظهار الملفات المخفية',\n            'Show File Extensions': 'إظهار لواحق الملفات',\n            'File View Options': 'خيارات إظهار الملفات',\n            'Invert Text Color': 'عكس لون الخط',\n            'Icon View': 'إظهار الأيقونات',\n            'Installed Packages': 'حزم مثبتة',\n            'App Store': 'متجر التطبيقات',\n            'Regenerate metadata': 'إعادة توليد المعلومات',\n            'Install from zip': 'تثبيت من ملف مضغوط',\n            'Install selected': 'تثبيت المختار',\n            'Enable TouchMenu': 'تفعيل قائمة اللمس'\n        },\n        fr_FR: {\n            'Background Type': \"Type de fond d'écran\",\n            'Image (Repeat)': 'Image (Répéter)',\n            'Image (Centered)': 'Image (Centrer)',\n            'Image (Fill)': 'Image (Remplir)',\n            'Image (Streched)': 'Image (Étiré)',\n            'Desktop Margin ({0}px)': 'Marge du bureau ({0}px)',\n            'Desktop Corner Snapping ({0}px)': 'Délimitation des coins du bureau ({0}px)',\n            'Window Snapping ({0}px)': 'Accrochage des fenêtres ({0}px)',\n            'Enable Animations': 'Activer les animations',\n            'Language (requires restart)': 'Langue (redémarrage requis)',\n            'Enable Sounds': 'Activer la musique',\n            'Enable Window Switcher': 'Activer Window Switcher',\n            'Enable Hotkeys': 'Activer les raccourcis clavier',\n            'Enable Icon View': \"Activer l'affichage des icônes sur le bureau\",\n            'Remove shortcut': 'Supprimer le raccourci',\n            'File View': 'Options des fichiers',\n            'Show Hidden Files': 'Montrer les fichiers cachés',\n            'Show File Extensions': 'Montrer les extensions de fichiers',\n            'File View Options': \"Options d'affichage des fichier\",\n            'Invert Text Color': 'Inverser la couleur du texte',\n            'Icon View': 'Affichage des icônes',\n            'Installed Packages': 'Paquets installés',\n            'App Store': \"Magasin d'applications\",\n            'Regenerate metadata': 'Régénérer les métadonnées',\n            'Install from zip': 'Installer à partir du fichier zip',\n            'Install selected': 'Installer la sélection',\n            'Enable TouchMenu': 'Activer le TouchMenu'\n        },\n        it_IT: {\n            'Background Type': 'Tipo di sfondo',\n            'Image (Repeat)': 'Immagine (Ripeti)',\n            'Image (Centered)': 'Immagine (Centrata)',\n            'Image (Fill)': 'Immagine (Riempi)',\n            'Image (Streched)': 'Immagine (Distorci)',\n            'Desktop Margin ({0}px)': 'Margini Scrivania ({0}px)',\n            'Enable Animations': 'Abilita animazioni',\n            'Language (requires restart)': 'Lingua (necessita riavvio)',\n            'Enable Sounds': 'Abilita Suoni',\n            'Enable Window Switcher': 'Abilita Cambia-Finestre',\n            'Enable Hotkeys': 'Abilita Scorciatoie da tastiera',\n            'Enable Icon View': 'Abilita Visualizzazione ad icona',\n            'Remove shortcut': 'Rimuovi scorciatoia',\n            'File View': 'Visualizza file',\n            'Show Hidden Files': 'Mostra file nascosti',\n            'Show File Extensions': 'Mostra estenzioni dei file',\n            'File View Options': 'Opzioni visualizza file',\n            'Invert Text Color': 'Inverti colore testi',\n            'Icon View': 'Visualizzazione ad icone',\n            'Installed Packages': 'Installa pacchetti',\n            'App Store': 'Negozio applicazioni',\n            'Application': 'Applicazione',\n            'Scope': 'Scope (namespace)',\n            'Regenerate metadata': 'Rigenerazione metadata',\n            'Install from zip': 'Installa da zip',\n            'Install selected': 'Installa selezionato',\n            'Enable TouchMenu': 'Abilita TouchMenu'\n        },\n        ko_KR: {\n            'Background Type': '바탕화면 타입',\n            'Image (Repeat)': '이미지 (반복)',\n            'Image (Centered)': '이미지 (가운데)',\n            'Image (Fill)': '이미지 (채우기)',\n            'Image (Streched)': '이미지 (늘이기)',\n            'Desktop Margin ({0}px)': '데스크탑 여백 ({0}px)',\n            'Enable Animations': '애니메이션 효과 켜기',\n            'Language (requires restart)': '언어 (재시작 필요)',\n            'Enable Sounds': '사운드 켜기',\n            'Enable Window Switcher': '윈도우 전환 활성',\n            'Enable Hotkeys': '단축키 활성',\n            'Enable Icon View': '아이콘 보이기',\n            'Desktop Corner Snapping ({0}px)': '바탕화면 가장자리에 붙이기 ({0}px)',\n            'Window Snapping ({0}px)': '창 가장자리에 붙이기 ({0}px)',\n            'File View': '파일보기',\n            'Show Hidden Files': '숨긴 파일 보이기',\n            'Show File Extensions': '파일 확장자 보이기',\n            'File View Options': '파일보기 옵션',\n            'Invert Text Color': '텍스트 색상 반전',\n            'Icon View': '아이콘 보기',\n            'Installed Packages': '설치된 패키지',\n            'App Store': '앱스토어',\n            'Regenerate metadata': '메타데이터 재생성',\n            'Install from zip': 'zip 파일로부터 설치하기',\n            'Install selected': '선택된 항목 설치',\n            'Enable TouchMenu': '터치메뉴 활성화',\n            'Search Options': '검색 옵션',\n            'Enable Application Search': '어플리케이션 검색 활성화',\n            'Enable File Search': '파일 검색 활성화'\n        },\n        nl_NL: {\n            'Background Type': 'Achtergrond type',\n            'Image (Repeat)': 'Afbeelding (Herhalend)',\n            'Image (Centered)': 'Afbeelding (Gecentreerd)',\n            'Image (Fill)': 'Afbeelding (Passend)',\n            'Image (Streched)': 'Afbeelding (Uitrekken)',\n            'Desktop Margin ({0}px)': 'Achtergrondmarge ({0}px)',\n            'Enable Animations': 'Animaties gebruiken',\n            'Language (requires restart)': 'Taal (Herstarten vereist)',\n            'Enable Sounds': 'Activeer Geluiden',\n            'Enable Window Switcher': 'Activeer Venster Wisselaar',\n            'Enable Hotkeys': 'Activeer Hotkeys',\n            'Enable Icon View': 'Activeer Iconen-weergave'\n        },\n        no_NO: {\n            'Background Type': 'Bakgrunn type',\n            'Image (Repeat)': 'Bilde (Gjenta)',\n            'Image (Centered)': 'Bilde (Sentrert)',\n            'Image (Fill)': 'Bilde (Fyll)',\n            'Image (Streched)': 'Bilde (Strekk)',\n            'Desktop Margin ({0}px)': 'Skrivebord Margin ({0}px)',\n            'Enable Animations': 'Bruk animasjoner',\n            'Language (requires restart)': 'Språk (krever omstart)',\n            'Enable Sounds': 'Skru på lyder',\n            'Enable Window Switcher': 'Skru på Vindu-bytter',\n            'Enable Hotkeys': 'Skru på Hurtigtaster',\n            'Enable Icon View': 'Skru på Ikonvisning',\n            'Remove shortcut': 'Fjern snarvei',\n            \"Search path '{0}' is already handled by another entry\": \"Søkestien '{0}' er allrede håndtert av en annen oppføring\"\n        },\n        pl_PL: {\n            'Background Type': 'Typ Tła',\n            'Image (Repeat)': 'Powtarzający się',\n            'Image (Centered)': 'Wycentrowany',\n            'Image (Fill)': 'Wypełniony',\n            'Image (Streched)': 'Rozciągnięty',\n            'Desktop Margin ({0}px)': 'Margines Pulpitu ({0}px)',\n            'Desktop Corner Snapping ({0}px)': 'Przyciąganie do Narożników Pulpitu ({0}px)',\n            'Window Snapping ({0}px)': 'Przyciąganie do Okien ({0}px)',\n            'Enable Animations': 'Włączone Animacje',\n            'Icon View': 'Widok Ikon',\n            'Language (requires restart)': 'Język (zmiana wymaga restartu)',\n            'Enable Sounds': 'Włączone Dźwięki',\n            'Enable TouchMenu': 'Włączone Menu Dotykowe',\n            'Enable Window Switcher': 'Właczony Zmieniacz Okien',\n            'Enable Hotkeys': 'Włączone Skróty Klawiaturowe',\n            'Enable Icon View': 'Włączone Pokazywanie Ikon',\n            'Remove shortcut': 'Usuwanie skrótu',\n            'File View': 'Widok Plików',\n            'Show Hidden Files': 'Pokazuj Ukryte Pliki',\n            'Show File Extensions': 'Pokazuj Rozszerzenia Plików',\n            'File View Options': 'Opcje Widoku Plików',\n            'Invert Text Color': 'Odwróć Kolor Tekstu',\n            'Installed Packages': 'Zainstalowane Pakiety',\n            'App Store': 'Sklep App',\n            'Regenerate metadata': 'Zregeneruj metadane',\n            'Install from zip': 'Zainstaluj z pliku zip',\n            'Install selected': 'Zainstaluj wybrane'\n        },\n        ru_RU: {\n            'Background Type': 'Тип фона',\n            'Image (Repeat)': 'Изображение (повторяющееся)',\n            'Image (Centered)': 'Изображение (по центру)',\n            'Image (Fill)': 'Изображение (заполнить)',\n            'Image (Streched)': 'Изображение (растянуть)',\n            'Desktop Margin ({0}px)': 'Отступ рабочего стола ({0}px)',\n            'Enable Animations': 'Использовать анимацию',\n            'Enable TouchMenu': 'Крупное меню',\n            'Language (requires restart)': 'Язык (необходим перезапуск)',\n            'Enable Sounds': 'Включить звук',\n            'Enable Window Switcher': 'Включить растягивание окон',\n            'Enable Hotkeys': 'Включить горячии клавиши',\n            'Enable Icon View': 'Включить ярлыки',\n            'Icon View': 'Ярлыки рабочего стола',\n            'Invert Text Color': 'Обратить цвет текста'\n        },\n        sk_SK: {\n            'Background Type': 'Typ pozadia',\n            'Image (Repeat)': 'Dlaždice',\n            'Image (Centered)': 'Na stred',\n            'Image (Fill)': 'Vyplniť',\n            'Image (Streched)': 'Roztiahnutý',\n            'Desktop Margin ({0}px)': 'Hranice pracovnej plochy ({0}px)',\n            'Enable Animations': 'Povoliť animácie',\n            'Language (requires restart)': 'Jazyk (vyžaduje reštart)',\n            'Enable Sounds': 'Povoliť zvuky',\n            'Enable Window Switcher': 'Povoliť Prepínač Okien',\n            'Enable Hotkeys': 'Klávesové skratky',\n            'Enable Icon View': 'Ikony na ploche',\n            'Remove shortcut': 'Odstrániť skratku'\n        },\n        tr_TR: {\n            'Background Type': 'arkaplan türü',\n            'Image (Repeat)': 'resim (tekrarla)',\n            'Image (Centered)': 'resm(ortala)',\n            'Image (Fill)': 'resm (kapla/doldur)',\n            'Image (Streched)': 'resm (uzat)',\n            'Desktop Margin ({0}px)': 'masaüstü kenar ({0}px)',\n            'Enable Animations': 'animasyonlar etkin',\n            'Language (requires restart)': 'Dil(yeniden başlatma gerektirir)',\n            'Enable Sounds': 'Müzik etkin',\n            'Enable Window Switcher': 'Ekran(pencere) değiştirme etkin',\n            'Enable Hotkeys': 'kısayol tuşları etkin',\n            'Enable Icon View': 'icon görünümü etkin',\n            'Remove shortcut': 'kısayolları kaldır'\n        },\n        vi_VN: {\n            'Background Type': 'Kiểu nền',\n            'Image (Repeat)': 'Lặp lại',\n            'Image (Centered)': 'Căn giữa',\n            'Image (Fill)': 'Lấp đầy',\n            'Image (Streched)': 'Trải dài',\n            'Desktop Margin ({0}px)': 'Phần biên màn hình ({0}px)',\n            'Enable Animations': 'Bật hiệu ứng',\n            'Language (requires restart)': 'Ngôn ngữ (cần khởi động lại)',\n            'Enable Sounds': 'Bật âm thanh',\n            'Enable Window Switcher': 'Bật chuyển đổi cửa sổ',\n            'Enable Hotkeys': 'Bật phím nóng',\n            'Enable Icon View': 'Hiện biểu tượng',\n            'Remove shortcut': 'Xóa lối tắt',\n            'File View': 'Quản lí tệp',\n            'Show Hidden Files': 'Hiện tập tin ẩn',\n            'Show File Extensions': 'Hiện đuôi tập tin',\n            'File View Options': 'Cài đặt quản lí tệp',\n            'Icon View': 'Biểu tượng',\n            'Installed Packages': 'Các phần mềm đã cài',\n            'App Store': 'Chợ ứng dụng',\n            'Regenerate metadata': 'Làm mới metadata',\n            'Install from zip': 'Cài từ file zip',\n            'Install selected': 'Cài mục đã chọn',\n            'Enable TouchMenu': 'Bật Menu cảm ứng',\n            'Invert Text Color': 'Đảo màu chữ',\n            'Search Options': 'Cài đặt tìm kiếm',\n            'Enable Application Search': 'Cho phép tìm kiếm phần mềm',\n            'Enable File Search': 'Cho phép tìm kiếm tập tin',\n            \"Search path '{0}' is already handled by another entry\": \"Đường dẫn tìm kiếm '{0}' đã bị xử lý bởi mục khác\"\n        }\n    };\n});\ndefine('osjs-apps-settings/module-desktop',['./locales'], function (Translations) {\n    'use strict';\n    const Locales = OSjs.require('core/locales');\n    const Theme = OSjs.require('core/theme');\n    const Utils = OSjs.require('utils/misc');\n    const PackageManager = OSjs.require('core/package-manager');\n    const _ = Locales.createLocalizer(Translations);\n    let widgets = [];\n    let items = [];\n    function renderItems(win, setSelected) {\n        const list = [];\n        widgets.forEach(function (i, idx) {\n            const name = i.name;\n            if (items[name]) {\n                list.push({\n                    value: idx,\n                    columns: [{\n                            icon: Theme.getIcon(items[name].Icon),\n                            label: Utils.format('{0} ({1})', items[name].Name, items[name].Description)\n                        }]\n                });\n            }\n        });\n        const view = win._find('WidgetItems');\n        view.clear();\n        view.add(list);\n    }\n    function createDialog(win, scheme, cb) {\n        if (scheme) {\n            const app = win._app;\n            const nwin = new OSjs.Applications.ApplicationSettings.SettingsItemDialog(app, app.__metadata, scheme, cb);\n            nwin._on('inited', function (scheme) {\n                nwin._find('List').clear().add(Object.keys(items).map(function (i, idx) {\n                    return {\n                        value: i,\n                        columns: [{\n                                icon: Theme.getIcon(items[i].Icon),\n                                label: Utils.format('{0} ({1})', items[i].Name, items[i].Description)\n                            }]\n                    };\n                }));\n                nwin._setTitle('Widgets', true);\n            });\n            win._addChild(nwin, true, true);\n        }\n    }\n    function updateLabel(win, lbl, value) {\n        const map = {\n            DesktopMargin: 'Desktop Margin ({0}px)',\n            CornerSnapping: 'Desktop Corner Snapping ({0}px)',\n            WindowSnapping: 'Window Snapping ({0}px)'\n        };\n        const label = Utils.format(_(map[lbl]), value);\n        win._find(lbl + 'Label').set('value', label);\n    }\n    return {\n        group: 'personal',\n        name: 'Desktop',\n        label: 'LBL_DESKTOP',\n        icon: 'devices/video-display.png',\n        watch: ['CoreWM'],\n        init: function (app) {\n        },\n        update: function (win, scheme, settings, wm) {\n            win._find('EnableAnimations').set('value', settings.animations);\n            win._find('EnableTouchMenu').set('value', settings.useTouchMenu);\n            win._find('EnableWindowSwitcher').set('value', settings.enableSwitcher);\n            win._find('DesktopMargin').set('value', settings.desktopMargin);\n            win._find('CornerSnapping').set('value', settings.windowCornerSnap);\n            win._find('WindowSnapping').set('value', settings.windowSnap);\n            updateLabel(win, 'DesktopMargin', settings.desktopMargin);\n            updateLabel(win, 'CornerSnapping', settings.windowCornerSnap);\n            updateLabel(win, 'WindowSnapping', settings.windowSnap);\n            items = PackageManager.getPackage('CoreWM').widgets;\n            widgets = settings.widgets || [];\n            renderItems(win);\n        },\n        render: function (win, scheme, root, settings, wm) {\n            win._find('DesktopMargin').on('change', function (ev) {\n                updateLabel(win, 'DesktopMargin', ev.detail);\n            });\n            win._find('CornerSnapping').on('change', function (ev) {\n                updateLabel(win, 'CornerSnapping', ev.detail);\n            });\n            win._find('WindowSnapping').on('change', function (ev) {\n                updateLabel(win, 'WindowSnapping', ev.detail);\n            });\n            win._find('EnableIconView').set('value', settings.enableIconView);\n            win._find('EnableIconViewInvert').set('value', settings.invertIconViewColor);\n            win._find('WidgetButtonAdd').on('click', function () {\n                win._toggleDisabled(true);\n                createDialog(win, scheme, function (ev, result) {\n                    win._toggleDisabled(false);\n                    if (result) {\n                        widgets.push({ name: result.data });\n                        renderItems(win);\n                    }\n                });\n            });\n            win._find('WidgetButtonRemove').on('click', function () {\n                const selected = win._find('WidgetItems').get('selected');\n                if (selected.length) {\n                    widgets.splice(selected[0].index, 1);\n                    renderItems(win);\n                }\n            });\n            win._find('WidgetButtonOptions').on('click', function () {\n            });\n        },\n        save: function (win, scheme, settings, wm) {\n            settings.animations = win._find('EnableAnimations').get('value');\n            settings.useTouchMenu = win._find('EnableTouchMenu').get('value');\n            settings.enableSwitcher = win._find('EnableWindowSwitcher').get('value');\n            settings.desktopMargin = win._find('DesktopMargin').get('value');\n            settings.windowCornerSnap = win._find('CornerSnapping').get('value');\n            settings.windowSnap = win._find('WindowSnapping').get('value');\n            settings.enableIconView = win._find('EnableIconView').get('value');\n            settings.invertIconViewColor = win._find('EnableIconViewInvert').get('value');\n            settings.widgets = widgets;\n        }\n    };\n});\ndefine('osjs-apps-settings/module-input',['./locales'], function (Translations) {\n    'use strict';\n    const Locales = OSjs.require('core/locales');\n    const Dialog = OSjs.require('core/dialog');\n    const Utils = OSjs.require('utils/misc');\n    const _ = Locales.createLocalizer(Translations);\n    let hotkeys = {};\n    function renderList(win, scheme) {\n        win._find('HotkeysList').clear().add(Object.keys(hotkeys).map(function (name) {\n            return {\n                value: {\n                    name: name,\n                    value: hotkeys[name]\n                },\n                columns: [\n                    { label: name },\n                    { label: hotkeys[name] }\n                ]\n            };\n        }));\n    }\n    function editList(win, scheme, key) {\n        win._toggleDisabled(true);\n        Dialog.create('Input', {\n            message: _('Enter shortcut for:') + ' ' + key.name,\n            value: key.value\n        }, function (ev, button, value) {\n            win._toggleDisabled(false);\n            value = value || '';\n            if (value.indexOf('+') !== -1) {\n                hotkeys[key.name] = value;\n            }\n            renderList(win, scheme);\n        });\n    }\n    return {\n        group: 'system',\n        name: 'Input',\n        label: 'LBL_INPUT',\n        icon: 'apps/preferences-desktop-keyboard-shortcuts.png',\n        init: function () {\n        },\n        update: function (win, scheme, settings, wm) {\n            win._find('EnableHotkeys').set('value', settings.enableHotkeys);\n            hotkeys = Utils.cloneObject(settings.hotkeys);\n            renderList(win, scheme);\n        },\n        render: function (win, scheme, root, settings, wm) {\n            win._find('HotkeysEdit').on('click', function () {\n                const selected = win._find('HotkeysList').get('selected');\n                if (selected && selected[0]) {\n                    editList(win, scheme, selected[0].data);\n                }\n            });\n        },\n        save: function (win, scheme, settings, wm) {\n            settings.enableHotkeys = win._find('EnableHotkeys').get('value');\n            if (hotkeys && Object.keys(hotkeys).length) {\n                settings.hotkeys = hotkeys;\n            }\n        }\n    };\n});\ndefine('osjs-apps-settings/module-locale',[],function () {\n    'use strict';\n    const Config = OSjs.require('core/config');\n    const Locales = OSjs.require('core/locales');\n    return {\n        group: 'user',\n        name: 'Locale',\n        label: 'LBL_LOCALE',\n        icon: 'apps/accessories-character-map.png',\n        init: function () {\n        },\n        update: function (win, scheme, settings, wm) {\n            const config = Config.getConfig();\n            const locales = config.Languages;\n            win._find('UserLocale').clear().add(Object.keys(locales).filter(function (l) {\n                return !!OSjs.Locales[l];\n            }).map(function (l) {\n                return {\n                    label: locales[l],\n                    value: l\n                };\n            })).set('value', Locales.getLocale());\n        },\n        render: function (win, scheme, root, settings, wm) {\n        },\n        save: function (win, scheme, settings, wm) {\n            settings.language = win._find('UserLocale').get('value');\n        }\n    };\n});\ndefine('osjs-apps-settings/module-panel',[],function () {\n    'use strict';\n    const PackageManager = OSjs.require('core/package-manager');\n    const Locales = OSjs.require('core/locales');\n    const Dialog = OSjs.require('core/dialog');\n    const Theme = OSjs.require('core/theme');\n    const Utils = OSjs.require('utils/misc');\n    let panelItems = [];\n    let items = [];\n    let max = 0;\n    let panel;\n    function openOptions(wm, idx) {\n        try {\n            wm.panels[0]._items[idx].openSettings();\n        } catch (e) {\n        }\n    }\n    function checkSelection(win, idx) {\n        let hasOptions = true;\n        try {\n            const it = items[panel.items[idx].name];\n            hasOptions = it.HasOptions === true;\n        } catch (e) {\n        }\n        win._find('PanelButtonOptions').set('disabled', idx < 0 || !hasOptions);\n        win._find('PanelButtonRemove').set('disabled', idx < 0);\n        win._find('PanelButtonUp').set('disabled', idx <= 0);\n        win._find('PanelButtonDown').set('disabled', idx < 0 || idx >= max);\n    }\n    function renderItems(win, setSelected) {\n        const list = [];\n        panelItems.forEach(function (i, idx) {\n            const name = i.name;\n            if (items[name]) {\n                list.push({\n                    value: idx,\n                    columns: [{\n                            icon: Theme.getIcon(items[name].Icon),\n                            label: Utils.format('{0} ({1})', items[name].Name, items[name].Description)\n                        }]\n                });\n            }\n        });\n        max = panelItems.length - 1;\n        const view = win._find('PanelItems');\n        view.clear();\n        view.add(list);\n        if (typeof setSelected !== 'undefined') {\n            view.set('selected', setSelected);\n            checkSelection(win, setSelected);\n        } else {\n            checkSelection(win, -1);\n        }\n    }\n    function movePanelItem(win, index, pos) {\n        const value = panelItems[index];\n        const newIndex = index + pos;\n        panelItems.splice(index, 1);\n        panelItems.splice(newIndex, 0, value);\n        renderItems(win, newIndex);\n    }\n    function createDialog(win, scheme, cb) {\n        if (scheme) {\n            const app = win._app;\n            const nwin = new OSjs.Applications.ApplicationSettings.SettingsItemDialog(app, app.__metadata, scheme, cb);\n            nwin._on('inited', function (scheme) {\n                nwin._find('List').clear().add(Object.keys(items).map(function (i, idx) {\n                    return {\n                        value: i,\n                        columns: [{\n                                icon: Theme.getIcon(items[i].Icon),\n                                label: Utils.format('{0} ({1})', items[i].Name, items[i].Description)\n                            }]\n                    };\n                }));\n                nwin._setTitle('Panel Items', true);\n            });\n            win._addChild(nwin, true, true);\n        }\n    }\n    function createColorDialog(win, color, cb) {\n        win._toggleDisabled(true);\n        Dialog.create('Color', { color: color }, function (ev, button, result) {\n            win._toggleDisabled(false);\n            if (button === 'ok' && result) {\n                cb(result.hex);\n            }\n        }, win);\n    }\n    return {\n        group: 'personal',\n        name: 'Panel',\n        label: 'LBL_PANELS',\n        icon: 'apps/gnome-panel.png',\n        watch: ['CoreWM'],\n        init: function () {\n        },\n        update: function (win, scheme, settings, wm) {\n            panel = settings.panels[0];\n            let opacity = 85;\n            if (typeof panel.options.opacity === 'number') {\n                opacity = panel.options.opacity;\n            }\n            win._find('PanelPosition').set('value', panel.options.position);\n            win._find('PanelAutoHide').set('value', panel.options.autohide);\n            win._find('PanelOntop').set('value', panel.options.ontop);\n            win._find('PanelBackgroundColor').set('value', panel.options.background || '#101010');\n            win._find('PanelForegroundColor').set('value', panel.options.foreground || '#ffffff');\n            win._find('PanelOpacity').set('value', opacity);\n            items = PackageManager.getPackage('CoreWM').panelItems;\n            panelItems = panel.items || [];\n            renderItems(win);\n        },\n        render: function (win, scheme, root, settings, wm) {\n            win._find('PanelPosition').add([\n                {\n                    value: 'top',\n                    label: Locales._('LBL_TOP')\n                },\n                {\n                    value: 'bottom',\n                    label: Locales._('LBL_BOTTOM')\n                }\n            ]);\n            win._find('PanelBackgroundColor').on('open', function (ev) {\n                createColorDialog(win, ev.detail, function (result) {\n                    win._find('PanelBackgroundColor').set('value', result);\n                });\n            });\n            win._find('PanelForegroundColor').on('open', function (ev) {\n                createColorDialog(win, ev.detail, function (result) {\n                    win._find('PanelForegroundColor').set('value', result);\n                });\n            });\n            win._find('PanelItems').on('select', function (ev) {\n                if (ev && ev.detail && ev.detail.entries && ev.detail.entries.length) {\n                    checkSelection(win, ev.detail.entries[0].index);\n                }\n            });\n            win._find('PanelButtonAdd').on('click', function () {\n                win._toggleDisabled(true);\n                createDialog(win, scheme, function (ev, result) {\n                    win._toggleDisabled(false);\n                    if (result) {\n                        panelItems.push({ name: result.data });\n                        renderItems(win);\n                    }\n                });\n            });\n            win._find('PanelButtonRemove').on('click', function () {\n                const selected = win._find('PanelItems').get('selected');\n                if (selected.length) {\n                    panelItems.splice(selected[0].index, 1);\n                    renderItems(win);\n                }\n            });\n            win._find('PanelButtonUp').on('click', function () {\n                const selected = win._find('PanelItems').get('selected');\n                if (selected.length) {\n                    movePanelItem(win, selected[0].index, -1);\n                }\n            });\n            win._find('PanelButtonDown').on('click', function () {\n                const selected = win._find('PanelItems').get('selected');\n                if (selected.length) {\n                    movePanelItem(win, selected[0].index, 1);\n                }\n            });\n            win._find('PanelButtonReset').on('click', function () {\n                const defaults = wm.getDefaultSetting('panels');\n                panelItems = defaults[0].items;\n                renderItems(win);\n            });\n            win._find('PanelButtonOptions').on('click', function () {\n                const selected = win._find('PanelItems').get('selected');\n                if (selected.length) {\n                    openOptions(wm, selected[0].index);\n                }\n            });\n        },\n        save: function (win, scheme, settings, wm) {\n            settings.panels = settings.panels || [{}];\n            settings.panels[0].options = settings.panels[0].options || {};\n            settings.panels[0].options.position = win._find('PanelPosition').get('value');\n            settings.panels[0].options.autohide = win._find('PanelAutoHide').get('value');\n            settings.panels[0].options.ontop = win._find('PanelOntop').get('value');\n            settings.panels[0].options.background = win._find('PanelBackgroundColor').get('value') || '#101010';\n            settings.panels[0].options.foreground = win._find('PanelForegroundColor').get('value') || '#ffffff';\n            settings.panels[0].options.opacity = win._find('PanelOpacity').get('value');\n            settings.panels[0].items = panelItems;\n        }\n    };\n});\ndefine('osjs-apps-settings/module-pm',[],function () {\n    'use strict';\n    const Dialog = OSjs.require('core/dialog');\n    const SettingsManager = OSjs.require('core/settings-manager');\n    const PackageManager = OSjs.require('core/package-manager');\n    const FileMetadata = OSjs.require('vfs/file');\n    let list, hidden;\n    function updateEnabledStates() {\n        const pool = SettingsManager.instance('PackageManager', { Hidden: [] });\n        list = PackageManager.getPackages(false);\n        hidden = pool.get('Hidden');\n    }\n    function renderInstalled(win, scheme) {\n        if (!win || win._destroyed) {\n            return;\n        }\n        win._find('ButtonUninstall').set('disabled', true);\n        updateEnabledStates();\n        const view = win._find('InstalledPackages');\n        const rows = Object.keys(list).map(function (k, idx) {\n            return {\n                index: idx,\n                value: k,\n                columns: [\n                    { label: '' },\n                    { label: k },\n                    { label: list[k].scope },\n                    { label: list[k].name }\n                ]\n            };\n        });\n        view.clear();\n        view.add(rows);\n        view.$element.querySelectorAll('gui-list-view-body > gui-list-view-row').forEach(function (row) {\n            const col = row.children[0];\n            const name = row.getAttribute('data-value');\n            const enabled = hidden.indexOf(name) >= 0;\n            win._create('gui-checkbox', { value: enabled }, col).on('change', function (ev) {\n                const idx = hidden.indexOf(name);\n                if (ev.detail) {\n                    if (idx < 0) {\n                        hidden.push(name);\n                    }\n                } else {\n                    if (idx >= 0) {\n                        hidden.splice(idx, 1);\n                    }\n                }\n            });\n        });\n    }\n    function renderPaths(win, scheme) {\n        if (!win || win._destroyed) {\n            return;\n        }\n        const paths = SettingsManager.instance('PackageManager').get('PackagePaths', []);\n        win._find('PackagePaths').clear().add(paths.map(function (iter, idx) {\n            return {\n                value: idx,\n                columns: [{ label: iter }]\n            };\n        }));\n    }\n    function _save(sf, win, scheme, paths) {\n        win._toggleLoading(true);\n        sf.set(null, { PackagePaths: paths }, function () {\n            renderPaths(win, scheme);\n            win._toggleLoading(false);\n        }, false);\n    }\n    function addPath(win, scheme) {\n        const sf = SettingsManager.instance('PackageManager');\n        const paths = sf.get('PackagePaths', []);\n        win._toggleDisabled(true);\n        Dialog.create('Input', {\n            message: 'Enter path',\n            placeholder: 'mount:///path'\n        }, function (ev, btn, value) {\n            win._toggleDisabled(false);\n            if (value) {\n                if (paths.indexOf(value) === -1) {\n                    paths.push(value);\n                    _save(sf, win, scheme, paths);\n                }\n            }\n        });\n    }\n    function removePath(win, scheme, index) {\n        const sf = SettingsManager.instance('PackageManager');\n        const paths = sf.get('PackagePaths', []);\n        if (typeof paths[index] !== 'undefined') {\n            paths.splice(index, 1);\n            _save(sf, win, scheme, paths);\n        }\n    }\n    return {\n        group: 'misc',\n        name: 'Packages',\n        label: 'LBL_PACKAGES',\n        icon: 'apps/system-software-install.png',\n        button: false,\n        init: function () {\n        },\n        update: function (win, scheme, settings, wm) {\n            renderInstalled(win, scheme);\n            renderPaths(win, scheme);\n        },\n        render: function (win, scheme, root, settings, wm) {\n            const pool = SettingsManager.instance('PackageManager', { Hidden: [] });\n            win._find('ButtonUninstall').on('click', function () {\n                const selected = win._find('InstalledPackages').get('selected');\n                if (selected && selected[0]) {\n                    const pkg = PackageManager.getPackage(selected[0].data);\n                    if (pkg && pkg.scope === 'user') {\n                        win._toggleLoading(true);\n                        const file = new FileMetadata(pkg.path);\n                        PackageManager.uninstall(file).then(() => {\n                            win._toggleLoading(false);\n                            renderInstalled(win, scheme);\n                        }).catch(e => {\n                            win._toggleLoading(false);\n                            alert(e);\n                        });\n                    }\n                }\n            });\n            win._find('InstalledPackages').on('select', function (ev) {\n                let d = true;\n                const e = ev.detail.entries || [];\n                if (e.length) {\n                    const pkg = PackageManager.getPackage(e[0].data);\n                    if (pkg && pkg.scope === 'user') {\n                        d = false;\n                    }\n                }\n                win._find('ButtonUninstall').set('disabled', d);\n            });\n            win._find('ButtonSaveHidden').on('click', function () {\n                win._toggleLoading(true);\n                pool.set('Hidden', hidden, function () {\n                    win._toggleLoading(false);\n                });\n            });\n            win._find('ButtonRegen').on('click', function () {\n                win._toggleLoading(true);\n                PackageManager.generateUserMetadata().then(() => {\n                    win._toggleLoading(false);\n                    renderInstalled(win, scheme);\n                }).catch(() => {\n                    win._toggleLoading(false);\n                });\n            });\n            win._find('ButtonZipInstall').on('click', function () {\n                win._toggleDisabled(true);\n                Dialog.create('File', { filter: ['application/zip'] }, function (ev, button, result) {\n                    if (button !== 'ok' || !result) {\n                        win._toggleDisabled(false);\n                    } else {\n                        PackageManager.install(result, true).then(() => {\n                            win._toggleDisabled(false);\n                            renderInstalled(win, scheme);\n                        }).catch(e => {\n                            win._toggleDisabled(false);\n                            alert(e);\n                        });\n                    }\n                }, win);\n            });\n            win._find('PackagePathsRemove').on('click', function () {\n                const sel = win._find('PackagePaths').get('selected');\n                if (sel && sel.length) {\n                    removePath(win, scheme, sel[0].data);\n                }\n            });\n            win._find('PackagePathsAdd').on('click', function () {\n                addPath(win, scheme);\n            });\n        },\n        save: function (win, scheme, settings, wm) {\n        }\n    };\n});\ndefine('osjs-apps-settings/module-search',['./locales'], function (Translations) {\n    'use strict';\n    const SettingsManager = OSjs.require('core/settings-manager');\n    const Notification = OSjs.require('gui/notification');\n    const Locales = OSjs.require('core/locales');\n    const Dialog = OSjs.require('core/dialog');\n    const Utils = OSjs.require('utils/misc');\n    const _ = Locales.createLocalizer(Translations);\n    return {\n        group: 'system',\n        name: 'Search',\n        label: 'LBL_SEARCH',\n        icon: 'actions/system-search.png',\n        init: function () {\n        },\n        update: function (win, scheme, settings, wm) {\n            const searchOptions = Utils.cloneObject(SettingsManager.get('SearchEngine') || {});\n            win._find('SearchEnableApplications').set('value', searchOptions.applications === true);\n            win._find('SearchEnableFiles').set('value', searchOptions.files === true);\n            const view = win._find('SearchPaths').clear();\n            view.set('columns', [{ label: 'Path' }]);\n            const list = (searchOptions.paths || []).map(function (l) {\n                return {\n                    value: l,\n                    id: l,\n                    columns: [{ label: l }]\n                };\n            });\n            view.add(list);\n        },\n        render: function (win, scheme, root, settings, wm) {\n            function openAddDialog() {\n                win._toggleDisabled(true);\n                Dialog.create('File', {\n                    select: 'dir',\n                    mfilter: [function (m) {\n                            return m.option('searchable') && m.mounted();\n                        }]\n                }, function (ev, button, result) {\n                    win._toggleDisabled(false);\n                    if (button === 'ok' && result) {\n                        win._find('SearchPaths').add([{\n                                value: result.path,\n                                id: result.path,\n                                columns: [{ label: result.path }]\n                            }]);\n                    }\n                }, win);\n            }\n            function removeSelected() {\n                const view = win._find('SearchPaths');\n                const current = view.get('value') || [];\n                current.forEach(function (c) {\n                    view.remove(c.index);\n                });\n            }\n            win._find('SearchAdd').on('click', openAddDialog);\n            win._find('SearchRemove').on('click', removeSelected);\n        },\n        save: function (win, scheme, settings, wm) {\n            const tmpPaths = win._find('SearchPaths').get('entry', null, null, true).sort();\n            const paths = [];\n            function isChildOf(tp) {\n                let result = false;\n                paths.forEach(function (p) {\n                    if (!result) {\n                        result = tp.substr(0, p.length) === p;\n                    }\n                });\n                return result;\n            }\n            tmpPaths.forEach(function (tp) {\n                const c = isChildOf(tp);\n                if (c) {\n                    Notification.create({\n                        title: _('LBL_SEARCH'),\n                        message: _(\"Search path '{0}' is already handled by another entry\", tp)\n                    });\n                }\n                if (!paths.length || !c) {\n                    paths.push(tp);\n                }\n            });\n            const searchSettings = {\n                applications: win._find('SearchEnableApplications').get('value'),\n                files: win._find('SearchEnableFiles').get('value'),\n                paths: paths\n            };\n            SettingsManager.instance('SearchEngine').set(null, searchSettings, false, false);\n        }\n    };\n});\ndefine('osjs-apps-settings/module-sound',['./locales'], function (Translations) {\n    'use strict';\n    const Theme = OSjs.require('core/theme');\n    const Locales = OSjs.require('core/locales');\n    const Dialog = OSjs.require('core/dialog');\n    const Utils = OSjs.require('utils/misc');\n    const _ = Locales.createLocalizer(Translations);\n    let sounds = {};\n    function renderList(win, scheme) {\n        win._find('SoundsList').clear().add(Object.keys(sounds).map(function (name) {\n            return {\n                value: {\n                    name: name,\n                    value: sounds[name]\n                },\n                columns: [\n                    { label: name },\n                    { label: sounds[name] }\n                ]\n            };\n        }));\n    }\n    function editList(win, scheme, key) {\n        win._toggleDisabled(true);\n        Dialog.create('Input', {\n            message: _('Enter filename for:') + ' ' + key.name,\n            value: key.value\n        }, function (ev, button, value) {\n            win._toggleDisabled(false);\n            value = value || '';\n            if (value.length) {\n                sounds[key.name] = value;\n            }\n            renderList(win, scheme);\n        });\n    }\n    return {\n        group: 'personal',\n        name: 'Sounds',\n        label: 'LBL_SOUNDS',\n        icon: 'status/audio-volume-high.png',\n        init: function () {\n        },\n        update: function (win, scheme, settings, wm) {\n            win._find('SoundThemeName').set('value', settings.soundTheme);\n            win._find('EnableSounds').set('value', settings.enableSounds);\n            sounds = Utils.cloneObject(settings.sounds);\n            renderList(win, scheme);\n        },\n        render: function (win, scheme, root, settings, wm) {\n            const soundThemes = function (tmp) {\n                return Object.keys(tmp).map(function (t) {\n                    return {\n                        label: tmp[t],\n                        value: t\n                    };\n                });\n            }(Theme.getSoundThemes());\n            win._find('SoundThemeName').add(soundThemes);\n            win._find('SoundsEdit').on('click', function () {\n                const selected = win._find('SoundsList').get('selected');\n                if (selected && selected[0]) {\n                    editList(win, scheme, selected[0].data);\n                }\n            });\n        },\n        save: function (win, scheme, settings, wm) {\n            settings.soundTheme = win._find('SoundThemeName').get('value');\n            settings.enableSounds = win._find('EnableSounds').get('value');\n            if (sounds && Object.keys(sounds).length) {\n                settings.sounds = sounds;\n            }\n        }\n    };\n});\ndefine('osjs-apps-settings/module-store',[],function () {\n    'use strict';\n    const FS = OSjs.require('utils/fs');\n    const VFS = OSjs.require('vfs/fs');\n    const FileMetadata = OSjs.require('vfs/file');\n    const PackageManager = OSjs.require('core/package-manager');\n    function installSelected(download, cb) {\n        const file = new FileMetadata(download, 'application/zip');\n        new Promise((resolve, reject) => {\n            VFS.read(file).then(ab => {\n                const dest = new FileMetadata({\n                    filename: FS.filename(download),\n                    type: 'file',\n                    path: 'home:///' + FS.filename(download),\n                    mime: 'application/zip'\n                });\n                VFS.write(dest, ab).then(() => {\n                    return PackageManager.install(dest, true).then(() => {\n                        PackageManager.generateUserMetadata().then(resolve).catch(reject);\n                    }).catch(error => {\n                        reject(new Error('Failed to install package: ' + error));\n                    });\n                }).catch(reject);\n            }).catch(reject);\n        }).then(res => cb(false, res)).catch(cb);\n    }\n    function renderStore(win) {\n        win._toggleLoading(true);\n        PackageManager.getStorePackages({}).then(result => {\n            const rows = result.map(function (i, idx) {\n                const a = document.createElement('a');\n                a.href = i._repository;\n                return {\n                    index: idx,\n                    value: i.download,\n                    columns: [\n                        { label: i.name },\n                        { label: a.hostname },\n                        { label: i.version },\n                        { label: i.author }\n                    ]\n                };\n            });\n            win._toggleLoading(false);\n            const gelList = win._find('AppStorePackages');\n            if (gelList) {\n                gelList.clear().add(rows);\n            }\n            return true;\n        }).catch(err => {\n            console.warn(err);\n            win._toggleLoading(false);\n        });\n    }\n    return {\n        group: 'user',\n        name: 'Store',\n        label: 'LBL_STORE',\n        icon: 'apps/system-software-update.png',\n        button: false,\n        init: function () {\n        },\n        update: function (win, scheme, settings, wm, clicked) {\n            if (clicked) {\n                renderStore(win);\n            }\n        },\n        render: function (win, scheme, root, settings, wm) {\n            win._find('ButtonStoreRefresh').on('click', function () {\n                renderStore(win);\n            });\n            win._find('ButtonStoreInstall').on('click', function () {\n                const selected = win._find('AppStorePackages').get('selected');\n                if (selected.length && selected[0].data) {\n                    win._toggleLoading(true);\n                    installSelected(selected[0].data, function (error, result) {\n                        win._toggleLoading(false);\n                        if (error) {\n                            alert(error);\n                            return;\n                        }\n                    });\n                }\n            });\n        },\n        save: function (win, scheme, settings, wm) {\n        }\n    };\n});\ndefine('osjs-apps-settings/module-theme',['./locales'], function (Translations) {\n    'use strict';\n    const Locales = OSjs.require('core/locales');\n    const Dialog = OSjs.require('core/dialog');\n    const FileMetadata = OSjs.require('vfs/file');\n    const Theme = OSjs.require('core/theme');\n    const _ = Locales.createLocalizer(Translations);\n    return {\n        group: 'personal',\n        name: 'Theme',\n        label: 'LBL_THEME',\n        icon: 'apps/preferences-desktop-wallpaper.png',\n        watch: ['CoreWM'],\n        init: function () {\n        },\n        update: function (win, scheme, settings, wm) {\n            win._find('BackgroundImage').set('value', settings.wallpaper);\n            win._find('BackgroundColor').set('value', settings.backgroundColor);\n            win._find('FontName').set('value', settings.fontFamily);\n            win._find('StyleThemeName').set('value', settings.styleTheme);\n            win._find('IconThemeName').set('value', settings.iconTheme);\n            win._find('EnableTouchMenu').set('value', settings.useTouchMenu);\n            win._find('BackgroundStyle').set('value', settings.background);\n            win._find('BackgroundImage').set('value', settings.wallpaper);\n            win._find('BackgroundColor').set('value', settings.backgroundColor);\n        },\n        render: function (win, scheme, root, settings, wm) {\n            function _createDialog(n, a, done) {\n                win._toggleDisabled(true);\n                Dialog.create(n, a, function (ev, button, result) {\n                    win._toggleDisabled(false);\n                    if (button === 'ok' && result) {\n                        done(result);\n                    }\n                }, win);\n            }\n            win._find('StyleThemeName').add(Theme.getStyleThemes().map(function (t) {\n                return {\n                    label: t.title,\n                    value: t.name\n                };\n            }));\n            win._find('IconThemeName').add(function (tmp) {\n                return Object.keys(tmp).map(function (t) {\n                    return {\n                        label: tmp[t],\n                        value: t\n                    };\n                });\n            }(Theme.getIconThemes()));\n            win._find('BackgroundImage').on('open', function (ev) {\n                _createDialog('File', {\n                    mime: ['^image'],\n                    file: new FileMetadata(ev.detail)\n                }, function (result) {\n                    win._find('BackgroundImage').set('value', result.path);\n                });\n            });\n            win._find('BackgroundColor').on('open', function (ev) {\n                _createDialog('Color', { color: ev.detail }, function (result) {\n                    win._find('BackgroundColor').set('value', result.hex);\n                }, win);\n            });\n            win._find('FontName').on('click', function () {\n                _createDialog('Font', {\n                    fontName: settings.fontFamily,\n                    fontSize: -1\n                }, function (result) {\n                    win._find('FontName').set('value', result.fontName);\n                }, win);\n            });\n            win._find('BackgroundStyle').add([\n                {\n                    value: 'image',\n                    label: _('LBL_IMAGE')\n                },\n                {\n                    value: 'image-repeat',\n                    label: _('Image (Repeat)')\n                },\n                {\n                    value: 'image-center',\n                    label: _('Image (Centered)')\n                },\n                {\n                    value: 'image-fill',\n                    label: _('Image (Fill)')\n                },\n                {\n                    value: 'image-strech',\n                    label: _('Image (Streched)')\n                },\n                {\n                    value: 'color',\n                    label: _('LBL_COLOR')\n                }\n            ]);\n        },\n        save: function (win, scheme, settings, wm) {\n            settings.styleTheme = win._find('StyleThemeName').get('value');\n            settings.iconTheme = win._find('IconThemeName').get('value');\n            settings.useTouchMenu = win._find('EnableTouchMenu').get('value');\n            settings.wallpaper = win._find('BackgroundImage').get('value');\n            settings.backgroundColor = win._find('BackgroundColor').get('value');\n            settings.background = win._find('BackgroundStyle').get('value');\n            settings.fontFamily = win._find('FontName').get('value');\n        }\n    };\n});\ndefine('osjs-apps-settings/module-user',[],function () {\n    'use strict';\n    const Authenticator = OSjs.require('core/authenticator');\n    return {\n        group: 'user',\n        name: 'User',\n        label: 'LBL_USER',\n        icon: 'apps/user-info.png',\n        button: false,\n        init: function () {\n        },\n        update: function (win, scheme, settings, wm) {\n            const user = Authenticator.instance.getUser();\n            win._find('UserID').set('value', user.id);\n            win._find('UserName').set('value', user.name);\n            win._find('UserUsername').set('value', user.username);\n            win._find('UserGroups').set('value', user.groups);\n        },\n        render: function (win, scheme, root, settings, wm) {\n        },\n        save: function (win, scheme, settings, wm) {\n        }\n    };\n});\ndefine('osjs-apps-settings/module-users',['./locales'], function (Translations) {\n    'use strict';\n    const Locales = OSjs.require('core/locales');\n    const Dialog = OSjs.require('core/dialog');\n    const Config = OSjs.require('core/config');\n    const Connection = OSjs.require('core/connection');\n    const Window = OSjs.require('core/window');\n    const _ = Locales.createLocalizer(Translations);\n    function renderUsers(win, scheme) {\n        Connection.request('users', { command: 'list' }).then(users => {\n            if (users instanceof Array) {\n                win._find('UsersList').clear().add(users.map(function (iter, idx) {\n                    return {\n                        value: iter,\n                        columns: [\n                            { label: iter.id },\n                            { label: iter.username },\n                            { label: iter.name }\n                        ]\n                    };\n                }));\n            }\n        });\n    }\n    function showDialog(win, scheme, data, id) {\n        win._toggleDisabled(true);\n        if (id) {\n            Dialog.create('Input', {\n                message: _('Set user password'),\n                type: 'password'\n            }, function (ev, button, value) {\n                if (!value) {\n                    win._toggleDisabled(false);\n                    return;\n                }\n                Connection.request('users', {\n                    command: 'passwd',\n                    user: {\n                        password: value,\n                        id: id\n                    }\n                }).then(() => {\n                    win._toggleDisabled(false);\n                    renderUsers(win, scheme);\n                }).catch(err => {\n                    win._toggleDisabled(false);\n                    OSjs.error('Settings', _('Error while managing users'), err);\n                });\n            });\n            return;\n        }\n        const action = data === null ? 'add' : 'edit';\n        data = data || {};\n        const nwin = new Window('SettingsUserWindow', {\n            icon: win._app.__metadata.icon,\n            title: win._app.__metadata.name,\n            width: 400,\n            height: 250\n        }, win._app);\n        nwin._on('destroy', function (root) {\n            win._toggleDisabled(false);\n        });\n        nwin._on('init', function (root) {\n            scheme.render(nwin, nwin._name);\n            if (Object.keys(data).length) {\n                nwin._find('UserUsername').set('value', data.username);\n                nwin._find('UserName').set('value', data.name);\n                nwin._find('UserGroups').set('value', (data.groups || []).join(','));\n            }\n            nwin._find('ButtonClose').on('click', function () {\n                nwin._close();\n            });\n            nwin._find('ButtonOK').on('click', function () {\n                data.username = nwin._find('UserUsername').get('value');\n                data.name = nwin._find('UserName').get('value') || data.username;\n                data.groups = nwin._find('UserGroups').get('value').replace(/\\s/g, '').split(',');\n                if (!data.username || !data.groups) {\n                    nwin._close();\n                    return;\n                }\n                Connection.request('users', {\n                    command: action,\n                    user: data\n                }).then(() => {\n                    renderUsers(win, scheme);\n                    nwin._close();\n                }).catch(err => {\n                    OSjs.error('Settings', _('Error while managing users'), err);\n                });\n            });\n        });\n        win._addChild(nwin, true, true);\n    }\n    function removeUser(win, scheme, data) {\n        Connection.request('users', {\n            command: 'remove',\n            user: data\n        }).then(users => {\n            renderUsers(win, scheme);\n        }).catch(err => {\n            OSjs.error('Settings', _('Error while managing users'), err);\n        });\n    }\n    return {\n        group: 'system',\n        name: 'Users',\n        label: 'LBL_USERS',\n        icon: 'apps/system-users.png',\n        button: false,\n        compatible: function () {\n            const cfg = Config.getConfig('Connection.Authenticator');\n            return [\n                'demo',\n                'pam',\n                'shadow'\n            ].indexOf(cfg) === -1;\n        },\n        init: function () {\n        },\n        update: function (win, scheme, settings, wm) {\n            renderUsers(win, scheme);\n        },\n        render: function (win, scheme, root, settings, wm) {\n            function _action(cb, te) {\n                const sel = win._find('UsersList').get('selected');\n                if (sel && sel.length) {\n                    const data = sel[0].data;\n                    data._username = data.username;\n                    cb(data);\n                } else {\n                    if (te) {\n                        cb(null);\n                    }\n                }\n            }\n            win._find('UsersAdd').on('click', function () {\n                showDialog(win, scheme, null);\n            });\n            win._find('UsersRemove').on('click', function () {\n                _action(function (data) {\n                    removeUser(win, scheme, data);\n                });\n            });\n            win._find('UsersEdit').on('click', function () {\n                _action(function (data) {\n                    showDialog(win, scheme, data);\n                });\n            });\n            win._find('UsersPasswd').on('click', function () {\n                _action(function (data) {\n                    showDialog(win, scheme, null, data.id);\n                });\n            });\n        },\n        save: function (win, scheme, settings, wm) {\n        }\n    };\n});\ndefine('osjs-apps-settings/module-vfs',[],function () {\n    'use strict';\n    const SettingsManager = OSjs.require('core/settings-manager');\n    const MountManager = OSjs.require('core/mount-manager');\n    const Authenticator = OSjs.require('core/authenticator');\n    const Window = OSjs.require('core/window');\n    const Utils = OSjs.require('utils/misc');\n    const TEMPLATES = {\n        WebDAV: {\n            MountName: 'owncloud',\n            MountDescription: 'OwnCloud',\n            MountHost: 'http://localhost/remote.php/webdav/',\n            MountNamespace: 'DAV:',\n            MountUsername: function () {\n                return Authenticator.instance.getUser().username;\n            }\n        }\n    };\n    let removeMounts = [];\n    let addMounts = [];\n    function createMountWindow(win, scheme, selected, ondone) {\n        const nwin = new Window('SettingsMountWindow', {\n            icon: win._app.__metadata.icon,\n            title: win._app.__metadata.name,\n            width: 400,\n            height: 440\n        }, win._app);\n        nwin._on('destroy', function (root) {\n            win._toggleDisabled(false);\n        });\n        nwin._on('inited', function (root) {\n            win._toggleDisabled(true);\n        });\n        nwin._on('init', function (root) {\n            function setTemplate(name) {\n                const tpl = TEMPLATES[name];\n                if (tpl) {\n                    Object.keys(tpl).forEach(function (k) {\n                        let val = tpl[k];\n                        if (typeof val === 'function') {\n                            val = val();\n                        }\n                        nwin._find(k).set('value', val);\n                    });\n                }\n            }\n            function done() {\n                ondone({\n                    transport: nwin._find('MountType').get('value'),\n                    name: nwin._find('MountName').get('value'),\n                    description: nwin._find('MountDescription').get('value'),\n                    options: {\n                        host: nwin._find('MountHost').get('value'),\n                        ns: nwin._find('MountNamespace').get('value'),\n                        username: nwin._find('MountUsername').get('value'),\n                        password: nwin._find('MountPassword').get('value'),\n                        cors: nwin._find('MountCORS').get('value')\n                    }\n                }, selected);\n                nwin._close();\n            }\n            scheme.render(nwin, nwin._name);\n            if (selected) {\n                nwin._find('MountType').set('value', selected.transport);\n                nwin._find('MountName').set('value', selected.name);\n                nwin._find('MountDescription').set('value', selected.description);\n                if (selected.options) {\n                    nwin._find('MountHost').set('value', selected.options.host);\n                    nwin._find('MountNamespace').set('value', selected.options.ns);\n                    nwin._find('MountUsername').set('value', selected.options.username);\n                    nwin._find('MountPassword').set('value', selected.options.password);\n                    nwin._find('MountCORS').set('value', selected.options.cors);\n                }\n            } else {\n                setTemplate(nwin._find('MountType').get('value'));\n                nwin._find('MountType').on('change', function (ev) {\n                    setTemplate(ev.detail);\n                });\n            }\n            nwin._find('ButtonClose').on('click', function () {\n                nwin._close();\n            });\n            nwin._find('ButtonOK').on('click', function () {\n                done();\n            });\n        });\n        return win._addChild(nwin, true, true);\n    }\n    function renderMounts(win, scheme) {\n        const sf = SettingsManager.instance('VFS');\n        const entries = sf.get('mounts', []).map(function (i, idx) {\n            return {\n                value: idx,\n                columns: [\n                    { label: i.name },\n                    { label: i.description }\n                ]\n            };\n        });\n        win._find('MountList').clear().add(entries);\n    }\n    return {\n        group: 'system',\n        name: 'VFS',\n        label: 'VFS',\n        icon: 'devices/drive-harddisk.png',\n        watch: ['VFS'],\n        init: function (app) {\n        },\n        update: function (win, scheme, settings, wm) {\n            const vfsOptions = Utils.cloneObject(SettingsManager.get('VFS') || {});\n            const scandirOptions = vfsOptions.scandir || {};\n            win._find('ShowFileExtensions').set('value', scandirOptions.showFileExtensions === true);\n            win._find('ShowHiddenFiles').set('value', scandirOptions.showHiddenFiles === true);\n            renderMounts(win, scheme);\n        },\n        render: function (win, scheme, root, settings, wm) {\n            function ondone(connection, replace) {\n                if (connection) {\n                    if (replace) {\n                        removeMounts.push(replace);\n                    }\n                    addMounts.push(connection);\n                }\n                win.onButtonOK();\n                win.onModuleSelect(module.name);\n            }\n            win._find('MountList').set('columns', [\n                { label: 'Name' },\n                { label: 'Description' }\n            ]);\n            win._find('MountRemove').on('click', function () {\n                const sel = win._find('MountList').get('selected');\n                if (sel instanceof Array) {\n                    sel.forEach(function (item) {\n                        const mounts = SettingsManager.instance('VFS').get('mounts', []);\n                        const idx = item.data;\n                        if (mounts[idx]) {\n                            removeMounts.push(mounts[idx]);\n                            win.onButtonOK();\n                            win.onModuleSelect(module.name);\n                        }\n                    });\n                }\n            });\n            win._find('MountAdd').on('click', function () {\n                createMountWindow(win, scheme, null, ondone);\n            });\n            win._find('MountEdit').on('click', function () {\n                const sel = win._find('MountList').get('selected');\n                const mounts = SettingsManager.instance('VFS').get('mounts', []);\n                if (sel && sel.length) {\n                    const mount = mounts[sel[0].data];\n                    if (mount) {\n                        createMountWindow(win, scheme, mount, ondone);\n                    }\n                }\n            });\n        },\n        save: function (win, scheme, settings, wm) {\n            const si = SettingsManager.instance('VFS');\n            const mounts = si.get('mounts', []).filter(function (iter) {\n                for (let i = 0; i < removeMounts.length; i++) {\n                    const name = removeMounts[i].name;\n                    if (name === iter.name) {\n                        MountManager.remove(name);\n                        removeMounts.splice(i, 1);\n                        return false;\n                    }\n                }\n                return true;\n            });\n            addMounts.forEach(function (iter) {\n                try {\n                    MountManager.add(Object.assign({}, iter));\n                    mounts.push(iter);\n                } catch (e) {\n                    OSjs.error('Settings', 'An error occured while trying to mount', e);\n                    console.warn(e.stack, e);\n                }\n            });\n            const vfsSettings = {\n                mounts: mounts,\n                scandir: {\n                    showHiddenFiles: win._find('ShowHiddenFiles').get('value'),\n                    showFileExtensions: win._find('ShowFileExtensions').get('value')\n                }\n            };\n            si.set(null, vfsSettings, false, false);\n            addMounts = [];\n            removeMounts = [];\n        }\n    };\n});\ndefine('osjs-apps-settings/scheme.html',[], function() { return \"<application-window data-id=\\\"SettingsWindow\\\">\\r\\n\\r\\n  <gui-vbox>\\r\\n    <gui-vbox-container data-grow=\\\"1\\\" data-fill=\\\"true\\\" data-id=\\\"ContainerSelection\\\">\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-grow=\\\"1\\\" data-fill=\\\"true\\\" data-id=\\\"ContainerContent\\\">\\r\\n      <gui-fragment data-fragment-external=\\\"module-desktop.html\\\" />\\r\\n      <gui-fragment data-fragment-external=\\\"module-input.html\\\" />\\r\\n      <gui-fragment data-fragment-external=\\\"module-locale.html\\\" />\\r\\n      <gui-fragment data-fragment-external=\\\"module-panel.html\\\" />\\r\\n      <gui-fragment data-fragment-external=\\\"module-pm.html\\\" />\\r\\n      <gui-fragment data-fragment-external=\\\"module-store.html\\\" />\\r\\n      <gui-fragment data-fragment-external=\\\"module-search.html\\\" />\\r\\n      <gui-fragment data-fragment-external=\\\"module-sound.html\\\" />\\r\\n      <gui-fragment data-fragment-external=\\\"module-theme.html\\\" />\\r\\n      <gui-fragment data-fragment-external=\\\"module-user.html\\\" />\\r\\n      <gui-fragment data-fragment-external=\\\"module-vfs.html\\\" />\\r\\n      <gui-fragment data-fragment-external=\\\"module-users.html\\\" />\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-shrink=\\\"1\\\" data-align=\\\"end\\\" data-id=\\\"ContainerButtons\\\">\\r\\n      <gui-button-bar>\\r\\n        <gui-button data-id=\\\"ButtonOK\\\">LBL_SAVE</gui-button>\\r\\n        <gui-button data-id=\\\"ButtonCancel\\\">LBL_BACK</gui-button>\\r\\n      </gui-button-bar>\\r\\n    </gui-vbox-container>\\r\\n  </gui-vbox>\\r\\n\\r\\n</application-window>\\r\\n\\r\\n<application-window data-id=\\\"SettingsItemWindow\\\">\\r\\n  <gui-vbox>\\r\\n    <gui-vbox-container data-grow=\\\"1\\\" data-fill=\\\"true\\\">\\r\\n      <gui-list-view data-id=\\\"List\\\" data-multiple=\\\"false\\\">\\r\\n      </gui-list-view>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-shrink=\\\"1\\\" data-align=\\\"end\\\">\\r\\n      <gui-button-bar>\\r\\n        <gui-button data-id=\\\"ButtonItemOK\\\">LBL_OK</gui-button>\\r\\n        <gui-button data-id=\\\"ButtonItemCancel\\\">LBL_CANCEL</gui-button>\\r\\n      </gui-button-bar>\\r\\n    </gui-vbox-container>\\r\\n  </gui-vbox>\\r\\n</application-window>\\r\\n\\r\\n<application-window data-id=\\\"SettingsMountWindow\\\">\\r\\n  <gui-vbox>\\r\\n    <gui-vbox-container data-grow=\\\"1\\\" data-shrink=\\\"1\\\" data-fill=\\\"true\\\">\\r\\n\\r\\n      <gui-scroll-view>\\r\\n        <gui-vbox>\\r\\n          <gui-vbox-container data-shrink=\\\"1\\\">\\r\\n            <gui-label>LBL_TYPE</gui-label>\\r\\n          </gui-vbox-container>\\r\\n          <gui-vbox-container data-expand=\\\"true\\\">\\r\\n            <gui-select data-id=\\\"MountType\\\">\\r\\n              <gui-select-option data-value=\\\"webdav\\\">WebDAV (OwnCloud)</gui-select-option>\\r\\n            </gui-select>\\r\\n          </gui-vbox-container>\\r\\n\\r\\n          <gui-vbox-container data-shrink=\\\"1\\\">\\r\\n            <gui-label>LBL_NAME</gui-label>\\r\\n          </gui-vbox-container>\\r\\n          <gui-vbox-container data-expand=\\\"true\\\">\\r\\n            <gui-text data-id=\\\"MountName\\\" data-placeholder=\\\"mydav\\\"></gui-text>\\r\\n          </gui-vbox-container>\\r\\n\\r\\n          <gui-vbox-container data-shrink=\\\"1\\\">\\r\\n            <gui-label>LBL_DESCRIPTION</gui-label>\\r\\n          </gui-vbox-container>\\r\\n          <gui-vbox-container data-expand=\\\"true\\\">\\r\\n            <gui-text data-id=\\\"MountDescription\\\" data-placeholder=\\\"My DAV\\\"></gui-text>\\r\\n          </gui-vbox-container>\\r\\n\\r\\n\\r\\n          <gui-vbox-container data-grow=\\\"1\\\">\\r\\n            <gui-expander data-label=\\\"LBL_SETTINGS\\\" data-expanded=\\\"false\\\">\\r\\n              <gui-vbox>\\r\\n                <gui-vbox-container data-shrink=\\\"1\\\">\\r\\n                  <gui-label>LBL_HOST</gui-label>\\r\\n                </gui-vbox-container>\\r\\n                <gui-vbox-container data-expand=\\\"true\\\">\\r\\n                  <gui-text data-id=\\\"MountHost\\\" data-placeholder=\\\"http://127.0.0.1/remote.php/webdav/\\\"></gui-text>\\r\\n                </gui-vbox-container>\\r\\n\\r\\n                <gui-vbox-container data-shrink=\\\"1\\\">\\r\\n                  <gui-label>LBL_NAMESPACE</gui-label>\\r\\n                </gui-vbox-container>\\r\\n                <gui-vbox-container data-expand=\\\"true\\\">\\r\\n                  <gui-text data-id=\\\"MountNamespace\\\" data-placeholder=\\\"DAV\\\"></gui-text>\\r\\n                </gui-vbox-container>\\r\\n\\r\\n                <gui-vbox-container data-shrink=\\\"1\\\">\\r\\n                  <gui-label>LBL_USERNAME</gui-label>\\r\\n                </gui-vbox-container>\\r\\n                <gui-vbox-container data-expand=\\\"true\\\">\\r\\n                  <gui-text data-id=\\\"MountUsername\\\" data-placeholder=\\\"username\\\"></gui-text>\\r\\n                </gui-vbox-container>\\r\\n\\r\\n                <gui-vbox-container data-shrink=\\\"1\\\">\\r\\n                  <gui-label>LBL_PASSWORD</gui-label>\\r\\n                </gui-vbox-container>\\r\\n                <gui-vbox-container data-expand=\\\"true\\\">\\r\\n                  <gui-password data-id=\\\"MountPassword\\\" data-placeholder=\\\"password\\\"></gui-password>\\r\\n                </gui-vbox-container>\\r\\n\\r\\n                <gui-vbox-container data-shrink=\\\"1\\\">\\r\\n                  <gui-label>CORS Enabled</gui-label>\\r\\n                </gui-vbox-container>\\r\\n                <gui-vbox-container data-expand=\\\"true\\\">\\r\\n                  <gui-switch data-id=\\\"MountCORS\\\"></gui-switch>\\r\\n                </gui-vbox-container>\\r\\n              </gui-vbox>\\r\\n            </gui-expander>\\r\\n          </gui-vbox-container>\\r\\n\\r\\n        </gui-vbox>\\r\\n      </gui-scroll-view>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-shrink=\\\"1\\\" data-align=\\\"end\\\">\\r\\n      <gui-button-bar>\\r\\n        <gui-button data-id=\\\"ButtonOK\\\">LBL_SAVE</gui-button>\\r\\n        <gui-button data-id=\\\"ButtonClose\\\">LBL_CLOSE</gui-button>\\r\\n      </gui-button-bar>\\r\\n    </gui-vbox-container>\\r\\n  </gui-vbox>\\r\\n\\r\\n</application-window>\\r\\n\\r\\n<application-window data-id=\\\"SettingsUserWindow\\\">\\r\\n  <gui-vbox>\\r\\n    <gui-vbox-container data-grow=\\\"1\\\" data-shrink=\\\"1\\\" data-fill=\\\"true\\\">\\r\\n\\r\\n      <gui-scroll-view>\\r\\n        <gui-vbox>\\r\\n          <gui-vbox-container data-shrink=\\\"1\\\">\\r\\n            <gui-label>LBL_USERNAME</gui-label>\\r\\n          </gui-vbox-container>\\r\\n          <gui-vbox-container data-expand=\\\"true\\\">\\r\\n            <gui-text data-id=\\\"UserUsername\\\" data-placeholder=\\\"johndoe\\\"></gui-text>\\r\\n          </gui-vbox-container>\\r\\n\\r\\n          <gui-vbox-container data-shrink=\\\"1\\\">\\r\\n            <gui-label>LBL_NAME</gui-label>\\r\\n          </gui-vbox-container>\\r\\n          <gui-vbox-container data-expand=\\\"true\\\">\\r\\n            <gui-text data-id=\\\"UserName\\\" data-placeholder=\\\"John Doe\\\"></gui-text>\\r\\n          </gui-vbox-container>\\r\\n\\r\\n          <gui-vbox-container data-shrink=\\\"1\\\">\\r\\n            <gui-label>LBL_GROUPS</gui-label>\\r\\n          </gui-vbox-container>\\r\\n          <gui-vbox-container data-expand=\\\"true\\\">\\r\\n            <gui-text data-id=\\\"UserGroups\\\" data-placeholder=\\\"group1, group2, ...\\\"></gui-text>\\r\\n          </gui-vbox-container>\\r\\n\\r\\n        </gui-vbox>\\r\\n      </gui-scroll-view>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-shrink=\\\"1\\\" data-align=\\\"end\\\">\\r\\n      <gui-button-bar>\\r\\n        <gui-button data-id=\\\"ButtonOK\\\">LBL_SAVE</gui-button>\\r\\n        <gui-button data-id=\\\"ButtonClose\\\">LBL_CLOSE</gui-button>\\r\\n      </gui-button-bar>\\r\\n    </gui-vbox-container>\\r\\n  </gui-vbox>\\r\\n\\r\\n</application-window>\\r\\n\"; });\ndefine('osjs-apps-settings/main',[\n    './locales',\n    './module-desktop',\n    './module-input',\n    './module-locale',\n    './module-panel',\n    './module-pm',\n    './module-search',\n    './module-sound',\n    './module-store',\n    './module-theme',\n    './module-user',\n    './module-users',\n    './module-vfs',\n    \"./scheme.html\"\n\n], function (Translations, ModuleDesktop, ModuleInput, ModuleLocale, ModulePanel, ModulePM, ModuleSearch, ModuleSounds, ModuleStore, ModuleTheme, ModuleUser, ModuleUsers, ModuleVFS,schemeHtml) {\n    'use strict';\n    const Locales = OSjs.require('core/locales');\n    const Dialog = OSjs.require('core/dialog');\n    const Window = OSjs.require('core/window');\n    const Events = OSjs.require('utils/events');\n    const Theme = OSjs.require('core/theme');\n    const Utils = OSjs.require('utils/misc');\n    const Menu = OSjs.require('gui/menu');\n    const SettingsManager = OSjs.require('core/settings-manager');\n    const WindowManager = OSjs.require('core/window-manager');\n    const Application = OSjs.require('core/application');\n    const _ = Locales.createLocalizer(Translations);\n    const DEFAULT_GROUP = 'misc';\n    const _groups = {\n        personal: { label: 'LBL_PERSONAL' },\n        system: { label: 'LBL_SYSTEM' },\n        user: { label: 'LBL_USER' },\n        misc: { label: 'LBL_OTHER' }\n    };\n    const categoryMap = {\n        'theme': 'Theme',\n        'desktop': 'Desktop',\n        'panel': 'Panel',\n        'user': 'User',\n        'fileview': 'VFS',\n        'search': 'Search'\n    };\n    class SettingsItemDialog extends Dialog {\n        constructor(app, metadata, scheme, callback) {\n            super('ApplicationSettingsGenericsWindow', {\n                icon: metadata.icon,\n                title: metadata.name,\n                width: 400,\n                height: 300,\n                translator: _\n            });\n            this.schemeRef = scheme;\n            this.callback = callback;\n            this.closed = false;\n        }\n        init(wm, app) {\n            const root = super.init(...arguments);\n            this.schemeRef.render(this, 'SettingsItemWindow');\n            this._find('ButtonItemOK').on('click', () => {\n                this.closed = true;\n                const selected = this._find('List').get('selected');\n                this.callback('ok', selected.length ? selected[0] : null);\n                this._close();\n            });\n            this._find('ButtonItemCancel').on('click', () => this._close());\n            return root;\n        }\n        _close() {\n            if (!this.closed) {\n                this.callback('cancel');\n            }\n            return super._close(...arguments);\n        }\n    }\n    class ApplicationSettingsWindow extends Window {\n        constructor(app, metadata, initialCategory) {\n            super('ApplicationSettingsWindow', {\n                icon: metadata.icon,\n                title: metadata.name,\n                width: 500,\n                height: 450,\n                allow_resize: true,\n                translator: _\n            }, app);\n            this.initialCategory = initialCategory;\n        }\n        init(wmRef, app) {\n            const root = super.init(...arguments);\n            const wm = WindowManager.instance;\n            this.scheme = this._render('SettingsWindow', schemeHtml);\n            this._find('ButtonOK').son('click', this, this.onButtonOK);\n            this._find('ButtonCancel').son('click', this, this.onButtonCancel);\n            const container = document.createElement('div');\n            container.className = 'ListView gui-generic-zebra-container gui-element';\n            let containers = {};\n            let tmpcontent = document.createDocumentFragment();\n            Object.keys(_groups).forEach(function (k) {\n                const c = document.createElement('ul');\n                const h = document.createElement('span');\n                const d = document.createElement('div');\n                d.className = 'gui-generic-double-padded';\n                h.appendChild(document.createTextNode(_(_groups[k].label)));\n                containers[k] = c;\n                d.appendChild(h);\n                d.appendChild(c);\n                container.appendChild(d);\n            });\n            app.modules.forEach(m => {\n                if (typeof m.compatible === 'function') {\n                    if (!m.compatible()) {\n                        return;\n                    }\n                }\n                if (containers[m.group]) {\n                    const i = document.createElement('img');\n                    i.setAttribute('src', Theme.getIcon(m.icon, '32x32'));\n                    i.setAttribute('title', m.name);\n                    const s = document.createElement('span');\n                    s.appendChild(document.createTextNode(_(m.label || m.name)));\n                    const c = document.createElement('li');\n                    c.className = 'gui-generic-hoverable';\n                    c.setAttribute('data-module', String(m.name));\n                    c.appendChild(i);\n                    c.appendChild(s);\n                    containers[m.group].appendChild(c);\n                    const found = root.querySelector('[data-module=\"' + m.name + '\"]');\n                    if (found) {\n                        found.className = 'gui-generic-padded';\n                    } else {\n                        console.warn('Not found', m.name);\n                    }\n                    const settings = Utils.cloneObject(wm.getSettings());\n                    try {\n                        m.render(this, this.scheme, tmpcontent, settings, wm);\n                    } catch (e) {\n                        console.warn(e, e.stack);\n                    }\n                    try {\n                        m.update(this, this.scheme, settings, wm);\n                    } catch (e) {\n                        console.warn(e, e.stack);\n                    }\n                    m._inited = true;\n                }\n            });\n            Object.keys(containers).forEach(k => {\n                if (!containers[k].children.length) {\n                    containers[k].parentNode.style.display = 'none';\n                }\n            });\n            Events.$bind(container, 'click', ev => {\n                const t = ev.isTrusted ? ev.target : ev.relatedTarget || ev.target;\n                Menu.blur();\n                if (t && t.tagName === 'LI' && t.hasAttribute('data-module')) {\n                    ev.preventDefault();\n                    const m = t.getAttribute('data-module');\n                    this.onModuleSelect(m);\n                }\n            }, true);\n            root.querySelector('[data-id=\"ContainerSelection\"]').appendChild(container);\n            containers = {};\n            tmpcontent = null;\n            if (this.initialCategory) {\n                this.onExternalAttention(this.initialCategory);\n            }\n            return root;\n        }\n        destroy() {\n            if (super.destroy(...arguments)) {\n                this.currentModule = null;\n                return true;\n            }\n            return false;\n        }\n        onModuleSelect(name) {\n            const wm = WindowManager.instance;\n            const root = this._$element;\n            function _d(d) {\n                root.querySelector('[data-id=\"ContainerSelection\"]').style.display = d ? 'block' : 'none';\n                root.querySelector('[data-id=\"ContainerContent\"]').style.display = d ? 'none' : 'block';\n                root.querySelector('[data-id=\"ContainerButtons\"]').style.display = d ? 'none' : 'block';\n            }\n            root.querySelectorAll('div[data-module]').forEach(function (mod) {\n                mod.style.display = 'none';\n            });\n            _d(true);\n            this._setTitle(null);\n            let found, settings;\n            if (name) {\n                this._app.modules.forEach(function (m) {\n                    if (!found && m.name === name) {\n                        found = m;\n                    }\n                });\n            }\n            if (found) {\n                const mod = root.querySelector('div[data-module=\"' + found.name + '\"]');\n                if (mod) {\n                    mod.style.display = 'block';\n                    settings = Utils.cloneObject(wm.getSettings());\n                    try {\n                        found.update(this, this.scheme, settings, wm, true);\n                    } catch (e) {\n                        console.warn(e, e.stack);\n                    }\n                    _d(false);\n                    this._setTitle(_(found.name), true);\n                    if (found.button === false) {\n                        this._find('ButtonOK').hide();\n                    } else {\n                        this._find('ButtonOK').show();\n                    }\n                }\n            } else {\n                if (!name) {\n                    settings = Utils.cloneObject(wm.getSettings());\n                    this._app.modules.forEach(m => {\n                        try {\n                            if (m._inited) {\n                                m.update(this, this.scheme, settings, wm);\n                            }\n                        } catch (e) {\n                            console.warn(e, e.stack);\n                        }\n                    });\n                }\n            }\n            this._app.setModule(found);\n        }\n        onButtonOK() {\n            const settings = {};\n            const wm = WindowManager.instance;\n            this._app.modules.forEach(m => {\n                if (m._inited) {\n                    const res = m.save(this, this.scheme, settings, wm);\n                    if (typeof res === 'function') {\n                        res();\n                    }\n                }\n            });\n            this._toggleLoading(true);\n            this._app.saveSettings(settings, () => {\n                this._toggleLoading(false);\n            });\n        }\n        onButtonCancel() {\n            this.onModuleSelect(null);\n        }\n        onExternalAttention(cat) {\n            this.onModuleSelect(categoryMap[cat] || cat);\n            this._focus();\n        }\n    }\n    class ApplicationSettings extends Application {\n        constructor(args, metadata) {\n            super('ApplicationSettings', args, metadata);\n            const registered = OSjs.Applications.ApplicationSettings.Modules;\n            this.watches = {};\n            this.currentModule = null;\n            this.modules = Object.keys(registered).map(function (name) {\n                const opts = Utils.argumentDefaults(registered[name], {\n                    _inited: false,\n                    name: name,\n                    group: DEFAULT_GROUP,\n                    icon: 'status/error.png',\n                    init: function () {\n                    },\n                    update: function () {\n                    },\n                    render: function () {\n                    },\n                    save: function () {\n                    }\n                });\n                if (Object.keys(_groups).indexOf(opts.group) === -1) {\n                    opts.group = DEFAULT_GROUP;\n                }\n                Object.keys(opts).forEach(function (k) {\n                    if (typeof opts[k] === 'function') {\n                        opts[k] = opts[k].bind(opts);\n                    }\n                });\n                return opts;\n            });\n            this.modules.forEach(m => {\n                m.init(this);\n                if (m.watch && m.watch instanceof Array) {\n                    m.watch.forEach(w => {\n                        this.watches[m.name] = SettingsManager.watch(w, () => {\n                            const win = this._getMainWindow();\n                            if (m && win) {\n                                if (this.currentModule && this.currentModule.name === m.name) {\n                                    win.onModuleSelect(m.name);\n                                }\n                            }\n                        });\n                    });\n                }\n            });\n        }\n        destroy() {\n            if (super.destroy(...arguments)) {\n                Object.keys(this.watches).forEach(k => {\n                    SettingsManager.unwatch(this.watches[k]);\n                });\n                this.watches = {};\n                return true;\n            }\n            return false;\n        }\n        init(settings, metadata) {\n            super.init(...arguments);\n            const category = this._getArgument('category') || settings.category;\n            const win = this._addWindow(new ApplicationSettingsWindow(this, metadata, category));\n            this._on('attention', function (args) {\n                if (win && args.category) {\n                    win.onExternalAttention(args.category);\n                }\n            });\n        }\n        saveSettings(settings, cb) {\n            const wm = WindowManager.instance;\n            wm.applySettings(settings, false, 1);\n            SettingsManager.save().then(res => cb(false, res)).catch(cb);\n        }\n        setModule(m) {\n            this.currentModule = m;\n        }\n        static get SettingsItemDialog() {\n            return SettingsItemDialog;\n        }\n        static get Modules() {\n            return {\n                Desktop: ModuleDesktop,\n                Input: ModuleInput,\n                Locale: ModuleLocale,\n                Panel: ModulePanel,\n                PM: ModulePM,\n                Search: ModuleSearch,\n                Sounds: ModuleSounds,\n                Store: ModuleStore,\n                Theme: ModuleTheme,\n                User: ModuleUser,\n                Users: ModuleUsers,\n                VFS: ModuleVFS\n            };\n        }\n    }\n    OSjs.Applications.ApplicationSettings = Object.seal(ApplicationSettings);\n});\ndefine('osjs-apps-settings', ['osjs-apps-settings/main'], function (main) { return main; });\n\n"]}