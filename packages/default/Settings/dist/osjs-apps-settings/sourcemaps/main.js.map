{"version":3,"sources":["main.js"],"names":["define","Translations","ModuleDesktop","ModuleInput","ModuleLocale","ModulePanel","ModulePM","ModuleSearch","ModuleSounds","ModuleStore","ModuleTheme","ModuleUser","ModuleUsers","ModuleVFS","schemeHtml","Locales","OSjs","require","Dialog","Window","Events","Theme","Utils","Menu","SettingsManager","WindowManager","Application","_","createLocalizer","DEFAULT_GROUP","_groups","personal","label","system","user","misc","categoryMap","theme","desktop","panel","fileview","search","SettingsItemDialog","[object Object]","app","metadata","scheme","callback","super","icon","title","name","width","height","translator","this","schemeRef","closed","wm","root","init","arguments","render","_find","on","selected","get","length","_close","ApplicationSettingsWindow","initialCategory","allow_resize","wmRef","instance","_render","son","onButtonOK","onButtonCancel","container","document","createElement","className","containers","tmpcontent","createDocumentFragment","Object","keys","forEach","k","c","h","d","appendChild","createTextNode","modules","m","compatible","group","i","setAttribute","getIcon","s","String","found","querySelector","console","warn","settings","cloneObject","getSettings","e","stack","update","_inited","children","parentNode","style","display","$bind","ev","t","isTrusted","target","relatedTarget","blur","tagName","hasAttribute","preventDefault","getAttribute","onModuleSelect","onExternalAttention","destroy","currentModule","_$element","_d","querySelectorAll","mod","_setTitle","_app","button","hide","show","setModule","res","save","_toggleLoading","saveSettings","cat","_focus","Applications","ApplicationSettings","seal","args","registered","Modules","watches","map","opts","argumentDefaults","indexOf","bind","watch","Array","w","win","_getMainWindow","unwatch","category","_getArgument","_addWindow","_on","cb","applySettings","then","catch","Desktop","Input","Locale","Panel","PM","Search","Sounds","Store","User","Users","VFS"],"mappings":"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","file":"../main.js","sourcesContent":["define([\n    './locales',\n    './module-desktop',\n    './module-input',\n    './module-locale',\n    './module-panel',\n    './module-pm',\n    './module-search',\n    './module-sound',\n    './module-store',\n    './module-theme',\n    './module-user',\n    './module-users',\n    './module-vfs',\n    \"./scheme.html\"\n\n], function (Translations, ModuleDesktop, ModuleInput, ModuleLocale, ModulePanel, ModulePM, ModuleSearch, ModuleSounds, ModuleStore, ModuleTheme, ModuleUser, ModuleUsers, ModuleVFS,schemeHtml) {\n    'use strict';\n    const Locales = OSjs.require('core/locales');\n    const Dialog = OSjs.require('core/dialog');\n    const Window = OSjs.require('core/window');\n    const Events = OSjs.require('utils/events');\n    const Theme = OSjs.require('core/theme');\n    const Utils = OSjs.require('utils/misc');\n    const Menu = OSjs.require('gui/menu');\n    const SettingsManager = OSjs.require('core/settings-manager');\n    const WindowManager = OSjs.require('core/window-manager');\n    const Application = OSjs.require('core/application');\n    const _ = Locales.createLocalizer(Translations);\n    const DEFAULT_GROUP = 'misc';\n    const _groups = {\n        personal: { label: 'LBL_PERSONAL' },\n        system: { label: 'LBL_SYSTEM' },\n        user: { label: 'LBL_USER' },\n        misc: { label: 'LBL_OTHER' }\n    };\n    const categoryMap = {\n        'theme': 'Theme',\n        'desktop': 'Desktop',\n        'panel': 'Panel',\n        'user': 'User',\n        'fileview': 'VFS',\n        'search': 'Search'\n    };\n    class SettingsItemDialog extends Dialog {\n        constructor(app, metadata, scheme, callback) {\n            super('ApplicationSettingsGenericsWindow', {\n                icon: metadata.icon,\n                title: metadata.name,\n                width: 400,\n                height: 300,\n                translator: _\n            });\n            this.schemeRef = scheme;\n            this.callback = callback;\n            this.closed = false;\n        }\n        init(wm, app) {\n            const root = super.init(...arguments);\n            this.schemeRef.render(this, 'SettingsItemWindow');\n            this._find('ButtonItemOK').on('click', () => {\n                this.closed = true;\n                const selected = this._find('List').get('selected');\n                this.callback('ok', selected.length ? selected[0] : null);\n                this._close();\n            });\n            this._find('ButtonItemCancel').on('click', () => this._close());\n            return root;\n        }\n        _close() {\n            if (!this.closed) {\n                this.callback('cancel');\n            }\n            return super._close(...arguments);\n        }\n    }\n    class ApplicationSettingsWindow extends Window {\n        constructor(app, metadata, initialCategory) {\n            super('ApplicationSettingsWindow', {\n                icon: metadata.icon,\n                title: metadata.name,\n                width: 500,\n                height: 450,\n                allow_resize: true,\n                translator: _\n            }, app);\n            this.initialCategory = initialCategory;\n        }\n        init(wmRef, app) {\n            const root = super.init(...arguments);\n            const wm = WindowManager.instance;\n            this.scheme = this._render('SettingsWindow', schemeHtml);\n            this._find('ButtonOK').son('click', this, this.onButtonOK);\n            this._find('ButtonCancel').son('click', this, this.onButtonCancel);\n            const container = document.createElement('div');\n            container.className = 'ListView gui-generic-zebra-container gui-element';\n            let containers = {};\n            let tmpcontent = document.createDocumentFragment();\n            Object.keys(_groups).forEach(function (k) {\n                const c = document.createElement('ul');\n                const h = document.createElement('span');\n                const d = document.createElement('div');\n                d.className = 'gui-generic-double-padded';\n                h.appendChild(document.createTextNode(_(_groups[k].label)));\n                containers[k] = c;\n                d.appendChild(h);\n                d.appendChild(c);\n                container.appendChild(d);\n            });\n            app.modules.forEach(m => {\n                if (typeof m.compatible === 'function') {\n                    if (!m.compatible()) {\n                        return;\n                    }\n                }\n                if (containers[m.group]) {\n                    const i = document.createElement('img');\n                    i.setAttribute('src', Theme.getIcon(m.icon, '32x32'));\n                    i.setAttribute('title', m.name);\n                    const s = document.createElement('span');\n                    s.appendChild(document.createTextNode(_(m.label || m.name)));\n                    const c = document.createElement('li');\n                    c.className = 'gui-generic-hoverable';\n                    c.setAttribute('data-module', String(m.name));\n                    c.appendChild(i);\n                    c.appendChild(s);\n                    containers[m.group].appendChild(c);\n                    const found = root.querySelector('[data-module=\"' + m.name + '\"]');\n                    if (found) {\n                        found.className = 'gui-generic-padded';\n                    } else {\n                        console.warn('Not found', m.name);\n                    }\n                    const settings = Utils.cloneObject(wm.getSettings());\n                    try {\n                        m.render(this, this.scheme, tmpcontent, settings, wm);\n                    } catch (e) {\n                        console.warn(e, e.stack);\n                    }\n                    try {\n                        m.update(this, this.scheme, settings, wm);\n                    } catch (e) {\n                        console.warn(e, e.stack);\n                    }\n                    m._inited = true;\n                }\n            });\n            Object.keys(containers).forEach(k => {\n                if (!containers[k].children.length) {\n                    containers[k].parentNode.style.display = 'none';\n                }\n            });\n            Events.$bind(container, 'click', ev => {\n                const t = ev.isTrusted ? ev.target : ev.relatedTarget || ev.target;\n                Menu.blur();\n                if (t && t.tagName === 'LI' && t.hasAttribute('data-module')) {\n                    ev.preventDefault();\n                    const m = t.getAttribute('data-module');\n                    this.onModuleSelect(m);\n                }\n            }, true);\n            root.querySelector('[data-id=\"ContainerSelection\"]').appendChild(container);\n            containers = {};\n            tmpcontent = null;\n            if (this.initialCategory) {\n                this.onExternalAttention(this.initialCategory);\n            }\n            return root;\n        }\n        destroy() {\n            if (super.destroy(...arguments)) {\n                this.currentModule = null;\n                return true;\n            }\n            return false;\n        }\n        onModuleSelect(name) {\n            const wm = WindowManager.instance;\n            const root = this._$element;\n            function _d(d) {\n                root.querySelector('[data-id=\"ContainerSelection\"]').style.display = d ? 'block' : 'none';\n                root.querySelector('[data-id=\"ContainerContent\"]').style.display = d ? 'none' : 'block';\n                root.querySelector('[data-id=\"ContainerButtons\"]').style.display = d ? 'none' : 'block';\n            }\n            root.querySelectorAll('div[data-module]').forEach(function (mod) {\n                mod.style.display = 'none';\n            });\n            _d(true);\n            this._setTitle(null);\n            let found, settings;\n            if (name) {\n                this._app.modules.forEach(function (m) {\n                    if (!found && m.name === name) {\n                        found = m;\n                    }\n                });\n            }\n            if (found) {\n                const mod = root.querySelector('div[data-module=\"' + found.name + '\"]');\n                if (mod) {\n                    mod.style.display = 'block';\n                    settings = Utils.cloneObject(wm.getSettings());\n                    try {\n                        found.update(this, this.scheme, settings, wm, true);\n                    } catch (e) {\n                        console.warn(e, e.stack);\n                    }\n                    _d(false);\n                    this._setTitle(_(found.name), true);\n                    if (found.button === false) {\n                        this._find('ButtonOK').hide();\n                    } else {\n                        this._find('ButtonOK').show();\n                    }\n                }\n            } else {\n                if (!name) {\n                    settings = Utils.cloneObject(wm.getSettings());\n                    this._app.modules.forEach(m => {\n                        try {\n                            if (m._inited) {\n                                m.update(this, this.scheme, settings, wm);\n                            }\n                        } catch (e) {\n                            console.warn(e, e.stack);\n                        }\n                    });\n                }\n            }\n            this._app.setModule(found);\n        }\n        onButtonOK() {\n            const settings = {};\n            const wm = WindowManager.instance;\n            this._app.modules.forEach(m => {\n                if (m._inited) {\n                    const res = m.save(this, this.scheme, settings, wm);\n                    if (typeof res === 'function') {\n                        res();\n                    }\n                }\n            });\n            this._toggleLoading(true);\n            this._app.saveSettings(settings, () => {\n                this._toggleLoading(false);\n            });\n        }\n        onButtonCancel() {\n            this.onModuleSelect(null);\n        }\n        onExternalAttention(cat) {\n            this.onModuleSelect(categoryMap[cat] || cat);\n            this._focus();\n        }\n    }\n    class ApplicationSettings extends Application {\n        constructor(args, metadata) {\n            super('ApplicationSettings', args, metadata);\n            const registered = OSjs.Applications.ApplicationSettings.Modules;\n            this.watches = {};\n            this.currentModule = null;\n            this.modules = Object.keys(registered).map(function (name) {\n                const opts = Utils.argumentDefaults(registered[name], {\n                    _inited: false,\n                    name: name,\n                    group: DEFAULT_GROUP,\n                    icon: 'status/error.png',\n                    init: function () {\n                    },\n                    update: function () {\n                    },\n                    render: function () {\n                    },\n                    save: function () {\n                    }\n                });\n                if (Object.keys(_groups).indexOf(opts.group) === -1) {\n                    opts.group = DEFAULT_GROUP;\n                }\n                Object.keys(opts).forEach(function (k) {\n                    if (typeof opts[k] === 'function') {\n                        opts[k] = opts[k].bind(opts);\n                    }\n                });\n                return opts;\n            });\n            this.modules.forEach(m => {\n                m.init(this);\n                if (m.watch && m.watch instanceof Array) {\n                    m.watch.forEach(w => {\n                        this.watches[m.name] = SettingsManager.watch(w, () => {\n                            const win = this._getMainWindow();\n                            if (m && win) {\n                                if (this.currentModule && this.currentModule.name === m.name) {\n                                    win.onModuleSelect(m.name);\n                                }\n                            }\n                        });\n                    });\n                }\n            });\n        }\n        destroy() {\n            if (super.destroy(...arguments)) {\n                Object.keys(this.watches).forEach(k => {\n                    SettingsManager.unwatch(this.watches[k]);\n                });\n                this.watches = {};\n                return true;\n            }\n            return false;\n        }\n        init(settings, metadata) {\n            super.init(...arguments);\n            const category = this._getArgument('category') || settings.category;\n            const win = this._addWindow(new ApplicationSettingsWindow(this, metadata, category));\n            this._on('attention', function (args) {\n                if (win && args.category) {\n                    win.onExternalAttention(args.category);\n                }\n            });\n        }\n        saveSettings(settings, cb) {\n            const wm = WindowManager.instance;\n            wm.applySettings(settings, false, 1);\n            SettingsManager.save().then(res => cb(false, res)).catch(cb);\n        }\n        setModule(m) {\n            this.currentModule = m;\n        }\n        static get SettingsItemDialog() {\n            return SettingsItemDialog;\n        }\n        static get Modules() {\n            return {\n                Desktop: ModuleDesktop,\n                Input: ModuleInput,\n                Locale: ModuleLocale,\n                Panel: ModulePanel,\n                PM: ModulePM,\n                Search: ModuleSearch,\n                Sounds: ModuleSounds,\n                Store: ModuleStore,\n                Theme: ModuleTheme,\n                User: ModuleUser,\n                Users: ModuleUsers,\n                VFS: ModuleVFS\n            };\n        }\n    }\n    OSjs.Applications.ApplicationSettings = Object.seal(ApplicationSettings);\n});"]}