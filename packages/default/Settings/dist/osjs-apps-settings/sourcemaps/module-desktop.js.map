{"version":3,"sources":["module-desktop.js"],"names":["define","Translations","Locales","OSjs","require","Theme","Utils","PackageManager","_","createLocalizer","widgets","items","renderItems","win","setSelected","list","forEach","i","idx","name","push","value","columns","icon","getIcon","Icon","label","format","Name","Description","view","_find","clear","add","updateLabel","lbl","DesktopMargin","CornerSnapping","WindowSnapping","set","group","watch","init","app","update","scheme","settings","wm","animations","useTouchMenu","enableSwitcher","desktopMargin","windowCornerSnap","windowSnap","getPackage","render","root","on","ev","detail","enableIconView","invertIconViewColor","_toggleDisabled","cb","_app","nwin","Applications","ApplicationSettings","SettingsItemDialog","__metadata","_on","Object","keys","map","_setTitle","_addChild","createDialog","result","data","selected","get","length","splice","index","save"],"mappings":"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","file":"../module-desktop.js","sourcesContent":["define(['./locales'], function (Translations) {\n    'use strict';\n    const Locales = OSjs.require('core/locales');\n    const Theme = OSjs.require('core/theme');\n    const Utils = OSjs.require('utils/misc');\n    const PackageManager = OSjs.require('core/package-manager');\n    const _ = Locales.createLocalizer(Translations);\n    let widgets = [];\n    let items = [];\n    function renderItems(win, setSelected) {\n        const list = [];\n        widgets.forEach(function (i, idx) {\n            const name = i.name;\n            if (items[name]) {\n                list.push({\n                    value: idx,\n                    columns: [{\n                            icon: Theme.getIcon(items[name].Icon),\n                            label: Utils.format('{0} ({1})', items[name].Name, items[name].Description)\n                        }]\n                });\n            }\n        });\n        const view = win._find('WidgetItems');\n        view.clear();\n        view.add(list);\n    }\n    function createDialog(win, scheme, cb) {\n        if (scheme) {\n            const app = win._app;\n            const nwin = new OSjs.Applications.ApplicationSettings.SettingsItemDialog(app, app.__metadata, scheme, cb);\n            nwin._on('inited', function (scheme) {\n                nwin._find('List').clear().add(Object.keys(items).map(function (i, idx) {\n                    return {\n                        value: i,\n                        columns: [{\n                                icon: Theme.getIcon(items[i].Icon),\n                                label: Utils.format('{0} ({1})', items[i].Name, items[i].Description)\n                            }]\n                    };\n                }));\n                nwin._setTitle('Widgets', true);\n            });\n            win._addChild(nwin, true, true);\n        }\n    }\n    function updateLabel(win, lbl, value) {\n        const map = {\n            DesktopMargin: 'Desktop Margin ({0}px)',\n            CornerSnapping: 'Desktop Corner Snapping ({0}px)',\n            WindowSnapping: 'Window Snapping ({0}px)'\n        };\n        const label = Utils.format(_(map[lbl]), value);\n        win._find(lbl + 'Label').set('value', label);\n    }\n    return {\n        group: 'personal',\n        name: 'Desktop',\n        label: 'LBL_DESKTOP',\n        icon: 'devices/video-display.png',\n        watch: ['CoreWM'],\n        init: function (app) {\n        },\n        update: function (win, scheme, settings, wm) {\n            win._find('EnableAnimations').set('value', settings.animations);\n            win._find('EnableTouchMenu').set('value', settings.useTouchMenu);\n            win._find('EnableWindowSwitcher').set('value', settings.enableSwitcher);\n            win._find('DesktopMargin').set('value', settings.desktopMargin);\n            win._find('CornerSnapping').set('value', settings.windowCornerSnap);\n            win._find('WindowSnapping').set('value', settings.windowSnap);\n            updateLabel(win, 'DesktopMargin', settings.desktopMargin);\n            updateLabel(win, 'CornerSnapping', settings.windowCornerSnap);\n            updateLabel(win, 'WindowSnapping', settings.windowSnap);\n            items = PackageManager.getPackage('CoreWM').widgets;\n            widgets = settings.widgets || [];\n            renderItems(win);\n        },\n        render: function (win, scheme, root, settings, wm) {\n            win._find('DesktopMargin').on('change', function (ev) {\n                updateLabel(win, 'DesktopMargin', ev.detail);\n            });\n            win._find('CornerSnapping').on('change', function (ev) {\n                updateLabel(win, 'CornerSnapping', ev.detail);\n            });\n            win._find('WindowSnapping').on('change', function (ev) {\n                updateLabel(win, 'WindowSnapping', ev.detail);\n            });\n            win._find('EnableIconView').set('value', settings.enableIconView);\n            win._find('EnableIconViewInvert').set('value', settings.invertIconViewColor);\n            win._find('WidgetButtonAdd').on('click', function () {\n                win._toggleDisabled(true);\n                createDialog(win, scheme, function (ev, result) {\n                    win._toggleDisabled(false);\n                    if (result) {\n                        widgets.push({ name: result.data });\n                        renderItems(win);\n                    }\n                });\n            });\n            win._find('WidgetButtonRemove').on('click', function () {\n                const selected = win._find('WidgetItems').get('selected');\n                if (selected.length) {\n                    widgets.splice(selected[0].index, 1);\n                    renderItems(win);\n                }\n            });\n            win._find('WidgetButtonOptions').on('click', function () {\n            });\n        },\n        save: function (win, scheme, settings, wm) {\n            settings.animations = win._find('EnableAnimations').get('value');\n            settings.useTouchMenu = win._find('EnableTouchMenu').get('value');\n            settings.enableSwitcher = win._find('EnableWindowSwitcher').get('value');\n            settings.desktopMargin = win._find('DesktopMargin').get('value');\n            settings.windowCornerSnap = win._find('CornerSnapping').get('value');\n            settings.windowSnap = win._find('WindowSnapping').get('value');\n            settings.enableIconView = win._find('EnableIconView').get('value');\n            settings.invertIconViewColor = win._find('EnableIconViewInvert').get('value');\n            settings.widgets = widgets;\n        }\n    };\n});"]}