{"version":3,"sources":["module-input.js"],"names":["define","Translations","Locales","OSjs","require","Dialog","Utils","_","createLocalizer","hotkeys","renderList","win","scheme","_find","clear","add","Object","keys","map","name","value","columns","label","group","icon","init","update","settings","wm","set","enableHotkeys","cloneObject","render","root","on","selected","get","key","_toggleDisabled","create","message","ev","button","indexOf","editList","data","save","length"],"mappings":";;;;;;;AAAAA,QAAQ,aAAc,SAAUC,GAC5B,aACA,MAAMC,EAAUC,KAAKC,QAAQ,gBACvBC,EAASF,KAAKC,QAAQ,eACtBE,EAAQH,KAAKC,QAAQ,cACrBG,EAAIL,EAAQM,gBAAgBP,GAClC,IAAIQ,KACJ,SAASC,EAAWC,EAAKC,GACrBD,EAAIE,MAAM,eAAeC,QAAQC,IAAIC,OAAOC,KAAKR,GAASS,IAAI,SAAUC,GACpE,OACIC,OACID,KAAMA,EACNC,MAAOX,EAAQU,IAEnBE,UACMC,MAAOH,IACPG,MAAOb,EAAQU,SAmBjC,OACII,MAAO,SACPJ,KAAM,QACNG,MAAO,YACPE,KAAM,kDACNC,KAAM,aAENC,OAAQ,SAAUf,EAAKC,EAAQe,EAAUC,GACrCjB,EAAIE,MAAM,iBAAiBgB,IAAI,QAASF,EAASG,eACjDrB,EAAUH,EAAMyB,YAAYJ,EAASlB,SACrCC,EAAWC,IAEfqB,OAAQ,SAAUrB,EAAKC,EAAQqB,EAAMN,EAAUC,GAC3CjB,EAAIE,MAAM,eAAeqB,GAAG,QAAS,WACjC,MAAMC,EAAWxB,EAAIE,MAAM,eAAeuB,IAAI,YAC1CD,GAAYA,EAAS,IA7BrC,SAAkBxB,EAAKC,EAAQyB,GAC3B1B,EAAI2B,iBAAgB,GACpBjC,EAAOkC,OAAO,SACVC,QAASjC,EAAE,uBAAyB,IAAM8B,EAAIlB,KAC9CC,MAAOiB,EAAIjB,OACZ,SAAUqB,EAAIC,EAAQtB,GACrBT,EAAI2B,iBAAgB,IAEQ,KAD5BlB,EAAQA,GAAS,IACPuB,QAAQ,OACdlC,EAAQ4B,EAAIlB,MAAQC,GAExBV,EAAWC,KAmBHiC,CAASjC,EAAKC,EAAQuB,EAAS,GAAGU,SAI9CC,KAAM,SAAUnC,EAAKC,EAAQe,EAAUC,GACnCD,EAASG,cAAgBnB,EAAIE,MAAM,iBAAiBuB,IAAI,SACpD3B,GAAWO,OAAOC,KAAKR,GAASsC,SAChCpB,EAASlB,QAAUA","file":"../module-input.js","sourcesContent":["define(['./locales'], function (Translations) {\n    'use strict';\n    const Locales = OSjs.require('core/locales');\n    const Dialog = OSjs.require('core/dialog');\n    const Utils = OSjs.require('utils/misc');\n    const _ = Locales.createLocalizer(Translations);\n    let hotkeys = {};\n    function renderList(win, scheme) {\n        win._find('HotkeysList').clear().add(Object.keys(hotkeys).map(function (name) {\n            return {\n                value: {\n                    name: name,\n                    value: hotkeys[name]\n                },\n                columns: [\n                    { label: name },\n                    { label: hotkeys[name] }\n                ]\n            };\n        }));\n    }\n    function editList(win, scheme, key) {\n        win._toggleDisabled(true);\n        Dialog.create('Input', {\n            message: _('Enter shortcut for:') + ' ' + key.name,\n            value: key.value\n        }, function (ev, button, value) {\n            win._toggleDisabled(false);\n            value = value || '';\n            if (value.indexOf('+') !== -1) {\n                hotkeys[key.name] = value;\n            }\n            renderList(win, scheme);\n        });\n    }\n    return {\n        group: 'system',\n        name: 'Input',\n        label: 'LBL_INPUT',\n        icon: 'apps/preferences-desktop-keyboard-shortcuts.png',\n        init: function () {\n        },\n        update: function (win, scheme, settings, wm) {\n            win._find('EnableHotkeys').set('value', settings.enableHotkeys);\n            hotkeys = Utils.cloneObject(settings.hotkeys);\n            renderList(win, scheme);\n        },\n        render: function (win, scheme, root, settings, wm) {\n            win._find('HotkeysEdit').on('click', function () {\n                const selected = win._find('HotkeysList').get('selected');\n                if (selected && selected[0]) {\n                    editList(win, scheme, selected[0].data);\n                }\n            });\n        },\n        save: function (win, scheme, settings, wm) {\n            settings.enableHotkeys = win._find('EnableHotkeys').get('value');\n            if (hotkeys && Object.keys(hotkeys).length) {\n                settings.hotkeys = hotkeys;\n            }\n        }\n    };\n});"]}