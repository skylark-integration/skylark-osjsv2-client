{"version":3,"sources":["module-vfs.js"],"names":["define","SettingsManager","OSjs","require","MountManager","Authenticator","Window","Utils","TEMPLATES","WebDAV","MountName","MountDescription","MountHost","MountNamespace","MountUsername","instance","getUser","username","removeMounts","addMounts","createMountWindow","win","scheme","selected","ondone","nwin","icon","_app","__metadata","title","name","width","height","_on","root","_toggleDisabled","setTemplate","tpl","Object","keys","forEach","k","val","_find","set","render","_name","transport","description","options","host","ns","password","cors","get","on","ev","detail","_close","_addChild","group","label","watch","init","app","update","settings","wm","scandirOptions","cloneObject","scandir","showFileExtensions","showHiddenFiles","entries","map","i","idx","value","columns","clear","add","renderMounts","connection","replace","push","onButtonOK","onModuleSelect","module","sel","Array","item","mounts","data","length","mount","save","si","filter","iter","remove","splice","assign","e","error","console","warn","stack","vfsSettings"],"mappings":"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","file":"../module-vfs.js","sourcesContent":["define(function () {\n    'use strict';\n    const SettingsManager = OSjs.require('core/settings-manager');\n    const MountManager = OSjs.require('core/mount-manager');\n    const Authenticator = OSjs.require('core/authenticator');\n    const Window = OSjs.require('core/window');\n    const Utils = OSjs.require('utils/misc');\n    const TEMPLATES = {\n        WebDAV: {\n            MountName: 'owncloud',\n            MountDescription: 'OwnCloud',\n            MountHost: 'http://localhost/remote.php/webdav/',\n            MountNamespace: 'DAV:',\n            MountUsername: function () {\n                return Authenticator.instance.getUser().username;\n            }\n        }\n    };\n    let removeMounts = [];\n    let addMounts = [];\n    function createMountWindow(win, scheme, selected, ondone) {\n        const nwin = new Window('SettingsMountWindow', {\n            icon: win._app.__metadata.icon,\n            title: win._app.__metadata.name,\n            width: 400,\n            height: 440\n        }, win._app);\n        nwin._on('destroy', function (root) {\n            win._toggleDisabled(false);\n        });\n        nwin._on('inited', function (root) {\n            win._toggleDisabled(true);\n        });\n        nwin._on('init', function (root) {\n            function setTemplate(name) {\n                const tpl = TEMPLATES[name];\n                if (tpl) {\n                    Object.keys(tpl).forEach(function (k) {\n                        let val = tpl[k];\n                        if (typeof val === 'function') {\n                            val = val();\n                        }\n                        nwin._find(k).set('value', val);\n                    });\n                }\n            }\n            function done() {\n                ondone({\n                    transport: nwin._find('MountType').get('value'),\n                    name: nwin._find('MountName').get('value'),\n                    description: nwin._find('MountDescription').get('value'),\n                    options: {\n                        host: nwin._find('MountHost').get('value'),\n                        ns: nwin._find('MountNamespace').get('value'),\n                        username: nwin._find('MountUsername').get('value'),\n                        password: nwin._find('MountPassword').get('value'),\n                        cors: nwin._find('MountCORS').get('value')\n                    }\n                }, selected);\n                nwin._close();\n            }\n            scheme.render(nwin, nwin._name);\n            if (selected) {\n                nwin._find('MountType').set('value', selected.transport);\n                nwin._find('MountName').set('value', selected.name);\n                nwin._find('MountDescription').set('value', selected.description);\n                if (selected.options) {\n                    nwin._find('MountHost').set('value', selected.options.host);\n                    nwin._find('MountNamespace').set('value', selected.options.ns);\n                    nwin._find('MountUsername').set('value', selected.options.username);\n                    nwin._find('MountPassword').set('value', selected.options.password);\n                    nwin._find('MountCORS').set('value', selected.options.cors);\n                }\n            } else {\n                setTemplate(nwin._find('MountType').get('value'));\n                nwin._find('MountType').on('change', function (ev) {\n                    setTemplate(ev.detail);\n                });\n            }\n            nwin._find('ButtonClose').on('click', function () {\n                nwin._close();\n            });\n            nwin._find('ButtonOK').on('click', function () {\n                done();\n            });\n        });\n        return win._addChild(nwin, true, true);\n    }\n    function renderMounts(win, scheme) {\n        const sf = SettingsManager.instance('VFS');\n        const entries = sf.get('mounts', []).map(function (i, idx) {\n            return {\n                value: idx,\n                columns: [\n                    { label: i.name },\n                    { label: i.description }\n                ]\n            };\n        });\n        win._find('MountList').clear().add(entries);\n    }\n    return {\n        group: 'system',\n        name: 'VFS',\n        label: 'VFS',\n        icon: 'devices/drive-harddisk.png',\n        watch: ['VFS'],\n        init: function (app) {\n        },\n        update: function (win, scheme, settings, wm) {\n            const vfsOptions = Utils.cloneObject(SettingsManager.get('VFS') || {});\n            const scandirOptions = vfsOptions.scandir || {};\n            win._find('ShowFileExtensions').set('value', scandirOptions.showFileExtensions === true);\n            win._find('ShowHiddenFiles').set('value', scandirOptions.showHiddenFiles === true);\n            renderMounts(win, scheme);\n        },\n        render: function (win, scheme, root, settings, wm) {\n            function ondone(connection, replace) {\n                if (connection) {\n                    if (replace) {\n                        removeMounts.push(replace);\n                    }\n                    addMounts.push(connection);\n                }\n                win.onButtonOK();\n                win.onModuleSelect(module.name);\n            }\n            win._find('MountList').set('columns', [\n                { label: 'Name' },\n                { label: 'Description' }\n            ]);\n            win._find('MountRemove').on('click', function () {\n                const sel = win._find('MountList').get('selected');\n                if (sel instanceof Array) {\n                    sel.forEach(function (item) {\n                        const mounts = SettingsManager.instance('VFS').get('mounts', []);\n                        const idx = item.data;\n                        if (mounts[idx]) {\n                            removeMounts.push(mounts[idx]);\n                            win.onButtonOK();\n                            win.onModuleSelect(module.name);\n                        }\n                    });\n                }\n            });\n            win._find('MountAdd').on('click', function () {\n                createMountWindow(win, scheme, null, ondone);\n            });\n            win._find('MountEdit').on('click', function () {\n                const sel = win._find('MountList').get('selected');\n                const mounts = SettingsManager.instance('VFS').get('mounts', []);\n                if (sel && sel.length) {\n                    const mount = mounts[sel[0].data];\n                    if (mount) {\n                        createMountWindow(win, scheme, mount, ondone);\n                    }\n                }\n            });\n        },\n        save: function (win, scheme, settings, wm) {\n            const si = SettingsManager.instance('VFS');\n            const mounts = si.get('mounts', []).filter(function (iter) {\n                for (let i = 0; i < removeMounts.length; i++) {\n                    const name = removeMounts[i].name;\n                    if (name === iter.name) {\n                        MountManager.remove(name);\n                        removeMounts.splice(i, 1);\n                        return false;\n                    }\n                }\n                return true;\n            });\n            addMounts.forEach(function (iter) {\n                try {\n                    MountManager.add(Object.assign({}, iter));\n                    mounts.push(iter);\n                } catch (e) {\n                    OSjs.error('Settings', 'An error occured while trying to mount', e);\n                    console.warn(e.stack, e);\n                }\n            });\n            const vfsSettings = {\n                mounts: mounts,\n                scandir: {\n                    showHiddenFiles: win._find('ShowHiddenFiles').get('value'),\n                    showFileExtensions: win._find('ShowFileExtensions').get('value')\n                }\n            };\n            si.set(null, vfsSettings, false, false);\n            addMounts = [];\n            removeMounts = [];\n        }\n    };\n});"]}