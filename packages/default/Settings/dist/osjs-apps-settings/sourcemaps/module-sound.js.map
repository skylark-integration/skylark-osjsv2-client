{"version":3,"sources":["module-sound.js"],"names":["define","Translations","Theme","OSjs","require","Locales","Dialog","Utils","_","createLocalizer","sounds","renderList","win","scheme","_find","clear","add","Object","keys","map","name","value","columns","label","group","icon","init","update","settings","wm","set","soundTheme","enableSounds","cloneObject","render","root","soundThemes","tmp","getSoundThemes","t","on","selected","get","key","_toggleDisabled","create","message","ev","button","length","editList","data","save"],"mappings":";;;;;;;AAAAA,QAAQ,aAAc,SAAUC,GAC5B,aACA,MAAMC,EAAQC,KAAKC,QAAQ,cACrBC,EAAUF,KAAKC,QAAQ,gBACvBE,EAASH,KAAKC,QAAQ,eACtBG,EAAQJ,KAAKC,QAAQ,cACrBI,EAAIH,EAAQI,gBAAgBR,GAClC,IAAIS,KACJ,SAASC,EAAWC,EAAKC,GACrBD,EAAIE,MAAM,cAAcC,QAAQC,IAAIC,OAAOC,KAAKR,GAAQS,IAAI,SAAUC,GAClE,OACIC,OACID,KAAMA,EACNC,MAAOX,EAAOU,IAElBE,UACMC,MAAOH,IACPG,MAAOb,EAAOU,SAmBhC,OACII,MAAO,WACPJ,KAAM,SACNG,MAAO,aACPE,KAAM,+BACNC,KAAM,aAENC,OAAQ,SAAUf,EAAKC,EAAQe,EAAUC,GACrCjB,EAAIE,MAAM,kBAAkBgB,IAAI,QAASF,EAASG,YAClDnB,EAAIE,MAAM,gBAAgBgB,IAAI,QAASF,EAASI,cAChDtB,EAASH,EAAM0B,YAAYL,EAASlB,QACpCC,EAAWC,IAEfsB,OAAQ,SAAUtB,EAAKC,EAAQsB,EAAMP,EAAUC,GAC3C,MAAMO,GAAwBC,EAO5BnC,EAAMoC,iBANGrB,OAAOC,KAAKmB,GAAKlB,IAAI,SAAUoB,GAClC,OACIhB,MAAOc,EAAIE,GACXlB,MAAOkB,MAJC,IAAUF,EAQ9BzB,EAAIE,MAAM,kBAAkBE,IAAIoB,GAChCxB,EAAIE,MAAM,cAAc0B,GAAG,QAAS,WAChC,MAAMC,EAAW7B,EAAIE,MAAM,cAAc4B,IAAI,YACzCD,GAAYA,EAAS,IAvCrC,SAAkB7B,EAAKC,EAAQ8B,GAC3B/B,EAAIgC,iBAAgB,GACpBtC,EAAOuC,OAAO,SACVC,QAAStC,EAAE,uBAAyB,IAAMmC,EAAIvB,KAC9CC,MAAOsB,EAAItB,OACZ,SAAU0B,EAAIC,EAAQ3B,GACrBT,EAAIgC,iBAAgB,IACpBvB,EAAQA,GAAS,IACP4B,SACNvC,EAAOiC,EAAIvB,MAAQC,GAEvBV,EAAWC,KA6BHsC,CAAStC,EAAKC,EAAQ4B,EAAS,GAAGU,SAI9CC,KAAM,SAAUxC,EAAKC,EAAQe,EAAUC,GACnCD,EAASG,WAAanB,EAAIE,MAAM,kBAAkB4B,IAAI,SACtDd,EAASI,aAAepB,EAAIE,MAAM,gBAAgB4B,IAAI,SAClDhC,GAAUO,OAAOC,KAAKR,GAAQuC,SAC9BrB,EAASlB,OAASA","file":"../module-sound.js","sourcesContent":["define(['./locales'], function (Translations) {\n    'use strict';\n    const Theme = OSjs.require('core/theme');\n    const Locales = OSjs.require('core/locales');\n    const Dialog = OSjs.require('core/dialog');\n    const Utils = OSjs.require('utils/misc');\n    const _ = Locales.createLocalizer(Translations);\n    let sounds = {};\n    function renderList(win, scheme) {\n        win._find('SoundsList').clear().add(Object.keys(sounds).map(function (name) {\n            return {\n                value: {\n                    name: name,\n                    value: sounds[name]\n                },\n                columns: [\n                    { label: name },\n                    { label: sounds[name] }\n                ]\n            };\n        }));\n    }\n    function editList(win, scheme, key) {\n        win._toggleDisabled(true);\n        Dialog.create('Input', {\n            message: _('Enter filename for:') + ' ' + key.name,\n            value: key.value\n        }, function (ev, button, value) {\n            win._toggleDisabled(false);\n            value = value || '';\n            if (value.length) {\n                sounds[key.name] = value;\n            }\n            renderList(win, scheme);\n        });\n    }\n    return {\n        group: 'personal',\n        name: 'Sounds',\n        label: 'LBL_SOUNDS',\n        icon: 'status/audio-volume-high.png',\n        init: function () {\n        },\n        update: function (win, scheme, settings, wm) {\n            win._find('SoundThemeName').set('value', settings.soundTheme);\n            win._find('EnableSounds').set('value', settings.enableSounds);\n            sounds = Utils.cloneObject(settings.sounds);\n            renderList(win, scheme);\n        },\n        render: function (win, scheme, root, settings, wm) {\n            const soundThemes = function (tmp) {\n                return Object.keys(tmp).map(function (t) {\n                    return {\n                        label: tmp[t],\n                        value: t\n                    };\n                });\n            }(Theme.getSoundThemes());\n            win._find('SoundThemeName').add(soundThemes);\n            win._find('SoundsEdit').on('click', function () {\n                const selected = win._find('SoundsList').get('selected');\n                if (selected && selected[0]) {\n                    editList(win, scheme, selected[0].data);\n                }\n            });\n        },\n        save: function (win, scheme, settings, wm) {\n            settings.soundTheme = win._find('SoundThemeName').get('value');\n            settings.enableSounds = win._find('EnableSounds').get('value');\n            if (sounds && Object.keys(sounds).length) {\n                settings.sounds = sounds;\n            }\n        }\n    };\n});"]}