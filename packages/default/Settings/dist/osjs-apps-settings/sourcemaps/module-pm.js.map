{"version":3,"sources":["module-pm.js"],"names":["define","Dialog","OSjs","require","SettingsManager","PackageManager","FileMetadata","list","hidden","renderInstalled","win","scheme","_destroyed","_find","set","pool","instance","Hidden","getPackages","get","updateEnabledStates","view","rows","Object","keys","map","k","idx","index","value","columns","label","scope","name","clear","add","$element","querySelectorAll","forEach","row","col","children","getAttribute","enabled","indexOf","_create","on","ev","detail","push","splice","renderPaths","paths","iter","_save","sf","_toggleLoading","PackagePaths","group","icon","button","init","update","settings","wm","render","root","selected","pkg","getPackage","data","file","path","uninstall","then","catch","e","alert","d","entries","length","generateUserMetadata","_toggleDisabled","create","filter","result","install","sel","removePath","message","placeholder","btn","addPath","save"],"mappings":"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","file":"../module-pm.js","sourcesContent":["define(function () {\n    'use strict';\n    const Dialog = OSjs.require('core/dialog');\n    const SettingsManager = OSjs.require('core/settings-manager');\n    const PackageManager = OSjs.require('core/package-manager');\n    const FileMetadata = OSjs.require('vfs/file');\n    let list, hidden;\n    function updateEnabledStates() {\n        const pool = SettingsManager.instance('PackageManager', { Hidden: [] });\n        list = PackageManager.getPackages(false);\n        hidden = pool.get('Hidden');\n    }\n    function renderInstalled(win, scheme) {\n        if (!win || win._destroyed) {\n            return;\n        }\n        win._find('ButtonUninstall').set('disabled', true);\n        updateEnabledStates();\n        const view = win._find('InstalledPackages');\n        const rows = Object.keys(list).map(function (k, idx) {\n            return {\n                index: idx,\n                value: k,\n                columns: [\n                    { label: '' },\n                    { label: k },\n                    { label: list[k].scope },\n                    { label: list[k].name }\n                ]\n            };\n        });\n        view.clear();\n        view.add(rows);\n        view.$element.querySelectorAll('gui-list-view-body > gui-list-view-row').forEach(function (row) {\n            const col = row.children[0];\n            const name = row.getAttribute('data-value');\n            const enabled = hidden.indexOf(name) >= 0;\n            win._create('gui-checkbox', { value: enabled }, col).on('change', function (ev) {\n                const idx = hidden.indexOf(name);\n                if (ev.detail) {\n                    if (idx < 0) {\n                        hidden.push(name);\n                    }\n                } else {\n                    if (idx >= 0) {\n                        hidden.splice(idx, 1);\n                    }\n                }\n            });\n        });\n    }\n    function renderPaths(win, scheme) {\n        if (!win || win._destroyed) {\n            return;\n        }\n        const paths = SettingsManager.instance('PackageManager').get('PackagePaths', []);\n        win._find('PackagePaths').clear().add(paths.map(function (iter, idx) {\n            return {\n                value: idx,\n                columns: [{ label: iter }]\n            };\n        }));\n    }\n    function _save(sf, win, scheme, paths) {\n        win._toggleLoading(true);\n        sf.set(null, { PackagePaths: paths }, function () {\n            renderPaths(win, scheme);\n            win._toggleLoading(false);\n        }, false);\n    }\n    function addPath(win, scheme) {\n        const sf = SettingsManager.instance('PackageManager');\n        const paths = sf.get('PackagePaths', []);\n        win._toggleDisabled(true);\n        Dialog.create('Input', {\n            message: 'Enter path',\n            placeholder: 'mount:///path'\n        }, function (ev, btn, value) {\n            win._toggleDisabled(false);\n            if (value) {\n                if (paths.indexOf(value) === -1) {\n                    paths.push(value);\n                    _save(sf, win, scheme, paths);\n                }\n            }\n        });\n    }\n    function removePath(win, scheme, index) {\n        const sf = SettingsManager.instance('PackageManager');\n        const paths = sf.get('PackagePaths', []);\n        if (typeof paths[index] !== 'undefined') {\n            paths.splice(index, 1);\n            _save(sf, win, scheme, paths);\n        }\n    }\n    return {\n        group: 'misc',\n        name: 'Packages',\n        label: 'LBL_PACKAGES',\n        icon: 'apps/system-software-install.png',\n        button: false,\n        init: function () {\n        },\n        update: function (win, scheme, settings, wm) {\n            renderInstalled(win, scheme);\n            renderPaths(win, scheme);\n        },\n        render: function (win, scheme, root, settings, wm) {\n            const pool = SettingsManager.instance('PackageManager', { Hidden: [] });\n            win._find('ButtonUninstall').on('click', function () {\n                const selected = win._find('InstalledPackages').get('selected');\n                if (selected && selected[0]) {\n                    const pkg = PackageManager.getPackage(selected[0].data);\n                    if (pkg && pkg.scope === 'user') {\n                        win._toggleLoading(true);\n                        const file = new FileMetadata(pkg.path);\n                        PackageManager.uninstall(file).then(() => {\n                            win._toggleLoading(false);\n                            renderInstalled(win, scheme);\n                        }).catch(e => {\n                            win._toggleLoading(false);\n                            alert(e);\n                        });\n                    }\n                }\n            });\n            win._find('InstalledPackages').on('select', function (ev) {\n                let d = true;\n                const e = ev.detail.entries || [];\n                if (e.length) {\n                    const pkg = PackageManager.getPackage(e[0].data);\n                    if (pkg && pkg.scope === 'user') {\n                        d = false;\n                    }\n                }\n                win._find('ButtonUninstall').set('disabled', d);\n            });\n            win._find('ButtonSaveHidden').on('click', function () {\n                win._toggleLoading(true);\n                pool.set('Hidden', hidden, function () {\n                    win._toggleLoading(false);\n                });\n            });\n            win._find('ButtonRegen').on('click', function () {\n                win._toggleLoading(true);\n                PackageManager.generateUserMetadata().then(() => {\n                    win._toggleLoading(false);\n                    renderInstalled(win, scheme);\n                }).catch(() => {\n                    win._toggleLoading(false);\n                });\n            });\n            win._find('ButtonZipInstall').on('click', function () {\n                win._toggleDisabled(true);\n                Dialog.create('File', { filter: ['application/zip'] }, function (ev, button, result) {\n                    if (button !== 'ok' || !result) {\n                        win._toggleDisabled(false);\n                    } else {\n                        PackageManager.install(result, true).then(() => {\n                            win._toggleDisabled(false);\n                            renderInstalled(win, scheme);\n                        }).catch(e => {\n                            win._toggleDisabled(false);\n                            alert(e);\n                        });\n                    }\n                }, win);\n            });\n            win._find('PackagePathsRemove').on('click', function () {\n                const sel = win._find('PackagePaths').get('selected');\n                if (sel && sel.length) {\n                    removePath(win, scheme, sel[0].data);\n                }\n            });\n            win._find('PackagePathsAdd').on('click', function () {\n                addPath(win, scheme);\n            });\n        },\n        save: function (win, scheme, settings, wm) {\n        }\n    };\n});"]}