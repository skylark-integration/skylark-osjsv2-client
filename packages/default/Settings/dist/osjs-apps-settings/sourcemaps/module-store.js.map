{"version":3,"sources":["module-store.js"],"names":["define","FS","OSjs","require","VFS","FileMetadata","PackageManager","renderStore","win","_toggleLoading","getStorePackages","then","result","rows","map","i","idx","a","document","createElement","href","_repository","index","value","download","columns","label","name","hostname","version","author","gelList","_find","clear","add","catch","err","console","warn","group","icon","button","init","update","scheme","settings","wm","clicked","render","root","on","selected","get","length","data","cb","file","Promise","resolve","reject","read","ab","dest","filename","type","path","mime","write","install","generateUserMetadata","error","Error","res","installSelected","alert","save"],"mappings":";;;;;;;AAAAA,OAAO,WACH,aACA,MAAMC,EAAKC,KAAKC,QAAQ,YAClBC,EAAMF,KAAKC,QAAQ,UACnBE,EAAeH,KAAKC,QAAQ,YAC5BG,EAAiBJ,KAAKC,QAAQ,wBAqBpC,SAASI,EAAYC,GACjBA,EAAIC,gBAAe,GACnBH,EAAeI,qBAAqBC,KAAKC,IACrC,MAAMC,EAAOD,EAAOE,IAAI,SAAUC,EAAGC,GACjC,MAAMC,EAAIC,SAASC,cAAc,KAEjC,OADAF,EAAEG,KAAOL,EAAEM,aAEPC,MAAON,EACPO,MAAOR,EAAES,SACTC,UACMC,MAAOX,EAAEY,OACTD,MAAOT,EAAEW,WACTF,MAAOX,EAAEc,UACTH,MAAOX,EAAEe,YAIvBtB,EAAIC,gBAAe,GACnB,MAAMsB,EAAUvB,EAAIwB,MAAM,oBAI1B,OAHID,GACAA,EAAQE,QAAQC,IAAIrB,IAEjB,IACRsB,MAAMC,IACLC,QAAQC,KAAKF,GACb5B,EAAIC,gBAAe,KAG3B,OACI8B,MAAO,OACPZ,KAAM,QACND,MAAO,YACPc,KAAM,kCACNC,QAAQ,EACRC,KAAM,aAENC,OAAQ,SAAUnC,EAAKoC,EAAQC,EAAUC,EAAIC,GACrCA,GACAxC,EAAYC,IAGpBwC,OAAQ,SAAUxC,EAAKoC,EAAQK,EAAMJ,EAAUC,GAC3CtC,EAAIwB,MAAM,sBAAsBkB,GAAG,QAAS,WACxC3C,EAAYC,KAEhBA,EAAIwB,MAAM,sBAAsBkB,GAAG,QAAS,WACxC,MAAMC,EAAW3C,EAAIwB,MAAM,oBAAoBoB,IAAI,YAC/CD,EAASE,QAAUF,EAAS,GAAGG,OAC/B9C,EAAIC,gBAAe,GApEnC,SAAyBe,EAAU+B,GAC/B,MAAMC,EAAO,IAAInD,EAAamB,EAAU,mBACxC,IAAIiC,QAAQ,CAACC,EAASC,KAClBvD,EAAIwD,KAAKJ,GAAM7C,KAAKkD,IAChB,MAAMC,EAAO,IAAIzD,GACb0D,SAAU9D,EAAG8D,SAASvC,GACtBwC,KAAM,OACNC,KAAM,WAAahE,EAAG8D,SAASvC,GAC/B0C,KAAM,oBAEV9D,EAAI+D,MAAML,EAAMD,GAAIlD,KAAK,IACdL,EAAe8D,QAAQN,GAAM,GAAMnD,KAAK,KAC3CL,EAAe+D,uBAAuB1D,KAAK+C,GAASvB,MAAMwB,KAC3DxB,MAAMmC,IACLX,EAAO,IAAIY,MAAM,8BAAgCD,OAEtDnC,MAAMwB,KACVxB,MAAMwB,KACVhD,KAAK6D,GAAOjB,GAAG,EAAOiB,IAAMrC,MAAMoB,GAmDzBkB,CAAgBtB,EAAS,GAAGG,KAAM,SAAUgB,EAAO1D,GAC/CJ,EAAIC,gBAAe,GACf6D,GACAI,MAAMJ,SAO1BK,KAAM,SAAUnE,EAAKoC,EAAQC,EAAUC","file":"../module-store.js","sourcesContent":["define(function () {\n    'use strict';\n    const FS = OSjs.require('utils/fs');\n    const VFS = OSjs.require('vfs/fs');\n    const FileMetadata = OSjs.require('vfs/file');\n    const PackageManager = OSjs.require('core/package-manager');\n    function installSelected(download, cb) {\n        const file = new FileMetadata(download, 'application/zip');\n        new Promise((resolve, reject) => {\n            VFS.read(file).then(ab => {\n                const dest = new FileMetadata({\n                    filename: FS.filename(download),\n                    type: 'file',\n                    path: 'home:///' + FS.filename(download),\n                    mime: 'application/zip'\n                });\n                VFS.write(dest, ab).then(() => {\n                    return PackageManager.install(dest, true).then(() => {\n                        PackageManager.generateUserMetadata().then(resolve).catch(reject);\n                    }).catch(error => {\n                        reject(new Error('Failed to install package: ' + error));\n                    });\n                }).catch(reject);\n            }).catch(reject);\n        }).then(res => cb(false, res)).catch(cb);\n    }\n    function renderStore(win) {\n        win._toggleLoading(true);\n        PackageManager.getStorePackages({}).then(result => {\n            const rows = result.map(function (i, idx) {\n                const a = document.createElement('a');\n                a.href = i._repository;\n                return {\n                    index: idx,\n                    value: i.download,\n                    columns: [\n                        { label: i.name },\n                        { label: a.hostname },\n                        { label: i.version },\n                        { label: i.author }\n                    ]\n                };\n            });\n            win._toggleLoading(false);\n            const gelList = win._find('AppStorePackages');\n            if (gelList) {\n                gelList.clear().add(rows);\n            }\n            return true;\n        }).catch(err => {\n            console.warn(err);\n            win._toggleLoading(false);\n        });\n    }\n    return {\n        group: 'user',\n        name: 'Store',\n        label: 'LBL_STORE',\n        icon: 'apps/system-software-update.png',\n        button: false,\n        init: function () {\n        },\n        update: function (win, scheme, settings, wm, clicked) {\n            if (clicked) {\n                renderStore(win);\n            }\n        },\n        render: function (win, scheme, root, settings, wm) {\n            win._find('ButtonStoreRefresh').on('click', function () {\n                renderStore(win);\n            });\n            win._find('ButtonStoreInstall').on('click', function () {\n                const selected = win._find('AppStorePackages').get('selected');\n                if (selected.length && selected[0].data) {\n                    win._toggleLoading(true);\n                    installSelected(selected[0].data, function (error, result) {\n                        win._toggleLoading(false);\n                        if (error) {\n                            alert(error);\n                            return;\n                        }\n                    });\n                }\n            });\n        },\n        save: function (win, scheme, settings, wm) {\n        }\n    };\n});"]}