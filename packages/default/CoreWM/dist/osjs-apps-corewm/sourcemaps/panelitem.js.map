{"version":3,"sources":["panelitem.js"],"names":["define","Translations","_","OSjs","require","createLocalizer","Menu","DOM","Events","SettingsFragment","WindowManager","[object Object]","name","description","icon","hasoptions","className","itemName","settings","defaults","this","_$root","_$container","_className","_itemName","split","_settings","_settingsDialog","mergeDefaults","document","createElement","setAttribute","title","$bind","ev","preventDefault","create","onClick","openSettings","appendChild","destroy","$unbind","$remove","DialogRef","args","_restore","wm","instance","_scheme","button","applySettings","addWindow"],"mappings":";;;;;;;AAAAA,QAAQ,aAAc,SAAUC,GAC5B,aACA,MAAMC,EAAIC,KAAKC,QAAQ,gBAAgBC,gBAAgBJ,GACjDK,EAAOH,KAAKC,QAAQ,YACpBG,EAAMJ,KAAKC,QAAQ,aACnBI,EAASL,KAAKC,QAAQ,gBACtBK,EAAmBN,KAAKC,QAAQ,6BAChCM,EAAgBP,KAAKC,QAAQ,uBACnC,aACIO,kBACI,OACIC,KAAM,YACNC,YAAa,wBACbC,KAAM,0BACNC,YAAY,GAGpBJ,YAAYK,EAAWC,EAAUC,EAAUC,GACvCC,KAAKC,OAAS,KACdD,KAAKE,YAAc,KACnBF,KAAKG,WAAaP,GAAa,UAC/BI,KAAKI,UAAYP,GAAYD,EAAUS,MAAM,KAAK,GAClDL,KAAKM,UAAY,KACjBN,KAAKO,gBAAkB,KACnBT,GAAYA,aAAoBT,GAAoBU,IACpDC,KAAKM,UAAYR,EAASU,cAAcT,IAGhDR,OAMI,GALAS,KAAKC,OAASQ,SAASC,cAAc,qBACrCV,KAAKC,OAAOL,UAAYI,KAAKG,WAC7BH,KAAKE,YAAcO,SAASC,cAAc,MAC1CV,KAAKE,YAAYS,aAAa,OAAQ,WACtCX,KAAKE,YAAYN,UAAY,uBACzBI,KAAKM,UAAW,CAChB,IAAIM,EAAQ9B,EAAE,oBAAqBA,EAAEkB,KAAKI,YAC1ChB,EAAOyB,MAAMb,KAAKC,OAAQ,cAAea,IACrCA,EAAGC,iBACH7B,EAAK8B,SACGJ,MAAOA,EACPK,QAAS,IAAMjB,KAAKkB,iBACpBJ,KAIhB,OADAd,KAAKC,OAAOkB,YAAYnB,KAAKE,aACtBF,KAAKC,OAEhBV,UACQS,KAAKO,iBACLP,KAAKO,gBAAgBa,UAEzBhC,EAAOiC,QAAQrB,KAAKC,OAAQ,eAC5BD,KAAKO,gBAAkB,KACvBP,KAAKC,OAASd,EAAImC,QAAQtB,KAAKC,QAC/BD,KAAKE,YAAcf,EAAImC,QAAQtB,KAAKE,aAExCX,iBAEAA,aAAagC,EAAWC,GACpB,GAAIxB,KAAKO,gBAEL,OADAP,KAAKO,gBAAgBkB,YACd,EAEX,IAAIC,EAAKpC,EAAcqC,SAUvB,OATIJ,IACAvB,KAAKO,gBAAkB,IAAIgB,EAAUvB,KAAM0B,EAAGE,QAASC,IACpC,OAAXA,GACA7B,KAAK8B,gBAET9B,KAAKO,gBAAkB,OAE3BmB,EAAGK,UAAU/B,KAAKO,iBAAiB,KAEhC,EAEXhB,UACI,OAAOS,KAAKC","file":"../panelitem.js","sourcesContent":["define(['./locales'], function (Translations) {\n    'use strict';\n    const _ = OSjs.require('core/locales').createLocalizer(Translations);\n    const Menu = OSjs.require('gui/menu');\n    const DOM = OSjs.require('utils/dom');\n    const Events = OSjs.require('utils/events');\n    const SettingsFragment = OSjs.require('helpers/settings-fragment');\n    const WindowManager = OSjs.require('core/window-manager');\n    return class PanelItem {\n        static metadata() {\n            return {\n                name: 'PanelItem',\n                description: 'PanelItem Description',\n                icon: 'actions/stock_about.png',\n                hasoptions: false\n            };\n        }\n        constructor(className, itemName, settings, defaults) {\n            this._$root = null;\n            this._$container = null;\n            this._className = className || 'Unknown';\n            this._itemName = itemName || className.split(' ')[0];\n            this._settings = null;\n            this._settingsDialog = null;\n            if (settings && settings instanceof SettingsFragment && defaults) {\n                this._settings = settings.mergeDefaults(defaults);\n            }\n        }\n        init() {\n            this._$root = document.createElement('corewm-panel-item');\n            this._$root.className = this._className;\n            this._$container = document.createElement('ul');\n            this._$container.setAttribute('role', 'toolbar');\n            this._$container.className = 'corewm-panel-buttons';\n            if (this._settings) {\n                var title = _('Open {0} Settings', _(this._itemName));\n                Events.$bind(this._$root, 'contextmenu', ev => {\n                    ev.preventDefault();\n                    Menu.create([{\n                            title: title,\n                            onClick: () => this.openSettings()\n                        }], ev);\n                });\n            }\n            this._$root.appendChild(this._$container);\n            return this._$root;\n        }\n        destroy() {\n            if (this._settingsDialog) {\n                this._settingsDialog.destroy();\n            }\n            Events.$unbind(this._$root, 'contextmenu');\n            this._settingsDialog = null;\n            this._$root = DOM.$remove(this._$root);\n            this._$container = DOM.$remove(this._$container);\n        }\n        applySettings() {\n        }\n        openSettings(DialogRef, args) {\n            if (this._settingsDialog) {\n                this._settingsDialog._restore();\n                return false;\n            }\n            var wm = WindowManager.instance;\n            if (DialogRef) {\n                this._settingsDialog = new DialogRef(this, wm._scheme, button => {\n                    if (button === 'ok') {\n                        this.applySettings();\n                    }\n                    this._settingsDialog = null;\n                });\n                wm.addWindow(this._settingsDialog, true);\n            }\n            return true;\n        }\n        getRoot() {\n            return this._$root;\n        }\n    };\n});"]}