{"version":3,"sources":["widgets/analogclock.js"],"names":["define","Widget","[object Object]","settings","super","width","height","aspect","top","right","canvas","frequency","resizable","viewBox","this","radius","_$canvas","ctx","_$context","Math","round","drawHand","pos","length","beginPath","lineWidth","lineCap","moveTo","rotate","lineTo","stroke","ang","clearRect","arc","PI","fillStyle","fill","font","textBaseline","textAlign","num","translate","fillText","toString","now","Date","hour","getHours","minute","getMinutes","second","getSeconds","dimension"],"mappings":";;;;;;;AAAAA,QAAQ,aAAc,SAAUC,GAC5B,aACA,qBAAuCA,EACnCC,YAAYC,GACRC,MAAM,eACFC,MAAO,IACPC,OAAQ,IACRC,QAAQ,EACRC,IAAK,IACLC,MAAO,GACPC,QAAQ,EACRC,UAAW,EACXC,WAAW,EACXC,SAAS,GACVV,GACHW,KAAKC,OAAS,IAElBb,WACI,IAAKY,KAAKE,SACN,OAEJ,MAAMC,EAAMH,KAAKI,UACXH,EAASI,KAAKC,MAAoB,IAAdN,KAAKC,QAC/B,SAASM,EAASJ,EAAKK,EAAKC,EAAQlB,GAChCY,EAAIO,YACJP,EAAIQ,UAAYpB,EAChBY,EAAIS,QAAU,QACdT,EAAIU,OAAO,EAAG,GACdV,EAAIW,OAAON,GACXL,EAAIY,OAAO,GAAIN,GACfN,EAAIa,SACJb,EAAIW,QAAQN,GAgBhB,IAAIS,EAdJd,EAAIe,UAAU,EAAG,EAAiB,EAAdlB,KAAKC,OAA0B,EAAdD,KAAKC,QAC1CE,EAAIO,YACJP,EAAIgB,IAAI,EAAG,EAAGlB,EAAQ,EAAG,EAAII,KAAKe,IAClCjB,EAAIkB,UAAY,QAChBlB,EAAImB,OACJnB,EAAIQ,UAAqB,IAATV,EAChBE,EAAIa,SACJb,EAAIO,YACJP,EAAIgB,IAAI,EAAG,EAAY,GAATlB,EAAc,EAAG,EAAII,KAAKe,IACxCjB,EAAIkB,UAAY,OAChBlB,EAAImB,OACJnB,EAAIoB,KAAgB,IAATtB,EAAgB,WAC3BE,EAAIqB,aAAe,SACnBrB,EAAIsB,UAAY,SAEhB,IAAK,IAAIC,EAAM,EAAGA,EAAM,GAAIA,IACxBT,EAAMS,EAAMrB,KAAKe,GAAK,EACtBjB,EAAIW,OAAOG,GACXd,EAAIwB,UAAU,EAAa,KAAT1B,GAClBE,EAAIW,QAAQG,GACZd,EAAIyB,SAASF,EAAIG,WAAY,EAAG,GAChC1B,EAAIW,OAAOG,GACXd,EAAIwB,UAAU,EAAY,IAAT1B,GACjBE,EAAIW,QAAQG,GAEhB,MAAMa,EAAM,IAAIC,KAChB,IAAIC,EAAOF,EAAIG,WACXC,EAASJ,EAAIK,aACbC,EAASN,EAAIO,aAEjBL,GADAA,GAAc,IACA3B,KAAKe,GAAK,EAAIc,EAAS7B,KAAKe,GAAK,IAAWgB,EAAS/B,KAAKe,GAAK,MAC7Ec,EAASA,EAAS7B,KAAKe,GAAK,GAAKgB,EAAS/B,KAAKe,GAAK,KACpDgB,EAASA,EAAS/B,KAAKe,GAAK,GAC5Bb,EAASJ,EAAK6B,EAAe,GAAT/B,EAAuB,IAATA,GAClCM,EAASJ,EAAK+B,EAAiB,GAATjC,EAAuB,IAATA,GACpCM,EAASJ,EAAKiC,EAAiB,GAATnC,EAAuB,IAATA,GAExCb,SAASkD,GACAtC,KAAKE,UAAaF,KAAKI,YAG5BJ,KAAKC,OAASqC,EAAU9C,OAAS,EACjCQ,KAAKI,UAAUuB,UAAU3B,KAAKC,OAAQD,KAAKC","file":"../../widgets/analogclock.js","sourcesContent":["define(['../widget'], function (Widget) {\n    'use strict';\n    return class WidgetAnalogClock extends Widget {\n        constructor(settings) {\n            super('AnalogClock', {\n                width: 300,\n                height: 300,\n                aspect: true,\n                top: 100,\n                right: 20,\n                canvas: true,\n                frequency: 1,\n                resizable: true,\n                viewBox: true\n            }, settings);\n            this.radius = 300 / 2;\n        }\n        onRender() {\n            if (!this._$canvas) {\n                return;\n            }\n            const ctx = this._$context;\n            const radius = Math.round(this.radius * 0.95);\n            function drawHand(ctx, pos, length, width) {\n                ctx.beginPath();\n                ctx.lineWidth = width;\n                ctx.lineCap = 'round';\n                ctx.moveTo(0, 0);\n                ctx.rotate(pos);\n                ctx.lineTo(0, -length);\n                ctx.stroke();\n                ctx.rotate(-pos);\n            }\n            ctx.clearRect(0, 0, this.radius * 2, this.radius * 2);\n            ctx.beginPath();\n            ctx.arc(0, 0, radius, 0, 2 * Math.PI);\n            ctx.fillStyle = 'white';\n            ctx.fill();\n            ctx.lineWidth = radius * 0.04;\n            ctx.stroke();\n            ctx.beginPath();\n            ctx.arc(0, 0, radius * 0.1, 0, 2 * Math.PI);\n            ctx.fillStyle = '#000';\n            ctx.fill();\n            ctx.font = radius * 0.15 + 'px arial';\n            ctx.textBaseline = 'middle';\n            ctx.textAlign = 'center';\n            let ang;\n            for (let num = 1; num < 13; num++) {\n                ang = num * Math.PI / 6;\n                ctx.rotate(ang);\n                ctx.translate(0, -radius * 0.85);\n                ctx.rotate(-ang);\n                ctx.fillText(num.toString(), 0, 0);\n                ctx.rotate(ang);\n                ctx.translate(0, radius * 0.85);\n                ctx.rotate(-ang);\n            }\n            const now = new Date();\n            let hour = now.getHours();\n            let minute = now.getMinutes();\n            let second = now.getSeconds();\n            hour = hour % 12;\n            hour = hour * Math.PI / 6 + minute * Math.PI / (6 * 60) + second * Math.PI / (360 * 60);\n            minute = minute * Math.PI / 30 + second * Math.PI / (30 * 60);\n            second = second * Math.PI / 30;\n            drawHand(ctx, hour, radius * 0.5, radius * 0.07);\n            drawHand(ctx, minute, radius * 0.8, radius * 0.07);\n            drawHand(ctx, second, radius * 0.9, radius * 0.02);\n        }\n        onResize(dimension) {\n            if (!this._$canvas || !this._$context) {\n                return;\n            }\n            this.radius = dimension.height / 2;\n            this._$context.translate(this.radius, this.radius);\n        }\n    };\n});"]}