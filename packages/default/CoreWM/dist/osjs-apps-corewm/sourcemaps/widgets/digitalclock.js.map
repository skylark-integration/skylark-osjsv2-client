{"version":3,"sources":["widgets/digitalclock.js"],"names":["define","Widget","Locales","OSjs","require","Dialog","[object Object]","settings","super","width","height","aspect","top","right","canvas","frequency","resizable","viewBox","enabled","tree","color","this","_$canvas","ctx","_$context","now","Date","txt","getHours","getMinutes","getSeconds","map","i","String","join","fontSize","Math","round","_dimension","font","textBaseline","fillStyle","_getSetting","x","y","m","measureText","clearRect","fillText","ev","title","_","onClick","create","btn","result","_setSetting","hex"],"mappings":";;;;;;;AAAAA,QAAQ,aAAc,SAAUC,GAC5B,aACA,MAAMC,EAAUC,KAAKC,QAAQ,gBACvBC,EAASF,KAAKC,QAAQ,eAC5B,qBAAwCH,EACpCK,YAAYC,GACRC,MAAM,gBACFC,MAAO,IACPC,OAAQ,IACRC,QAAQ,EACRC,IAAK,IACLC,MAAO,GACPC,QAAQ,EACRC,UAAW,EACXC,WAAW,EACXC,SAAS,EACTV,UACIW,SAAS,EACTC,MAAQC,MAAO,aAEpBb,GAEPD,WACI,IAAKe,KAAKC,SACN,OAEJ,MAAMC,EAAMF,KAAKG,UACXC,EAAM,IAAIC,KACVC,GACFF,EAAIG,WACJH,EAAII,aACJJ,EAAIK,cACNC,IAAI,SAAUC,GACZ,OAAOA,EAAI,GAAK,IAAMC,OAAOD,GAAKC,OAAOD,KAC1CE,KAAK,KAGFC,EAAWC,KAAKC,MAFR,IAEchB,KAAKiB,WAAW5B,QAC5Ca,EAAIgB,KAAON,OAAOE,GAAY,mBAC9BZ,EAAIiB,aAAe,SACnBjB,EAAIkB,UAAYpB,KAAKqB,YAAY,SACjC,MAAMC,EAAIP,KAAKC,MAAMhB,KAAKiB,WAAW7B,MAAQ,GACvCmC,EAAIR,KAAKC,MAAMhB,KAAKiB,WAAW5B,OAAS,GACxCmC,EAAItB,EAAIuB,YAAYnB,GAAKlB,MAC/Bc,EAAIwB,UAAU,EAAG,EAAG1B,KAAKiB,WAAW7B,MAAOY,KAAKiB,WAAW5B,QAC3Da,EAAIyB,SAASrB,EAAKgB,EAAIE,EAAI,EATT,GASsBD,GAE3CtC,cAAc2C,GACV,MAAM7B,EAAQC,KAAKqB,YAAY,UAAY,UAC3C,QACQQ,MAAOhD,EAAQiD,EAAE,aACjBC,QAAS,KACL/C,EAAOgD,OAAO,SAAWjC,MAAOA,GAAS,CAAC6B,EAAIK,EAAKC,KACnC,OAARD,GACAjC,KAAKmC,YAAY,QAASD,EAAOE,KAAK","file":"../../widgets/digitalclock.js","sourcesContent":["define(['../widget'], function (Widget) {\n    'use strict';\n    const Locales = OSjs.require('core/locales');\n    const Dialog = OSjs.require('core/dialog');\n    return class WidgetDigitalClock extends Widget {\n        constructor(settings) {\n            super('DigitalClock', {\n                width: 300,\n                height: 100,\n                aspect: true,\n                top: 100,\n                right: 20,\n                canvas: true,\n                frequency: 1,\n                resizable: true,\n                viewBox: true,\n                settings: {\n                    enabled: false,\n                    tree: { color: '#ffffff' }\n                }\n            }, settings);\n        }\n        onRender() {\n            if (!this._$canvas) {\n                return;\n            }\n            const ctx = this._$context;\n            const now = new Date();\n            const txt = [\n                now.getHours(),\n                now.getMinutes(),\n                now.getSeconds()\n            ].map(function (i) {\n                return i < 10 ? '0' + String(i) : String(i);\n            }).join(':');\n            const ratio = 0.55;\n            const xOffset = -10;\n            const fontSize = Math.round(this._dimension.height * ratio);\n            ctx.font = String(fontSize) + 'px Digital-7Mono';\n            ctx.textBaseline = 'middle';\n            ctx.fillStyle = this._getSetting('color');\n            const x = Math.round(this._dimension.width / 2);\n            const y = Math.round(this._dimension.height / 2);\n            const m = ctx.measureText(txt).width;\n            ctx.clearRect(0, 0, this._dimension.width, this._dimension.height);\n            ctx.fillText(txt, x - m / 2 + xOffset, y);\n        }\n        onContextMenu(ev) {\n            const color = this._getSetting('color') || '#ffffff';\n            return [{\n                    title: Locales._('LBL_COLOR'),\n                    onClick: () => {\n                        Dialog.create('Color', { color: color }, (ev, btn, result) => {\n                            if (btn === 'ok') {\n                                this._setSetting('color', result.hex, true);\n                            }\n                        });\n                    }\n                }];\n        }\n    };\n});"]}