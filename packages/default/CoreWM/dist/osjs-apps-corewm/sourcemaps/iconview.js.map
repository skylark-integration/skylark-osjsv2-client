{"version":3,"sources":["iconview.js"],"names":["define","Translations","_","OSjs","require","createLocalizer","FS","Menu","DOM","GUI","VFS","Process","Theme","Dialog","FileMetadata","MountManager","GUIElement","WindowManager","createCreateDialog","title","dir","cb","create","value","message","ev","button","result","pathJoin","[object Object]","wm","this","dialog","$iconview","$element","document","createElement","setAttribute","id","shortcutCache","refreshTimeout","createDroppable","onOver","el","args","onDropOver","onLeave","onDropLeave","onDrop","onItemDropped","item","onDropItem","onFilesDropped","files","onDropFile","createFromNode","build","on","win","getCurrentWindow","_blur","detail","entries","forEach","entry","data","file","createFromFile","createContextMenu","_refresh","$remove","clearTimeout","destroy","set","getRoot","s","getWindowSpace","style","top","left","width","height","desktopPath","instance","getSetting","shortcutPath","setTimeout","scandir","backlink","then","map","iter","type","shortcut","niter","idx","push","__index","_type","icon","getFileIcon","label","filename","filter","path","clear","add","refresh","cache","mkdir","dirname","finally","write","JSON","stringify","values","o","Object","keys","k","_save","found","index","i","save","splice","menu","onClick","dest","f","catch","err","error","openShortcutEdit","m","getModuleFromPath","option","unlink","removeShortcut","_getContextMenu","_close","scheme","closeCallback","super","allow_maximize","allow_resize","allow_minimize","app","root","init","arguments","_render","_name","_find","applySettings","get","parse","_scheme","updateShortcut","addWindow"],"mappings":"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","file":"../iconview.js","sourcesContent":["define(['./locales'], function (Translations) {\n    'use strict';\n    const _ = OSjs.require('core/locales').createLocalizer(Translations);\n    const FS = OSjs.require('utils/fs');\n    const Menu = OSjs.require('gui/menu');\n    const DOM = OSjs.require('utils/dom');\n    const GUI = OSjs.require('utils/gui');\n    const VFS = OSjs.require('vfs/fs');\n    const Process = OSjs.require('core/process');\n    const Theme = OSjs.require('core/theme');\n    const Dialog = OSjs.require('core/dialog');\n    const FileMetadata = OSjs.require('vfs/file');\n    const MountManager = OSjs.require('core/mount-manager');\n    const GUIElement = OSjs.require('gui/element');\n    const WindowManager = OSjs.require('core/window-manager');\n    function createCreateDialog(title, dir, cb) {\n        Dialog.create('Input', {\n            value: title,\n            message: _('Create in {0}', dir)\n        }, function (ev, button, result) {\n            if (result) {\n                cb(new FileMetadata(FS.pathJoin(dir, result)));\n            }\n        });\n    }\n    class IconViewShortcutDialog extends Dialog {\n        constructor(item, scheme, closeCallback) {\n            super('IconViewShortcutDialog', {\n                title: 'Edit Launcher',\n                icon: 'status/appointment-soon.png',\n                width: 400,\n                height: 220,\n                allow_maximize: false,\n                allow_resize: false,\n                allow_minimize: false\n            }, () => {\n            });\n            this.scheme = scheme;\n            this.values = {\n                path: item.path,\n                filename: item.filename,\n                args: item.args || {}\n            };\n            this.cb = closeCallback || function () {\n            };\n        }\n        init(wm, app) {\n            const root = super.init(...arguments);\n            this._render(this._name, this.scheme);\n            this._find('InputShortcutLaunch').set('value', this.values.path);\n            this._find('InputShortcutLabel').set('value', this.values.filename);\n            this._find('InputTooltipFormatString').set('value', JSON.stringify(this.values.args || {}));\n            this._find('ButtonApply').on('click', () => {\n                this.applySettings();\n                this._close('ok');\n            });\n            this._find('ButtonCancel').on('click', () => {\n                this._close();\n            });\n            return root;\n        }\n        applySettings() {\n            this.values.path = this._find('InputShortcutLaunch').get('value');\n            this.values.filename = this._find('InputShortcutLabel').get('value');\n            this.values.args = JSON.parse(this._find('InputTooltipFormatString').get('value') || {});\n        }\n        _close(button) {\n            this.cb(button, this.values);\n            return super._close(...arguments);\n        }\n    }\n    return class DesktopIconView {\n        constructor(wm) {\n            this.dialog = null;\n            this.$iconview = null;\n            this.$element = document.createElement('gui-icon-view');\n            this.$element.setAttribute('data-multiple', 'false');\n            this.$element.id = 'CoreWMDesktopIconView';\n            this.shortcutCache = [];\n            this.refreshTimeout = null;\n            GUI.createDroppable(this.$element, {\n                onOver: function (ev, el, args) {\n                    wm.onDropOver(ev, el, args);\n                },\n                onLeave: function () {\n                    wm.onDropLeave();\n                },\n                onDrop: function () {\n                    wm.onDrop();\n                },\n                onItemDropped: function (ev, el, item, args) {\n                    wm.onDropItem(ev, el, item, args);\n                },\n                onFilesDropped: function (ev, el, files, args) {\n                    wm.onDropFile(ev, el, files, args);\n                }\n            });\n            this.$iconview = GUIElement.createFromNode(this.$element);\n            this.$iconview.build();\n            this.$iconview.on('select', () => {\n                if (wm) {\n                    const win = wm.getCurrentWindow();\n                    if (win) {\n                        win._blur();\n                    }\n                }\n            }).on('activate', ev => {\n                if (ev && ev.detail) {\n                    ev.detail.entries.forEach(entry => {\n                        const item = entry.data;\n                        const file = new FileMetadata(item);\n                        Process.createFromFile(file, item.args);\n                    });\n                }\n            }).on('contextmenu', ev => {\n                if (ev && ev.detail && ev.detail.entries) {\n                    this.createContextMenu(ev.detail.entries[0], ev);\n                }\n            });\n            this._refresh();\n        }\n        destroy() {\n            DOM.$remove(this.$element);\n            this.refreshTimeout = clearTimeout(this.refreshTimeout);\n            this.$element = null;\n            this.$iconview = null;\n            if (this.dialog) {\n                this.dialog.destroy();\n            }\n            this.dialog = null;\n            this.shortcutCache = [];\n        }\n        blur() {\n            const cel = GUIElement.createFromNode(this.$element);\n            cel.set('value', null);\n        }\n        getRoot() {\n            return this.$element;\n        }\n        resize(wm) {\n            const el = this.getRoot();\n            const s = wm.getWindowSpace();\n            if (el) {\n                el.style.top = s.top + 'px';\n                el.style.left = s.left + 'px';\n                el.style.width = s.width + 'px';\n                el.style.height = s.height + 'px';\n            }\n        }\n        _refresh(wm) {\n            const desktopPath = WindowManager.instance.getSetting('desktopPath');\n            const shortcutPath = FS.pathJoin(desktopPath, '.shortcuts.json');\n            this.shortcutCache = [];\n            this.refreshTimeout = clearTimeout(this.refreshTimeout);\n            this.refreshTimeout = setTimeout(() => {\n                VFS.scandir(desktopPath, { backlink: false }).then(result => {\n                    if (this.$iconview) {\n                        const entries = result.map(iter => {\n                            if (iter.type === 'application' || iter.shortcut === true) {\n                                const niter = new FileMetadata(iter);\n                                niter.shortcut = true;\n                                const idx = this.shortcutCache.push(niter) - 1;\n                                const file = new FileMetadata(iter);\n                                file.__index = idx;\n                                return {\n                                    _type: iter.type,\n                                    icon: Theme.getFileIcon(iter, '32x32'),\n                                    label: iter.filename,\n                                    value: file,\n                                    args: iter.args || {}\n                                };\n                            }\n                            return {\n                                _type: 'vfs',\n                                icon: Theme.getFileIcon(iter, '32x32'),\n                                label: iter.filename,\n                                value: iter\n                            };\n                        }).filter(function (iter) {\n                            return iter.value.path !== shortcutPath;\n                        });\n                        this.$iconview.clear().add(entries);\n                    }\n                });\n            }, 150);\n        }\n        _save(refresh) {\n            const desktopPath = WindowManager.instance.getSetting('desktopPath');\n            const path = FS.pathJoin(desktopPath, '.shortcuts.json');\n            const cache = this.shortcutCache;\n            VFS.mkdir(FS.dirname(path)).finally(() => {\n                VFS.write(path, JSON.stringify(cache, null, 4)).then(() => {\n                    if (refresh) {\n                        this._refresh();\n                    }\n                });\n            });\n        }\n        updateShortcut(data, values) {\n            const o = this.shortcutCache[data.__index];\n            if (o.path === data.path) {\n                Object.keys(values).forEach(function (k) {\n                    o[k] = values[k];\n                });\n                this._save(true);\n            }\n        }\n        getShortcutByPath(path) {\n            let found = null;\n            let index = -1;\n            this.shortcutCache.forEach(function (i, idx) {\n                if (!found) {\n                    if (i.type !== 'application' && i.path === path) {\n                        found = i;\n                        index = idx;\n                    }\n                }\n            });\n            return {\n                item: found,\n                index: index\n            };\n        }\n        addShortcut(data, wm, save) {\n            ['icon'].forEach(function (k) {\n                if (data[k]) {\n                    delete data[k];\n                }\n            });\n            if (data.type === 'application') {\n                data.args = data.args || {};\n            }\n            data.shortcut = true;\n            this.shortcutCache.push(data);\n            this._save(true);\n        }\n        removeShortcut(data) {\n            const o = this.shortcutCache[data.__index];\n            if (o && o.path === data.path) {\n                this.shortcutCache.splice(data.__index, 1);\n                this._save(true);\n            }\n        }\n        _getContextMenu(item) {\n            const desktopPath = WindowManager.instance.getSetting('desktopPath');\n            const menu = [\n                {\n                    title: _('LBL_UPLOAD'),\n                    onClick: () => {\n                        Dialog.create('FileUpload', { dest: desktopPath }, () => {\n                            this._refresh();\n                        });\n                    }\n                },\n                {\n                    title: _('LBL_CREATE'),\n                    menu: [\n                        {\n                            title: _('LBL_FILE'),\n                            onClick: () => {\n                                createCreateDialog('New file', desktopPath, f => {\n                                    VFS.write(f, '').catch(err => {\n                                        OSjs.error('CoreWM', _('ERR_VFSMODULE_MKFILE'), err);\n                                    });\n                                });\n                            }\n                        },\n                        {\n                            title: _('LBL_DIRECTORY'),\n                            onClick: () => {\n                                createCreateDialog('New directory', desktopPath, f => {\n                                    VFS.mkdir(f).catch(err => {\n                                        OSjs.error('CoreWM', _('ERR_VFSMODULE_MKDIR'), err);\n                                    });\n                                });\n                            }\n                        }\n                    ]\n                }\n            ];\n            if (item && item.data) {\n                const file = item.data;\n                if (file.type === 'application') {\n                    menu.push({\n                        title: _('Edit shortcut'),\n                        onClick: () => this.openShortcutEdit(file)\n                    });\n                }\n                const m = MountManager.getModuleFromPath(file.path);\n                if (!m || m.option('root') !== desktopPath) {\n                    menu.push({\n                        title: _('Remove shortcut'),\n                        onClick: () => this.removeShortcut(file)\n                    });\n                } else {\n                    menu.push({\n                        title: _('LBL_DELETE'),\n                        onClick: () => VFS.unlink(file)\n                    });\n                }\n            }\n            return menu;\n        }\n        createContextMenu(item, ev) {\n            const wm = WindowManager.instance;\n            const menu = wm._getContextMenu(item);\n            Menu.create(menu, ev);\n        }\n        openShortcutEdit(item) {\n            if (this.dialog) {\n                this.dialog._close();\n            }\n            const wm = WindowManager.instance;\n            this.dialog = new IconViewShortcutDialog(item, wm._scheme, (button, values) => {\n                if (button === 'ok') {\n                    this.updateShortcut(item, values);\n                }\n                this.dialog = null;\n            });\n            wm.addWindow(this.dialog, true);\n        }\n    };\n});"]}