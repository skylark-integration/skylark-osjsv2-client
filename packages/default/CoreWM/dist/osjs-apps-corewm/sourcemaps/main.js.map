{"version":3,"sources":["main.js"],"names":["define","Translations","WindowSwitcher","DesktopIconView","Panel","WidgetDigitalClock","WidgetAnalogClock","PanelItemAppMenu","PanelItemButtons","PanelItemClock","PanelItemNotificationArea","PanelItemSearch","PanelItemWeather","PanelItemWindowList","schemeHtml","Menu","OSjs","require","Locales","GUIScheme","Config","Authenticator","Application","PackageManager","WindowManager","SettingsFragment","SettingsManager","Events","Compability","FileMetadata","Notification","Theme","DOM","Colors","Utils","Init","GUI","VFS","FS","ServiceNotificationIcon","PADDING_PANEL_AUTOHIDE","defaultSettings","defaults","compability","getCompability","cfg","animations","css","animation","useTouchMenu","touch","mergeObject","translate","createLocalizer","Applications","CoreWM","[object Object]","args","metadata","importSettings","_winGenericHotkey","ev","win","wm","hotkey","_onKeyEvent","super","this","panels","widgets","switcher","iconView","importedSettings","getConfig","_scheme","fromString","generatedHotkeyMap","hotkeyMap","SEARCH","panel","getPanel","pitem","getItemByType","PanelItems","Search","preventDefault","show","SWITCHER","getSetting","WINDOW_MINIMIZE","_minimize","WINDOW_MAXIMIZE","_maximize","WINDOW_RESTORE","_restore","WINDOW_MOVE_LEFT","_moveTo","WINDOW_MOVE_RIGHT","WINDOW_MOVE_UP","WINDOW_MOVE_DOWN","SAVE","SAVEAS","OPEN","update","applySettings","_settings","get","watch","msg","obj","match","_refresh","e","console","warn","stack","initSwitcher","initDesktop","initPanels","initWidgets","initIconView","init","user","instance","getUser","displayMenu","create","title","_","onClick","logout","toggleFullscreen","docElm","document","documentElement","notif","getIcon","opts","_isFullscreen","displayDevMenu","don","$hasClass","body","apps","getProcesses","filter","iter","map","__label","__pid","reload","mnu","$removeClass","$addClass","menu","createIcon","icon","onContextMenu","username","initNotifications","Promise","resolve","force","window","confirm","destroy","$unbind","destroyIcon","destroyPanels","destroyWidgets","settings","background","arguments","forEach","p","w","createDroppable","onOver","el","onDropOver","onLeave","onDropLeave","onDrop","onItemDropped","item","onDropItem","onFilesDropped","files","onDropFile","ps","added","storedItem","options","panelSettings","items","itemSettings","ex","addItem","name","message","push","timeout","getOntop","getPosition","setTimeout","space","getWindowSpace","_windows","_position","y","top","_move","x","resize","setStyles","Widgets","_inited","en","appendChild","getRoot","rect","wasInited","margin","windows","_isResponsive","wrect","mx","my","moved","i","l","length","_getViewRect","_state","mimimized","left","width","_dimension","height","h","maximized","_restored","moveIntoView","setAttribute","_applyWallpaper","data","wallpaper","path","_createShortcut","addShortcut","_openMenu","dst","pathJoin","filename","copy","type","mime","upload","destination","target","openDesktopMenu","altKey","hide","combination","Object","keys","some","keyCombination","category","panelItem","getItem","WindowList","blur","NotificationArea","arg","_getContextMenu","showSettings","enableIconView","_emit","save","triggerWatch","group","log","setIconView","language","set","setLocale","self","k","Array","prototype","slice","call","apply","groupEnd","styles","raw","opacity","foreground","mw","getDefaultSetting","String","borderSize","theme","getStyleTheme","style","border","bottom","invertIconViewColor","backgroundColor","invertHEX","createStylesheet","noMargin","s","d","ph","getHeight","getAutohide","isAutoHidden","_options","borders","pos","getWindowPosition","m","val","idx","DigitalClock","AnalogClock","AppMenu","Buttons","Clock","Weather"],"mappings":"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","file":"../main.js","sourcesContent":["define([\n    './locales',\n    './windowswitcher',\n    './iconview',\n    './panel',\n    './widgets/digitalclock',\n    './widgets/analogclock',\n    './panelitems/appmenu',\n    './panelitems/buttons',\n    './panelitems/clock',\n    './panelitems/notificationarea',\n    './panelitems/search',\n    './panelitems/weather',\n    './panelitems/windowlist',\n    './scheme.html'\n], function (Translations, WindowSwitcher, DesktopIconView, Panel, WidgetDigitalClock, WidgetAnalogClock, PanelItemAppMenu, PanelItemButtons, PanelItemClock, PanelItemNotificationArea, PanelItemSearch, PanelItemWeather, PanelItemWindowList, schemeHtml) {\n    'use strict';\n    const Menu = OSjs.require('gui/menu');\n    const Locales = OSjs.require('core/locales');\n    const GUIScheme = OSjs.require('gui/scheme');\n    const Config = OSjs.require('core/config');\n    const Authenticator = OSjs.require('core/authenticator');\n    const Application = OSjs.require('core/application');\n    const PackageManager = OSjs.require('core/package-manager');\n    const WindowManager = OSjs.require('core/window-manager');\n    const SettingsFragment = OSjs.require('helpers/settings-fragment');\n    const SettingsManager = OSjs.require('core/settings-manager');\n    const Events = OSjs.require('utils/events');\n    const Compability = OSjs.require('utils/compability');\n    const FileMetadata = OSjs.require('vfs/file');\n    const Notification = OSjs.require('gui/notification');\n    const Theme = OSjs.require('core/theme');\n    const DOM = OSjs.require('utils/dom');\n    const Colors = OSjs.require('utils/colors');\n    const Utils = OSjs.require('utils/misc');\n    const Init = OSjs.require('core/init');\n    const GUI = OSjs.require('utils/gui');\n    const VFS = OSjs.require('vfs/fs');\n    const FS = OSjs.require('utils/fs');\n    const ServiceNotificationIcon = OSjs.require('helpers/service-notification-icon');\n    const PADDING_PANEL_AUTOHIDE = 10;\n    function defaultSettings(defaults) {\n        const compability = Compability.getCompability();\n        let cfg = {\n            animations: compability.css.animation,\n            useTouchMenu: compability.touch\n        };\n        if (defaults) {\n            cfg = Utils.mergeObject(cfg, defaults);\n        }\n        return cfg;\n    }\n    const translate = Locales.createLocalizer(Translations);\n    class CoreWM extends WindowManager {\n        constructor(args, metadata) {\n            const importSettings = args.defaults || {};\n            super('CoreWM', args, metadata, defaultSettings(importSettings));\n            this.panels = [];\n            this.widgets = [];\n            this.switcher = null;\n            this.iconView = null;\n            this.importedSettings = Utils.mergeObject(Config.getConfig('SettingsManager.CoreWM'), importSettings);\n            this._scheme = GUIScheme.fromString(schemeHtml);\n            this.generatedHotkeyMap = {};\n            function _winGenericHotkey(ev, win, wm, hotkey) {\n                if (win) {\n                    win._onKeyEvent(ev, 'keydown', hotkey);\n                }\n            }\n            this.hotkeyMap = {\n                SEARCH: function (ev, win, wm) {\n                    if (wm) {\n                        const panel = wm.getPanel();\n                        if (panel) {\n                            const pitem = panel.getItemByType(OSjs.Applications.CoreWM.PanelItems.Search);\n                            if (pitem) {\n                                ev.preventDefault();\n                                pitem.show();\n                            }\n                        }\n                    }\n                },\n                SWITCHER: function (ev, win, wm) {\n                    if (wm.getSetting('enableSwitcher') && wm.switcher) {\n                        wm.switcher.show(ev, win, wm);\n                    }\n                },\n                WINDOW_MINIMIZE: function (ev, win) {\n                    if (win) {\n                        win._minimize();\n                    }\n                },\n                WINDOW_MAXIMIZE: function (ev, win) {\n                    if (win) {\n                        win._maximize();\n                    }\n                },\n                WINDOW_RESTORE: function (ev, win) {\n                    if (win) {\n                        win._restore();\n                    }\n                },\n                WINDOW_MOVE_LEFT: function (ev, win) {\n                    if (win) {\n                        win._moveTo('left');\n                    }\n                },\n                WINDOW_MOVE_RIGHT: function (ev, win) {\n                    if (win) {\n                        win._moveTo('right');\n                    }\n                },\n                WINDOW_MOVE_UP: function (ev, win) {\n                    if (win) {\n                        win._moveTo('top');\n                    }\n                },\n                WINDOW_MOVE_DOWN: function (ev, win) {\n                    if (win) {\n                        win._moveTo('bottom');\n                    }\n                },\n                SAVE: _winGenericHotkey,\n                SAVEAS: _winGenericHotkey,\n                OPEN: _winGenericHotkey\n            };\n            Theme.update(this.importedSettings);\n        }\n        setup() {\n            const initNotifications = () => {\n                ServiceNotificationIcon.init();\n                const user = Authenticator.instance.getUser();\n                const displayMenu = ev => {\n                    Menu.create([{\n                            title: Locales._('TITLE_SIGN_OUT'),\n                            onClick: function () {\n                                Init.logout();\n                            }\n                        }], ev);\n                    return false;\n                };\n                const toggleFullscreen = () => {\n                    const docElm = document.documentElement;\n                    const notif = Notification.getIcon('_FullscreenNotification');\n                    if (notif) {\n                        this.toggleFullscreen(notif.opts._isFullscreen ? document : docElm, !notif.opts._isFullscreen);\n                    }\n                };\n                const displayDevMenu = ev => {\n                    const don = DOM.$hasClass(document.body, 'debug');\n                    const apps = Application.getProcesses().filter(function (iter) {\n                        return iter !== null && iter instanceof Application;\n                    }).map(function (iter) {\n                        return {\n                            title: iter.__label + ' (pid:' + iter.__pid + ')',\n                            onClick: function () {\n                                Application.reload(iter.__pid);\n                            }\n                        };\n                    });\n                    const mnu = [\n                        {\n                            title: don ? 'Turn off debug overlay' : 'Turn on debug overlay',\n                            onClick: function () {\n                                if (don) {\n                                    DOM.$removeClass(document.body, 'debug');\n                                } else {\n                                    DOM.$addClass(document.body, 'debug');\n                                }\n                            }\n                        },\n                        {\n                            title: 'Reload manifest',\n                            onClick: function () {\n                                PackageManager.init();\n                            }\n                        },\n                        {\n                            title: 'Reload running application',\n                            menu: apps\n                        }\n                    ];\n                    Menu.create(mnu, ev);\n                };\n                if (Config.getConfig('Debug')) {\n                    Notification.createIcon('_DeveloperNotification', {\n                        icon: Theme.getIcon('categories/applications-development.png', '16x16'),\n                        title: 'Developer Tools',\n                        onContextMenu: displayDevMenu,\n                        onClick: displayDevMenu\n                    });\n                }\n                if (this.getSetting('fullscreen')) {\n                    Notification.createIcon('_FullscreenNotification', {\n                        icon: Theme.getIcon('actions/view-fullscreen.png', '16x16'),\n                        title: 'Enter fullscreen',\n                        onClick: toggleFullscreen,\n                        _isFullscreen: false\n                    });\n                }\n                Notification.createIcon('_HandlerUserNotification', {\n                    icon: Theme.getIcon('status/avatar-default.png', '16x16'),\n                    title: Locales._('TITLE_SIGNED_IN_AS_FMT', user.username),\n                    onContextMenu: displayMenu,\n                    onClick: displayMenu\n                });\n            };\n            this.applySettings(this._settings.get());\n            try {\n                VFS.watch(new FileMetadata(this.getSetting('desktopPath'), 'dir'), (msg, obj) => {\n                    if (!obj || msg.match(/^vfs:(un)?mount/)) {\n                        return;\n                    }\n                    if (this.iconView) {\n                        this.iconView._refresh();\n                    }\n                });\n            } catch (e) {\n                console.warn('Failed to apply CoreWM VFS watch', e, e.stack);\n            }\n            this.initSwitcher();\n            this.initDesktop();\n            this.initPanels();\n            this.initWidgets();\n            this.initIconView();\n            initNotifications();\n            return Promise.resolve();\n        }\n        destroy(force) {\n            if (!force && !window.confirm(translate('Killing this process will stop things from working!'))) {\n                return false;\n            }\n            ServiceNotificationIcon.destroy();\n            try {\n                Events.$unbind(document.body, 'dragenter, dragleave, dragover, drop');\n                Notification.destroyIcon('_HandlerUserNotification');\n                if (this.iconView) {\n                    this.iconView.destroy();\n                }\n                if (this.switcher) {\n                    this.switcher.destroy();\n                }\n                this.destroyPanels();\n                this.destroyWidgets();\n                const settings = this.importedSettings;\n                try {\n                    settings.background = 'color';\n                } catch (e) {\n                }\n            } catch (e) {\n                console.warn(e);\n                return false;\n            }\n            this.switcher = null;\n            this.iconView = null;\n            return super.destroy(...arguments);\n        }\n        destroyPanels() {\n            this.panels.forEach(function (p) {\n                p.destroy();\n            });\n            this.panels = [];\n        }\n        destroyWidgets() {\n            this.widgets.forEach(function (w) {\n                w.destroy();\n            });\n            this.widgets = [];\n        }\n        initSwitcher() {\n            this.switcher = new WindowSwitcher();\n        }\n        initDesktop() {\n            GUI.createDroppable(document.body, {\n                onOver: (ev, el, args) => this.onDropOver(ev, el, args),\n                onLeave: () => this.onDropLeave(),\n                onDrop: () => this.onDrop(),\n                onItemDropped: (ev, el, item, args) => this.onDropItem(ev, el, item, args),\n                onFilesDropped: (ev, el, files, args) => this.onDropFile(ev, el, files, args)\n            });\n        }\n        initPanels(applySettings) {\n            const ps = this.getSetting('panels');\n            let added = false;\n            if (ps === false) {\n                added = true;\n            } else {\n                this.destroyPanels();\n                (ps || []).forEach(storedItem => {\n                    if (!storedItem.options) {\n                        storedItem.options = {};\n                    }\n                    const panelSettings = new SettingsFragment(storedItem.options, 'CoreWM', SettingsManager);\n                    const p = new Panel('Default', panelSettings, this);\n                    p.init(document.body);\n                    (storedItem.items || []).forEach(iter => {\n                        try {\n                            if (typeof iter.settings === 'undefined' || iter.settings === null) {\n                                iter.settings = {};\n                            }\n                            let itemSettings = {};\n                            try {\n                                itemSettings = new SettingsFragment(iter.settings, 'CoreWM', SettingsManager);\n                            } catch (ex) {\n                                console.warn('An error occured while loading PanelItem settings', ex);\n                                console.warn('stack', ex.stack);\n                            }\n                            p.addItem(new OSjs.Applications.CoreWM.PanelItems[iter.name](itemSettings));\n                            added = true;\n                        } catch (e) {\n                            console.warn('An error occured while creating PanelItem', e);\n                            console.warn('stack', e.stack);\n                            Notification.create({\n                                icon: Theme.getIcon('status/dialog-warning.png', '32x32'),\n                                title: 'CoreWM',\n                                message: translate('An error occured while creating PanelItem: {0}', e)\n                            });\n                        }\n                    });\n                    this.panels.push(p);\n                });\n            }\n            if (!added) {\n                Notification.create({\n                    timeout: 0,\n                    icon: Theme.getIcon('status/dialog-warning.png', '32x32'),\n                    title: 'CoreWM',\n                    message: translate('Your panel has no items. Go to settings to reset default or modify manually\\n(This error may occur after upgrades of OS.js)')\n                });\n            }\n            if (applySettings) {\n                const p = this.panels[0];\n                if (p && p.getOntop() && p.getPosition('top')) {\n                    setTimeout(() => {\n                        const space = this.getWindowSpace();\n                        this._windows.forEach(function (iter) {\n                            if (iter && iter._position.y < space.top) {\n                                console.warn('CoreWM::initPanels()', 'I moved this window because it overlapped with a panel!', iter);\n                                iter._move(iter._position.x, space.top);\n                            }\n                        });\n                    }, 800);\n                }\n                if (this.iconView) {\n                    this.iconView.resize(this);\n                }\n            }\n            setTimeout(() => {\n                this.setStyles(this._settings.get());\n            }, 250);\n        }\n        initWidgets(applySettings) {\n            this.destroyWidgets();\n            const widgets = this.getSetting('widgets');\n            (widgets || []).forEach(item => {\n                if (!item.settings) {\n                    item.settings = {};\n                }\n                const settings = new SettingsFragment(item.settings, 'CoreWM', SettingsManager);\n                try {\n                    const w = new OSjs.Applications.CoreWM.Widgets[item.name](settings);\n                    w.init(document.body);\n                    this.widgets.push(w);\n                    w._inited();\n                } catch (e) {\n                    console.warn('CoreWM::initWidgets()', e, e.stack);\n                }\n            });\n        }\n        initIconView() {\n            const en = this.getSetting('enableIconView');\n            if (!en && this.iconView) {\n                this.iconView.destroy();\n                this.iconView = null;\n                return;\n            }\n            if (en && !this.iconView) {\n                this.iconView = new DesktopIconView(this);\n                document.body.appendChild(this.iconView.getRoot());\n            }\n            setTimeout(() => {\n                if (this.iconView) {\n                    this.iconView.resize(this);\n                }\n            }, 280);\n        }\n        resize(ev, rect, wasInited) {\n            super.resize(...arguments);\n            const space = this.getWindowSpace();\n            const margin = this.getSetting('desktopMargin');\n            const windows = this._windows;\n            function moveIntoView() {\n                let i = 0, l = windows.length, iter, wrect;\n                let mx, my, moved;\n                for (i; i < l; i++) {\n                    iter = windows[i];\n                    if (!iter) {\n                        continue;\n                    }\n                    wrect = iter._getViewRect();\n                    if (wrect === null || iter._state.mimimized) {\n                        continue;\n                    }\n                    mx = iter._position.x;\n                    my = iter._position.y;\n                    moved = false;\n                    if (wrect.left + margin > rect.width) {\n                        mx = space.width - iter._dimension.w;\n                        moved = true;\n                    }\n                    if (wrect.top + margin > rect.height) {\n                        my = space.height - iter._dimension.h;\n                        moved = true;\n                    }\n                    if (moved) {\n                        if (mx < space.left) {\n                            mx = space.left;\n                        }\n                        if (my < space.top) {\n                            my = space.top;\n                        }\n                        iter._move(mx, my);\n                    }\n                    if (iter._state.maximized && (wasInited ? iter._restored : true)) {\n                        iter._restore(true, false);\n                    }\n                }\n            }\n            if (!this._isResponsive) {\n                if (this.getSetting('moveOnResize')) {\n                    moveIntoView();\n                }\n            }\n        }\n        onDropLeave() {\n            document.body.setAttribute('data-attention', 'false');\n        }\n        onDropOver() {\n            document.body.setAttribute('data-attention', 'true');\n        }\n        onDrop() {\n            document.body.setAttribute('data-attention', 'false');\n        }\n        onDropItem(ev, el, item, args) {\n            document.body.setAttribute('data-attention', 'false');\n            const _applyWallpaper = data => {\n                this.applySettings({ wallpaper: data.path }, false, true);\n            };\n            const _createShortcut = data => {\n                if (this.iconView) {\n                    this.iconView.addShortcut(data, this, true);\n                }\n            };\n            const _openMenu = data => {\n                Menu.create([\n                    {\n                        title: translate('LBL_COPY'),\n                        onClick: () => {\n                            const dst = FS.pathJoin(this.getSetting('desktopPath'), data.filename);\n                            VFS.copy(data, dst);\n                        }\n                    },\n                    {\n                        title: translate('Set as wallpaper'),\n                        onClick: () => {\n                            _applyWallpaper(data);\n                        }\n                    }\n                ], ev);\n            };\n            if (item) {\n                const data = item.data;\n                if (item.type === 'file') {\n                    if (data && data.mime) {\n                        if (data.mime.match(/^image/)) {\n                            if (this.iconView) {\n                                _openMenu(data);\n                            } else {\n                                _applyWallpaper(data);\n                            }\n                        } else {\n                            _createShortcut(data);\n                        }\n                    }\n                } else if (item.type === 'application') {\n                    _createShortcut(data);\n                }\n            }\n        }\n        onDropFile(ev, el, files, args) {\n            VFS.upload({\n                destination: 'desktop:///',\n                files: files\n            });\n        }\n        onContextMenu(ev) {\n            if (ev.target === document.body) {\n                ev.preventDefault();\n                this.openDesktopMenu(ev);\n                return false;\n            }\n            return true;\n        }\n        onKeyUp(ev, win) {\n            if (!ev) {\n                return;\n            }\n            if (!ev.altKey) {\n                if (this.switcher) {\n                    this.switcher.hide(ev, win, this);\n                }\n            }\n        }\n        onKeyDown(ev, win) {\n            let combination = false;\n            if (ev) {\n                const map = this.generatedHotkeyMap;\n                Object.keys(map).some(i => {\n                    if (Events.keyCombination(ev, i)) {\n                        map[i](ev, win, this);\n                        combination = i;\n                        return true;\n                    }\n                    return false;\n                });\n            }\n            return combination;\n        }\n        showSettings(category) {\n            Application.create('ApplicationSettings', { category: category });\n        }\n        eventWindow(ev, win) {\n            this.panels.forEach(function (panel) {\n                if (panel) {\n                    const panelItem = panel.getItem(OSjs.Applications.CoreWM.PanelItems.WindowList);\n                    if (panelItem) {\n                        panelItem.update(ev, win);\n                    }\n                }\n            });\n            if (ev === 'focus') {\n                if (this.iconView) {\n                    this.iconView.blur();\n                    this.widgets.forEach(function (w) {\n                        w.blur();\n                    });\n                }\n            }\n        }\n        getNotificationArea() {\n            const panelId = 0;\n            const panel = this.panels[panelId];\n            if (panel) {\n                return panel.getItem(OSjs.Applications.CoreWM.PanelItems.NotificationArea);\n            }\n            return null;\n        }\n        _getContextMenu(arg) {\n            let menu = [];\n            if (this.iconView) {\n                menu = this.iconView._getContextMenu(arg);\n            }\n            menu.push({\n                title: translate('Open settings'),\n                onClick: () => this.showSettings()\n            });\n            if (this.getSetting('enableIconView') === true) {\n                menu.push({\n                    title: translate('Hide Icons'),\n                    onClick: ev => {\n                        this.applySettings({ enableIconView: false }, false, true);\n                    }\n                });\n            } else {\n                menu.push({\n                    title: translate('Show Icons'),\n                    onClick: ev => {\n                        this.applySettings({ enableIconView: true }, false, true);\n                    }\n                });\n            }\n            return menu;\n        }\n        openDesktopMenu(ev) {\n            if (this._emit('wm:contextmenu', [\n                    ev,\n                    this\n                ]) === false) {\n                return;\n            }\n            const menu = this._getContextMenu();\n            Menu.create(menu, ev);\n        }\n        applySettings(settings, force, save, triggerWatch) {\n            console.group('CoreWM::applySettings()');\n            settings = force ? settings : Utils.mergeObject(this._settings.get(), settings);\n            console.log(settings);\n            Theme.update(settings, true);\n            this.setIconView(settings);\n            this.setStyles(settings);\n            if (save) {\n                this.initPanels(true);\n                this.initWidgets(true);\n                if (settings && save === true) {\n                    if (settings.language) {\n                        SettingsManager.set('Core', 'Locale', settings.language, triggerWatch);\n                        Locales.setLocale(settings.language);\n                    }\n                    this._settings.set(null, settings, save, triggerWatch);\n                }\n            }\n            this.generatedHotkeyMap = {};\n            const keys = this._settings.get('hotkeys');\n            const self = this;\n            Object.keys(keys).forEach(k => {\n                this.generatedHotkeyMap[keys[k]] = function () {\n                    const args = Array.prototype.slice.call(arguments);\n                    args.push(k);\n                    return self.hotkeyMap[k].apply(this, args);\n                };\n            });\n            console.groupEnd();\n            return true;\n        }\n        setIconView(settings) {\n            if (settings.enableIconView) {\n                this.initIconView();\n            } else {\n                if (this.iconView) {\n                    this.iconView.destroy();\n                    this.iconView = null;\n                }\n            }\n        }\n        setStyles(settings) {\n            let styles = {};\n            let raw = '';\n            if (settings.panels) {\n                settings.panels.forEach(function (p, i) {\n                    styles['corewm-panel'] = {};\n                    styles['corewm-notification'] = {};\n                    styles['corewm-notification:before'] = { 'opacity': p.options.opacity / 100 };\n                    styles['corewm-panel:before'] = { 'opacity': p.options.opacity / 100 };\n                    styles['.custom-notification'] = {};\n                    styles['.custom-notification:before'] = { 'opacity': p.options.opacity / 100 };\n                    if (p.options.background) {\n                        styles['corewm-panel:before']['background-color'] = p.options.background;\n                        styles['corewm-notification:before']['background-color'] = p.options.background;\n                        styles['.custom-notification:before']['background-color'] = p.options.background;\n                    }\n                    if (p.options.foreground) {\n                        styles['corewm-panel']['color'] = p.options.foreground;\n                        styles['corewm-notification']['color'] = p.options.foreground;\n                        styles['.custom-notification']['color'] = p.options.foreground;\n                    }\n                });\n            }\n            let mw = this.getDefaultSetting('fullscreenTrigger') || 800;\n            raw += '@media all and (max-width: ' + String(mw) + 'px) {\\n';\n            raw += 'application-window {\\n';\n            let borderSize = 0;\n            const space = this.getWindowSpace(true);\n            const theme = Theme.getStyleTheme(true);\n            if (theme && theme.style && theme.style.window) {\n                borderSize = theme.style.window.border;\n            }\n            raw += 'top: calc(' + String(space.top) + 'px + ' + borderSize + ') !important;\\n';\n            raw += 'left: calc(' + String(space.left) + 'px + ' + borderSize + ') !important;\\n';\n            raw += 'right: calc(' + String(borderSize) + ') !important;\\n';\n            raw += 'bottom: calc(' + (space.bottom ? String(space.bottom) + 'px + ' : '') + borderSize + ') !important;\\n';\n            raw += '\\n}';\n            raw += '\\n}';\n            styles['#CoreWMDesktopIconView'] = {};\n            if (settings.invertIconViewColor && settings.backgroundColor) {\n                styles['#CoreWMDesktopIconView']['color'] = Colors.invertHEX(settings.backgroundColor);\n            }\n            if (Object.keys(styles).length) {\n                this.createStylesheet(styles, raw);\n            }\n        }\n        getWindowSpace(noMargin) {\n            const s = super.getWindowSpace(...arguments);\n            const d = this.getSetting('desktopMargin');\n            s.bottom = 0;\n            this.panels.forEach(function (p) {\n                if (p && p.getOntop()) {\n                    const ph = p.getHeight();\n                    if (p.getAutohide() && p.isAutoHidden()) {\n                        s.top += PADDING_PANEL_AUTOHIDE;\n                        s.height -= PADDING_PANEL_AUTOHIDE;\n                    } else if (p.getPosition('top')) {\n                        s.top += ph;\n                        s.height -= ph;\n                    } else {\n                        s.height -= ph;\n                    }\n                    if (p._options.get('position') === 'bottom') {\n                        s.bottom += ph;\n                    }\n                }\n            });\n            if (!noMargin) {\n                if (d > 0) {\n                    s.top += d;\n                    s.left += d;\n                    s.width -= d * 2;\n                    s.height -= d * 2;\n                }\n            }\n            return s;\n        }\n        getWindowPosition(borders) {\n            borders = typeof borders === 'undefined' || borders === true;\n            let pos = super.getWindowPosition(...arguments);\n            const m = borders ? this.getSetting('desktopMargin') : 0;\n            pos.x += m || 0;\n            pos.y += m || 0;\n            this.panels.forEach(function (p) {\n                if (p && p.getOntop() && p.getPosition('top')) {\n                    if (p.getAutohide()) {\n                        pos.y += PADDING_PANEL_AUTOHIDE;\n                    } else {\n                        pos.y += p.getHeight();\n                    }\n                }\n            });\n            return pos;\n        }\n        getSetting(k) {\n            const val = super.getSetting(...arguments);\n            if (typeof val === 'undefined' || val === null) {\n                return defaultSettings(this.importedSettings)[k];\n            }\n            return val;\n        }\n        getDefaultSetting(k) {\n            const settings = defaultSettings(this.importedSettings);\n            if (typeof k !== 'undefined') {\n                return settings[k];\n            }\n            return settings;\n        }\n        getPanels() {\n            return this.panels;\n        }\n        getPanel(idx) {\n            return this.panels[idx || 0];\n        }\n        static get Widgets() {\n            return {\n                DigitalClock: WidgetDigitalClock,\n                AnalogClock: WidgetAnalogClock\n            };\n        }\n        static get PanelItems() {\n            return {\n                AppMenu: PanelItemAppMenu,\n                Buttons: PanelItemButtons,\n                Clock: PanelItemClock,\n                NotificationArea: PanelItemNotificationArea,\n                Search: PanelItemSearch,\n                Weather: PanelItemWeather,\n                WindowList: PanelItemWindowList\n            };\n        }\n    }\n    OSjs.Applications.CoreWM = CoreWM;\n});"]}