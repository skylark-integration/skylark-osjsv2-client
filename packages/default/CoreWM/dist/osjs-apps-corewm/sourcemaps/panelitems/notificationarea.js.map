{"version":3,"sources":["panelitems/notificationarea.js"],"names":["define","PanelItem","DOM","OSjs","require","Events","_restartFix","[object Object]","super","this","notifications","root","init","arguments","setAttribute","fix","Object","keys","length","forEach","k","createNotification","name","opts","_$root","item","$container","document","createElement","$image","image","icon","onCreated","onInited","onDestroy","onClick","onContextMenu","_build","classNames","className","push","join","title","tooltip","self","$bind","ev","apply","src","appendChild","inner","e","console","warn","stack","setImage","$unbind","$remove","_$container","destroy","i","hasOwnProperty"],"mappings":"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","file":"../../panelitems/notificationarea.js","sourcesContent":["define(['../panelitem'], function (PanelItem) {\n    'use strict';\n    const DOM = OSjs.require('utils/dom');\n    const Events = OSjs.require('utils/events');\n    let _restartFix = {};\n    class NotificationAreaItem {\n        constructor(name, opts) {\n            opts = opts || {};\n            this.name = name;\n            this.opts = opts;\n            this.$container = document.createElement('li');\n            this.$image = opts.image || opts.icon ? document.createElement('img') : null;\n            this.onCreated = opts.onCreated || function () {\n            };\n            this.onInited = opts.onInited || function () {\n            };\n            this.onDestroy = opts.onDestroy || function () {\n            };\n            this.onClick = opts.onClick || function () {\n            };\n            this.onContextMenu = opts.onContextMenu || function () {\n            };\n            this._build(name);\n            this.onCreated();\n        }\n        _build(name) {\n            const classNames = [\n                'NotificationArea',\n                'NotificationArea_' + name\n            ];\n            if (this.opts.className) {\n                classNames.push(this.opts.className);\n            }\n            this.$container.className = classNames.join(' ');\n            this.$container.setAttribute('role', 'button');\n            this.$container.setAttribute('aria-label', this.opts.title);\n            if (this.opts.tooltip) {\n                this.$container.title = this.opts.tooltip;\n            }\n            const self = this;\n            Events.$bind(this.$container, 'click', function (ev) {\n                self.onClick.apply(this, arguments);\n                return false;\n            });\n            Events.$bind(this.$container, 'contextmenu', function (ev) {\n                self.onContextMenu.apply(this, arguments);\n                return false;\n            });\n            if (this.$image) {\n                this.$image.title = this.opts.title || '';\n                this.$image.src = this.opts.image || this.opts.icon || 'about:blank';\n                this.$container.appendChild(this.$image);\n            }\n            const inner = document.createElement('div');\n            inner.appendChild(document.createElement('div'));\n            this.$container.appendChild(inner);\n        }\n        init(root) {\n            root.appendChild(this.$container);\n            try {\n                this.onInited(this.$container, this.$image);\n            } catch (e) {\n                console.warn('NotificationAreaItem', 'onInited error');\n                console.warn(e, e.stack);\n            }\n        }\n        setIcon(src) {\n            return this.setImage(src);\n        }\n        setImage(src) {\n            if (this.$image) {\n                this.$image.src = src;\n            }\n            this.opts.image = src;\n        }\n        setTitle(title) {\n            if (this.$image) {\n                this.$image.title = title;\n            }\n            this.opts.title = title;\n        }\n        destroy() {\n            if (this.$container) {\n                Events.$unbind(this.$container, 'click');\n                Events.$unbind(this.$container, 'mousedown');\n                Events.$unbind(this.$container, 'contextmenu');\n            }\n            this.onDestroy();\n            this.$image = DOM.$remove(this.$image);\n            this.$container = DOM.$remove(this.$container);\n        }\n    }\n    return class PanelItemNotificationArea extends PanelItem {\n        constructor() {\n            super('PanelItemNotificationArea corewm-panel-right');\n            this.notifications = {};\n        }\n        init() {\n            const root = super.init(...arguments);\n            root.setAttribute('role', 'toolbar');\n            const fix = Object.keys(_restartFix);\n            if (fix.length) {\n                fix.forEach(k => {\n                    this.createNotification(k, _restartFix[k]);\n                });\n            }\n            return root;\n        }\n        createNotification(name, opts) {\n            if (this._$root) {\n                if (!this.notifications[name]) {\n                    const item = new NotificationAreaItem(name, opts);\n                    item.init(this._$container);\n                    this.notifications[name] = item;\n                    _restartFix[name] = opts;\n                    return item;\n                }\n            }\n            return null;\n        }\n        removeNotification(name) {\n            if (this._$root) {\n                if (this.notifications[name]) {\n                    this.notifications[name].destroy();\n                    delete this.notifications[name];\n                    if (_restartFix[name]) {\n                        delete _restartFix[name];\n                    }\n                    return true;\n                }\n            }\n            return false;\n        }\n        getNotification(name) {\n            if (this._$root) {\n                if (this.notifications[name]) {\n                    return this.notifications[name];\n                }\n            }\n            return false;\n        }\n        destroy() {\n            for (let i in this.notifications) {\n                if (this.notifications.hasOwnProperty(i)) {\n                    if (this.notifications[i]) {\n                        this.notifications[i].destroy();\n                    }\n                    delete this.notifications[i];\n                }\n            }\n            return super.destroy(...arguments);\n        }\n    };\n});"]}