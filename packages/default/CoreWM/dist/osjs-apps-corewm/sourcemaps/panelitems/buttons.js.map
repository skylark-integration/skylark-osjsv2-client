{"version":3,"sources":["panelitems/buttons.js"],"names":["define","PanelItem","GUI","OSjs","require","Menu","DOM","Init","Theme","Events","Locales","Process","PackageManager","WindowManager","[object Object]","settings","set","get","map","iter","title","_","super","buttons","root","init","arguments","ghost","lastTarget","clearGhost","inner","$remove","this","renderButtons","counter","createDroppable","_$container","onOver","ev","el","args","target","isUl","tagName","ul","parentNode","document","createElement","className","insertBefore","createGhost","onEnter","preventDefault","onLeave","onDrop","onItemDropped","item","data","newPosition","$hasClass","$index","position","moveButton","mime","appName","path","split","createButton","$empty","wm","instance","systemButtons","applications","showMenu","showSettings","exit","logout","clearButtons","_settings","forEach","btn","idx","menu","onClick","removeButton","callback","create","launch","system","stopPropagation","addButton","icon","index","splice","save","from","to","length","k","push","window","undefined","pkg","getPackage","img","alt","src","getIcon","sel","setAttribute","appendChild","$bind","createDraggable","onStart","setTimeout","$addClass","onEnd","$removeClass"],"mappings":"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","file":"../../panelitems/buttons.js","sourcesContent":["define(['../panelitem'], function (PanelItem) {\n    'use strict';\n    const GUI = OSjs.require('utils/gui');\n    const Menu = OSjs.require('gui/menu');\n    const DOM = OSjs.require('utils/dom');\n    const Init = OSjs.require('core/init');\n    const Theme = OSjs.require('core/theme');\n    const Events = OSjs.require('utils/events');\n    const Locales = OSjs.require('core/locales');\n    const Process = OSjs.require('core/process');\n    const PackageManager = OSjs.require('core/package-manager');\n    const WindowManager = OSjs.require('core/window-manager');\n    return class PanelItemButtons extends PanelItem {\n        constructor(settings) {\n            if (settings) {\n                settings.set('buttons', settings.get('buttons', []).map(iter => {\n                    iter.title = Locales._(iter.title);\n                    return iter;\n                }));\n            }\n            super('PanelItemButtons', 'Buttons', settings, { buttons: [] });\n        }\n        init() {\n            const root = super.init(...arguments);\n            this.renderButtons();\n            let ghost, lastTarget;\n            function clearGhost(inner) {\n                ghost = DOM.$remove(ghost);\n                if (!inner) {\n                    lastTarget = null;\n                }\n            }\n            function createGhost(target) {\n                const isUl = target.tagName === 'UL';\n                if (!target || lastTarget === target || isUl) {\n                    return;\n                }\n                const ul = target.parentNode;\n                lastTarget = target;\n                clearGhost(true);\n                ghost = document.createElement('li');\n                ghost.className = 'Ghost';\n                ul.insertBefore(ghost, target);\n            }\n            let counter = 0;\n            GUI.createDroppable(this._$container, {\n                onOver: (ev, el, args) => {\n                    if (ev.target) {\n                        createGhost(ev.target);\n                    }\n                },\n                onEnter: ev => {\n                    ev.preventDefault();\n                    counter++;\n                },\n                onLeave: ev => {\n                    if (counter <= 0) {\n                        clearGhost();\n                    }\n                },\n                onDrop: () => {\n                    counter = 0;\n                    clearGhost();\n                },\n                onItemDropped: (ev, el, item, args) => {\n                    if (item && item.data) {\n                        let newPosition = 0;\n                        if (DOM.$hasClass(ev.target, 'Ghost')) {\n                            newPosition = DOM.$index(ev.target);\n                        }\n                        if (typeof item.data.position !== 'undefined') {\n                            this.moveButton(item.data.position, newPosition - 1);\n                        } else if (item.data.mime === 'osjs/application') {\n                            const appName = item.data.path.split('applications:///')[1];\n                            this.createButton(appName, newPosition);\n                        }\n                    }\n                }\n            });\n            return root;\n        }\n        clearButtons() {\n            DOM.$empty(this._$container);\n        }\n        renderButtons() {\n            const wm = WindowManager.instance;\n            const systemButtons = {\n                applications: ev => {\n                    wm.showMenu(ev);\n                },\n                settings: ev => {\n                    if (wm) {\n                        wm.showSettings();\n                    }\n                },\n                exit: ev => {\n                    Init.logout();\n                }\n            };\n            this.clearButtons();\n            (this._settings.get('buttons') || []).forEach((btn, idx) => {\n                let menu = [{\n                        title: 'Remove button',\n                        onClick: () => {\n                            this.removeButton(idx);\n                        }\n                    }];\n                let callback = () => {\n                    Process.create(btn.launch);\n                };\n                if (btn.system) {\n                    menu = null;\n                    callback = function (ev) {\n                        ev.stopPropagation();\n                        systemButtons[btn.system](ev);\n                    };\n                }\n                this.addButton(btn.title, btn.icon, menu, callback, idx);\n            });\n        }\n        removeButton(index) {\n            const buttons = this._settings.get('buttons');\n            buttons.splice(index, 1);\n            this.renderButtons();\n            this._settings.save();\n        }\n        moveButton(from, to) {\n            const buttons = this._settings.get('buttons');\n            if (from === to || buttons.length <= 1) {\n                return;\n            }\n            if (to >= buttons.length) {\n                let k = to - buttons.length;\n                while (k-- + 1) {\n                    buttons.push(window.undefined);\n                }\n            }\n            buttons.splice(to, 0, buttons.splice(from, 1)[0]);\n            this._settings.save(() => {\n                this.renderButtons();\n            });\n        }\n        createButton(appName, position) {\n            const pkg = PackageManager.getPackage(appName);\n            const buttons = this._settings.get('buttons');\n            const iter = {\n                title: appName,\n                icon: pkg.icon,\n                launch: appName\n            };\n            if (!buttons.length) {\n                buttons.push(iter);\n            } else {\n                buttons.splice(position, 0, iter);\n            }\n            this.renderButtons();\n            this._settings.save();\n        }\n        addButton(title, icon, menu, callback, idx) {\n            const img = document.createElement('img');\n            img.alt = '';\n            img.src = Theme.getIcon(icon);\n            const sel = document.createElement('li');\n            sel.title = title;\n            sel.setAttribute('role', 'button');\n            sel.setAttribute('aria-label', title);\n            sel.appendChild(img);\n            Events.$bind(sel, 'click', callback, true);\n            Events.$bind(sel, 'contextmenu', function (ev) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                if (menu) {\n                    Menu.create(menu, ev);\n                }\n            });\n            GUI.createDraggable(sel, {\n                data: { position: idx },\n                onStart: function (ev, el) {\n                    setTimeout(function () {\n                        DOM.$addClass(el, 'Ghosting');\n                    }, 1);\n                },\n                onEnd: function (ev, el) {\n                    DOM.$removeClass(el, 'Ghosting');\n                }\n            });\n            this._$container.appendChild(sel);\n        }\n    };\n});"]}