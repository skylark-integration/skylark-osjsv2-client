{"version":3,"sources":["panelitems/windowlist.js"],"names":["define","PanelItem","GUI","OSjs","require","DOM","Events","WindowManager","[object Object]","super","this","entries","root","init","arguments","wm","instance","wins","getWindows","i","length","update","forEach","e","destroy","ev","win","_$container","_properties","allow_windowlist","entry","className","_wid","getElementsByClassName","el","document","createElement","title","_title","setAttribute","img","alt","src","_icon","span","appendChild","createTextNode","$bind","_restore","preventDefault","_onWindowIconClick","peeking","createDroppable","onDrop","_focus","onLeave","onEnter","inst","args","onItemDropped","item","_onDndEvent","onFilesDropped","files","_state","focused","$element","id","$unbind","$remove","parentEl","cn","_change","callback","els","l","parentNode","replace","getElementsByTagName","$empty","match","push","found","idx","event","splice"],"mappings":"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","file":"../../panelitems/windowlist.js","sourcesContent":["define(['../panelitem'], function (PanelItem) {\n    'use strict';\n    const GUI = OSjs.require('utils/gui');\n    const DOM = OSjs.require('utils/dom');\n    const Events = OSjs.require('utils/events');\n    const WindowManager = OSjs.require('core/window-manager');\n    class WindowListEntry {\n        constructor(win, className) {\n            const el = document.createElement('li');\n            el.className = className;\n            el.title = win._title;\n            el.setAttribute('role', 'button');\n            el.setAttribute('aria-label', win._title);\n            const img = document.createElement('img');\n            img.alt = win._title;\n            img.src = win._icon;\n            const span = document.createElement('span');\n            span.appendChild(document.createTextNode(win._title));\n            el.appendChild(img);\n            el.appendChild(span);\n            Events.$bind(el, 'click', function () {\n                win._restore(false, true);\n            });\n            Events.$bind(el, 'contextmenu', function (ev) {\n                ev.preventDefault();\n                if (win) {\n                    win._onWindowIconClick(ev, this);\n                }\n                return false;\n            });\n            let peeking = false;\n            GUI.createDroppable(el, {\n                onDrop: function (ev, el) {\n                    if (win) {\n                        win._focus();\n                    }\n                },\n                onLeave: function () {\n                    if (peeking) {\n                        peeking = false;\n                    }\n                },\n                onEnter: function (ev, inst, args) {\n                    if (!peeking) {\n                        if (win) {\n                            win._focus();\n                        }\n                        peeking = true;\n                    }\n                },\n                onItemDropped: function (ev, el, item, args) {\n                    if (win) {\n                        return win._onDndEvent(ev, 'itemDrop', item, args);\n                    }\n                    return false;\n                },\n                onFilesDropped: function (ev, el, files, args) {\n                    if (win) {\n                        return win._onDndEvent(ev, 'filesDrop', files, args);\n                    }\n                    return false;\n                }\n            });\n            if (win._state.focused) {\n                el.className += ' Focused';\n            }\n            this.$element = el;\n            this.id = win._wid;\n        }\n        destroy() {\n            if (this.$element) {\n                Events.$unbind(this.$element, 'click');\n                Events.$unbind(this.$element, 'contextmenu');\n                this.$element = DOM.$remove(this.$element);\n            }\n        }\n        event(ev, win, parentEl) {\n            const cn = 'WindowList_Window_' + win._wid;\n            function _change(cn, callback) {\n                const els = parentEl.getElementsByClassName(cn);\n                if (els.length) {\n                    for (let i = 0, l = els.length; i < l; i++) {\n                        if (els[i] && els[i].parentNode) {\n                            callback(els[i]);\n                        }\n                    }\n                }\n            }\n            if (ev === 'focus') {\n                _change(cn, function (el) {\n                    el.className += ' Focused';\n                });\n            } else if (ev === 'blur') {\n                _change(cn, function (el) {\n                    el.className = el.className.replace(/\\s?Focused/, '');\n                });\n            } else if (ev === 'title') {\n                _change(cn, function (el) {\n                    el.setAttribute('aria-label', win._title);\n                    const span = el.getElementsByTagName('span')[0];\n                    if (span) {\n                        DOM.$empty(span);\n                        span.appendChild(document.createTextNode(win._title));\n                    }\n                    const img = el.getElementsByTagName('img')[0];\n                    if (img) {\n                        img.alt = win._title;\n                    }\n                });\n            } else if (ev === 'icon') {\n                _change(cn, function (el) {\n                    el.getElementsByTagName('img')[0].src = win._icon;\n                });\n            } else if (ev === 'attention_on') {\n                _change(cn, function (el) {\n                    if (!el.className.match(/Attention/)) {\n                        el.className += ' Attention';\n                    }\n                });\n            } else if (ev === 'attention_off') {\n                _change(cn, function (el) {\n                    if (!el.className.match(/Attention/)) {\n                        el.className = el.className.replace(/\\s?Attention/, '');\n                    }\n                });\n            } else if (ev === 'close') {\n                return false;\n            }\n            return true;\n        }\n    }\n    return class PanelItemWindowList extends PanelItem {\n        constructor() {\n            super('PanelItemWindowList corewm-panel-expand');\n            this.entries = [];\n        }\n        init() {\n            const root = super.init(...arguments);\n            const wm = WindowManager.instance;\n            if (wm) {\n                const wins = wm.getWindows();\n                for (let i = 0; i < wins.length; i++) {\n                    if (wins[i]) {\n                        this.update('create', wins[i]);\n                    }\n                }\n            }\n            return root;\n        }\n        destroy() {\n            this.entries.forEach(function (e) {\n                try {\n                    e.destroy();\n                } catch (e) {\n                }\n                e = null;\n            });\n            this.entries = [];\n            return super.destroy(...arguments);\n        }\n        update(ev, win) {\n            if (!this._$container || win && win._properties.allow_windowlist === false) {\n                return;\n            }\n            let entry = null;\n            if (ev === 'create') {\n                const className = 'corewm-panel-ellipsis WindowList_Window_' + win._wid;\n                if (this._$container.getElementsByClassName(className).length) {\n                    return;\n                }\n                entry = new WindowListEntry(win, className);\n                this.entries.push(entry);\n                this._$container.appendChild(entry.$element);\n            } else {\n                let found = -1;\n                this.entries.forEach(function (e, idx) {\n                    if (e.id === win._wid) {\n                        found = idx;\n                    }\n                    return found !== -1;\n                });\n                entry = this.entries[found];\n                if (entry) {\n                    if (entry.event(ev, win, this._$container) === false) {\n                        entry.destroy();\n                        this.entries.splice(found, 1);\n                    }\n                }\n            }\n        }\n    };\n});"]}