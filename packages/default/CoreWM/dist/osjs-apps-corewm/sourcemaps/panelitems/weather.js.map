{"version":3,"sources":["panelitems/weather.js"],"names":["define","PanelItem","DOM","OSjs","require","Utils","Theme","Events","Connection","[object Object]","super","this","clockInterval","position","interval","$element","$image","navigator","geolocation","getCurrentPosition","pos","setTimeout","updateWeather","root","init","arguments","document","createElement","appendChild","_$container","$unbind","_$root","clearInterval","$remove","destroy","title","busy","setImage","src","setWeather","name","weather","main","desc","description","temp","icon","match","getIcon","format","lat","coords","latitude","lon","longitude","url","request","then","response","result","JSON","parse","body","e","catch","setInterval","$bind"],"mappings":"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","file":"../../panelitems/weather.js","sourcesContent":["define(['../panelitem'], function (PanelItem) {\n    'use strict';\n    const DOM = OSjs.require('utils/dom');\n    const Utils = OSjs.require('utils/misc');\n    const Theme = OSjs.require('core/theme');\n    const Events = OSjs.require('utils/events');\n    const Connection = OSjs.require('core/connection');\n    return class PanelItemWeather extends PanelItem {\n        constructor() {\n            super('PanelItemWeather corewm-panel-right corewm-panel-dummy');\n            this.clockInterval = null;\n            this.position = null;\n            this.interval = null;\n            this.$element = null;\n            this.$image = null;\n            if (navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition(pos => {\n                    this.position = pos;\n                    setTimeout(() => this.updateWeather(), 100);\n                });\n            }\n        }\n        init() {\n            const root = super.init(...arguments);\n            this.$element = document.createElement('li');\n            this.$image = document.createElement('img');\n            this.$element.appendChild(this.$image);\n            this._$container.appendChild(this.$element);\n            this.updateWeather();\n            return root;\n        }\n        destroy() {\n            Events.$unbind(this._$root, 'click');\n            this.interval = clearInterval(this.interval);\n            this.$image = DOM.$remove(this.$image);\n            this.$element = DOM.$remove(this.$element);\n            return super.destroy(...arguments);\n        }\n        updateWeather() {\n            if (!this.$image) {\n                return;\n            }\n            this.$image.title = 'Not allowed or unavailable';\n            var busy = false;\n            const setImage = src => {\n                if (this.$image) {\n                    this.$image.src = src;\n                }\n            };\n            const setWeather = (name, weather, main) => {\n                if (!this.$image) {\n                    return;\n                }\n                name = name || '<unknown location>';\n                weather = weather || {};\n                main = main || {};\n                var desc = weather.description || '<unknown weather>';\n                var temp = main.temp || '<unknown temp>';\n                if (main.temp) {\n                    temp += 'C';\n                }\n                var icon = 'sunny.png';\n                switch (desc) {\n                case 'clear sky':\n                    if (weather.icon === '01n') {\n                        icon = 'weather-clear-night.png';\n                    } else {\n                        icon = 'weather-clear.png';\n                    }\n                    break;\n                case 'few clouds':\n                    if (weather.icon === '02n') {\n                        icon = 'weather-few-clouds-night.png';\n                    } else {\n                        icon = 'weather-few-clouds.png';\n                    }\n                    break;\n                case 'scattered clouds':\n                case 'broken clouds':\n                    icon = 'weather-overcast.png';\n                    break;\n                case 'shower rain':\n                    icon = 'weather-showers.png';\n                    break;\n                case 'rain':\n                    icon = 'weather-showers-scattered.png';\n                    break;\n                case 'thunderstorm':\n                    icon = 'stock_weather-storm.png';\n                    break;\n                case 'snow':\n                    icon = 'stock_weather-snow.png';\n                    break;\n                case 'mist':\n                    icon = 'stock_weather-fog.png';\n                    break;\n                default:\n                    if (desc.match(/rain$/)) {\n                        icon = 'weather-showers-scattered.png';\n                    }\n                    break;\n                }\n                var src = Theme.getIcon('status/' + icon);\n                this.$image.title = Utils.format('{0} - {1} - {2}', name, desc, temp);\n                setImage(src);\n            };\n            const updateWeather = () => {\n                if (busy || !this.position) {\n                    return;\n                }\n                busy = true;\n                var lat = this.position.coords.latitude;\n                var lon = this.position.coords.longitude;\n                var unt = 'metric';\n                var key = '4ea33327bcfa4ea0293b2d02b6fda385';\n                var url = Utils.format('http://api.openweathermap.org/data/2.5/weather?lat={0}&lon={1}&units={2}&APPID={3}', lat, lon, unt, key);\n                Connection.request('curl', { url: url }).then(response => {\n                    if (response) {\n                        var result = null;\n                        try {\n                            result = JSON.parse(response.body);\n                        } catch (e) {\n                        }\n                        if (result) {\n                            setWeather(result.name, result.weather ? result.weather[0] : null, result.main);\n                        }\n                    }\n                    busy = false;\n                }).catch(() => {\n                    busy = false;\n                });\n            };\n            setImage(Theme.getIcon('status/weather-severe-alert.png'));\n            this.interval = setInterval(function () {\n                updateWeather();\n            }, 60 * 60 * 1000);\n            Events.$bind(this._$root, 'click', () => updateWeather());\n            setTimeout(() => updateWeather(), 1000);\n        }\n    };\n});"]}