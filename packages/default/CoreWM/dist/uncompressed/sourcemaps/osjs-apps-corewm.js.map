{"version":3,"sources":["osjs-apps-corewm.js"],"names":[],"mappingsfile":"../osjs-apps-corewm.js","sourcesContent":["define('osjs-apps-corewm/locales',[],function () {\n    'use strict';\n    return {\n        bg_BG: {\n            'Killing this process will stop things from working!': 'Прекратяването на този процес ще спре някой приложения!',\n            'Open settings': 'Отвори настойки',\n            'Your panel has no items. Go to settings to reset default or modify manually\\n(This error may occur after upgrades of OS.js)': 'Вашият панел няма обекти. Отидете в настойки за да върнете по подразбиране или да модифицирате ръчно\\n(Тази грешка може да се появи след актуализация на OS.js)',\n            'Create shortcut': 'Създай пряк път',\n            'Set as wallpaper': 'Направи изображение за фон',\n            'An error occured while creating PanelItem: {0}': 'Появи се грешка докато се създаваше панелен обект: {0}',\n            'Development': 'Разработка',\n            'Education': 'Образование',\n            'Games': 'Игри',\n            'Graphics': 'Графика',\n            'Network': 'Мрежа',\n            'Multimedia': 'Мултимедия',\n            'Office': 'Офис',\n            'System': 'Система',\n            'Utilities': 'Инструменти',\n            'Other': 'Други'\n        },\n        de_DE: {\n            'Killing this process will stop things from working!': 'Das Beenden dieses Prozesses wird Konsequenzen haben!',\n            'Open settings': 'Einstellungen öffnen',\n            'Your panel has no items. Go to settings to reset default or modify manually\\n(This error may occur after upgrades of OS.js)': 'Ihr Panel enthält keine Items. Öffnen Sie die Einstellungen um die Panel-Einstellungen zurückzusetzen oder manuell zu ändern (Dieser Fehler kann nach einem Upgrade von OS.js entstehen)',\n            'Create shortcut': 'Verknüpfung erstellen',\n            'Set as wallpaper': 'Als Hintergrund verwenden',\n            'An error occured while creating PanelItem: {0}': 'Während des Erstellens eines Panel-Items ist folgender Fehler aufgetreten: {0}',\n            'Development': 'Entwicklung',\n            'Education': 'Bildung',\n            'Games': 'Spiele',\n            'Graphics': 'Grafik',\n            'Network': 'Netzwerk',\n            'Multimedia': 'Multimedia',\n            'Office': 'Büro',\n            'System': 'System',\n            'Utilities': 'Zubehör',\n            'Other': 'Andere'\n        },\n        es_ES: {\n            'Killing this process will stop things from working!': '\\xA1Forzar la terminación de este proceso hará que las cosas dejen de funcionar!',\n            'Open settings': 'Abrir preferencias',\n            'Your panel has no items. Go to settings to reset default or modify manually\\n(This error may occur after upgrades of OS.js)': 'Tu panel no tiene elementos. Restablece los valores por defecto en las preferencias, o modifícalo manualmente\\n(Este error puede aparecer tras una actualización de OS.js)',\n            'Create shortcut': 'Crear acceso directo',\n            'Set as wallpaper': 'Seleccionar como fondo de pantalla',\n            'An error occured while creating PanelItem: {0}': 'Se produjo un error al crear el PanelItem: {0}',\n            'Development': 'Desarrollo',\n            'Education': 'Educación',\n            'Games': 'Juegos',\n            'Graphics': 'Gráficos',\n            'Network': 'Red',\n            'Multimedia': 'Multimedia',\n            'Office': 'Ofimática',\n            'System': 'Sistema',\n            'Utilities': 'Herramientas',\n            'Other': 'Otros'\n        },\n        fr_FR: {\n            'Killing this process will stop things from working!': \"Tuer ce processus va arrêter d'autres éléments de fonctionner !\",\n            'Open settings': 'Ouvrir les paramètres',\n            'Your panel has no items. Go to settings to reset default or modify manually\\n(This error may occur after upgrades of OS.js)': \"Votre panneau n'a aucun objet. Rendez-vous dans les paramètres pour remettre à zéro ou modifier manuellement\\n(Cette erreur peut survenir après avori mis à jour OS.js)\",\n            'Create shortcut': 'Créer un raccourci',\n            'Set as wallpaper': \"Définir un fond d'écran\",\n            'An error occured while creating PanelItem: {0}': 'Une erreur est survenue pendant la création du PanelItem: {0}',\n            'Show Icons': 'Afficher les icônes',\n            'Hide Icons': 'Cacher les icônes',\n            'Development': 'Développement',\n            'Education': 'Éducation',\n            'Games': 'Jeux',\n            'Graphics': 'Graphique',\n            'Network': 'Réseau',\n            'Multimedia': 'Multimédia',\n            'Office': 'Bureautique',\n            'System': 'Système',\n            'Utilities': 'Utilitaires',\n            'Other': 'Autre'\n        },\n        ar_DZ: {\n            'Killing this process will stop things from working!': 'إنهاء هذا البرنامج سيوقف الأشياء عن العمل',\n            'Open settings': 'فتح الإعدادات',\n            'Your panel has no items. Go to settings to reset default or modify manually\\n(This error may occur after upgrades of OS.js)': 'لايوجد أي شيء في لوحتك\\u060C إذهب إلى إعدادات وقم بإستعادة الأشياء إلى الحالة الإفتراضية أو غيرها يدويا (يحدث هذا أحيانا عند تحديث الـ OS.js)',\n            'Create shortcut': 'إنشاء إختصار',\n            'Set as wallpaper': 'وضع كخلفية سطح المكتب',\n            'An error occured while creating PanelItem: {0}': 'حدث خطأ أثناء إنشاء عنصر في اللوحة: {0}',\n            'Show Icons': 'إظهار الأيقونات',\n            'Hide Icons': 'إخفاء الأيقونات',\n            'Development': 'تطوير',\n            'Education': 'تعليم',\n            'Games': 'ألعاب',\n            'Graphics': 'رسومات',\n            'Network': 'شبكة',\n            'Multimedia': 'تعدد الوسائط',\n            'Office': 'مكتبيات',\n            'System': 'نظام',\n            'Utilities': 'أدوات',\n            'Other': 'أخرى'\n        },\n        it_IT: {\n            'Killing this process will stop things from working!': 'Terminare questo processo bloccherà altre funzionalità!',\n            'Open settings': 'Apri settaggi',\n            'Your panel has no items. Go to settings to reset default or modify manually\\n(This error may occur after upgrades of OS.js)': 'Il tuo pannello non ha elementi. Vai nei settaggi per resettare ai valori predefiniti o modificarli manualmente\\n(Questo errore può accadere dopo un aggiornamento di OS.js)',\n            'Create shortcut': 'Crea colelgamento',\n            'Set as wallpaper': 'Imposta come sfondo desktop',\n            'An error occured while creating PanelItem: {0}': 'Si è verificato un errore nella creazione del PanelItem: {0}',\n            'Show Icons': 'Mostra icone',\n            'Hide Icons': 'Nascondi icone',\n            'Development': 'Sviluppo',\n            'Education': 'Educazione',\n            'Games': 'Giochi',\n            'Graphics': 'Grafica',\n            'Network': 'Reti',\n            'Multimedia': 'Multimedia',\n            'Office': 'Ufficio',\n            'System': 'Sistema',\n            'Utilities': 'Utilità',\n            'Other': 'Altro'\n        },\n        ko_KR: {\n            'Killing this process will stop things from working!': '이 프로세스를 종료 할 시 작업 중인 것들이 종료됩니다!',\n            'Open settings': '환경설정 열기',\n            'Your panel has no items. Go to settings to reset default or modify manually\\n(This error may occur after upgrades of OS.js)': '패널에 항목이 없습니다. 환경설정에서 초기화하거나 직접 수정하여 주십시오.\\n(이 오류는 OS.js의 업그레이드 후 발생하는 문제일 수도 있습니다)',\n            'Create shortcut': '단축키 생성',\n            'Set as wallpaper': '바탕화면으로 지정',\n            'An error occured while creating PanelItem: {0}': '해당 패널 항목 생성 중 오류가 발생 하였습니다: {0}',\n            'Development': '개발',\n            'Education': '교육',\n            'Games': '게임',\n            'Graphics': '그래픽',\n            'Network': '네트워크',\n            'Multimedia': '멀티미디어',\n            'Office': '오피스',\n            'System': '시스템',\n            'Utilities': '유틸리티',\n            'Other': '기타'\n        },\n        nl_NL: {\n            'Killing this process will stop things from working!': 'Het stoppen van dit proces zal er voor zorgen dat dingen niet meer werken!',\n            'Open settings': 'Instellingen openen',\n            'Your panel has no items. Go to settings to reset default or modify manually\\n(This error may occur after upgrades of OS.js)': 'Het paneel bevat geen items. Ga naar instellingen om te herstellen naar de standaard of om handmatig te wijzigen\\n(Deze fout kan het gevolg zijn van een update van OS.js)',\n            'Create shortcut': 'Maak een link',\n            'Set as wallpaper': 'Als achtergrond gebruiken',\n            'An error occured while creating PanelItem: {0}': 'Er is een fout opgetreden tijdens het maken van paneel item: {0}',\n            'Development': 'Ontwikkeling',\n            'Education': 'Educatie',\n            'Games': 'Spellen',\n            'Graphics': 'Grafisch',\n            'Network': 'Netwerk',\n            'Multimedia': 'Multimedia',\n            'Office': 'Kantoor',\n            'System': 'Systeem',\n            'Utilities': 'Toebehoren',\n            'Other': 'Overig'\n        },\n        no_NO: {\n            'Killing this process will stop things from working!': 'Dreping av denne prosessen vil få konsekvenser!',\n            'Open settings': 'Åpne instillinger',\n            'Your panel has no items. Go to settings to reset default or modify manually\\n(This error may occur after upgrades of OS.js)': 'Ditt panel har ingen objekter. Gå til instillinger for å nullstille eller modifisere manuelt\\n(Denne feilen kan oppstå etter en oppdatering av OS.js)',\n            'Create shortcut': 'Lag snarvei',\n            'Set as wallpaper': 'Sett som bakgrunn',\n            'An error occured while creating PanelItem: {0}': 'En feil oppstod under lasting av PanelItem: {0}',\n            'Show Icons': 'Vis Ikoner',\n            'Hide Icons': 'Skjul Ikoner',\n            'Create in {0}': 'Opprett i {0}',\n            'Development': 'Utvikling',\n            'Education': 'Utdanning',\n            'Games': 'Spill',\n            'Graphics': 'Grafikk',\n            'Network': 'Nettverk',\n            'Multimedia': 'Multimedia',\n            'Office': 'Kontor',\n            'System': 'System',\n            'Utilities': 'Verktøy',\n            'Other': 'Andre'\n        },\n        pl_PL: {\n            'Killing this process will stop things from working!': 'Zabicie tego procesu zatrzyma wykonywanie działań!',\n            'Open settings': 'Otwórz ustawienia',\n            'Your panel has no items. Go to settings to reset default or modify manually\\n(This error may occur after upgrades of OS.js)': 'Twój panel nie ma elementów. Idź do ustawień aby przywrócić domyślne lub zmień ręcznie\\n(Ten błąd może wystąpić po aktualizacji OS.js)',\n            'Create shortcut': 'Utwórz skrót',\n            'Set as wallpaper': 'Ustaw jako tapetę',\n            'An error occured while creating PanelItem: {0}': 'Wystąpił błąd podczas tworzenia PanelItem: {0}',\n            'Show Icons': 'Pokaż Ikony',\n            'Hide Icons': 'Ukryj Ikony',\n            'Development': 'Development',\n            'Education': 'Edukacja',\n            'Games': 'Gry',\n            'Graphics': 'Graficzne',\n            'Network': 'Sieć',\n            'Multimedia': 'Multimedia',\n            'Office': 'Biuro',\n            'System': 'System',\n            'Utilities': 'Użytkowe',\n            'Other': 'Inne'\n        },\n        ru_RU: {\n            'Killing this process will stop things from working!': 'Завершение этого процесса остановит работу системы!',\n            'Open settings': 'Открыть настройки',\n            'Your panel has no items. Go to settings to reset default or modify manually\\n(This error may occur after upgrades of OS.js)': 'На вашей панели отсутствуют элементы. Откройте настройки для сброса панели к начальному состоянию или ручной настройки\\n(Эта ошибка может произойти после обновления OS.js)',\n            'Create shortcut': 'Создать ярлык',\n            'Set as wallpaper': 'Установить как обои',\n            'An error occured while creating PanelItem: {0}': 'Произошла обшибка при создании PanelItem: {0}',\n            'Development': 'Разработка',\n            'Education': 'Образование',\n            'Games': 'Игры',\n            'Graphics': 'Графика',\n            'Network': 'Интернет',\n            'Multimedia': 'Мультимедиа',\n            'Office': 'Офис',\n            'System': 'Система',\n            'Utilities': 'Утилиты',\n            'Other': 'Другое'\n        },\n        sk_SK: {\n            'Open settings': 'Otvor nastavenia',\n            'Create shortcut': 'Vytvor linku',\n            'Set as wallpaper': 'Nastav ako tapetu',\n            'An error occured while creating PanelItem: {0}': 'Chyba pri vytváraní položky: {0}',\n            'Development': 'Vývoj',\n            'Education': 'Vzdelávanie',\n            'Games': 'Hry',\n            'Graphics': 'Grafika',\n            'Network': 'Sieť',\n            'Multimedia': 'Multimédiá',\n            'Office': 'Kancelária',\n            'System': 'Systém',\n            'Utilities': 'Pomôcky',\n            'Other': 'Ostatné'\n        },\n        tr_TR: {\n            'Open settings': 'Ayarları Aç',\n            'Create shortcut': 'Kısayol Oluştur',\n            'Set as wallpaper': 'Arkaplan olarak ayarla',\n            'An error occured while creating PanelItem: {0}': '{0} oluşturulurken bir hata meydana geldi',\n            'Development': 'Geliştirici',\n            'Education': 'Eğitim',\n            'Games': 'Oyunlar',\n            'Graphics': 'Grafikler',\n            'Network': 'Ağ',\n            'Multimedia': 'Multimedia',\n            'Office': 'Ofis',\n            'System': 'Sistem',\n            'Utilities': 'Yan Gereksinimler',\n            'Other': 'Diğer'\n        },\n        vi_VN: {\n            'Killing this process will stop things from working!': 'Đóng quá trình này sẽ làm mọi thứ bị tắt!',\n            'Open settings': 'Mở cài đặt',\n            'Your panel has no items. Go to settings to reset default or modify manually\\n(This error may occur after upgrades of OS.js)': 'Bảng điều khiển của bạn không có mục nào. Vào cài đặt để thiết lập lại mặc định hoặc sửa đổi bằng tay\\n(Lỗi này có thể xảy ra sau khi nâng cấp OS.js)',\n            'Create shortcut': 'Tạo lối tắt',\n            'Set as wallpaper': 'Đặt làm hình nền',\n            'An error occured while creating PanelItem: {0}': 'Có lỗi xảy ra trong khi tạo PanelItem: {0}',\n            'Show Icons': 'Hiện các biểu tượng',\n            'Hide Icons': 'Ẩn các biểu tượng',\n            'Create in {0}': 'Tạo trong {0}',\n            'Development': 'Phát triển',\n            'Education': 'Giáo dục',\n            'Games': 'Trò chơi',\n            'Graphics': 'Đồ họa',\n            'Network': 'Mạng',\n            'Multimedia': 'Đa phương tiện',\n            'Office': 'Văn phòng',\n            'System': 'Hệ thống',\n            'Utilities': 'Tiện ích',\n            'Other': 'Khác'\n        }\n    };\n});\ndefine('osjs-apps-corewm/windowswitcher',[],function () {\n    'use strict';\n    const DOM = OSjs.require('utils/dom');\n    return class WindowSwitcher {\n        constructor() {\n            this.$switcher = null;\n            this.showing = false;\n            this.index = -1;\n            this.winRef = null;\n        }\n        destroy() {\n            this._remove();\n        }\n        _remove() {\n            if (this.$switcher) {\n                if (this.$switcher.parentNode) {\n                    this.$switcher.parentNode.removeChild(this.$switcher);\n                }\n                this.$switcher = null;\n            }\n        }\n        show(ev, win, wm) {\n            win = win || wm.getLastWindow();\n            ev.preventDefault();\n            var height = 0;\n            var items = [];\n            var index = 0;\n            if (!this.$switcher) {\n                this.$switcher = document.createElement('corewm-window-switcher');\n            } else {\n                DOM.$empty(this.$switcher);\n            }\n            var container, image, label, iter;\n            for (var i = 0; i < wm._windows.length; i++) {\n                iter = wm._windows[i];\n                if (iter) {\n                    container = document.createElement('div');\n                    image = document.createElement('img');\n                    image.src = iter._icon;\n                    label = document.createElement('span');\n                    label.innerHTML = iter._title;\n                    container.appendChild(image);\n                    container.appendChild(label);\n                    this.$switcher.appendChild(container);\n                    height += 32;\n                    if (win && win._wid === iter._wid) {\n                        index = i;\n                    }\n                    items.push({\n                        element: container,\n                        win: iter\n                    });\n                }\n            }\n            if (!this.$switcher.parentNode) {\n                document.body.appendChild(this.$switcher);\n            }\n            this.$switcher.style.height = height + 'px';\n            this.$switcher.style.marginTop = (height ? -(height / 2 << 0) : 0) + 'px';\n            if (this.showing) {\n                this.index++;\n                if (this.index > items.length - 1) {\n                    this.index = -1;\n                }\n            } else {\n                this.index = index;\n                this.showing = true;\n            }\n            console.debug('WindowSwitcher::show()', this.index);\n            if (items[this.index]) {\n                items[this.index].element.className = 'Active';\n                this.winRef = items[this.index].win;\n            } else {\n                this.winRef = null;\n            }\n        }\n        hide(ev, win, wm) {\n            if (!this.showing) {\n                return;\n            }\n            ev.preventDefault();\n            this._remove();\n            win = this.winRef || win;\n            if (win) {\n                win._focus();\n            }\n            this.winRef = null;\n            this.index = -1;\n            this.showing = false;\n        }\n    };\n});\ndefine('osjs-apps-corewm/iconview',['./locales'], function (Translations) {\n    'use strict';\n    const _ = OSjs.require('core/locales').createLocalizer(Translations);\n    const FS = OSjs.require('utils/fs');\n    const Menu = OSjs.require('gui/menu');\n    const DOM = OSjs.require('utils/dom');\n    const GUI = OSjs.require('utils/gui');\n    const VFS = OSjs.require('vfs/fs');\n    const Process = OSjs.require('core/process');\n    const Theme = OSjs.require('core/theme');\n    const Dialog = OSjs.require('core/dialog');\n    const FileMetadata = OSjs.require('vfs/file');\n    const MountManager = OSjs.require('core/mount-manager');\n    const GUIElement = OSjs.require('gui/element');\n    const WindowManager = OSjs.require('core/window-manager');\n    function createCreateDialog(title, dir, cb) {\n        Dialog.create('Input', {\n            value: title,\n            message: _('Create in {0}', dir)\n        }, function (ev, button, result) {\n            if (result) {\n                cb(new FileMetadata(FS.pathJoin(dir, result)));\n            }\n        });\n    }\n    class IconViewShortcutDialog extends Dialog {\n        constructor(item, scheme, closeCallback) {\n            super('IconViewShortcutDialog', {\n                title: 'Edit Launcher',\n                icon: 'status/appointment-soon.png',\n                width: 400,\n                height: 220,\n                allow_maximize: false,\n                allow_resize: false,\n                allow_minimize: false\n            }, () => {\n            });\n            this.scheme = scheme;\n            this.values = {\n                path: item.path,\n                filename: item.filename,\n                args: item.args || {}\n            };\n            this.cb = closeCallback || function () {\n            };\n        }\n        init(wm, app) {\n            const root = super.init(...arguments);\n            this._render(this._name, this.scheme);\n            this._find('InputShortcutLaunch').set('value', this.values.path);\n            this._find('InputShortcutLabel').set('value', this.values.filename);\n            this._find('InputTooltipFormatString').set('value', JSON.stringify(this.values.args || {}));\n            this._find('ButtonApply').on('click', () => {\n                this.applySettings();\n                this._close('ok');\n            });\n            this._find('ButtonCancel').on('click', () => {\n                this._close();\n            });\n            return root;\n        }\n        applySettings() {\n            this.values.path = this._find('InputShortcutLaunch').get('value');\n            this.values.filename = this._find('InputShortcutLabel').get('value');\n            this.values.args = JSON.parse(this._find('InputTooltipFormatString').get('value') || {});\n        }\n        _close(button) {\n            this.cb(button, this.values);\n            return super._close(...arguments);\n        }\n    }\n    return class DesktopIconView {\n        constructor(wm) {\n            this.dialog = null;\n            this.$iconview = null;\n            this.$element = document.createElement('gui-icon-view');\n            this.$element.setAttribute('data-multiple', 'false');\n            this.$element.id = 'CoreWMDesktopIconView';\n            this.shortcutCache = [];\n            this.refreshTimeout = null;\n            GUI.createDroppable(this.$element, {\n                onOver: function (ev, el, args) {\n                    wm.onDropOver(ev, el, args);\n                },\n                onLeave: function () {\n                    wm.onDropLeave();\n                },\n                onDrop: function () {\n                    wm.onDrop();\n                },\n                onItemDropped: function (ev, el, item, args) {\n                    wm.onDropItem(ev, el, item, args);\n                },\n                onFilesDropped: function (ev, el, files, args) {\n                    wm.onDropFile(ev, el, files, args);\n                }\n            });\n            this.$iconview = GUIElement.createFromNode(this.$element);\n            this.$iconview.build();\n            this.$iconview.on('select', () => {\n                if (wm) {\n                    const win = wm.getCurrentWindow();\n                    if (win) {\n                        win._blur();\n                    }\n                }\n            }).on('activate', ev => {\n                if (ev && ev.detail) {\n                    ev.detail.entries.forEach(entry => {\n                        const item = entry.data;\n                        const file = new FileMetadata(item);\n                        Process.createFromFile(file, item.args);\n                    });\n                }\n            }).on('contextmenu', ev => {\n                if (ev && ev.detail && ev.detail.entries) {\n                    this.createContextMenu(ev.detail.entries[0], ev);\n                }\n            });\n            this._refresh();\n        }\n        destroy() {\n            DOM.$remove(this.$element);\n            this.refreshTimeout = clearTimeout(this.refreshTimeout);\n            this.$element = null;\n            this.$iconview = null;\n            if (this.dialog) {\n                this.dialog.destroy();\n            }\n            this.dialog = null;\n            this.shortcutCache = [];\n        }\n        blur() {\n            const cel = GUIElement.createFromNode(this.$element);\n            cel.set('value', null);\n        }\n        getRoot() {\n            return this.$element;\n        }\n        resize(wm) {\n            const el = this.getRoot();\n            const s = wm.getWindowSpace();\n            if (el) {\n                el.style.top = s.top + 'px';\n                el.style.left = s.left + 'px';\n                el.style.width = s.width + 'px';\n                el.style.height = s.height + 'px';\n            }\n        }\n        _refresh(wm) {\n            const desktopPath = WindowManager.instance.getSetting('desktopPath');\n            const shortcutPath = FS.pathJoin(desktopPath, '.shortcuts.json');\n            this.shortcutCache = [];\n            this.refreshTimeout = clearTimeout(this.refreshTimeout);\n            this.refreshTimeout = setTimeout(() => {\n                VFS.scandir(desktopPath, { backlink: false }).then(result => {\n                    if (this.$iconview) {\n                        const entries = result.map(iter => {\n                            if (iter.type === 'application' || iter.shortcut === true) {\n                                const niter = new FileMetadata(iter);\n                                niter.shortcut = true;\n                                const idx = this.shortcutCache.push(niter) - 1;\n                                const file = new FileMetadata(iter);\n                                file.__index = idx;\n                                return {\n                                    _type: iter.type,\n                                    icon: Theme.getFileIcon(iter, '32x32'),\n                                    label: iter.filename,\n                                    value: file,\n                                    args: iter.args || {}\n                                };\n                            }\n                            return {\n                                _type: 'vfs',\n                                icon: Theme.getFileIcon(iter, '32x32'),\n                                label: iter.filename,\n                                value: iter\n                            };\n                        }).filter(function (iter) {\n                            return iter.value.path !== shortcutPath;\n                        });\n                        this.$iconview.clear().add(entries);\n                    }\n                });\n            }, 150);\n        }\n        _save(refresh) {\n            const desktopPath = WindowManager.instance.getSetting('desktopPath');\n            const path = FS.pathJoin(desktopPath, '.shortcuts.json');\n            const cache = this.shortcutCache;\n            VFS.mkdir(FS.dirname(path)).finally(() => {\n                VFS.write(path, JSON.stringify(cache, null, 4)).then(() => {\n                    if (refresh) {\n                        this._refresh();\n                    }\n                });\n            });\n        }\n        updateShortcut(data, values) {\n            const o = this.shortcutCache[data.__index];\n            if (o.path === data.path) {\n                Object.keys(values).forEach(function (k) {\n                    o[k] = values[k];\n                });\n                this._save(true);\n            }\n        }\n        getShortcutByPath(path) {\n            let found = null;\n            let index = -1;\n            this.shortcutCache.forEach(function (i, idx) {\n                if (!found) {\n                    if (i.type !== 'application' && i.path === path) {\n                        found = i;\n                        index = idx;\n                    }\n                }\n            });\n            return {\n                item: found,\n                index: index\n            };\n        }\n        addShortcut(data, wm, save) {\n            ['icon'].forEach(function (k) {\n                if (data[k]) {\n                    delete data[k];\n                }\n            });\n            if (data.type === 'application') {\n                data.args = data.args || {};\n            }\n            data.shortcut = true;\n            this.shortcutCache.push(data);\n            this._save(true);\n        }\n        removeShortcut(data) {\n            const o = this.shortcutCache[data.__index];\n            if (o && o.path === data.path) {\n                this.shortcutCache.splice(data.__index, 1);\n                this._save(true);\n            }\n        }\n        _getContextMenu(item) {\n            const desktopPath = WindowManager.instance.getSetting('desktopPath');\n            const menu = [\n                {\n                    title: _('LBL_UPLOAD'),\n                    onClick: () => {\n                        Dialog.create('FileUpload', { dest: desktopPath }, () => {\n                            this._refresh();\n                        });\n                    }\n                },\n                {\n                    title: _('LBL_CREATE'),\n                    menu: [\n                        {\n                            title: _('LBL_FILE'),\n                            onClick: () => {\n                                createCreateDialog('New file', desktopPath, f => {\n                                    VFS.write(f, '').catch(err => {\n                                        OSjs.error('CoreWM', _('ERR_VFSMODULE_MKFILE'), err);\n                                    });\n                                });\n                            }\n                        },\n                        {\n                            title: _('LBL_DIRECTORY'),\n                            onClick: () => {\n                                createCreateDialog('New directory', desktopPath, f => {\n                                    VFS.mkdir(f).catch(err => {\n                                        OSjs.error('CoreWM', _('ERR_VFSMODULE_MKDIR'), err);\n                                    });\n                                });\n                            }\n                        }\n                    ]\n                }\n            ];\n            if (item && item.data) {\n                const file = item.data;\n                if (file.type === 'application') {\n                    menu.push({\n                        title: _('Edit shortcut'),\n                        onClick: () => this.openShortcutEdit(file)\n                    });\n                }\n                const m = MountManager.getModuleFromPath(file.path);\n                if (!m || m.option('root') !== desktopPath) {\n                    menu.push({\n                        title: _('Remove shortcut'),\n                        onClick: () => this.removeShortcut(file)\n                    });\n                } else {\n                    menu.push({\n                        title: _('LBL_DELETE'),\n                        onClick: () => VFS.unlink(file)\n                    });\n                }\n            }\n            return menu;\n        }\n        createContextMenu(item, ev) {\n            const wm = WindowManager.instance;\n            const menu = wm._getContextMenu(item);\n            Menu.create(menu, ev);\n        }\n        openShortcutEdit(item) {\n            if (this.dialog) {\n                this.dialog._close();\n            }\n            const wm = WindowManager.instance;\n            this.dialog = new IconViewShortcutDialog(item, wm._scheme, (button, values) => {\n                if (button === 'ok') {\n                    this.updateShortcut(item, values);\n                }\n                this.dialog = null;\n            });\n            wm.addWindow(this.dialog, true);\n        }\n    };\n});\ndefine('osjs-apps-corewm/panelitem',['./locales'], function (Translations) {\n    'use strict';\n    const _ = OSjs.require('core/locales').createLocalizer(Translations);\n    const Menu = OSjs.require('gui/menu');\n    const DOM = OSjs.require('utils/dom');\n    const Events = OSjs.require('utils/events');\n    const SettingsFragment = OSjs.require('helpers/settings-fragment');\n    const WindowManager = OSjs.require('core/window-manager');\n    return class PanelItem {\n        static metadata() {\n            return {\n                name: 'PanelItem',\n                description: 'PanelItem Description',\n                icon: 'actions/stock_about.png',\n                hasoptions: false\n            };\n        }\n        constructor(className, itemName, settings, defaults) {\n            this._$root = null;\n            this._$container = null;\n            this._className = className || 'Unknown';\n            this._itemName = itemName || className.split(' ')[0];\n            this._settings = null;\n            this._settingsDialog = null;\n            if (settings && settings instanceof SettingsFragment && defaults) {\n                this._settings = settings.mergeDefaults(defaults);\n            }\n        }\n        init() {\n            this._$root = document.createElement('corewm-panel-item');\n            this._$root.className = this._className;\n            this._$container = document.createElement('ul');\n            this._$container.setAttribute('role', 'toolbar');\n            this._$container.className = 'corewm-panel-buttons';\n            if (this._settings) {\n                var title = _('Open {0} Settings', _(this._itemName));\n                Events.$bind(this._$root, 'contextmenu', ev => {\n                    ev.preventDefault();\n                    Menu.create([{\n                            title: title,\n                            onClick: () => this.openSettings()\n                        }], ev);\n                });\n            }\n            this._$root.appendChild(this._$container);\n            return this._$root;\n        }\n        destroy() {\n            if (this._settingsDialog) {\n                this._settingsDialog.destroy();\n            }\n            Events.$unbind(this._$root, 'contextmenu');\n            this._settingsDialog = null;\n            this._$root = DOM.$remove(this._$root);\n            this._$container = DOM.$remove(this._$container);\n        }\n        applySettings() {\n        }\n        openSettings(DialogRef, args) {\n            if (this._settingsDialog) {\n                this._settingsDialog._restore();\n                return false;\n            }\n            var wm = WindowManager.instance;\n            if (DialogRef) {\n                this._settingsDialog = new DialogRef(this, wm._scheme, button => {\n                    if (button === 'ok') {\n                        this.applySettings();\n                    }\n                    this._settingsDialog = null;\n                });\n                wm.addWindow(this._settingsDialog, true);\n            }\n            return true;\n        }\n        getRoot() {\n            return this._$root;\n        }\n    };\n});\ndefine('osjs-apps-corewm/panel',[\n    './locales',\n    './panelitem'\n], function (Translations, PanelItem) {\n    'use strict';\n    const _ = OSjs.require('core/locales').createLocalizer(Translations);\n    const DOM = OSjs.require('utils/dom');\n    const Events = OSjs.require('utils/events');\n    const Menu = OSjs.require('gui/menu');\n    const WindowManager = OSjs.require('core/window-manager');\n    const PANEL_SHOW_TIMEOUT = 150;\n    const PANEL_HIDE_TIMEOUT = 600;\n    return class Panel {\n        constructor(name, options, wm) {\n            options = options || {};\n            this._name = name;\n            this._$element = null;\n            this._$container = null;\n            this._items = [];\n            this._outtimeout = null;\n            this._intimeout = null;\n            this._options = options.mergeDefaults({ position: 'top' });\n            console.debug('Panel::construct()', this._name, this._options.get());\n        }\n        init(root) {\n            var wm = WindowManager.instance;\n            function createMenu(ev) {\n                var menu = [{\n                        title: _('Open Panel Settings'),\n                        onClick: function (ev) {\n                            wm.showSettings('panel');\n                        }\n                    }];\n                if (wm.getSetting('useTouchMenu') === true) {\n                    menu.push({\n                        title: _('Turn off TouchMenu'),\n                        onClick: function (ev) {\n                            wm.applySettings({ useTouchMenu: false }, false, true);\n                        }\n                    });\n                } else {\n                    menu.push({\n                        title: _('Turn on TouchMenu'),\n                        onClick: function (ev) {\n                            wm.applySettings({ useTouchMenu: true }, false, true);\n                        }\n                    });\n                }\n                Menu.create(menu, ev);\n            }\n            this._$container = document.createElement('corewm-panel-container');\n            this._$element = document.createElement('corewm-panel');\n            this._$element.setAttribute('data-orientation', 'horizontal');\n            this._$element.setAttribute('role', 'toolbar');\n            Events.$bind(this._$element, 'mouseover', ev => {\n                this.onMouseOver(ev);\n            });\n            Events.$bind(this._$element, 'mouseout', ev => {\n                this.onMouseOut(ev);\n            });\n            Events.$bind(this._$element, 'contextmenu', function (ev) {\n                if (!ev.target || ev.target.getAttribute('role') !== 'button') {\n                    createMenu(ev);\n                }\n            });\n            Events.$bind(document, 'mouseout:panelmouseleave', ev => {\n                this.onMouseLeave(ev);\n            }, false);\n            this._$element.appendChild(this._$container);\n            root.appendChild(this._$element);\n            setTimeout(() => this.update(), 0);\n        }\n        destroy() {\n            this._clearTimeouts();\n            Events.$unbind(document, 'mouseout:panelmouseleave');\n            Events.$unbind(this._$element);\n            this._items.forEach(function (item) {\n                item.destroy();\n            });\n            this._items = [];\n            this._$element = DOM.$remove(this._$element);\n            this._$container = null;\n        }\n        update(options) {\n            options = options || this._options.get();\n            var attrs = {\n                ontop: !!options.ontop,\n                position: options.position || 'bottom'\n            };\n            if (options.autohide) {\n                this.onMouseOut();\n            }\n            if (this._$element) {\n                Object.keys(attrs).forEach(k => {\n                    this._$element.setAttribute('data-' + k, typeof attrs[k] === 'boolean' ? attrs[k] ? 'true' : 'false' : attrs[k]);\n                });\n            }\n            this._options.set(null, options);\n        }\n        autohide(hide) {\n            if (!this._options.get('autohide') || !this._$element) {\n                return;\n            }\n            if (hide) {\n                this._$element.setAttribute('data-autohide', 'true');\n            } else {\n                this._$element.setAttribute('data-autohide', 'false');\n            }\n        }\n        _clearTimeouts() {\n            if (this._outtimeout) {\n                clearTimeout(this._outtimeout);\n                this._outtimeout = null;\n            }\n            if (this._intimeout) {\n                clearTimeout(this._intimeout);\n                this._intimeout = null;\n            }\n        }\n        onMouseLeave(ev) {\n            var from = ev.relatedTarget || ev.toElement;\n            if (!from || from.nodeName === 'HTML') {\n                this.onMouseOut(ev);\n            }\n        }\n        onMouseOver() {\n            this._clearTimeouts();\n            this._intimeout = setTimeout(() => {\n                this.autohide(false);\n            }, PANEL_SHOW_TIMEOUT);\n        }\n        onMouseOut() {\n            this._clearTimeouts();\n            this._outtimeout = setTimeout(() => {\n                this.autohide(true);\n            }, PANEL_HIDE_TIMEOUT);\n        }\n        addItem(item) {\n            if (!(item instanceof PanelItem)) {\n                throw 'Expected a PanelItem in Panel::addItem()';\n            }\n            this._items.push(item);\n            this._$container.appendChild(item.init());\n        }\n        isAutoHidden() {\n            if (this._$element) {\n                return this._$element.getAttribute('data-autohide') === 'true';\n            }\n            return false;\n        }\n        getItemByType(type) {\n            return this.getItem(type);\n        }\n        getItemsByType(type) {\n            return this.getItem(type, true);\n        }\n        getItem(type, multiple) {\n            var result = multiple ? [] : null;\n            this._items.forEach(function (item, idx) {\n                if (item instanceof type) {\n                    if (multiple) {\n                        result.push(item);\n                    } else {\n                        result = item;\n                        return false;\n                    }\n                }\n                return true;\n            });\n            return result;\n        }\n        getOntop() {\n            return this._options.get('ontop');\n        }\n        getPosition(pos) {\n            return pos ? this._options.get('position') === pos : this._options.get('position');\n        }\n        getAutohide() {\n            return this._options.get('autohide');\n        }\n        getRoot() {\n            return this._$element;\n        }\n        getHeight() {\n            return this._$element ? this._$element.offsetHeight : 0;\n        }\n    };\n});\ndefine('osjs-apps-corewm/widget',['./locales'], function (Translations) {\n    'use strict';\n    const _ = OSjs.require('core/locales').createLocalizer(Translations);\n    const Menu = OSjs.require('gui/menu');\n    const DOM = OSjs.require('utils/dom');\n    const Utils = OSjs.require('utils/misc');\n    const Events = OSjs.require('utils/events');\n    const WindowManager = OSjs.require('core/window-manager');\n    const MIN_WIDTH = 64;\n    const MIN_HEIGHT = 64;\n    const TIMEOUT_SAVE = 500;\n    const TIMEOUT_SHOW_ENVELOPE = 3000;\n    const TIMEOUT_HIDE_ENVELOPE = 1000;\n    const DEFAULT_OPTIONS = {\n        aspect: false,\n        width: 100,\n        height: 100,\n        minWidth: MIN_WIDTH,\n        minHeight: MIN_HEIGHT,\n        maxHeight: 500,\n        maxWidth: 500,\n        left: 0,\n        right: null,\n        top: 0,\n        bottom: null,\n        locked: false,\n        canvas: false,\n        resizable: false,\n        viewBox: false,\n        frequency: 2,\n        custom: {},\n        settings: {\n            enabled: false,\n            name: 'CoreWMWidgetSettingsWindow',\n            title: _('LBL_SETTINGS'),\n            width: 300,\n            height: 300\n        }\n    };\n    function bindWidgetEvents(instance) {\n        var timeout = null;\n        var position = instance._getNormalizedPosition();\n        var dimension = instance._getDimension();\n        var start = {\n            x: 0,\n            y: 0\n        };\n        function _getDimensionAspected(dx, dy) {\n            if (instance._options.aspect === true) {\n                var width = dimension.width + dx;\n                var height = width / instance._aspect;\n                return {\n                    width: width,\n                    height: height\n                };\n            }\n            return {\n                width: dimension.width + dx,\n                height: dimension.height + dy\n            };\n        }\n        function _mouseDown(ev, pos, action) {\n            ev.preventDefault();\n            if (instance._locked) {\n                return;\n            }\n            timeout = clearTimeout(timeout);\n            start = pos;\n            position = instance._getNormalizedPosition();\n            dimension = instance._getDimension();\n            Events.$bind(window, 'mousemove:modifywidget', function (ev, pos) {\n                var dx = pos.x - start.x;\n                var dy = pos.y - start.y;\n                var obj = action === 'move' ? {\n                    left: position.left + dx,\n                    top: position.top + dy\n                } : _getDimensionAspected(dx, dy);\n                instance._onMouseMove(ev, obj, action);\n            });\n            Events.$bind(window, 'mouseup:modifywidget', function (ev, pos) {\n                Events.$unbind(window, 'mousemove:modifywidget');\n                Events.$unbind(window, 'mouseup:modifywidget');\n                instance._onMouseUp(ev, pos, action);\n            });\n            instance._windowWidth = window.innerWidth;\n            instance._windowHeight = window.innerHeight;\n            instance._onMouseDown(ev, pos, action);\n        }\n        Events.$bind(instance._$element, 'mousedown:movewidget', function (ev, pos) {\n            _mouseDown(ev, pos, 'move');\n        });\n        Events.$bind(instance._$resize, 'mousedown:resizewidget', function (ev, pos) {\n            ev.stopPropagation();\n            _mouseDown(ev, pos, 'resize');\n        });\n        Events.$bind(instance._$element, 'click:showenvelope', function (ev) {\n            timeout = clearTimeout(timeout);\n            instance._showEnvelope();\n        });\n        Events.$bind(instance._$element, 'mouseover:showenvelope', function () {\n            timeout = clearTimeout(timeout);\n            timeout = setTimeout(function () {\n                instance._showEnvelope();\n            }, TIMEOUT_SHOW_ENVELOPE);\n        });\n        Events.$bind(instance._$element, 'mouseout:hideenvelope', function (ev) {\n            timeout = clearTimeout(timeout);\n            timeout = setTimeout(function () {\n                instance._hideEnvelope();\n            }, TIMEOUT_HIDE_ENVELOPE);\n        });\n        Events.$bind(instance._$element, 'contextmenu:widgetcontext', function (ev) {\n            instance._onContextMenu(ev);\n        });\n    }\n    function validNumber(num) {\n        if (typeof num !== 'undefined' && num !== null) {\n            return !isNaN(num);\n        }\n        return false;\n    }\n    return class Widget {\n        constructor(name, options, settings) {\n            options = Utils.mergeObject(Utils.cloneObject(DEFAULT_OPTIONS), options || {});\n            this._aspect = options.aspect === true ? options.width / options.height : typeof options.aspect === 'number' ? options.aspect : 1;\n            if (options.aspect !== false) {\n                options.minHeight = options.width / this._aspect;\n                options.maxHeight = options.maxWidth / this._aspect;\n            }\n            if (options.viewBox) {\n                options.resizable = true;\n                if (options.viewBox === true) {\n                    options.viewBox = '0 0 ' + options.width + ' ' + options.height;\n                }\n            }\n            this._position = {\n                left: settings.get('left', options.left),\n                top: settings.get('top', options.top),\n                right: settings.get('right', options.right),\n                bottom: settings.get('bottom', options.bottom)\n            };\n            this._dimension = {\n                height: settings.get('height', options.height),\n                width: settings.get('width', options.width)\n            };\n            this._name = name;\n            this._settings = settings;\n            this._options = options;\n            this._isManipulating = false;\n            this._windowWidth = window.innerWidth;\n            this._windowHeight = window.innerHeight;\n            this._requestId = null;\n            this._saveTimeout = null;\n            this._settingsWindow = null;\n            this._locked = settings.get('locked', false);\n            this._$element = null;\n            this._$resize = null;\n            this._$canvas = null;\n            this._$context = null;\n            Utils.mergeObject(this._options.settings, settings.get('settings', {}));\n            console.debug('Widget::construct()', this._name, this._settings.get());\n        }\n        init(root) {\n            this._windowWidth = window.innerWidth;\n            this._windowHeight = window.innerHeight;\n            this._$element = document.createElement('corewm-widget');\n            this._$resize = document.createElement('corewm-widget-resize');\n            if (this._options.canvas) {\n                this._$canvas = document.createElement('canvas');\n                if (this._options.viewBox) {\n                    this._$canvas.setAttribute('viewBox', this._options.viewBox);\n                }\n                this._$context = this._$canvas.getContext('2d');\n                this._$element.appendChild(this._$canvas);\n            }\n            bindWidgetEvents(this);\n            this._updatePosition();\n            this._updateDimension();\n            this._setLock(this._locked);\n            DOM.$addClass(this._$element, 'Widget' + this._name);\n            this._$element.appendChild(this._$resize);\n            root.appendChild(this._$element);\n            return this._$element;\n        }\n        _inited() {\n            this.onInited();\n            this.onResize(this._dimension);\n            var fpsInterval, now, then, elapsed;\n            const animate = () => {\n                window.requestAnimationFrame(animate);\n                now = Date.now();\n                elapsed = now - then;\n                if (elapsed > fpsInterval) {\n                    then = now - elapsed % fpsInterval;\n                    this.onRender();\n                }\n            };\n            if (this._$canvas) {\n                var fps = Math.min(this._options.frequency, 1);\n                this._requestId = window.requestAnimationFrame(function () {\n                    fpsInterval = 1000 / fps;\n                    then = Date.now();\n                    animate();\n                });\n            }\n        }\n        destroy() {\n            Events.$unbind(window, 'mousemove:modifywidget');\n            Events.$unbind(window, 'mouseup:modifywidget');\n            Events.$unbind(this._$resize, 'mousedown:resizewidget');\n            Events.$unbind(this._$element, 'mousedown:movewidget');\n            Events.$unbind(this._$element, 'click:showenvelope');\n            Events.$unbind(this._$element, 'mouseover:showenvelope');\n            Events.$unbind(this._$element, 'mouseout:hideenvelope');\n            Events.$unbind(this._$element, 'contextmenu:widgetcontext');\n            this._saveTimeout = clearTimeout(this._saveTimeout);\n            if (this._requestId) {\n                window.cancelAnimationFrame(this._requestId);\n            }\n            this._requestId = null;\n            if (this._settingsWindow) {\n                this._settingsWindow.destroy();\n            }\n            this._settingsWindow = null;\n            this._$canvas = DOM.$remove(this._$canvas);\n            this._$resize = DOM.$remove(this._$resize);\n            this._$element = DOM.$remove(this._$element);\n            this._$context = null;\n        }\n        blur() {\n        }\n        _onMouseDown(ev, pos, action) {\n            this._saveTimeout = clearTimeout(this._saveTimeout);\n            DOM.$addClass(this._$element, 'corewm-widget-active');\n            if (action === 'resize') {\n                var obj = this._getNormalizedPosition();\n                this._setPosition(obj);\n            }\n        }\n        _onMouseMove(ev, obj, action) {\n            this._isManipulating = true;\n            if (action === 'move') {\n                this._setPosition(obj, true);\n                this.onMove(this._position);\n            } else {\n                this._setDimension(obj);\n                this.onResize(this._dimension);\n            }\n        }\n        _onMouseUp(ev, pos, action) {\n            this._isManipulating = false;\n            this._resizeTimeout = clearTimeout(this._resizeTimeout);\n            DOM.$removeClass(this._$element, 'corewm-widget-active');\n            this._hideEnvelope();\n            if (action === 'resize') {\n                this._setPosition(null, true);\n            }\n            this._saveTimeout = clearTimeout(this._saveTimeout);\n            this._saveTimeout = setTimeout(() => {\n                this._saveOptions();\n            }, TIMEOUT_SAVE);\n        }\n        _onContextMenu(ev) {\n            var c = this.onContextMenu(ev);\n            var menu = [{\n                    title: this._locked ? _('LBL_UNLOCK') : _('LBL_LOCK'),\n                    onClick: () => {\n                        this._setLock();\n                        this._saveOptions();\n                    }\n                }];\n            if (c !== true) {\n                if (c instanceof Array) {\n                    menu = c.concat(menu);\n                }\n                if (this._options.settings.enabled) {\n                    menu.push({\n                        title: _('Open {0} Settings', _(this._name)),\n                        onClick: ev => {\n                            this._openSettings(ev);\n                        }\n                    });\n                }\n            }\n            Menu.create(menu, ev);\n        }\n        _saveOptions(custom) {\n            if (typeof custom !== 'undefined') {\n                this._options.settings.tree = custom;\n            }\n            var opts = {\n                width: this._dimension.width,\n                height: this._dimension.height,\n                right: this._position.right,\n                left: validNumber(this._position.right) ? null : this._position.left,\n                bottom: this._position.bottom,\n                top: validNumber(this._position.bottom) ? null : this._position.top,\n                locked: this._locked,\n                settings: { tree: this._options.settings.tree }\n            };\n            this._settings.set(null, opts, true);\n        }\n        _openSettings(ev) {\n            if (this._settingsWindow) {\n                this._settingsWindow._focus();\n                return;\n            }\n            var wm = WindowManager.instance;\n            var win = new Window(this._options.settings.name, {\n                title: this._options.settings.title,\n                width: this._options.settings.width,\n                height: this._options.settings.height\n            }, null, wm._scheme);\n            win._on('init', (root, scheme) => {\n                var opts = this.onOpenSettings(root, scheme, ev);\n                win._render(opts.id);\n                win._find('ButtonOK').on('click', () => {\n                    var settings = opts.save(root, scheme, ev);\n                    this._saveOptions(settings);\n                });\n                opts.render(root, scheme, ev);\n            });\n            win._on('close', () => {\n                this._settingsWindow = null;\n            });\n            this._settingsWindow = wm.addWindow(win, true);\n        }\n        _showEnvelope() {\n            if (!this._$element) {\n                return;\n            }\n            DOM.$addClass(this._$element, 'corewm-widget-envelope');\n        }\n        _hideEnvelope() {\n            if (!this._$element || this._isManipulating) {\n                return;\n            }\n            DOM.$removeClass(this._$element, 'corewm-widget-envelope');\n        }\n        _setPosition(obj, stick) {\n            obj = obj || Utils.cloneObject(this._position);\n            this._position.top = obj.top;\n            this._position.left = obj.left;\n            this._position.bottom = null;\n            this._position.right = null;\n            if (stick) {\n                if (this._isPastHalf('vertical', obj)) {\n                    this._position.top = null;\n                    this._position.bottom = this._windowHeight - this._dimension.height - obj.top;\n                }\n                if (this._isPastHalf('horizontal', obj)) {\n                    this._position.left = null;\n                    this._position.right = this._windowWidth - this._dimension.width - obj.left;\n                }\n            }\n            this._updatePosition();\n        }\n        _setDimension(obj) {\n            var o = this._options;\n            var w = Math.min(Math.max(obj.width, o.minWidth), o.maxWidth);\n            var h = Math.min(Math.max(obj.height, o.minHeight), o.maxHeight);\n            if (this._options.aspect === true) {\n                h = w / this._aspect;\n            }\n            this._dimension.width = w;\n            this._dimension.height = h;\n            this._updateDimension();\n        }\n        _setLock(l) {\n            if (typeof l !== 'boolean') {\n                l = !this._locked;\n            }\n            this._locked = l;\n            if (this._$element) {\n                this._$element.setAttribute('data-locked', String(this._locked));\n            }\n        }\n        _updatePosition() {\n            if (this._$element) {\n                if (validNumber(this._position.right)) {\n                    this._$element.style.left = 'auto';\n                    this._$element.style.right = String(this._position.right) + 'px';\n                } else {\n                    this._$element.style.left = String(this._position.left) + 'px';\n                    this._$element.style.right = 'auto';\n                }\n                if (validNumber(this._position.bottom)) {\n                    this._$element.style.top = 'auto';\n                    this._$element.style.bottom = String(this._position.bottom) + 'px';\n                } else {\n                    this._$element.style.top = String(this._position.top) + 'px';\n                    this._$element.style.bottom = 'auto';\n                }\n            }\n        }\n        _updateDimension() {\n            if (this._$element) {\n                this._$element.style.width = String(this._dimension.width) + 'px';\n                this._$element.style.height = String(this._dimension.height) + 'px';\n            }\n            if (this._$canvas) {\n                this._$canvas.width = this._dimension.width || MIN_WIDTH;\n                this._$canvas.height = this._dimension.height || MIN_HEIGHT;\n            }\n        }\n        _getNormalizedPosition() {\n            var left = this._position.left;\n            if (validNumber(this._position.right)) {\n                left = this._windowWidth - this._position.right - this._dimension.width;\n            }\n            var top = this._position.top;\n            if (validNumber(this._position.bottom)) {\n                top = this._windowHeight - this._position.bottom - this._dimension.height;\n            }\n            return {\n                left: left,\n                top: top\n            };\n        }\n        _getDimension() {\n            return {\n                width: this._dimension.width,\n                height: this._dimension.height\n            };\n        }\n        _getPosition() {\n            return {\n                left: this._position.left,\n                top: this._position.top,\n                right: this._position.right,\n                bottom: this._position.bottom\n            };\n        }\n        _setSetting(k, v, save) {\n            this._options.settings.tree[k] = v;\n            if (save) {\n                this._saveOptions();\n            }\n        }\n        _getSetting(k, def) {\n            if (typeof this._options.settings === 'undefined' || typeof this._options.settings.tree === 'undefined') {\n                return def;\n            }\n            var value = this._options.settings.tree[k];\n            return typeof value === 'undefined' ? def : value;\n        }\n        _isPastHalf(dir, obj) {\n            obj = obj || this._position;\n            var hleft = this._windowWidth / 2;\n            var aleft = obj.left + this._dimension.width / 2;\n            if (dir === 'horizontal') {\n                return aleft >= hleft;\n            }\n            var htop = this._windowHeight / 2;\n            var atop = obj.top + this._dimension.height / 2;\n            return atop >= htop;\n        }\n        onMove() {\n        }\n        onResize() {\n        }\n        onRender() {\n        }\n        onInited() {\n        }\n        onContextMenu(ev) {\n        }\n        onOpenSettings(root, scheme, ev) {\n            return {\n                id: null,\n                save: function () {\n                    return {};\n                },\n                render: function () {\n                }\n            };\n        }\n    };\n});\ndefine('osjs-apps-corewm/widgets/digitalclock',['../widget'], function (Widget) {\n    'use strict';\n    const Locales = OSjs.require('core/locales');\n    const Dialog = OSjs.require('core/dialog');\n    return class WidgetDigitalClock extends Widget {\n        constructor(settings) {\n            super('DigitalClock', {\n                width: 300,\n                height: 100,\n                aspect: true,\n                top: 100,\n                right: 20,\n                canvas: true,\n                frequency: 1,\n                resizable: true,\n                viewBox: true,\n                settings: {\n                    enabled: false,\n                    tree: { color: '#ffffff' }\n                }\n            }, settings);\n        }\n        onRender() {\n            if (!this._$canvas) {\n                return;\n            }\n            const ctx = this._$context;\n            const now = new Date();\n            const txt = [\n                now.getHours(),\n                now.getMinutes(),\n                now.getSeconds()\n            ].map(function (i) {\n                return i < 10 ? '0' + String(i) : String(i);\n            }).join(':');\n            const ratio = 0.55;\n            const xOffset = -10;\n            const fontSize = Math.round(this._dimension.height * ratio);\n            ctx.font = String(fontSize) + 'px Digital-7Mono';\n            ctx.textBaseline = 'middle';\n            ctx.fillStyle = this._getSetting('color');\n            const x = Math.round(this._dimension.width / 2);\n            const y = Math.round(this._dimension.height / 2);\n            const m = ctx.measureText(txt).width;\n            ctx.clearRect(0, 0, this._dimension.width, this._dimension.height);\n            ctx.fillText(txt, x - m / 2 + xOffset, y);\n        }\n        onContextMenu(ev) {\n            const color = this._getSetting('color') || '#ffffff';\n            return [{\n                    title: Locales._('LBL_COLOR'),\n                    onClick: () => {\n                        Dialog.create('Color', { color: color }, (ev, btn, result) => {\n                            if (btn === 'ok') {\n                                this._setSetting('color', result.hex, true);\n                            }\n                        });\n                    }\n                }];\n        }\n    };\n});\ndefine('osjs-apps-corewm/widgets/analogclock',['../widget'], function (Widget) {\n    'use strict';\n    return class WidgetAnalogClock extends Widget {\n        constructor(settings) {\n            super('AnalogClock', {\n                width: 300,\n                height: 300,\n                aspect: true,\n                top: 100,\n                right: 20,\n                canvas: true,\n                frequency: 1,\n                resizable: true,\n                viewBox: true\n            }, settings);\n            this.radius = 300 / 2;\n        }\n        onRender() {\n            if (!this._$canvas) {\n                return;\n            }\n            const ctx = this._$context;\n            const radius = Math.round(this.radius * 0.95);\n            function drawHand(ctx, pos, length, width) {\n                ctx.beginPath();\n                ctx.lineWidth = width;\n                ctx.lineCap = 'round';\n                ctx.moveTo(0, 0);\n                ctx.rotate(pos);\n                ctx.lineTo(0, -length);\n                ctx.stroke();\n                ctx.rotate(-pos);\n            }\n            ctx.clearRect(0, 0, this.radius * 2, this.radius * 2);\n            ctx.beginPath();\n            ctx.arc(0, 0, radius, 0, 2 * Math.PI);\n            ctx.fillStyle = 'white';\n            ctx.fill();\n            ctx.lineWidth = radius * 0.04;\n            ctx.stroke();\n            ctx.beginPath();\n            ctx.arc(0, 0, radius * 0.1, 0, 2 * Math.PI);\n            ctx.fillStyle = '#000';\n            ctx.fill();\n            ctx.font = radius * 0.15 + 'px arial';\n            ctx.textBaseline = 'middle';\n            ctx.textAlign = 'center';\n            let ang;\n            for (let num = 1; num < 13; num++) {\n                ang = num * Math.PI / 6;\n                ctx.rotate(ang);\n                ctx.translate(0, -radius * 0.85);\n                ctx.rotate(-ang);\n                ctx.fillText(num.toString(), 0, 0);\n                ctx.rotate(ang);\n                ctx.translate(0, radius * 0.85);\n                ctx.rotate(-ang);\n            }\n            const now = new Date();\n            let hour = now.getHours();\n            let minute = now.getMinutes();\n            let second = now.getSeconds();\n            hour = hour % 12;\n            hour = hour * Math.PI / 6 + minute * Math.PI / (6 * 60) + second * Math.PI / (360 * 60);\n            minute = minute * Math.PI / 30 + second * Math.PI / (30 * 60);\n            second = second * Math.PI / 30;\n            drawHand(ctx, hour, radius * 0.5, radius * 0.07);\n            drawHand(ctx, minute, radius * 0.8, radius * 0.07);\n            drawHand(ctx, second, radius * 0.9, radius * 0.02);\n        }\n        onResize(dimension) {\n            if (!this._$canvas || !this._$context) {\n                return;\n            }\n            this.radius = dimension.height / 2;\n            this._$context.translate(this.radius, this.radius);\n        }\n    };\n});\ndefine('osjs-apps-corewm/menu',['./locales'], function (Translations) {\n    'use strict';\n    const _ = OSjs.require('core/locales').createLocalizer(Translations);\n    const Menu = OSjs.require('gui/menu');\n    const GUI = OSjs.require('utils/gui');\n    const DOM = OSjs.require('utils/dom');\n    const Events = OSjs.require('utils/events');\n    const Process = OSjs.require('core/process');\n    const Theme = OSjs.require('core/theme');\n    const WindowManager = OSjs.require('core/window-manager');\n    const PackageManager = OSjs.require('core/package-manager');\n    class CategorizedApplicationMenu {\n        constructor() {\n            var apps = PackageManager.getPackages();\n            var wm = WindowManager.instance;\n            var cfgCategories = wm.getDefaultSetting('menu');\n            function createEvent(iter) {\n                return function (el) {\n                    GUI.createDraggable(el, {\n                        type: 'application',\n                        data: { launch: iter.name }\n                    });\n                };\n            }\n            function clickEvent(iter) {\n                return function () {\n                    Process.create(iter.name);\n                };\n            }\n            var cats = {};\n            Object.keys(cfgCategories).forEach(function (c) {\n                cats[c] = [];\n            });\n            Object.keys(apps).forEach(function (a) {\n                var iter = apps[a];\n                if (iter.type === 'application' && iter.visible !== false) {\n                    var cat = iter.category && cats[iter.category] ? iter.category : 'unknown';\n                    cats[cat].push({\n                        name: a,\n                        data: iter\n                    });\n                }\n            });\n            var list = [];\n            Object.keys(cats).forEach(function (c) {\n                var submenu = [];\n                for (var a = 0; a < cats[c].length; a++) {\n                    var iter = cats[c][a];\n                    submenu.push({\n                        title: iter.data.name,\n                        icon: Theme.getIcon(iter.data.icon, '16x16'),\n                        tooltip: iter.data.description,\n                        onCreated: createEvent(iter),\n                        onClick: clickEvent(iter)\n                    });\n                }\n                if (submenu.length) {\n                    list.push({\n                        title: _(cfgCategories[c].title),\n                        icon: Theme.getIcon(cfgCategories[c].icon, '16x16'),\n                        menu: submenu\n                    });\n                }\n            });\n            this.list = list;\n        }\n        show(ev) {\n            var m = Menu.create(this.list, ev);\n            if (m && m.$element) {\n                DOM.$addClass(m.$element, 'CoreWMDefaultApplicationMenu');\n            }\n        }\n    }\n    class ApplicationMenu {\n        constructor() {\n            var root = this.$element = document.createElement('gui-menu');\n            this.$element.id = 'CoreWMApplicationMenu';\n            var apps = PackageManager.getPackages();\n            function createEntry(a, iter) {\n                var entry = document.createElement('gui-menu-entry');\n                var img = document.createElement('img');\n                img.src = Theme.getIcon(iter.icon, '32x32');\n                var txt = document.createElement('div');\n                txt.appendChild(document.createTextNode(iter.name));\n                Events.$bind(entry, 'click', function (ev) {\n                    Process.create(a);\n                });\n                entry.appendChild(img);\n                entry.appendChild(txt);\n                root.appendChild(entry);\n            }\n            Object.keys(apps).forEach(function (a) {\n                var iter = apps[a];\n                if (iter.type === 'application' && iter.visible !== false) {\n                    createEntry(a, iter);\n                }\n            });\n        }\n        destroy() {\n            if (this.$element) {\n                this.$element.querySelectorAll('gui-menu-entry').forEach(function (el) {\n                    Events.$unbind(el, 'click');\n                });\n                DOM.$remove(this.$element);\n            }\n            this.$element = null;\n        }\n        show(pos) {\n            if (!this.$element) {\n                return;\n            }\n            if (!this.$element.parentNode) {\n                document.body.appendChild(this.$element);\n            }\n            DOM.$removeClass(this.$element, 'AtBottom');\n            DOM.$removeClass(this.$element, 'AtTop');\n            if (pos.y > window.innerHeight / 2) {\n                DOM.$addClass(this.$element, 'AtBottom');\n                this.$element.style.top = 'auto';\n                this.$element.style.bottom = '30px';\n            } else {\n                DOM.$addClass(this.$element, 'AtTop');\n                this.$element.style.bottom = 'auto';\n                this.$element.style.top = '30px';\n            }\n            this.$element.style.left = pos.x + 'px';\n        }\n        getRoot() {\n            return this.$element;\n        }\n    }\n    function showMenu(ev) {\n        const wm = WindowManager.instance;\n        let inst;\n        if (wm && wm.getSetting('useTouchMenu') === true) {\n            inst = new ApplicationMenu();\n            var pos = {\n                x: ev.clientX,\n                y: ev.clientY\n            };\n            if (ev.target) {\n                var rect = DOM.$position(ev.target, document.body);\n                if (rect.left && rect.top && rect.width && rect.height) {\n                    pos.x = rect.left - rect.width / 2;\n                    if (pos.x <= 16) {\n                        pos.x = 0;\n                    }\n                    var panel = DOM.$parent(ev.target, function (node) {\n                        return node.tagName.toLowerCase() === 'corewm-panel';\n                    });\n                    if (panel) {\n                        var prect = DOM.$position(panel);\n                        pos.y = prect.top + prect.height;\n                    } else {\n                        pos.y = rect.top + rect.height;\n                    }\n                }\n            }\n            Menu.create(null, pos, inst);\n        } else {\n            inst = new CategorizedApplicationMenu();\n            inst.show(ev);\n        }\n    }\n    return { showMenu: showMenu };\n});\ndefine('osjs-apps-corewm/panelitems/appmenu',[\n    '../panelitem',\n    '../menu'\n], function (PanelItem, a) {\n    'use strict';\n    const Theme = OSjs.require('core/theme');\n    const Events = OSjs.require('utils/events');\n    const Locales = OSjs.require('core/locales');\n    const WindowManager = OSjs.require('core/window-manager');\n    return class PanelItemAppMenu extends PanelItem {\n        constructor(settings) {\n            super('PanelItemAppMenu', 'AppMenu', settings, {});\n        }\n        init() {\n            const root = super.init(...arguments);\n            const wm = WindowManager.instance;\n            const img = document.createElement('img');\n            img.alt = '';\n            img.src = Theme.getIcon(wm.getSetting('icon') || 'osjs-white.png');\n            const sel = document.createElement('li');\n            sel.title = Locales._('LBL_APPLICATIONS');\n            sel.className = 'corewm-panel-button-centered';\n            sel.setAttribute('role', 'button');\n            sel.setAttribute('data-label', 'OS.js Application Menu');\n            sel.appendChild(img);\n            Events.$bind(sel, 'click', function (ev) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                const wm = WindowManager.instance;\n                if (wm) {\n                    a.showMenu(ev);\n                }\n            });\n            this._$container.appendChild(sel);\n            return root;\n        }\n        destroy() {\n            if (this._$container) {\n                Events.$unbind(this._$container.querySelector('li'), 'click');\n            }\n            return super.destroy(...arguments);\n        }\n    };\n});\ndefine('osjs-apps-corewm/panelitems/buttons',['../panelitem'], function (PanelItem) {\n    'use strict';\n    const GUI = OSjs.require('utils/gui');\n    const Menu = OSjs.require('gui/menu');\n    const DOM = OSjs.require('utils/dom');\n    const Init = OSjs.require('core/init');\n    const Theme = OSjs.require('core/theme');\n    const Events = OSjs.require('utils/events');\n    const Locales = OSjs.require('core/locales');\n    const Process = OSjs.require('core/process');\n    const PackageManager = OSjs.require('core/package-manager');\n    const WindowManager = OSjs.require('core/window-manager');\n    return class PanelItemButtons extends PanelItem {\n        constructor(settings) {\n            if (settings) {\n                settings.set('buttons', settings.get('buttons', []).map(iter => {\n                    iter.title = Locales._(iter.title);\n                    return iter;\n                }));\n            }\n            super('PanelItemButtons', 'Buttons', settings, { buttons: [] });\n        }\n        init() {\n            const root = super.init(...arguments);\n            this.renderButtons();\n            let ghost, lastTarget;\n            function clearGhost(inner) {\n                ghost = DOM.$remove(ghost);\n                if (!inner) {\n                    lastTarget = null;\n                }\n            }\n            function createGhost(target) {\n                const isUl = target.tagName === 'UL';\n                if (!target || lastTarget === target || isUl) {\n                    return;\n                }\n                const ul = target.parentNode;\n                lastTarget = target;\n                clearGhost(true);\n                ghost = document.createElement('li');\n                ghost.className = 'Ghost';\n                ul.insertBefore(ghost, target);\n            }\n            let counter = 0;\n            GUI.createDroppable(this._$container, {\n                onOver: (ev, el, args) => {\n                    if (ev.target) {\n                        createGhost(ev.target);\n                    }\n                },\n                onEnter: ev => {\n                    ev.preventDefault();\n                    counter++;\n                },\n                onLeave: ev => {\n                    if (counter <= 0) {\n                        clearGhost();\n                    }\n                },\n                onDrop: () => {\n                    counter = 0;\n                    clearGhost();\n                },\n                onItemDropped: (ev, el, item, args) => {\n                    if (item && item.data) {\n                        let newPosition = 0;\n                        if (DOM.$hasClass(ev.target, 'Ghost')) {\n                            newPosition = DOM.$index(ev.target);\n                        }\n                        if (typeof item.data.position !== 'undefined') {\n                            this.moveButton(item.data.position, newPosition - 1);\n                        } else if (item.data.mime === 'osjs/application') {\n                            const appName = item.data.path.split('applications:///')[1];\n                            this.createButton(appName, newPosition);\n                        }\n                    }\n                }\n            });\n            return root;\n        }\n        clearButtons() {\n            DOM.$empty(this._$container);\n        }\n        renderButtons() {\n            const wm = WindowManager.instance;\n            const systemButtons = {\n                applications: ev => {\n                    wm.showMenu(ev);\n                },\n                settings: ev => {\n                    if (wm) {\n                        wm.showSettings();\n                    }\n                },\n                exit: ev => {\n                    Init.logout();\n                }\n            };\n            this.clearButtons();\n            (this._settings.get('buttons') || []).forEach((btn, idx) => {\n                let menu = [{\n                        title: 'Remove button',\n                        onClick: () => {\n                            this.removeButton(idx);\n                        }\n                    }];\n                let callback = () => {\n                    Process.create(btn.launch);\n                };\n                if (btn.system) {\n                    menu = null;\n                    callback = function (ev) {\n                        ev.stopPropagation();\n                        systemButtons[btn.system](ev);\n                    };\n                }\n                this.addButton(btn.title, btn.icon, menu, callback, idx);\n            });\n        }\n        removeButton(index) {\n            const buttons = this._settings.get('buttons');\n            buttons.splice(index, 1);\n            this.renderButtons();\n            this._settings.save();\n        }\n        moveButton(from, to) {\n            const buttons = this._settings.get('buttons');\n            if (from === to || buttons.length <= 1) {\n                return;\n            }\n            if (to >= buttons.length) {\n                let k = to - buttons.length;\n                while (k-- + 1) {\n                    buttons.push(window.undefined);\n                }\n            }\n            buttons.splice(to, 0, buttons.splice(from, 1)[0]);\n            this._settings.save(() => {\n                this.renderButtons();\n            });\n        }\n        createButton(appName, position) {\n            const pkg = PackageManager.getPackage(appName);\n            const buttons = this._settings.get('buttons');\n            const iter = {\n                title: appName,\n                icon: pkg.icon,\n                launch: appName\n            };\n            if (!buttons.length) {\n                buttons.push(iter);\n            } else {\n                buttons.splice(position, 0, iter);\n            }\n            this.renderButtons();\n            this._settings.save();\n        }\n        addButton(title, icon, menu, callback, idx) {\n            const img = document.createElement('img');\n            img.alt = '';\n            img.src = Theme.getIcon(icon);\n            const sel = document.createElement('li');\n            sel.title = title;\n            sel.setAttribute('role', 'button');\n            sel.setAttribute('aria-label', title);\n            sel.appendChild(img);\n            Events.$bind(sel, 'click', callback, true);\n            Events.$bind(sel, 'contextmenu', function (ev) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                if (menu) {\n                    Menu.create(menu, ev);\n                }\n            });\n            GUI.createDraggable(sel, {\n                data: { position: idx },\n                onStart: function (ev, el) {\n                    setTimeout(function () {\n                        DOM.$addClass(el, 'Ghosting');\n                    }, 1);\n                },\n                onEnd: function (ev, el) {\n                    DOM.$removeClass(el, 'Ghosting');\n                }\n            });\n            this._$container.appendChild(sel);\n        }\n    };\n});\ndefine('osjs-apps-corewm/panelitemdialog',[],function () {\n    'use strict';\n    const Window = OSjs.require('core/window');\n    return class PanelItemDialog extends Window {\n        constructor(name, args, settings, scheme, closeCallback) {\n            super(name, args, null);\n            this._closeCallback = closeCallback || function () {\n            };\n            this._settings = settings;\n            this._scheme = scheme;\n        }\n        init(wm, app) {\n            var root = Window.prototype.init.apply(this, arguments);\n            this._render(this._name, this._scheme);\n            this._find('ButtonApply').on('click', () => {\n                this.applySettings();\n                this._close('ok');\n            });\n            this._find('ButtonCancel').on('click', () => {\n                this._close();\n            });\n            return root;\n        }\n        applySettings() {\n        }\n        _close(button) {\n            this._closeCallback(button);\n            return super._close(...arguments);\n        }\n        _destroy() {\n            this._settings = null;\n            return super._destroy(...arguments);\n        }\n    };\n});\ndefine('osjs-apps-corewm/panelitems/clock',[\n    '../panelitem',\n    '../panelitemdialog'\n], function (PanelItem, PanelDialog) {\n    'use strict';\n    const DOM = OSjs.require('utils/dom');\n    const ExtendedDate = OSjs.require('helpers/date');\n    class ClockSettingsDialog extends PanelDialog {\n        constructor(panelItem, scheme, closeCallback) {\n            super('ClockSettingsDialog', {\n                title: 'Clock Settings',\n                icon: 'status/appointment-soon.png',\n                width: 400,\n                height: 280\n            }, panelItem._settings, scheme, closeCallback);\n        }\n        init(wm, app) {\n            const root = super.init(...arguments);\n            this._find('InputUseUTC').set('value', this._settings.get('utc'));\n            this._find('InputInterval').set('value', String(this._settings.get('interval')));\n            this._find('InputTimeFormatString').set('value', this._settings.get('format'));\n            this._find('InputTooltipFormatString').set('value', this._settings.get('tooltip'));\n            return root;\n        }\n        applySettings() {\n            this._settings.set('utc', this._find('InputUseUTC').get('value'));\n            this._settings.set('interval', parseInt(this._find('InputInterval').get('value'), 10));\n            this._settings.set('format', this._find('InputTimeFormatString').get('value'));\n            this._settings.set('tooltip', this._find('InputTooltipFormatString').get('value'), true);\n        }\n    }\n    return class PanelItemClock extends PanelItem {\n        constructor(settings) {\n            super('PanelItemClock corewm-panel-right', 'Clock', settings, {\n                utc: false,\n                interval: 1000,\n                format: 'H:i:s',\n                tooltip: 'l, j F Y'\n            });\n            this.clockInterval = null;\n            this.$clock = null;\n        }\n        createInterval() {\n            const timeFmt = this._settings.get('format');\n            const tooltipFmt = this._settings.get('tooltip');\n            const update = () => {\n                let clock = this.$clock;\n                if (clock) {\n                    const now = new Date();\n                    const t = ExtendedDate.format(now, timeFmt);\n                    const d = ExtendedDate.format(now, tooltipFmt);\n                    DOM.$empty(clock);\n                    clock.appendChild(document.createTextNode(t));\n                    clock.setAttribute('aria-label', String(t));\n                    clock.title = d;\n                }\n                clock = null;\n            };\n            const create = interval => {\n                clearInterval(this.clockInterval);\n                this.clockInterval = clearInterval(this.clockInterval);\n                this.clockInterval = setInterval(() => update(), interval);\n            };\n            create(this._settings.get('interval'));\n            update();\n        }\n        init() {\n            const root = super.init(...arguments);\n            this.$clock = document.createElement('span');\n            this.$clock.innerHTML = '00:00:00';\n            this.$clock.setAttribute('role', 'button');\n            const li = document.createElement('li');\n            li.appendChild(this.$clock);\n            this._$container.appendChild(li);\n            this.createInterval();\n            return root;\n        }\n        applySettings() {\n            this.createInterval();\n        }\n        openSettings() {\n            return super.openSettings(ClockSettingsDialog, {});\n        }\n        destroy() {\n            this.clockInterval = clearInterval(this.clockInterval);\n            this.$clock = DOM.$remove(this.$clock);\n            return super.destroy(...arguments);\n        }\n    };\n});\ndefine('osjs-apps-corewm/panelitems/notificationarea',['../panelitem'], function (PanelItem) {\n    'use strict';\n    const DOM = OSjs.require('utils/dom');\n    const Events = OSjs.require('utils/events');\n    let _restartFix = {};\n    class NotificationAreaItem {\n        constructor(name, opts) {\n            opts = opts || {};\n            this.name = name;\n            this.opts = opts;\n            this.$container = document.createElement('li');\n            this.$image = opts.image || opts.icon ? document.createElement('img') : null;\n            this.onCreated = opts.onCreated || function () {\n            };\n            this.onInited = opts.onInited || function () {\n            };\n            this.onDestroy = opts.onDestroy || function () {\n            };\n            this.onClick = opts.onClick || function () {\n            };\n            this.onContextMenu = opts.onContextMenu || function () {\n            };\n            this._build(name);\n            this.onCreated();\n        }\n        _build(name) {\n            const classNames = [\n                'NotificationArea',\n                'NotificationArea_' + name\n            ];\n            if (this.opts.className) {\n                classNames.push(this.opts.className);\n            }\n            this.$container.className = classNames.join(' ');\n            this.$container.setAttribute('role', 'button');\n            this.$container.setAttribute('aria-label', this.opts.title);\n            if (this.opts.tooltip) {\n                this.$container.title = this.opts.tooltip;\n            }\n            const self = this;\n            Events.$bind(this.$container, 'click', function (ev) {\n                self.onClick.apply(this, arguments);\n                return false;\n            });\n            Events.$bind(this.$container, 'contextmenu', function (ev) {\n                self.onContextMenu.apply(this, arguments);\n                return false;\n            });\n            if (this.$image) {\n                this.$image.title = this.opts.title || '';\n                this.$image.src = this.opts.image || this.opts.icon || 'about:blank';\n                this.$container.appendChild(this.$image);\n            }\n            const inner = document.createElement('div');\n            inner.appendChild(document.createElement('div'));\n            this.$container.appendChild(inner);\n        }\n        init(root) {\n            root.appendChild(this.$container);\n            try {\n                this.onInited(this.$container, this.$image);\n            } catch (e) {\n                console.warn('NotificationAreaItem', 'onInited error');\n                console.warn(e, e.stack);\n            }\n        }\n        setIcon(src) {\n            return this.setImage(src);\n        }\n        setImage(src) {\n            if (this.$image) {\n                this.$image.src = src;\n            }\n            this.opts.image = src;\n        }\n        setTitle(title) {\n            if (this.$image) {\n                this.$image.title = title;\n            }\n            this.opts.title = title;\n        }\n        destroy() {\n            if (this.$container) {\n                Events.$unbind(this.$container, 'click');\n                Events.$unbind(this.$container, 'mousedown');\n                Events.$unbind(this.$container, 'contextmenu');\n            }\n            this.onDestroy();\n            this.$image = DOM.$remove(this.$image);\n            this.$container = DOM.$remove(this.$container);\n        }\n    }\n    return class PanelItemNotificationArea extends PanelItem {\n        constructor() {\n            super('PanelItemNotificationArea corewm-panel-right');\n            this.notifications = {};\n        }\n        init() {\n            const root = super.init(...arguments);\n            root.setAttribute('role', 'toolbar');\n            const fix = Object.keys(_restartFix);\n            if (fix.length) {\n                fix.forEach(k => {\n                    this.createNotification(k, _restartFix[k]);\n                });\n            }\n            return root;\n        }\n        createNotification(name, opts) {\n            if (this._$root) {\n                if (!this.notifications[name]) {\n                    const item = new NotificationAreaItem(name, opts);\n                    item.init(this._$container);\n                    this.notifications[name] = item;\n                    _restartFix[name] = opts;\n                    return item;\n                }\n            }\n            return null;\n        }\n        removeNotification(name) {\n            if (this._$root) {\n                if (this.notifications[name]) {\n                    this.notifications[name].destroy();\n                    delete this.notifications[name];\n                    if (_restartFix[name]) {\n                        delete _restartFix[name];\n                    }\n                    return true;\n                }\n            }\n            return false;\n        }\n        getNotification(name) {\n            if (this._$root) {\n                if (this.notifications[name]) {\n                    return this.notifications[name];\n                }\n            }\n            return false;\n        }\n        destroy() {\n            for (let i in this.notifications) {\n                if (this.notifications.hasOwnProperty(i)) {\n                    if (this.notifications[i]) {\n                        this.notifications[i].destroy();\n                    }\n                    delete this.notifications[i];\n                }\n            }\n            return super.destroy(...arguments);\n        }\n    };\n});\ndefine('osjs-apps-corewm/panelitems/search',['../panelitem'], function (PanelItem) {\n    'use strict';\n    const DOM = OSjs.require('utils/dom');\n    const Hooks = OSjs.require('helpers/hooks');\n    const Theme = OSjs.require('core/theme');\n    const Events = OSjs.require('utils/events');\n    const Locales = OSjs.require('core/locales');\n    const Keycodes = OSjs.require('utils/keycodes');\n    const Process = OSjs.require('core/process');\n    const FileMetadata = OSjs.require('vfs/file');\n    const SearchEngine = OSjs.require('core/search-engine');\n    const WindowManager = OSjs.require('core/window-manager');\n    return class PanelItemSearch extends PanelItem {\n        constructor(settings) {\n            super('PanelItemSearch corewm-panel-right', 'Search', settings, {});\n            this.$ul = null;\n            this.$box = null;\n            this.$input = null;\n            this.$message = null;\n            this.visible = false;\n            this.hookId = -1;\n            this.currentIndex = -1;\n            this.currentCount = 0;\n        }\n        init() {\n            const root = super.init(...arguments);\n            const img = document.createElement('img');\n            img.src = Theme.getIcon('actions/system-search.png');\n            const input = document.createElement('input');\n            input.setAttribute('type', 'text');\n            const guinput = document.createElement('gui-text');\n            guinput.appendChild(input);\n            const ul = document.createElement('ul');\n            this.$message = document.createElement('div');\n            this.$message.appendChild(document.createTextNode(Locales._('SEARCH_LOADING')));\n            this.$box = document.createElement('corewm-search');\n            this.$box.className = 'custom-notification';\n            this.$box.appendChild(guinput);\n            this.$box.appendChild(this.$message);\n            this.$box.appendChild(ul);\n            const self = this;\n            const keyEvents = {};\n            keyEvents[Keycodes.DOWN] = () => this.navigateDown();\n            keyEvents[Keycodes.UP] = () => this.navigateUp();\n            keyEvents[Keycodes.ESC] = () => this.hide();\n            keyEvents[Keycodes.ENTER] = function (ev) {\n                if (this.value.length) {\n                    self.search(this.value);\n                    this.value = '';\n                } else {\n                    self.navigateOpen();\n                }\n            };\n            Hooks.addHook('menuBlur', () => this.hide());\n            Events.$bind(root, 'click', function (ev) {\n                ev.stopPropagation();\n                if (self.visible) {\n                    self.hide();\n                } else {\n                    self.show();\n                }\n            });\n            Events.$bind(input, 'mousedown', ev => ev.stopPropagation());\n            Events.$bind(input, 'keydown', function (ev) {\n                if (keyEvents[ev.keyCode]) {\n                    ev.preventDefault();\n                    ev.stopPropagation();\n                    keyEvents[ev.keyCode].call(this, ev);\n                }\n            });\n            Events.$bind(ul, 'mousedown', ev => ev.stopPropagation());\n            Events.$bind(ul, 'click', ev => {\n                const target = ev.target;\n                if (target.tagName === 'LI') {\n                    self.launch(target);\n                }\n            });\n            Events.$bind(this.$box, 'mousedown', () => {\n                if (input) {\n                    input.focus();\n                }\n            });\n            const li = document.createElement('li');\n            li.appendChild(img);\n            this.$ul = ul;\n            this.$input = input;\n            this._$container.appendChild(li);\n            document.body.appendChild(this.$box);\n            return root;\n        }\n        applySettings() {\n        }\n        openSettings() {\n            Process.create('ApplicationSettings', { category: 'search' });\n        }\n        destroy() {\n            if (this.hookId >= 0) {\n                Hooks.removeHook(this.hookId);\n            }\n            Events.$unbind(this._$root, 'click');\n            Events.$unbind(this.$input, 'mousedown');\n            Events.$unbind(this.$input, 'keydown');\n            Events.$unbind(this.$ul, 'mousedown');\n            Events.$unbind(this.$ul, 'click');\n            Events.$unbind(this.$box, 'mousedown');\n            this.$message = DOM.$remove(this.$message);\n            this.$input = DOM.$remove(this.$input);\n            this.$box = DOM.$remove(this.$box);\n            this.$ul = DOM.$remove(this.$ul);\n            return super.destroy(...arguments);\n        }\n        launch(target) {\n            const launch = target.getAttribute('data-launch');\n            const args = JSON.parse(target.getAttribute('data-args'));\n            const file = target.getAttribute('data-file');\n            const mime = target.getAttribute('data-mime');\n            const type = target.getAttribute('data-type');\n            if (file) {\n                if (type === 'dir') {\n                    Process.create('ApplicationFileManager', { path: file });\n                } else {\n                    Process.createFromFile(new FileMetadata(file, mime));\n                }\n            } else {\n                Process.create(launch, args);\n            }\n            this.hide();\n        }\n        show() {\n            if (!this.$box || this.visible) {\n                return;\n            }\n            const wm = WindowManager.instance;\n            const space = wm.getWindowSpace(true);\n            const input = this.$box.querySelector('input');\n            DOM.$empty(this.$box.querySelector('ul'));\n            this.$box.style.marginTop = String(space.top) + 'px';\n            this.$box.setAttribute('data-visible', String(true));\n            if (input) {\n                input.value = '';\n                input.focus();\n            }\n            this.visible = true;\n            this.$message.style.display = 'none';\n        }\n        hide() {\n            if (!this.$box || !this.visible) {\n                return;\n            }\n            this.$box.setAttribute('data-visible', String(false));\n            this.visible = false;\n        }\n        search(q) {\n            if (!this.$box) {\n                return;\n            }\n            this.currentIndex = -1;\n            this.currentCount = 0;\n            DOM.$empty(this.$message);\n            this.$message.appendChild(document.createTextNode(Locales._('SEARCH_LOADING')));\n            this.$message.style.display = 'block';\n            SearchEngine.search(q, {\n                limit: 10,\n                recursive: true\n            }).then(result => {\n                this.renderResult(result);\n            }).catch(errors => {\n                console.error('PanelItemSearch::search()', 'errors', errors);\n            });\n        }\n        renderResult(list) {\n            if (!this.$box) {\n                return;\n            }\n            const root = this.$box.querySelector('ul');\n            DOM.$empty(root);\n            this.currentCount = list.length;\n            if (this.currentCount) {\n                this.$message.style.display = 'none';\n            } else {\n                DOM.$empty(this.$message);\n                this.$message.appendChild(document.createTextNode(Locales._('SEARCH_NO_RESULTS')));\n                this.$message.style.display = 'block';\n            }\n            list.forEach(function (l) {\n                const img = document.createElement('img');\n                img.src = l.icon;\n                const title = document.createElement('div');\n                title.className = 'Title';\n                title.appendChild(document.createTextNode(l.title));\n                const description = document.createElement('div');\n                description.className = 'Message';\n                description.appendChild(document.createTextNode(l.description));\n                const node = document.createElement('li');\n                node.setAttribute('data-launch', l.launch.application);\n                node.setAttribute('data-args', JSON.stringify(l.launch.args));\n                if (l.launch.file) {\n                    node.setAttribute('data-file', l.launch.file.path);\n                    node.setAttribute('data-mime', l.launch.file.mime);\n                    node.setAttribute('data-type', l.launch.file.type);\n                }\n                node.appendChild(img);\n                node.appendChild(title);\n                node.appendChild(description);\n                root.appendChild(node);\n            });\n        }\n        updateSelection() {\n            const root = this.$box.querySelector('ul');\n            const child = root.children[this.currentIndex];\n            root.querySelectorAll('li').forEach(function (el) {\n                DOM.$removeClass(el, 'active');\n            });\n            DOM.$addClass(child, 'active');\n        }\n        navigateUp() {\n            if (!this.currentCount) {\n                return;\n            }\n            if (this.currentIndex > 0) {\n                this.currentIndex--;\n            } else {\n                this.currentIndex = this.currentCount - 1;\n            }\n            this.updateSelection();\n        }\n        navigateDown() {\n            if (!this.currentCount) {\n                return;\n            }\n            if (this.currentIndex < 0 || this.currentIndex >= this.currentCount - 1) {\n                this.currentIndex = 0;\n            } else {\n                this.currentIndex++;\n            }\n            this.updateSelection();\n        }\n        navigateOpen() {\n            if (this.currentIndex === -1 || !this.currentCount) {\n                return;\n            }\n            const root = this.$box.querySelector('ul');\n            const child = root.children[this.currentIndex];\n            if (child) {\n                this.launch(child);\n            }\n        }\n    };\n});\ndefine('osjs-apps-corewm/panelitems/weather',['../panelitem'], function (PanelItem) {\n    'use strict';\n    const DOM = OSjs.require('utils/dom');\n    const Utils = OSjs.require('utils/misc');\n    const Theme = OSjs.require('core/theme');\n    const Events = OSjs.require('utils/events');\n    const Connection = OSjs.require('core/connection');\n    return class PanelItemWeather extends PanelItem {\n        constructor() {\n            super('PanelItemWeather corewm-panel-right corewm-panel-dummy');\n            this.clockInterval = null;\n            this.position = null;\n            this.interval = null;\n            this.$element = null;\n            this.$image = null;\n            if (navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition(pos => {\n                    this.position = pos;\n                    setTimeout(() => this.updateWeather(), 100);\n                });\n            }\n        }\n        init() {\n            const root = super.init(...arguments);\n            this.$element = document.createElement('li');\n            this.$image = document.createElement('img');\n            this.$element.appendChild(this.$image);\n            this._$container.appendChild(this.$element);\n            this.updateWeather();\n            return root;\n        }\n        destroy() {\n            Events.$unbind(this._$root, 'click');\n            this.interval = clearInterval(this.interval);\n            this.$image = DOM.$remove(this.$image);\n            this.$element = DOM.$remove(this.$element);\n            return super.destroy(...arguments);\n        }\n        updateWeather() {\n            if (!this.$image) {\n                return;\n            }\n            this.$image.title = 'Not allowed or unavailable';\n            var busy = false;\n            const setImage = src => {\n                if (this.$image) {\n                    this.$image.src = src;\n                }\n            };\n            const setWeather = (name, weather, main) => {\n                if (!this.$image) {\n                    return;\n                }\n                name = name || '<unknown location>';\n                weather = weather || {};\n                main = main || {};\n                var desc = weather.description || '<unknown weather>';\n                var temp = main.temp || '<unknown temp>';\n                if (main.temp) {\n                    temp += 'C';\n                }\n                var icon = 'sunny.png';\n                switch (desc) {\n                case 'clear sky':\n                    if (weather.icon === '01n') {\n                        icon = 'weather-clear-night.png';\n                    } else {\n                        icon = 'weather-clear.png';\n                    }\n                    break;\n                case 'few clouds':\n                    if (weather.icon === '02n') {\n                        icon = 'weather-few-clouds-night.png';\n                    } else {\n                        icon = 'weather-few-clouds.png';\n                    }\n                    break;\n                case 'scattered clouds':\n                case 'broken clouds':\n                    icon = 'weather-overcast.png';\n                    break;\n                case 'shower rain':\n                    icon = 'weather-showers.png';\n                    break;\n                case 'rain':\n                    icon = 'weather-showers-scattered.png';\n                    break;\n                case 'thunderstorm':\n                    icon = 'stock_weather-storm.png';\n                    break;\n                case 'snow':\n                    icon = 'stock_weather-snow.png';\n                    break;\n                case 'mist':\n                    icon = 'stock_weather-fog.png';\n                    break;\n                default:\n                    if (desc.match(/rain$/)) {\n                        icon = 'weather-showers-scattered.png';\n                    }\n                    break;\n                }\n                var src = Theme.getIcon('status/' + icon);\n                this.$image.title = Utils.format('{0} - {1} - {2}', name, desc, temp);\n                setImage(src);\n            };\n            const updateWeather = () => {\n                if (busy || !this.position) {\n                    return;\n                }\n                busy = true;\n                var lat = this.position.coords.latitude;\n                var lon = this.position.coords.longitude;\n                var unt = 'metric';\n                var key = '4ea33327bcfa4ea0293b2d02b6fda385';\n                var url = Utils.format('http://api.openweathermap.org/data/2.5/weather?lat={0}&lon={1}&units={2}&APPID={3}', lat, lon, unt, key);\n                Connection.request('curl', { url: url }).then(response => {\n                    if (response) {\n                        var result = null;\n                        try {\n                            result = JSON.parse(response.body);\n                        } catch (e) {\n                        }\n                        if (result) {\n                            setWeather(result.name, result.weather ? result.weather[0] : null, result.main);\n                        }\n                    }\n                    busy = false;\n                }).catch(() => {\n                    busy = false;\n                });\n            };\n            setImage(Theme.getIcon('status/weather-severe-alert.png'));\n            this.interval = setInterval(function () {\n                updateWeather();\n            }, 60 * 60 * 1000);\n            Events.$bind(this._$root, 'click', () => updateWeather());\n            setTimeout(() => updateWeather(), 1000);\n        }\n    };\n});\ndefine('osjs-apps-corewm/panelitems/windowlist',['../panelitem'], function (PanelItem) {\n    'use strict';\n    const GUI = OSjs.require('utils/gui');\n    const DOM = OSjs.require('utils/dom');\n    const Events = OSjs.require('utils/events');\n    const WindowManager = OSjs.require('core/window-manager');\n    class WindowListEntry {\n        constructor(win, className) {\n            const el = document.createElement('li');\n            el.className = className;\n            el.title = win._title;\n            el.setAttribute('role', 'button');\n            el.setAttribute('aria-label', win._title);\n            const img = document.createElement('img');\n            img.alt = win._title;\n            img.src = win._icon;\n            const span = document.createElement('span');\n            span.appendChild(document.createTextNode(win._title));\n            el.appendChild(img);\n            el.appendChild(span);\n            Events.$bind(el, 'click', function () {\n                win._restore(false, true);\n            });\n            Events.$bind(el, 'contextmenu', function (ev) {\n                ev.preventDefault();\n                if (win) {\n                    win._onWindowIconClick(ev, this);\n                }\n                return false;\n            });\n            let peeking = false;\n            GUI.createDroppable(el, {\n                onDrop: function (ev, el) {\n                    if (win) {\n                        win._focus();\n                    }\n                },\n                onLeave: function () {\n                    if (peeking) {\n                        peeking = false;\n                    }\n                },\n                onEnter: function (ev, inst, args) {\n                    if (!peeking) {\n                        if (win) {\n                            win._focus();\n                        }\n                        peeking = true;\n                    }\n                },\n                onItemDropped: function (ev, el, item, args) {\n                    if (win) {\n                        return win._onDndEvent(ev, 'itemDrop', item, args);\n                    }\n                    return false;\n                },\n                onFilesDropped: function (ev, el, files, args) {\n                    if (win) {\n                        return win._onDndEvent(ev, 'filesDrop', files, args);\n                    }\n                    return false;\n                }\n            });\n            if (win._state.focused) {\n                el.className += ' Focused';\n            }\n            this.$element = el;\n            this.id = win._wid;\n        }\n        destroy() {\n            if (this.$element) {\n                Events.$unbind(this.$element, 'click');\n                Events.$unbind(this.$element, 'contextmenu');\n                this.$element = DOM.$remove(this.$element);\n            }\n        }\n        event(ev, win, parentEl) {\n            const cn = 'WindowList_Window_' + win._wid;\n            function _change(cn, callback) {\n                const els = parentEl.getElementsByClassName(cn);\n                if (els.length) {\n                    for (let i = 0, l = els.length; i < l; i++) {\n                        if (els[i] && els[i].parentNode) {\n                            callback(els[i]);\n                        }\n                    }\n                }\n            }\n            if (ev === 'focus') {\n                _change(cn, function (el) {\n                    el.className += ' Focused';\n                });\n            } else if (ev === 'blur') {\n                _change(cn, function (el) {\n                    el.className = el.className.replace(/\\s?Focused/, '');\n                });\n            } else if (ev === 'title') {\n                _change(cn, function (el) {\n                    el.setAttribute('aria-label', win._title);\n                    const span = el.getElementsByTagName('span')[0];\n                    if (span) {\n                        DOM.$empty(span);\n                        span.appendChild(document.createTextNode(win._title));\n                    }\n                    const img = el.getElementsByTagName('img')[0];\n                    if (img) {\n                        img.alt = win._title;\n                    }\n                });\n            } else if (ev === 'icon') {\n                _change(cn, function (el) {\n                    el.getElementsByTagName('img')[0].src = win._icon;\n                });\n            } else if (ev === 'attention_on') {\n                _change(cn, function (el) {\n                    if (!el.className.match(/Attention/)) {\n                        el.className += ' Attention';\n                    }\n                });\n            } else if (ev === 'attention_off') {\n                _change(cn, function (el) {\n                    if (!el.className.match(/Attention/)) {\n                        el.className = el.className.replace(/\\s?Attention/, '');\n                    }\n                });\n            } else if (ev === 'close') {\n                return false;\n            }\n            return true;\n        }\n    }\n    return class PanelItemWindowList extends PanelItem {\n        constructor() {\n            super('PanelItemWindowList corewm-panel-expand');\n            this.entries = [];\n        }\n        init() {\n            const root = super.init(...arguments);\n            const wm = WindowManager.instance;\n            if (wm) {\n                const wins = wm.getWindows();\n                for (let i = 0; i < wins.length; i++) {\n                    if (wins[i]) {\n                        this.update('create', wins[i]);\n                    }\n                }\n            }\n            return root;\n        }\n        destroy() {\n            this.entries.forEach(function (e) {\n                try {\n                    e.destroy();\n                } catch (e) {\n                }\n                e = null;\n            });\n            this.entries = [];\n            return super.destroy(...arguments);\n        }\n        update(ev, win) {\n            if (!this._$container || win && win._properties.allow_windowlist === false) {\n                return;\n            }\n            let entry = null;\n            if (ev === 'create') {\n                const className = 'corewm-panel-ellipsis WindowList_Window_' + win._wid;\n                if (this._$container.getElementsByClassName(className).length) {\n                    return;\n                }\n                entry = new WindowListEntry(win, className);\n                this.entries.push(entry);\n                this._$container.appendChild(entry.$element);\n            } else {\n                let found = -1;\n                this.entries.forEach(function (e, idx) {\n                    if (e.id === win._wid) {\n                        found = idx;\n                    }\n                    return found !== -1;\n                });\n                entry = this.entries[found];\n                if (entry) {\n                    if (entry.event(ev, win, this._$container) === false) {\n                        entry.destroy();\n                        this.entries.splice(found, 1);\n                    }\n                }\n            }\n        }\n    };\n});\ndefine('osjs-apps-corewm/scheme.html',[], function() { return \"<application-window data-id=\\\"ClockSettingsDialog\\\">\\r\\n  <gui-vbox>\\r\\n    <gui-vbox-container data-grow=\\\"1\\\" data-shrink=\\\"0\\\">\\r\\n      <gui-label>Time Format String:</gui-label>\\r\\n    </gui-vbox-container>\\r\\n    <gui-vbox-container data-grow=\\\"1\\\" data-shrink=\\\"0\\\" data-expand=\\\"true\\\">\\r\\n      <gui-text data-id=\\\"InputTimeFormatString\\\">H:i:s</gui-text>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-grow=\\\"1\\\" data-shrink=\\\"0\\\">\\r\\n      <gui-label>Tooltip Format String:</gui-label>\\r\\n    </gui-vbox-container>\\r\\n    <gui-vbox-container data-grow=\\\"1\\\" data-shrink=\\\"0\\\" data-expand=\\\"true\\\">\\r\\n      <gui-text data-id=\\\"InputTooltipFormatString\\\">l, j F Y</gui-text>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-grow=\\\"1\\\" data-shrink=\\\"0\\\">\\r\\n      <gui-label>Interval:</gui-label>\\r\\n    </gui-vbox-container>\\r\\n    <gui-vbox-container data-grow=\\\"1\\\" data-shrink=\\\"0\\\" data-expand=\\\"true\\\">\\r\\n      <gui-select data-id=\\\"InputInterval\\\">\\r\\n        <gui-select-option data-value=\\\"1000\\\">1 second</gui-select-option>\\r\\n        <gui-select-option data-value=\\\"60000\\\">1 minute</gui-select-option>\\r\\n        <gui-select-option data-value=\\\"3600000\\\">1 hour</gui-select-option>\\r\\n      </gui-select>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-grow=\\\"1\\\" data-shrink=\\\"0\\\">\\r\\n      <gui-label>UTC Time:</gui-label>\\r\\n    </gui-vbox-container>\\r\\n    <gui-vbox-container data-grow=\\\"1\\\" data-shrink=\\\"0\\\">\\r\\n      <gui-checkbox data-id=\\\"InputUseUTC\\\"></gui-checkbox>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-shrink=\\\"1\\\" data-align=\\\"end\\\">\\r\\n      <gui-hbox>\\r\\n        <gui-hbox-container data-grow=\\\"0\\\" data-shrink=\\\"1\\\">\\r\\n          <gui-button data-id=\\\"ButtonApply\\\">Apply</gui-button>\\r\\n          <gui-button data-id=\\\"ButtonCancel\\\">Cancel</gui-button>\\r\\n        </gui-hbox-container>\\r\\n      </gui-hbox>\\r\\n    </gui-vbox-container>\\r\\n  </gui-vbox>\\r\\n</application-window>\\r\\n\\r\\n<application-window data-id=\\\"IconViewShortcutDialog\\\">\\r\\n  <gui-vbox>\\r\\n    <gui-vbox-container data-grow=\\\"0\\\" data-shrink=\\\"0\\\">\\r\\n      <gui-label>Launch:</gui-label>\\r\\n    </gui-vbox-container>\\r\\n    <gui-vbox-container data-grow=\\\"0\\\" data-shrink=\\\"0\\\" data-expand=\\\"true\\\">\\r\\n      <gui-text data-id=\\\"InputShortcutLaunch\\\">ApplicationClassName</gui-text>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-grow=\\\"0\\\" data-shrink=\\\"0\\\">\\r\\n      <gui-label>Label:</gui-label>\\r\\n    </gui-vbox-container>\\r\\n    <gui-vbox-container data-grow=\\\"0\\\" data-shrink=\\\"0\\\" data-expand=\\\"true\\\">\\r\\n      <gui-text data-id=\\\"InputShortcutLabel\\\"></gui-text>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-grow=\\\"0\\\" data-shrink=\\\"0\\\">\\r\\n      <gui-label>Launch arguments:</gui-label>\\r\\n    </gui-vbox-container>\\r\\n    <gui-vbox-container data-grow=\\\"0\\\" data-shrink=\\\"0\\\" data-expand=\\\"true\\\">\\r\\n      <gui-text data-id=\\\"InputTooltipFormatString\\\"></gui-text>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <gui-vbox-container data-shrink=\\\"1\\\" data-align=\\\"end\\\">\\r\\n      <gui-hbox>\\r\\n        <gui-hbox-container data-grow=\\\"0\\\" data-shrink=\\\"1\\\">\\r\\n          <gui-button data-id=\\\"ButtonApply\\\">Apply</gui-button>\\r\\n          <gui-button data-id=\\\"ButtonCancel\\\">Cancel</gui-button>\\r\\n        </gui-hbox-container>\\r\\n      </gui-hbox>\\r\\n    </gui-vbox-container>\\r\\n  </gui-vbox>\\r\\n</application-window>\\r\\n\"; });\ndefine('osjs-apps-corewm/main',[\n    './locales',\n    './windowswitcher',\n    './iconview',\n    './panel',\n    './widgets/digitalclock',\n    './widgets/analogclock',\n    './panelitems/appmenu',\n    './panelitems/buttons',\n    './panelitems/clock',\n    './panelitems/notificationarea',\n    './panelitems/search',\n    './panelitems/weather',\n    './panelitems/windowlist',\n    './scheme.html'\n], function (Translations, WindowSwitcher, DesktopIconView, Panel, WidgetDigitalClock, WidgetAnalogClock, PanelItemAppMenu, PanelItemButtons, PanelItemClock, PanelItemNotificationArea, PanelItemSearch, PanelItemWeather, PanelItemWindowList, schemeHtml) {\n    'use strict';\n    const Menu = OSjs.require('gui/menu');\n    const Locales = OSjs.require('core/locales');\n    const GUIScheme = OSjs.require('gui/scheme');\n    const Config = OSjs.require('core/config');\n    const Authenticator = OSjs.require('core/authenticator');\n    const Application = OSjs.require('core/application');\n    const PackageManager = OSjs.require('core/package-manager');\n    const WindowManager = OSjs.require('core/window-manager');\n    const SettingsFragment = OSjs.require('helpers/settings-fragment');\n    const SettingsManager = OSjs.require('core/settings-manager');\n    const Events = OSjs.require('utils/events');\n    const Compability = OSjs.require('utils/compability');\n    const FileMetadata = OSjs.require('vfs/file');\n    const Notification = OSjs.require('gui/notification');\n    const Theme = OSjs.require('core/theme');\n    const DOM = OSjs.require('utils/dom');\n    const Colors = OSjs.require('utils/colors');\n    const Utils = OSjs.require('utils/misc');\n    const Init = OSjs.require('core/init');\n    const GUI = OSjs.require('utils/gui');\n    const VFS = OSjs.require('vfs/fs');\n    const FS = OSjs.require('utils/fs');\n    const ServiceNotificationIcon = OSjs.require('helpers/service-notification-icon');\n    const PADDING_PANEL_AUTOHIDE = 10;\n    function defaultSettings(defaults) {\n        const compability = Compability.getCompability();\n        let cfg = {\n            animations: compability.css.animation,\n            useTouchMenu: compability.touch\n        };\n        if (defaults) {\n            cfg = Utils.mergeObject(cfg, defaults);\n        }\n        return cfg;\n    }\n    const translate = Locales.createLocalizer(Translations);\n    class CoreWM extends WindowManager {\n        constructor(args, metadata) {\n            const importSettings = args.defaults || {};\n            super('CoreWM', args, metadata, defaultSettings(importSettings));\n            this.panels = [];\n            this.widgets = [];\n            this.switcher = null;\n            this.iconView = null;\n            this.importedSettings = Utils.mergeObject(Config.getConfig('SettingsManager.CoreWM'), importSettings);\n            this._scheme = GUIScheme.fromString(schemeHtml);\n            this.generatedHotkeyMap = {};\n            function _winGenericHotkey(ev, win, wm, hotkey) {\n                if (win) {\n                    win._onKeyEvent(ev, 'keydown', hotkey);\n                }\n            }\n            this.hotkeyMap = {\n                SEARCH: function (ev, win, wm) {\n                    if (wm) {\n                        const panel = wm.getPanel();\n                        if (panel) {\n                            const pitem = panel.getItemByType(OSjs.Applications.CoreWM.PanelItems.Search);\n                            if (pitem) {\n                                ev.preventDefault();\n                                pitem.show();\n                            }\n                        }\n                    }\n                },\n                SWITCHER: function (ev, win, wm) {\n                    if (wm.getSetting('enableSwitcher') && wm.switcher) {\n                        wm.switcher.show(ev, win, wm);\n                    }\n                },\n                WINDOW_MINIMIZE: function (ev, win) {\n                    if (win) {\n                        win._minimize();\n                    }\n                },\n                WINDOW_MAXIMIZE: function (ev, win) {\n                    if (win) {\n                        win._maximize();\n                    }\n                },\n                WINDOW_RESTORE: function (ev, win) {\n                    if (win) {\n                        win._restore();\n                    }\n                },\n                WINDOW_MOVE_LEFT: function (ev, win) {\n                    if (win) {\n                        win._moveTo('left');\n                    }\n                },\n                WINDOW_MOVE_RIGHT: function (ev, win) {\n                    if (win) {\n                        win._moveTo('right');\n                    }\n                },\n                WINDOW_MOVE_UP: function (ev, win) {\n                    if (win) {\n                        win._moveTo('top');\n                    }\n                },\n                WINDOW_MOVE_DOWN: function (ev, win) {\n                    if (win) {\n                        win._moveTo('bottom');\n                    }\n                },\n                SAVE: _winGenericHotkey,\n                SAVEAS: _winGenericHotkey,\n                OPEN: _winGenericHotkey\n            };\n            Theme.update(this.importedSettings);\n        }\n        setup() {\n            const initNotifications = () => {\n                ServiceNotificationIcon.init();\n                const user = Authenticator.instance.getUser();\n                const displayMenu = ev => {\n                    Menu.create([{\n                            title: Locales._('TITLE_SIGN_OUT'),\n                            onClick: function () {\n                                Init.logout();\n                            }\n                        }], ev);\n                    return false;\n                };\n                const toggleFullscreen = () => {\n                    const docElm = document.documentElement;\n                    const notif = Notification.getIcon('_FullscreenNotification');\n                    if (notif) {\n                        this.toggleFullscreen(notif.opts._isFullscreen ? document : docElm, !notif.opts._isFullscreen);\n                    }\n                };\n                const displayDevMenu = ev => {\n                    const don = DOM.$hasClass(document.body, 'debug');\n                    const apps = Application.getProcesses().filter(function (iter) {\n                        return iter !== null && iter instanceof Application;\n                    }).map(function (iter) {\n                        return {\n                            title: iter.__label + ' (pid:' + iter.__pid + ')',\n                            onClick: function () {\n                                Application.reload(iter.__pid);\n                            }\n                        };\n                    });\n                    const mnu = [\n                        {\n                            title: don ? 'Turn off debug overlay' : 'Turn on debug overlay',\n                            onClick: function () {\n                                if (don) {\n                                    DOM.$removeClass(document.body, 'debug');\n                                } else {\n                                    DOM.$addClass(document.body, 'debug');\n                                }\n                            }\n                        },\n                        {\n                            title: 'Reload manifest',\n                            onClick: function () {\n                                PackageManager.init();\n                            }\n                        },\n                        {\n                            title: 'Reload running application',\n                            menu: apps\n                        }\n                    ];\n                    Menu.create(mnu, ev);\n                };\n                if (Config.getConfig('Debug')) {\n                    Notification.createIcon('_DeveloperNotification', {\n                        icon: Theme.getIcon('categories/applications-development.png', '16x16'),\n                        title: 'Developer Tools',\n                        onContextMenu: displayDevMenu,\n                        onClick: displayDevMenu\n                    });\n                }\n                if (this.getSetting('fullscreen')) {\n                    Notification.createIcon('_FullscreenNotification', {\n                        icon: Theme.getIcon('actions/view-fullscreen.png', '16x16'),\n                        title: 'Enter fullscreen',\n                        onClick: toggleFullscreen,\n                        _isFullscreen: false\n                    });\n                }\n                Notification.createIcon('_HandlerUserNotification', {\n                    icon: Theme.getIcon('status/avatar-default.png', '16x16'),\n                    title: Locales._('TITLE_SIGNED_IN_AS_FMT', user.username),\n                    onContextMenu: displayMenu,\n                    onClick: displayMenu\n                });\n            };\n            this.applySettings(this._settings.get());\n            try {\n                VFS.watch(new FileMetadata(this.getSetting('desktopPath'), 'dir'), (msg, obj) => {\n                    if (!obj || msg.match(/^vfs:(un)?mount/)) {\n                        return;\n                    }\n                    if (this.iconView) {\n                        this.iconView._refresh();\n                    }\n                });\n            } catch (e) {\n                console.warn('Failed to apply CoreWM VFS watch', e, e.stack);\n            }\n            this.initSwitcher();\n            this.initDesktop();\n            this.initPanels();\n            this.initWidgets();\n            this.initIconView();\n            initNotifications();\n            return Promise.resolve();\n        }\n        destroy(force) {\n            if (!force && !window.confirm(translate('Killing this process will stop things from working!'))) {\n                return false;\n            }\n            ServiceNotificationIcon.destroy();\n            try {\n                Events.$unbind(document.body, 'dragenter, dragleave, dragover, drop');\n                Notification.destroyIcon('_HandlerUserNotification');\n                if (this.iconView) {\n                    this.iconView.destroy();\n                }\n                if (this.switcher) {\n                    this.switcher.destroy();\n                }\n                this.destroyPanels();\n                this.destroyWidgets();\n                const settings = this.importedSettings;\n                try {\n                    settings.background = 'color';\n                } catch (e) {\n                }\n            } catch (e) {\n                console.warn(e);\n                return false;\n            }\n            this.switcher = null;\n            this.iconView = null;\n            return super.destroy(...arguments);\n        }\n        destroyPanels() {\n            this.panels.forEach(function (p) {\n                p.destroy();\n            });\n            this.panels = [];\n        }\n        destroyWidgets() {\n            this.widgets.forEach(function (w) {\n                w.destroy();\n            });\n            this.widgets = [];\n        }\n        initSwitcher() {\n            this.switcher = new WindowSwitcher();\n        }\n        initDesktop() {\n            GUI.createDroppable(document.body, {\n                onOver: (ev, el, args) => this.onDropOver(ev, el, args),\n                onLeave: () => this.onDropLeave(),\n                onDrop: () => this.onDrop(),\n                onItemDropped: (ev, el, item, args) => this.onDropItem(ev, el, item, args),\n                onFilesDropped: (ev, el, files, args) => this.onDropFile(ev, el, files, args)\n            });\n        }\n        initPanels(applySettings) {\n            const ps = this.getSetting('panels');\n            let added = false;\n            if (ps === false) {\n                added = true;\n            } else {\n                this.destroyPanels();\n                (ps || []).forEach(storedItem => {\n                    if (!storedItem.options) {\n                        storedItem.options = {};\n                    }\n                    const panelSettings = new SettingsFragment(storedItem.options, 'CoreWM', SettingsManager);\n                    const p = new Panel('Default', panelSettings, this);\n                    p.init(document.body);\n                    (storedItem.items || []).forEach(iter => {\n                        try {\n                            if (typeof iter.settings === 'undefined' || iter.settings === null) {\n                                iter.settings = {};\n                            }\n                            let itemSettings = {};\n                            try {\n                                itemSettings = new SettingsFragment(iter.settings, 'CoreWM', SettingsManager);\n                            } catch (ex) {\n                                console.warn('An error occured while loading PanelItem settings', ex);\n                                console.warn('stack', ex.stack);\n                            }\n                            p.addItem(new OSjs.Applications.CoreWM.PanelItems[iter.name](itemSettings));\n                            added = true;\n                        } catch (e) {\n                            console.warn('An error occured while creating PanelItem', e);\n                            console.warn('stack', e.stack);\n                            Notification.create({\n                                icon: Theme.getIcon('status/dialog-warning.png', '32x32'),\n                                title: 'CoreWM',\n                                message: translate('An error occured while creating PanelItem: {0}', e)\n                            });\n                        }\n                    });\n                    this.panels.push(p);\n                });\n            }\n            if (!added) {\n                Notification.create({\n                    timeout: 0,\n                    icon: Theme.getIcon('status/dialog-warning.png', '32x32'),\n                    title: 'CoreWM',\n                    message: translate('Your panel has no items. Go to settings to reset default or modify manually\\n(This error may occur after upgrades of OS.js)')\n                });\n            }\n            if (applySettings) {\n                const p = this.panels[0];\n                if (p && p.getOntop() && p.getPosition('top')) {\n                    setTimeout(() => {\n                        const space = this.getWindowSpace();\n                        this._windows.forEach(function (iter) {\n                            if (iter && iter._position.y < space.top) {\n                                console.warn('CoreWM::initPanels()', 'I moved this window because it overlapped with a panel!', iter);\n                                iter._move(iter._position.x, space.top);\n                            }\n                        });\n                    }, 800);\n                }\n                if (this.iconView) {\n                    this.iconView.resize(this);\n                }\n            }\n            setTimeout(() => {\n                this.setStyles(this._settings.get());\n            }, 250);\n        }\n        initWidgets(applySettings) {\n            this.destroyWidgets();\n            const widgets = this.getSetting('widgets');\n            (widgets || []).forEach(item => {\n                if (!item.settings) {\n                    item.settings = {};\n                }\n                const settings = new SettingsFragment(item.settings, 'CoreWM', SettingsManager);\n                try {\n                    const w = new OSjs.Applications.CoreWM.Widgets[item.name](settings);\n                    w.init(document.body);\n                    this.widgets.push(w);\n                    w._inited();\n                } catch (e) {\n                    console.warn('CoreWM::initWidgets()', e, e.stack);\n                }\n            });\n        }\n        initIconView() {\n            const en = this.getSetting('enableIconView');\n            if (!en && this.iconView) {\n                this.iconView.destroy();\n                this.iconView = null;\n                return;\n            }\n            if (en && !this.iconView) {\n                this.iconView = new DesktopIconView(this);\n                document.body.appendChild(this.iconView.getRoot());\n            }\n            setTimeout(() => {\n                if (this.iconView) {\n                    this.iconView.resize(this);\n                }\n            }, 280);\n        }\n        resize(ev, rect, wasInited) {\n            super.resize(...arguments);\n            const space = this.getWindowSpace();\n            const margin = this.getSetting('desktopMargin');\n            const windows = this._windows;\n            function moveIntoView() {\n                let i = 0, l = windows.length, iter, wrect;\n                let mx, my, moved;\n                for (i; i < l; i++) {\n                    iter = windows[i];\n                    if (!iter) {\n                        continue;\n                    }\n                    wrect = iter._getViewRect();\n                    if (wrect === null || iter._state.mimimized) {\n                        continue;\n                    }\n                    mx = iter._position.x;\n                    my = iter._position.y;\n                    moved = false;\n                    if (wrect.left + margin > rect.width) {\n                        mx = space.width - iter._dimension.w;\n                        moved = true;\n                    }\n                    if (wrect.top + margin > rect.height) {\n                        my = space.height - iter._dimension.h;\n                        moved = true;\n                    }\n                    if (moved) {\n                        if (mx < space.left) {\n                            mx = space.left;\n                        }\n                        if (my < space.top) {\n                            my = space.top;\n                        }\n                        iter._move(mx, my);\n                    }\n                    if (iter._state.maximized && (wasInited ? iter._restored : true)) {\n                        iter._restore(true, false);\n                    }\n                }\n            }\n            if (!this._isResponsive) {\n                if (this.getSetting('moveOnResize')) {\n                    moveIntoView();\n                }\n            }\n        }\n        onDropLeave() {\n            document.body.setAttribute('data-attention', 'false');\n        }\n        onDropOver() {\n            document.body.setAttribute('data-attention', 'true');\n        }\n        onDrop() {\n            document.body.setAttribute('data-attention', 'false');\n        }\n        onDropItem(ev, el, item, args) {\n            document.body.setAttribute('data-attention', 'false');\n            const _applyWallpaper = data => {\n                this.applySettings({ wallpaper: data.path }, false, true);\n            };\n            const _createShortcut = data => {\n                if (this.iconView) {\n                    this.iconView.addShortcut(data, this, true);\n                }\n            };\n            const _openMenu = data => {\n                Menu.create([\n                    {\n                        title: translate('LBL_COPY'),\n                        onClick: () => {\n                            const dst = FS.pathJoin(this.getSetting('desktopPath'), data.filename);\n                            VFS.copy(data, dst);\n                        }\n                    },\n                    {\n                        title: translate('Set as wallpaper'),\n                        onClick: () => {\n                            _applyWallpaper(data);\n                        }\n                    }\n                ], ev);\n            };\n            if (item) {\n                const data = item.data;\n                if (item.type === 'file') {\n                    if (data && data.mime) {\n                        if (data.mime.match(/^image/)) {\n                            if (this.iconView) {\n                                _openMenu(data);\n                            } else {\n                                _applyWallpaper(data);\n                            }\n                        } else {\n                            _createShortcut(data);\n                        }\n                    }\n                } else if (item.type === 'application') {\n                    _createShortcut(data);\n                }\n            }\n        }\n        onDropFile(ev, el, files, args) {\n            VFS.upload({\n                destination: 'desktop:///',\n                files: files\n            });\n        }\n        onContextMenu(ev) {\n            if (ev.target === document.body) {\n                ev.preventDefault();\n                this.openDesktopMenu(ev);\n                return false;\n            }\n            return true;\n        }\n        onKeyUp(ev, win) {\n            if (!ev) {\n                return;\n            }\n            if (!ev.altKey) {\n                if (this.switcher) {\n                    this.switcher.hide(ev, win, this);\n                }\n            }\n        }\n        onKeyDown(ev, win) {\n            let combination = false;\n            if (ev) {\n                const map = this.generatedHotkeyMap;\n                Object.keys(map).some(i => {\n                    if (Events.keyCombination(ev, i)) {\n                        map[i](ev, win, this);\n                        combination = i;\n                        return true;\n                    }\n                    return false;\n                });\n            }\n            return combination;\n        }\n        showSettings(category) {\n            Application.create('ApplicationSettings', { category: category });\n        }\n        eventWindow(ev, win) {\n            this.panels.forEach(function (panel) {\n                if (panel) {\n                    const panelItem = panel.getItem(OSjs.Applications.CoreWM.PanelItems.WindowList);\n                    if (panelItem) {\n                        panelItem.update(ev, win);\n                    }\n                }\n            });\n            if (ev === 'focus') {\n                if (this.iconView) {\n                    this.iconView.blur();\n                    this.widgets.forEach(function (w) {\n                        w.blur();\n                    });\n                }\n            }\n        }\n        getNotificationArea() {\n            const panelId = 0;\n            const panel = this.panels[panelId];\n            if (panel) {\n                return panel.getItem(OSjs.Applications.CoreWM.PanelItems.NotificationArea);\n            }\n            return null;\n        }\n        _getContextMenu(arg) {\n            let menu = [];\n            if (this.iconView) {\n                menu = this.iconView._getContextMenu(arg);\n            }\n            menu.push({\n                title: translate('Open settings'),\n                onClick: () => this.showSettings()\n            });\n            if (this.getSetting('enableIconView') === true) {\n                menu.push({\n                    title: translate('Hide Icons'),\n                    onClick: ev => {\n                        this.applySettings({ enableIconView: false }, false, true);\n                    }\n                });\n            } else {\n                menu.push({\n                    title: translate('Show Icons'),\n                    onClick: ev => {\n                        this.applySettings({ enableIconView: true }, false, true);\n                    }\n                });\n            }\n            return menu;\n        }\n        openDesktopMenu(ev) {\n            if (this._emit('wm:contextmenu', [\n                    ev,\n                    this\n                ]) === false) {\n                return;\n            }\n            const menu = this._getContextMenu();\n            Menu.create(menu, ev);\n        }\n        applySettings(settings, force, save, triggerWatch) {\n            console.group('CoreWM::applySettings()');\n            settings = force ? settings : Utils.mergeObject(this._settings.get(), settings);\n            console.log(settings);\n            Theme.update(settings, true);\n            this.setIconView(settings);\n            this.setStyles(settings);\n            if (save) {\n                this.initPanels(true);\n                this.initWidgets(true);\n                if (settings && save === true) {\n                    if (settings.language) {\n                        SettingsManager.set('Core', 'Locale', settings.language, triggerWatch);\n                        Locales.setLocale(settings.language);\n                    }\n                    this._settings.set(null, settings, save, triggerWatch);\n                }\n            }\n            this.generatedHotkeyMap = {};\n            const keys = this._settings.get('hotkeys');\n            const self = this;\n            Object.keys(keys).forEach(k => {\n                this.generatedHotkeyMap[keys[k]] = function () {\n                    const args = Array.prototype.slice.call(arguments);\n                    args.push(k);\n                    return self.hotkeyMap[k].apply(this, args);\n                };\n            });\n            console.groupEnd();\n            return true;\n        }\n        setIconView(settings) {\n            if (settings.enableIconView) {\n                this.initIconView();\n            } else {\n                if (this.iconView) {\n                    this.iconView.destroy();\n                    this.iconView = null;\n                }\n            }\n        }\n        setStyles(settings) {\n            let styles = {};\n            let raw = '';\n            if (settings.panels) {\n                settings.panels.forEach(function (p, i) {\n                    styles['corewm-panel'] = {};\n                    styles['corewm-notification'] = {};\n                    styles['corewm-notification:before'] = { 'opacity': p.options.opacity / 100 };\n                    styles['corewm-panel:before'] = { 'opacity': p.options.opacity / 100 };\n                    styles['.custom-notification'] = {};\n                    styles['.custom-notification:before'] = { 'opacity': p.options.opacity / 100 };\n                    if (p.options.background) {\n                        styles['corewm-panel:before']['background-color'] = p.options.background;\n                        styles['corewm-notification:before']['background-color'] = p.options.background;\n                        styles['.custom-notification:before']['background-color'] = p.options.background;\n                    }\n                    if (p.options.foreground) {\n                        styles['corewm-panel']['color'] = p.options.foreground;\n                        styles['corewm-notification']['color'] = p.options.foreground;\n                        styles['.custom-notification']['color'] = p.options.foreground;\n                    }\n                });\n            }\n            let mw = this.getDefaultSetting('fullscreenTrigger') || 800;\n            raw += '@media all and (max-width: ' + String(mw) + 'px) {\\n';\n            raw += 'application-window {\\n';\n            let borderSize = 0;\n            const space = this.getWindowSpace(true);\n            const theme = Theme.getStyleTheme(true);\n            if (theme && theme.style && theme.style.window) {\n                borderSize = theme.style.window.border;\n            }\n            raw += 'top: calc(' + String(space.top) + 'px + ' + borderSize + ') !important;\\n';\n            raw += 'left: calc(' + String(space.left) + 'px + ' + borderSize + ') !important;\\n';\n            raw += 'right: calc(' + String(borderSize) + ') !important;\\n';\n            raw += 'bottom: calc(' + (space.bottom ? String(space.bottom) + 'px + ' : '') + borderSize + ') !important;\\n';\n            raw += '\\n}';\n            raw += '\\n}';\n            styles['#CoreWMDesktopIconView'] = {};\n            if (settings.invertIconViewColor && settings.backgroundColor) {\n                styles['#CoreWMDesktopIconView']['color'] = Colors.invertHEX(settings.backgroundColor);\n            }\n            if (Object.keys(styles).length) {\n                this.createStylesheet(styles, raw);\n            }\n        }\n        getWindowSpace(noMargin) {\n            const s = super.getWindowSpace(...arguments);\n            const d = this.getSetting('desktopMargin');\n            s.bottom = 0;\n            this.panels.forEach(function (p) {\n                if (p && p.getOntop()) {\n                    const ph = p.getHeight();\n                    if (p.getAutohide() && p.isAutoHidden()) {\n                        s.top += PADDING_PANEL_AUTOHIDE;\n                        s.height -= PADDING_PANEL_AUTOHIDE;\n                    } else if (p.getPosition('top')) {\n                        s.top += ph;\n                        s.height -= ph;\n                    } else {\n                        s.height -= ph;\n                    }\n                    if (p._options.get('position') === 'bottom') {\n                        s.bottom += ph;\n                    }\n                }\n            });\n            if (!noMargin) {\n                if (d > 0) {\n                    s.top += d;\n                    s.left += d;\n                    s.width -= d * 2;\n                    s.height -= d * 2;\n                }\n            }\n            return s;\n        }\n        getWindowPosition(borders) {\n            borders = typeof borders === 'undefined' || borders === true;\n            let pos = super.getWindowPosition(...arguments);\n            const m = borders ? this.getSetting('desktopMargin') : 0;\n            pos.x += m || 0;\n            pos.y += m || 0;\n            this.panels.forEach(function (p) {\n                if (p && p.getOntop() && p.getPosition('top')) {\n                    if (p.getAutohide()) {\n                        pos.y += PADDING_PANEL_AUTOHIDE;\n                    } else {\n                        pos.y += p.getHeight();\n                    }\n                }\n            });\n            return pos;\n        }\n        getSetting(k) {\n            const val = super.getSetting(...arguments);\n            if (typeof val === 'undefined' || val === null) {\n                return defaultSettings(this.importedSettings)[k];\n            }\n            return val;\n        }\n        getDefaultSetting(k) {\n            const settings = defaultSettings(this.importedSettings);\n            if (typeof k !== 'undefined') {\n                return settings[k];\n            }\n            return settings;\n        }\n        getPanels() {\n            return this.panels;\n        }\n        getPanel(idx) {\n            return this.panels[idx || 0];\n        }\n        static get Widgets() {\n            return {\n                DigitalClock: WidgetDigitalClock,\n                AnalogClock: WidgetAnalogClock\n            };\n        }\n        static get PanelItems() {\n            return {\n                AppMenu: PanelItemAppMenu,\n                Buttons: PanelItemButtons,\n                Clock: PanelItemClock,\n                NotificationArea: PanelItemNotificationArea,\n                Search: PanelItemSearch,\n                Weather: PanelItemWeather,\n                WindowList: PanelItemWindowList\n            };\n        }\n    }\n    OSjs.Applications.CoreWM = CoreWM;\n});\ndefine('osjs-apps-corewm', ['osjs-apps-corewm/main'], function (main) { return main; });\n\n"]}