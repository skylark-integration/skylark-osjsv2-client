{"version":3,"sources":["osjs-apps-processviewer.js"],"names":[],"mappingsfile":"../osjs-apps-processviewer.js","sourcesContent":["/*!\r\n * OS.js - JavaScript Cloud/Web Desktop Platform\r\n *\r\n * Copyright (c) 2011-2017, Anders Evenrud <andersevenrud@gmail.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice, this\r\n *    list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\r\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n * @author  Anders Evenrud <andersevenrud@gmail.com>\r\n * @licence Simplified BSD License\r\n */\r\n\r\n/*eslint valid-jsdoc: \"off\"*/\r\n\r\nconst Window = OSjs.require('core/window');\r\nconst Application = OSjs.require('core/application');\r\n\r\nclass ApplicationProcessViewerWindow extends Window {\r\n\r\n  constructor(app, metadata) {\r\n    super('ApplicationProcessViewerWindow', {\r\n      icon: metadata.icon,\r\n      title: metadata.name,\r\n      width: 400,\r\n      height: 300\r\n    }, app);\r\n\r\n    this.interval = null;\r\n  }\r\n\r\n  init(wm, app) {\r\n    const root = super.init(...arguments);\r\n\r\n    // Load and set up scheme (GUI) here\r\n    this._render('ProcessViewerWindow', require('osjs-scheme-loader!scheme.html'));\r\n\r\n    var view = this._find('View');\r\n\r\n    function update() {\r\n      var now = new Date();\r\n      var rows = [];\r\n      Application.getProcesses().forEach(function(p) {\r\n        if ( p ) {\r\n          var alive = now - p.__started;\r\n          var iter = {\r\n            value: p.__pid,\r\n            id: p.__pid,\r\n            columns: [\r\n              {label: p.__pname},\r\n              {label: p.__pid.toString(), textalign: 'right'},\r\n              {label: alive.toString(), textalign: 'right'}\r\n            ]\r\n          };\r\n\r\n          rows.push(iter);\r\n        }\r\n      });\r\n\r\n      view.patch(rows);\r\n    }\r\n\r\n    view.set('columns', [\r\n      {label: 'Name'},\r\n      {label: 'PID', size: '60px', textalign: 'right'},\r\n      {label: 'Alive', size: '60px', textalign: 'right'}\r\n    ]);\r\n\r\n    this._find('ButtonKill').on('click', function() {\r\n      var selected = view.get('selected');\r\n      if ( selected && selected[0] && typeof selected[0].data !== 'undefined' ) {\r\n        Application.kill(selected[0].data);\r\n      }\r\n    });\r\n\r\n    this.interval = setInterval(function() {\r\n      update();\r\n    }, 1000);\r\n\r\n    update();\r\n\r\n    return root;\r\n  }\r\n\r\n  destroy() {\r\n    super.destroy(...arguments);\r\n\r\n    this.interval = clearInterval(this.interval);\r\n  }\r\n}\r\n\r\nclass ApplicationProcessViewer extends Application {\r\n\r\n  constructor(args, metadata) {\r\n    super('ApplicationProcessViewer', args, metadata);\r\n  }\r\n\r\n  init(settings, metadata) {\r\n    super.init(...arguments);\r\n    this._addWindow(new ApplicationProcessViewerWindow(this, metadata));\r\n  }\r\n\r\n}\r\n\r\nOSjs.Applications.ApplicationProcessViewer = ApplicationProcessViewer;\r\n\ndefine('osjs-apps-processviewer', ['osjs-apps-processviewer/main'], function (main) { return main; });\n\ndefine(\"osjs-apps-processviewer/main\", function(){});\n\n"]}