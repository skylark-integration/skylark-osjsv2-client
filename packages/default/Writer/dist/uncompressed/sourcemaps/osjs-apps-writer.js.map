{"version":3,"sources":["osjs-apps-writer.js"],"names":[],"mappingsfile":"../osjs-apps-writer.js","sourcesContent":["define('osjs-apps-writer/locales',[],function () {\n    'use strict';\n    return {\n        bg_BG: { 'Insert URL': 'Въведи URL' },\n        de_DE: { 'Insert URL': 'URL einfügen' },\n        es_ES: { 'Insert URL': 'Insertar URL' },\n        fr_FR: { 'Insert URL': 'Insérer une URL' },\n        ar_DZ: { 'Insert URL': 'أدخل رابط' },\n        it_IT: { 'Insert URL': 'Inserisci URL' },\n        ko_KR: { 'Insert URL': '링크 삽입' },\n        nl_NL: { 'Insert URL': 'URL invoegen' },\n        no_NO: { 'Insert URL': 'Sett inn URL' },\n        pl_PL: { 'Insert URL': 'Wpisz URL' },\n        ru_RU: { 'Insert URL': 'Вставить ссылку' },\n        sk_SK: { 'Insert URL': 'Vložiť URL' },\n        tr_TR: { 'Insert URL': 'URL ekle' },\n        vi_VN: { 'Insert URL': 'Thêm URL' }\n    };\n});\ndefine('osjs-apps-writer/scheme.html',[], function() { return \"<application-window data-id=\\\"WriterWindow\\\">\\r\\n\\r\\n  <gui-vbox>\\r\\n    <!-- MENU BAR -->\\r\\n    <gui-vbox-container data-grow=\\\"0\\\" data-shrink=\\\"1\\\" data-basis=\\\"auto\\\">\\r\\n      <gui-menu-bar>\\r\\n\\r\\n        <gui-menu-bar-entry data-label=\\\"LBL_FILE\\\">\\r\\n          <gui-menu data-id=\\\"SubmenuFile\\\">\\r\\n            <gui-menu-entry data-id=\\\"MenuNew\\\" data-label=\\\"LBL_NEW\\\"></gui-menu-entry>\\r\\n            <gui-menu-entry data-id=\\\"MenuOpen\\\" data-label=\\\"LBL_OPEN\\\"></gui-menu-entry>\\r\\n            <gui-menu-entry data-id=\\\"MenuSave\\\" data-label=\\\"LBL_SAVE\\\"></gui-menu-entry>\\r\\n            <gui-menu-entry data-id=\\\"MenuSaveAs\\\" data-label=\\\"LBL_SAVEAS\\\"></gui-menu-entry>\\r\\n            <gui-menu-entry data-id=\\\"MenuClose\\\" data-label=\\\"LBL_CLOSE\\\"></gui-menu-entry>\\r\\n          </gui-menu>\\r\\n        </gui-menu-bar-entry>\\r\\n\\r\\n        <gui-menu-bar-entry data-label=\\\"LBL_EDIT\\\">\\r\\n          <gui-menu data-id=\\\"SubmenuEdit\\\">\\r\\n            <gui-menu-entry data-id=\\\"MenuUndo\\\" data-label=\\\"LBL_UNDO\\\"></gui-menu-entry>\\r\\n            <gui-menu-entry data-id=\\\"MenuRedo\\\" data-label=\\\"LBL_REDO\\\"></gui-menu-entry>\\r\\n            <gui-menu-entry data-id=\\\"MenuCut\\\" data-label=\\\"LBL_CUT\\\"></gui-menu-entry>\\r\\n            <gui-menu-entry data-id=\\\"MenuCopy\\\" data-label=\\\"LBL_COPY\\\"></gui-menu-entry>\\r\\n            <gui-menu-entry data-id=\\\"MenuPaste\\\" data-label=\\\"LBL_PASTE\\\"></gui-menu-entry>\\r\\n            <gui-menu-entry data-id=\\\"MenuDelete\\\" data-label=\\\"LBL_DELETE\\\"></gui-menu-entry>\\r\\n            <gui-menu-entry data-id=\\\"MenuUnlink\\\" data-label=\\\"LBL_UNLINK\\\"></gui-menu-entry>\\r\\n          </gui-menu>\\r\\n        </gui-menu-bar-entry>\\r\\n\\r\\n        <gui-menu-bar-entry data-label=\\\"LBL_INSERT\\\">\\r\\n          <gui-menu data-id=\\\"SubmenuInsert\\\">\\r\\n            <gui-menu-entry data-id=\\\"MenuInsertOL\\\" data-label=\\\"LBL_ORDERED_LIST\\\"></gui-menu-entry>\\r\\n            <gui-menu-entry data-id=\\\"MenuInsertUL\\\" data-label=\\\"LBL_UNORDERED_LIST\\\"></gui-menu-entry>\\r\\n            <gui-menu-entry data-id=\\\"MenuInsertLink\\\" data-label=\\\"LBL_LINK\\\"></gui-menu-entry>\\r\\n            <gui-menu-entry data-id=\\\"MenuInsertImage\\\" data-label=\\\"LBL_IMAGE\\\"></gui-menu-entry>\\r\\n          </gui-menu>\\r\\n        </gui-menu-bar-entry>\\r\\n\\r\\n      </gui-menu-bar>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <!-- TOOLS -->\\r\\n    <gui-vbox-container data-shrink=\\\"1\\\" data-basis=\\\"auto\\\" data-expand=\\\"true\\\">\\r\\n\\r\\n      <gui-toolbar>\\r\\n        <gui-button data-id=\\\"text-bold\\\" data-icon=\\\"stock://actions/format-text-bold.png\\\"></gui-button>\\r\\n        <gui-button data-id=\\\"text-italic\\\" data-icon=\\\"stock://actions/format-text-italic.png\\\"></gui-button>\\r\\n        <gui-button data-id=\\\"text-underline\\\" data-icon=\\\"stock://actions/format-text-underline.png\\\"></gui-button>\\r\\n        <gui-button data-id=\\\"text-strikethrough\\\" data-icon=\\\"stock://actions/format-text-strikethrough.png\\\"></gui-button>\\r\\n\\r\\n        <gui-toolbar-separator />\\r\\n\\r\\n        <gui-button data-id=\\\"justify-left\\\" data-icon=\\\"stock://actions/format-justify-left.png\\\"></gui-button>\\r\\n        <gui-button data-id=\\\"justify-center\\\" data-icon=\\\"stock://actions/format-justify-center.png\\\"></gui-button>\\r\\n        <gui-button data-id=\\\"justify-right\\\" data-icon=\\\"stock://actions/format-justify-right.png\\\"></gui-button>\\r\\n\\r\\n        <gui-toolbar-separator />\\r\\n\\r\\n        <gui-button data-id=\\\"indent\\\" data-icon=\\\"stock://actions/format-indent-less.png\\\"></gui-button>\\r\\n        <gui-button data-id=\\\"unindent\\\" data-icon=\\\"stock://actions/format-indent-more.png\\\"></gui-button>\\r\\n\\r\\n        <gui-toolbar-separator />\\r\\n\\r\\n        <gui-color-box data-id=\\\"Foreground\\\"></gui-color-box>\\r\\n        <gui-color-box data-id=\\\"Background\\\"></gui-color-box>\\r\\n\\r\\n        <gui-toolbar-separator />\\r\\n\\r\\n        <gui-button data-id=\\\"Font\\\" data-group=\\\"tool\\\" data-tool-name=\\\"\\\">FONT (SIZE)</gui-button>\\r\\n      </gui-toolbar>\\r\\n\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <!-- CONTENT -->\\r\\n    <gui-vbox-container data-grow=\\\"1\\\" data-shrink=\\\"0\\\" data-basis=\\\"auto\\\" data-fill=\\\"true\\\">\\r\\n      <gui-richtext data-id=\\\"Text\\\"></gui-richtext>\\r\\n    </gui-vbox-container>\\r\\n\\r\\n    <!-- STATUSBAR -->\\r\\n    <!--\\r\\n    <gui-vbox-container data-grow=\\\"0\\\" data-shrink=\\\"1\\\" data-basis=\\\"auto\\\">\\r\\n      <gui-statusbar data-id=\\\"Statusbar\\\"></gui-statusbar>\\r\\n    </gui-vbox-container>\\r\\n    -->\\r\\n\\r\\n  </gui-vbox>\\r\\n\\r\\n\\r\\n\\r\\n</application-window>\\r\\n\"; });\ndefine('osjs-apps-writer/main',[\n    './locales',\n    \"./scheme.html\"\n], function (Translations,schemeHtml) {\n    'use strict';\n    const VFS = OSjs.require('vfs/fs');\n    const Config = OSjs.require('core/config');\n    const Dialog = OSjs.require('core/dialog');\n    const GUIElement = OSjs.require('gui/element');\n    const Utils = OSjs.require('utils/misc');\n    const Locales = OSjs.require('core/locales');\n    const DefaultApplication = OSjs.require('helpers/default-application');\n    const DefaultApplicationWindow = OSjs.require('helpers/default-application-window');\n    const _ = Locales.createLocalizer(Translations);\n    class ApplicationWriterWindow extends DefaultApplicationWindow {\n        constructor(app, metadata, file) {\n            const config = Config.getConfig();\n            super('ApplicationWriterWindow', {\n                allow_drop: true,\n                icon: metadata.icon,\n                title: metadata.name,\n                width: 550,\n                height: 400,\n                translator: _\n            }, app, file);\n            this.checkChangeLength = -1;\n            this.checkChangeInterval = null;\n            this.color = {\n                background: '#ffffff',\n                foreground: '#000000'\n            };\n            this.font = {\n                name: config.Fonts['default'],\n                size: 3\n            };\n        }\n        destroy() {\n            this.checkChangeInterval = clearInterval(this.checkChangeInterval);\n            super.destroy(...arguments);\n        }\n        init(wmRef, app) {\n            const root = super.init(...arguments);\n            var self = this;\n            this._render('WriterWindow', schemeHtml);\n            var text = this._find('Text');\n            var buttons = {\n                'text-bold': { command: 'bold' },\n                'text-italic': { command: 'italic' },\n                'text-underline': { command: 'underline' },\n                'text-strikethrough': { command: 'strikeThrough' },\n                'justify-left': { command: 'justifyLeft' },\n                'justify-center': { command: 'justifyCenter' },\n                'justify-right': { command: 'justifyRight' },\n                'indent': { command: 'indent' },\n                'unindent': { command: 'outdent' }\n            };\n            var menuEntries = {\n                'MenuUndo': function () {\n                    text.command('undo', false);\n                },\n                'MenuRedo': function () {\n                    text.command('redo', false);\n                },\n                'MenuCopy': function () {\n                    text.command('copy', false);\n                },\n                'MenuCut': function () {\n                    text.command('cut', false);\n                },\n                'MenuDelete': function () {\n                    text.command('delete', false);\n                },\n                'MenuPaste': function () {\n                    text.command('paste', false);\n                },\n                'MenuUnlink': function () {\n                    text.command('unlink', false);\n                },\n                'MenuInsertOL': function () {\n                    text.command('insertOrderedList', false);\n                },\n                'MenuInsertUL': function () {\n                    text.command('insertUnorderedList', false);\n                },\n                'MenuInsertImage': function () {\n                    Dialog.create('File', { filter: ['^image'] }, function (ev, button, result) {\n                        if (button !== 'ok' || !result) {\n                            return;\n                        }\n                        VFS.url(result).then(url => {\n                            text.command('insertImage', false, url);\n                        });\n                    }, self);\n                },\n                'MenuInsertLink': function () {\n                    Dialog.create('Input', {\n                        message: _('Insert URL'),\n                        placeholder: 'https://os-js.org'\n                    }, function (ev, button, result) {\n                        if (button !== 'ok' || !result) {\n                            return;\n                        }\n                        text.command('createLink', false, result);\n                    }, self);\n                }\n            };\n            function menuEvent(ev) {\n                if (menuEntries[ev.detail.id]) {\n                    menuEntries[ev.detail.id]();\n                }\n            }\n            this._find('SubmenuEdit').on('select', menuEvent);\n            this._find('SubmenuInsert').on('select', menuEvent);\n            function getSelectionStyle() {\n                function _call(cmd) {\n                    return text.query(cmd);\n                }\n                var style = {\n                    fontName: (_call('fontName') || '').split(',')[0].replace(/^'/, '').replace(/'$/, ''),\n                    fontSize: parseInt(_call('fontSize'), 10) || self.font.size,\n                    foreColor: _call('foreColor'),\n                    hiliteColor: _call('hiliteColor')\n                };\n                Object.keys(buttons).forEach(function (b) {\n                    var button = buttons[b];\n                    style[button.command] = {\n                        button: b,\n                        value: _call(button.command)\n                    };\n                });\n                return style;\n            }\n            function createColorDialog(current, cb) {\n                self._toggleDisabled(true);\n                Dialog.create('Color', { color: current }, function (ev, button, result) {\n                    self._toggleDisabled(false);\n                    if (button === 'ok' && result) {\n                        cb(result.hex);\n                    }\n                }, self);\n            }\n            function createFontDialog(current, cb) {\n                self._toggleDisabled(true);\n                Dialog.create('Font', {\n                    fontSize: self.font.size,\n                    fontName: self.font.name,\n                    minSize: 1,\n                    maxSize: 8,\n                    unit: 'null'\n                }, function (ev, button, result) {\n                    self._toggleDisabled(false);\n                    if (button === 'ok' && result) {\n                        cb(result);\n                    }\n                }, self);\n            }\n            var back = this._find('Background').on('click', function () {\n                createColorDialog(self.color.background, function (hex) {\n                    text.command('hiliteColor', false, hex);\n                    self.color.background = hex;\n                    back.set('value', hex);\n                });\n            });\n            var front = this._find('Foreground').on('click', function () {\n                createColorDialog(self.color.foreground, function (hex) {\n                    text.command('foreColor', false, hex);\n                    self.color.foreground = hex;\n                    front.set('value', hex);\n                });\n            });\n            var font = this._find('Font').on('click', function () {\n                createFontDialog(null, function (font) {\n                    text.command('fontName', false, font.fontName);\n                    text.command('fontSize', false, font.fontSize);\n                    self.font.name = font.fontName;\n                    self.font.size = font.fontSize;\n                });\n            });\n            root.querySelectorAll('gui-toolbar > gui-button').forEach(function (b) {\n                var id = b.getAttribute('data-id');\n                var button = buttons[id];\n                if (button) {\n                    GUIElement.createFromNode(b).on('click', function () {\n                        text.command(button.command);\n                    }).on('mousedown', function (ev) {\n                        ev.preventDefault();\n                    });\n                }\n            });\n            function updateToolbar(style) {\n                back.set('value', style.hiliteColor);\n                front.set('value', style.foreColor);\n                if (style.fontName) {\n                    font.set('label', Utils.format('{0} ({1})', style.fontName, style.fontSize.toString()));\n                }\n            }\n            function updateSelection() {\n                var style = getSelectionStyle();\n                updateToolbar(style);\n            }\n            back.set('value', this.color.background);\n            front.set('value', this.color.foreground);\n            font.set('label', Utils.format('{0} ({1})', this.font.name, this.font.size.toString()));\n            text.on('selection', function () {\n                updateSelection();\n            });\n            this.checkChangeInterval = setInterval(function () {\n                if (self.hasChanged) {\n                    return;\n                }\n                if (self.checkChangeLength < 0) {\n                    self.checkChangeLength = text.get('value').length;\n                }\n                var len = text.get('value').length;\n                if (len !== self.checkChangeLength) {\n                    self.hasChanged = true;\n                }\n                self.checkChangeLength = len;\n            }, 500);\n            return root;\n        }\n        updateFile(file) {\n            DefaultApplicationWindow.prototype.updateFile.apply(this, arguments);\n            try {\n                var el = this._find('Text');\n                el.$element.focus();\n            } catch (e) {\n            }\n            this.checkChangeLength = -1;\n        }\n        showFile(file, content) {\n            this._find('Text').set('value', content || '');\n            DefaultApplicationWindow.prototype.showFile.apply(this, arguments);\n        }\n        getFileData() {\n            return this._find('Text').get('value');\n        }\n        _focus(file, content) {\n            if (super._focus(...arguments)) {\n                this._find('Text').focus();\n                return true;\n            }\n            return false;\n        }\n    }\n    class ApplicationWriter extends DefaultApplication {\n        constructor(args, metadata) {\n            super('ApplicationWriter', args, metadata, {\n                extension: 'odoc',\n                mime: 'osjs/document',\n                filename: 'New text file.odoc'\n            });\n        }\n        init(settings, metadata) {\n            super.init(...arguments);\n            const file = this._getArgument('file');\n            this._addWindow(new ApplicationWriterWindow(this, metadata, file));\n        }\n    }\n    OSjs.Applications.ApplicationWriter = ApplicationWriter;\n});\ndefine('osjs-apps-writer', ['osjs-apps-writer/main'], function (main) { return main; });\n\n"]}